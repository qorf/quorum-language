package Libraries.Game

use Libraries.Game.ScreenResolution
use Libraries.Containers.Array
use Libraries.System.File

/*
    DesktopDisplay is responsible for handling information about LWJGL's Display
    object, which represents the game screen. It is used specifically on desktop
    platforms (Windows and Mac OS X).
  
  source:
  https://github.com/libgdx/libgdx/blob/master/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
 */

/*
This class represents the game window. This class is handled automatically by
the Game class. Most users will never need to interact with this class directly.
This class is used specifically on desktop platforms (Windows and Mac OS X).
*/
class DesktopDisplay is GameDisplay
    boolean resize = true

    /* This boolean represents whether the GameDisplay currently needs to render
    something new on the screen. */
    public boolean shouldrender = false

    private DesktopConfiguration config = undefined
    private boolean vsync = false
    
    /* 
    This action sets the DesktopConfiguration being used by the game,
    which includes data for the screen. 
    */
    action SetConfiguration(ApplicationConfiguration conf)
        if not (conf is DesktopConfiguration)
            alert("Attempted to configure a DesktopDisplay with an application configuration that is not used for desktops!")
        end
        config = cast(DesktopConfiguration, conf)
    end

    /*
    This action returns the DesktopConfiguration being used by the
    GameDisplay.
    */
    action GetConfiguration returns ApplicationConfiguration
        return config
    end

    system action GetClipboard() returns text
    
    system action SetClipboard(text value)

    /*
    This action initializes the DesktopDisplay If the passed value is true, the display will be setup for use with Vulkan rendering
    If the value is false, the display will be setup for use with OpenGL instead. If the display was setup successfully, this returns
    true. If setup isn't successful, this will return false instead.
    */
    system action SetupDisplay(boolean useVulkan) returns boolean

    /*
    This action sets the width and height of the DesktopDisplay, and optionally
    makes the game full screen.
    */
    system action SetDisplayMode(integer width, integer height, 
                                 boolean fullscreen) returns boolean

    /*
    This action returns the width of the DesktopDisplay.
    */
    system action GetWidth() returns integer

    /*
    This action returns the height of the DesktopDisplay.
    */
    system action GetHeight() returns integer

    /*
    This action sets vSync on or off for the DesktopDisplay.
    */
    system action SetVSync(boolean vsync)

    /*
    This action returns whether the DesktopDisplay is resizable or not.
    */
    action GetResize returns boolean
        return resize
    end

    /*
    This action sets whether the DesktopDisplay should be resizable or not.
    */
    action SetResize(boolean resize)
        me:resize = resize
    end

    /*
    This action forces the Game to draw its contents to the DesktopDisplay's
    internal buffer without drawing them to the screen.
    */
    system action UpdateBuffer

    /*
    This action determines if the user has tried to close the window by clicking
    the window's red close button.
    */
    system action IsCloseRequested returns boolean

    /*
    This action returns whether or not the DesktopDisplay is the currently active
    application on the system.
    */
    system action IsActive returns boolean

    /*
    This action returns the screen x coordinate of the DesktopDisplay.
    */
    system action GetDisplayX returns integer

    /*
    This action returns the screen y coordinate of the DesktopDisplay.
    */
    system action GetDisplayY returns integer

    /*
    This action returns whether or not the DesktopDisplay has been resized.
    */
    system action WasResized returns boolean

    /*
    This action tells the DesktopDisplay to render to the screen.
    */
    system action RequestRendering

    /*
    This action closes the window.
    */
    system action Destroy

    /*
    This action updates the game's timekeeping information.
    */
    system action UpdateTime

    /*
    This action records the time when the action is called, and stores it.
    */
    system action SetLastTime

    /*
    This action updates the game screen without polling the input.
    */
    system action Update

    /*
    This action tests how many seconds have passed since the last time that the
    time was updated.
    */
    system action GetSecondsBetweenFrames returns number

    /*
    This action returns the number of seconds that have passed since the game
    was started.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.GameDisplay
    use Libraries.Game.GameStateManager
    
    class Main is Game

        GameDisplay display = undefined
        integer frameCount = 0

        action Main
            StartGame()
        end

        action CreateGame
            GameStateManager manager
            display = manager:GetGameDisplay()
        end

        action Update(number seconds)
            frameCount = frameCount + 1
            if frameCount = 30
                number time = display:GetSecondsSinceStart()
                output "The game has been running for " + time + " seconds."
            end
        end
    end
    */
    system action GetSecondsSinceStart returns number

    /*
    This action returns the ratio between screen coordinates and pixels.
    */
    system action GetPixelScaleFactor returns number

    /*
    This action returns a ScreenResolution object that describes the currently
    set resolution of the computer's desktop (not the resolution being used by
    the game).
    */
    system action GetDesktopResolution returns ScreenResolution

    /*
    This action will return an array containing all of the screen resolutions
    available for this machine.
    */
    action GetAvailableResolutions returns Array<ScreenResolution>
        Array<ScreenResolution> resolutions
        GetAvailableResolutionsNative(resolutions)
        return resolutions
    end

    private system action GetAvailableResolutionsNative(Array<ScreenResolution> array)

    /*
    This action will set the game screen to use the given screen resolution.
    The resolution should be acquired from one of the actions that provides the
    usable screen resolutions for this machine, such as GetDesktopResolution or
    GetAvailableResolutions.
    */
    system action SetScreenResolution(ScreenResolution resolution)

    /*
    This action will return the current screen resolution being used by the 
    game engine.
    */
    system action GetScreenResolution returns ScreenResolution

    /*
    This action asks the operating system to give the main application window
    the focus. This only works on desktop platforms - on other platforms, this
    call is ignored.
    */
    system action FocusWindow

    /*
    This action determines whether or not the main application window has the
    focus on desktop platforms. On non-desktop platforms, this always returns
    false.
    */
    system action IsWindowFocused returns boolean

    /*
    This action sets the position of the window on the screen. This uses the
    coordinate system of the native platform, which often will start the y index
    at the top of the screen and move down as the y value increases.
    */
    system action SetWindowPosition(integer x, integer y)

    /*
    The IsAvailable action returns whether or not a display is available
    to draw on. If no display is available, actions that try to create or draw
    graphics (such as loading a Drawable) will create an error. This will return
    false if called before StartGame() is called in the Game class, and will
    typically return true after the game has been started.
    */
    system action IsAvailable returns boolean

    /*
    This action will set the icon the application uses in the taskbar on Windows
    platforms.
    */
    system action SetWindowIcon(text fileName)

    /*
    This action will set the icon the application uses in the taskbar on Windows
    platforms.
    */
    action SetWindowIcon(File file)
        SetWindowIcon(file:GetAbsolutePath())
    end

    /*
    This action maximizes the window. It does nothing if the window is
    already maximized or if the display is fullscreen.
    */
    system action MaximizeWindow

    /*
    This action returns true if the display is a maximized window. If
    the display isn't maximized, or if the display is full screen, this
    returns false.
    */
    system action IsWindowMaximized returns boolean

    /*
    This action minimizes the window.
    */
    system action MinimizeWindow

    /*
    This action returns true if the display is minimized, or false otherwise.
    */
    system action IsWindowMinimized returns boolean

    /*
    This action returns a maximized window to a smaller window, or
    returns a minimized window to the foreground.
    */
    system action RestoreWindow

    /*
    Used internally by the game engine. This should never be called by users.
    */
    system action FirstTimeShowWindow
end