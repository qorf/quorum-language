package Libraries.Game

use Libraries.Game.Application
use Libraries.Game.Game
use Libraries.Game.GameDisplay
use Libraries.Game.GameInput
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Fonts.FontManager
use Libraries.Interface.Item
use Libraries.Interface.Accessibility
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Game.Graphics.SharedTextureManager
use Libraries.Game.Graphics.Shaders.ShaderManager

/*
    The GameStateManager is an internal class, used by the game engine to
    communicate between Quorum and plugin code. Most users will never have to
    interface with this class directly.
*/
shared class GameStateManager 
    
    /*
    This action is used by the engine to store a reference to the currently
    running Game class.
    */
    system action SetGame(Game game)

    /*
    This action returns a reference to the Game class.
    */
    system action GetGame returns Game

    /* 
    This action is used by the engine to set the game's application info in the
    plugins. 
    */
    system action SetApplication(Application app)

    /*
    This action returns the application stored by the plugins. 
    */
    system action GetApplication returns Application
   
    /* 
    This action is used by the engine to set the game's display info in the
    plugins.
    */
    system action SetGameDisplay(GameDisplay disp)

    /*
    This action returns the GameDisplay stored by the plugins. 
    */
    system action GetGameDisplay returns GameDisplay
  
    /*
    This action is used by the engine to set the game's graphics manager in the
    plugins.
    */
    system action SetGameGraphics(GraphicsManager gl20)
    
    /*
    This action returns the GraphicsManager stored by the plugins.
    */
    system action GetGameGraphics returns GraphicsManager

    /*
    This action returns a GameInput object that is stored in the plugins.
    */
    system action GetInput returns GameInput

    /*
    This action sets a GameInput object to be stored in the plugins.
    */
    system action SetInput(GameInput gameInput)

    /*
    This action sets the FocusManager to be used across the Game.
    */
    action SetFocusManager(FocusManager manager)
        GetGame():SetFocusManager(manager)
    end

    /*
    This action returns the FocusManager which is being used across the Game.
    */
    action GetFocusManager returns FocusManager
        Game game = GetGame()
        if game not= undefined
            return game:GetFocusManager()
        else
            return undefined
        end
    end

    /*
    This action sets the Accessibility to be used across the Game.
    */
    action SetAccessibility(Accessibility accessibility)
        GetGame():SetAccessibility(accessibility)
    end

    /*
    This action returns the AccessibilityManager that is being used across the Game.
    */
    action GetAccessibility returns Accessibility
        Game game = GetGame()
        if game not= undefined
            return game:GetAccessibility()
        else
            return undefined
        end
    end

    /*
    This action sets the FontManager to be used across the Game.
    */
    system action SetFontManager(FontManager manager)

    /*
    This action returns the FontManager which is being used across the Game.
    */
    system action GetFontManager returns FontManager

    /*
    This action sets a path to the native file used to load the engine's C
    plugins. After setting the path, the engine will load the native file.
    */
    system action SetNativePath(text path)

    /*
    This action returns the path of the native file loaded by the engine.
    */
    system action GetNativePath returns text

    /*
    This action sets a flag in the plugins indicating what operating system the
    game is running on.
    */
    system action SetOperatingSystem(text os)

    /*
    This action returns a text flag indicating what operating system the game is
    running on.
    */
    system action GetOperatingSystem returns text

    /*
    This action sets the focus on the given item.
    */
    action SetFocus(Item item)
        GetFocusManager():SetFocus(item)
    end

    /*
    This action returns the current Item that is focused.
    */
    action GetFocus returns Item
        if GetFocusManager() not= undefined
            return GetFocusManager():GetFocus()
        end
        return undefined
    end

    /*
    The IsDisplayAvailable action returns whether or not a display is available
    to draw on. If no display is available, actions that try to create or draw
    graphics (such as loading a Drawable) will create an error. This will return
    false if called before StartGame() is called in the Game class, and will
    typically return true after the game has been started.
    */
    action IsDisplayAvailable returns boolean
        GameDisplay display = GetGameDisplay()
        return display not= undefined and display:IsAvailable()
    end

    /*
    This action sets the identifier for the main thread. Any work that interacts
    directly with the graphics system, including adding or removing items from
    the game, must be done on the main thread. This is set automatically by the
    game engine, and users should never need to call this directly.
    */
    system action SetMainThreadName(text name)

    /*
    This action returns the identifier for the main thread. Any work that
    interacts directly with teh graphics system, including adding or removing
    items from the game, must be done on the main thread -- otherwise, an error
    will occur.
    */
    system action GetMainThreadName returns text

    /*

    */
    action GetInterfaceOptions returns InterfaceOptions
        if GetGame() not= undefined
            return GetGame():GetInterfaceOptions()
        end
        return undefined
    end

    /*

    */
    action SetInterfaceOptions(InterfaceOptions options)
        if GetGame() not= undefined
            GetGame():SetInterfaceOptions(options)
        end
    end

    /*
    This action returns the SharedTextureManager which is being used across the Game.
    */
    action GetSharedTextureManager returns SharedTextureManager
        Game game = GetGame()
        if game not= undefined
            return game:GetSharedTextureManager()
        else
            return undefined
        end
    end

    /*
    This action returns the ShaderManager which is being used across the Game.
    */
    action GetShaderManager returns ShaderManager
        Game game = GetGame()
        if game not= undefined
            return game:GetShaderManager()
        else
            return undefined
        end
    end
    
end