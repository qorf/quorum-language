package Libraries.Game.Graphics.Fonts

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Texture
use Libraries.System.File
use Libraries.System.Properties
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Fonts.FontFamily

class FontManager 
    HashTable<text, FontFamily> families
    FontFileNameComparison compare
    /*
    The goal of the design is to make each Font object nothing more than a
    container to describe details of the requested font, and stringify these
    parameters into a HashTable key. Every time the Font would request a glyph,
    it instead gets it from here, via a hashed font (or a new font that is
    hashed if nothing previously exists).

    A system font's ID is defined as:
    SYSTEM:FontName:Size:Angle

    A font loaded from a user-specified file is defined as:
    FILE:FontName:Size:Angle

    Unused:
    Style <TBD>
    SubFont <TBD>
    Color (Not used here, set locally by Font when returning a glyph)
    */

    // A prefix used to indicate a system font.
    public constant text SYSTEM_PREFIX = "SYSTEM"

    // A prefix used to indicate a locally loaded font file.
    public constant text FILE_PREFIX = "FILE"

    // A delimiting character used to separate portions of a Font's identifier.
    public constant text FONT_DELIMITER = "$"

    // A tag used to indicate that this font supports borders around glyphs.
    public constant text BORDERED_TAG = "BORDERED"

    // A tag used to indicate that this font doesn't support borders around glyphs. The default case.
    public constant text BORDERLESS_TAG = "BORDERLESS"

    // Each font uniquely produces a string key to the table.
    HashTable<text, FontStrategy> fontTable
    
    // Rather than repeatedly asking the file system if a font is available, we keep that info around.
    HashTable<text, boolean> availableFontTable

    // An array containing all fonts available on the web.
    // Update this array in the on create to add/remove available fonts for web.
    Array<text> availableWebFonts

    // Used to determine if the program is being run in a web browser.
    GameStateManager gameStateManager
    text lastRequestedKey = ""
    FontStrategy typicallyRequestedStrategy = undefined
    text overrideFontLocation = undefined
    boolean hasCalculatedFontFamilies = false

    on create
        availableWebFonts:Add("FiraMono-Regular")
availableWebFonts:Add("FiraMono-Bold")
availableWebFonts:Add("FiraMono-Italic")
availableWebFonts:Add("FiraMono-BoldItalic")
        
availableWebFonts:Add("FiraSans-Regular")
        availableWebFonts:Add("FiraSans-Bold")
        availableWebFonts:Add("FiraSans-Italic")
availableWebFonts:Add("FiraSans-BoldItalic")
    end



    action GetGlyph(Font font, text character) returns Glyph
        FontStrategy strategy = GetFontStrategy(font:GetIdentifier())
        return strategy:GetGlyph(character)
    end

    action GetLineHeight(Font font) returns integer
        if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetLineHeight()
        else
            return 0
        end
    end
    
    action GetFamilyName(Font font) returns text
if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetFamilyName()
        else
            return undefined
        end
    end
    
    action GetStyleName(Font font) returns text
if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetStyleName()
        else
            return undefined
        end
    end

    action GetKerning(Font font, text character, text nextCharacter) returns integer
        if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetKerning(character, nextCharacter)
        else
            return 0
        end
    end

    action GetMaximumAscent(Font font) returns integer
        if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetMaximumAscent()
        else
            return 0
        end
    end

    action GetMaximumDescent(Font font) returns integer
        if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetMaximumDescent()
        else
            return 0
        end
    end

    action GetUnderlinePosition(Font font) returns integer
        if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetUnderlinePosition()
        else
            return 0
        end
    end

    action GetUnderlineThickness(Font font) returns integer
        if font:IsLoaded()
            return GetFontStrategy(font:GetIdentifier()):GetUnderlineThickness()
        else
            return 0
        end
    end

    /*
        This oddly tricky action is tricky because of apple and bugs in the JDK. Specifically,
        in JDK 8, java reports the version number of the OS as 10.16 for Big Sur. But
        for JDK 11, it is correctly 11.4. Further, Apple stores files before catalina
        for fonts in a different location compared to after, so we need to know this.
        The safest solution appears to be to check if the number is greater than 11. If it
        is, it either goes to hogwarts or is reliably greater than catalina. If the number
        is 10, then being greater than 10 and 15 is probably safe. 
    */
    private action IsMacCatalinaOrGreater returns boolean
        Properties properties
        text version = properties:GetOperatingSystemVersion()
        //mac uses numbers like 10.15 or 10.16. Split it up and
        //Choose the other directory if 15 or higher. For whatever reason
        //OS 11 shows up as 10.16
        check
            Array<text> split = version:Split("\.")
            if split not= undefined and split:GetSize() >= 2
                integer left = cast(integer, split:Get(0))

                integer right = cast(integer, split:Get(1))
                if left >= 11
                    return true
                elseif left >= 10 and right >= 15
                    return true
                else
                    return false
                end
            //this is just paranoid and I don't know if there's a case like this
            //but we are going to guard for it anyway.
            elseif split:GetSize() = 1
                integer left = cast(integer, split:Get(0))
                if left >= 11
                    return true
                else
                    return false
                end
            else
                return false
            end
        detect e
            return false
        end

        return false
    end

    /*
        This action allows us to override the location fonts are loaded from. This should not be used
        unless you know what you are doing. This path must be an absolute path to the directory
        where fonts are loaded.
    */
    action OverrideFontLocation(text value)
        me:overrideFontLocation = value
        hasCalculatedFontFamilies = false
    end

    /*
        This action allows us to override the location fonts are loaded from. This should not be used
        unless you know what you are doing. This path must be an absolute path to the directory
        where fonts are loaded.
    */
    action OverrideFontLocation(File file)
        OverrideFontLocation(file:GetAbsolutePath())
    end

    /*
        This action provides a single source of truth for where the fonts live on a particular
        operating system. 

        Attribute: Returns the folder where fonts live on the currently running operating system.
    */
    action GetFontLocation returns text
        if overrideFontLocation not= undefined
            return overrideFontLocation
        end

        Properties properties
        text os = properties:GetOperatingSystemName()

        if os:Contains("Windows")
            return "C:\Windows\Fonts"
        elseif gameStateManager:GetOperatingSystem() = "Web Browser"
            return ""
        elseif os:Contains("Mac OS X")
            if IsMacCatalinaOrGreater() //catalina changed the default
                return "/System/Library/Fonts/Supplemental"
            else
                return "/Library/Fonts"
            end
        elseif os:Contains("iOS")
            if properties:IsIosSimulator()
                if IsMacCatalinaOrGreater() //catalina changed the default
                    return "/System/Library/Fonts/Supplemental"
                else
                    return "/Library/Fonts"
                end
            else
                return "/System/Library/Fonts/Core"
            end
        elseif (os:Contains("Linux") and properties:GetProperty("java.runtime.name"):Contains("Android Runtime"))
            return "/system/fonts"
        else 
            return "/usr/share/fonts"
        end
    end

    /*
    This action will look in the default system font folder and look for a font
    of the given name. If a font is found with the same name, the action will
    return true. Otherwise, it returns false.

    Attribute: Parameter fontName The name of the font to check for on the system.

    Attribute: Returns Returns true if the font is on the system, and false otherwise.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.FontManager
        use Libraries.Game.GameStateManager
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GameStateManager gameStateManager
                FontManager fontManager = gameStateManager:GetFontManager()
                boolean hasFont = fontManager:IsFontAvailable("Times New Roman")
            end
        end
    */
    action IsFontAvailable(text fontName) returns boolean
        if availableFontTable:HasKey(fontName)
            return availableFontTable:GetValue(fontName)
        end
        
        if gameStateManager:GetOperatingSystem() = "Web Browser"
            integer counter = 0
            repeat while counter < availableWebFonts:GetSize()
                if availableWebFonts:Get(counter) = fontName
                    availableFontTable:Add(fontName, true)
                    return true
                end
                counter = counter + 1
            end
            availableFontTable:Add(fontName, false)
            return false
        end

        File fontFile
        text location = GetFontLocation()
        fontFile:SetWorkingDirectory(location)

        fontFile:SetPath(fontName + ".ttf")
        if fontFile:Exists()
            availableFontTable:Add(fontName, true)
           return true
        end

        fontFile:SetPath(fontName + ".ttc")
        if fontFile:Exists()
            availableFontTable:Add(fontName, true)
            return true
        end
                
        fontFile:SetPath(fontName + ".otf")
        if fontFile:Exists()
            availableFontTable:Add(fontName, true)
            return true
        end

        fontFile:SetPath(fontName + ".dfont")
        if fontFile:Exists()
            availableFontTable:Add(fontName, true)
            return true
        end

        availableFontTable:Add(fontName, false)
        return false
    end

    /*
    This action will return an array of all files found in the system's default
    font folder.

    Attribute: Returns Returns an array with all the font files on the system.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.FontManager
        use Libraries.Game.GameStateManager
        use Libraries.System.File
        use Libraries.Containers.Array
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GameStateManager gameState
                FontManager manager = gameState:GetFontManager()
                Array<File> fontFiles = font:GetAvailableFonts()
                integer index = 0
                output "The following fonts are available on the system: "
                repeat fontFiles:GetSize() times
                    File temp = fontFiles:Get(index)
                    output temp:GetPath()
                    index = index + 1
                end
            end
        end
    */
    action GetAvailableFonts returns Array<File>
        if gameStateManager:GetOperatingSystem() = "Web Browser"
            Array<File> array
            integer counter = 0
            repeat while counter < availableWebFonts:GetSize()
                File file
                file:SetAbsolutePath(availableWebFonts:Get(counter))
                counter = counter + 1
            end
            return array
        end

        File fontDirectory
        text location = GetFontLocation()
        fontDirectory:SetWorkingDirectory(location)
        fontDirectory:SetPath("")
        return fontDirectory:GetDirectoryListing()
    end

    private action GetFontStrategy(text key) returns FontStrategy
        if key = lastRequestedKey
            return typicallyRequestedStrategy
        end
        if fontTable:HasKey(key)
            lastRequestedKey = key
            typicallyRequestedStrategy = fontTable:GetValue(key)
            return typicallyRequestedStrategy
        else
            FontStrategy strategy = CreateFontStrategy()

            Array<text> fontValues = undefined

            /*
            On desktop platforms which are using Java, we need to pass the "\"
            character in order to correctly process the delimiter due to how
            Java handles escape characters in its Split call. For Javascript (on
            the web) this isn't necessary.
            */
            if gameStateManager:GetOperatingSystem() = "Web Browser"
                fontValues = key:Split(FONT_DELIMITER)
            else
                fontValues = key:Split("\" + FONT_DELIMITER)
            end

            strategy:SetSize(cast(integer, fontValues:Get(2)))
            strategy:SetAngle(cast(number, fontValues:Get(3)))

            text borderText = fontValues:Get(4)
            if borderText = BORDERED_TAG
                strategy:SetBordered(true)
            else
                strategy:SetBordered(false)
            end

            if fontValues:Get(0) = SYSTEM_PREFIX
                strategy:LoadFont(fontValues:Get(1))
            else
                File file
                file:SetAbsolutePath(fontValues:Get(1))
                strategy:LoadFont(file)
            end

            fontTable:Add(key, strategy)

            lastRequestedKey = key
            typicallyRequestedStrategy = strategy
            return strategy
        end
    end
    
    /*This action returns a font family, with bold and italic information, if the system 
was able to find such a family. It is often the case that no bold or italic option exists and 
this algorithm imperfectly predicts what is available based on the operating system.*/
    action GetFontFamily(text name) returns FontFamily
        if not hasCalculatedFontFamilies
            CalculateFontFamilies()
        end
        return families:GetValue(name)
    end
    
    /*This action obtains an iterator over all of the keys in the font family.*/
    action GetFontFamilyKeys returns Iterator<text>
        return families:GetKeyIterator()
    end
    
    /* This action obtains an iterator over all of the FontFamily objects directly. */
    action GetFontFamilies returns Iterator<FontFamily>
        return families:GetValueIterator()
    end
    
    /* This action returns an integer representing the size of the font families container.*/
    action GetFontFamilySize returns integer
        return families:GetSize()
    end
    
    /*
This algorithm calculates font families from system resources. By its nature, since fonts
can report vendor specific font information, it is not perfect. For example, an arbitrary font
on a system might claim to be bold, but not really be. Thus, this system categorizes fonts into
several buckets: Default, Bold, Bold Italic, and Italic. This removes fine distinctions a 
manufacturer might have, but allows all fonts to have some consistency across platforms and vendors.
*/
action CalculateFontFamilies
        hasCalculatedFontFamilies = true
        Properties prop
        if prop:IsWebBrowser()
            FontFamily fira
            text firaName = "FiraMono-Regular"
            fira:SetName(firaName)
            fira:SetBold("FiraMono-Bold")
            fira:SetItalic("FiraMono-Italic")
            fira:SetBoldItalic("FiraMono-BoldItalic")
            
            FontFamily firaSans
            text firaSansName = "FiraSans-Regular"
firaSans:SetBold("FiraSans-Bold")
            firaSans:SetItalic("FiraSans-Italic")
            firaSans:SetBoldItalic("FiraSans-BoldItalic")
            
            me:families:Add(firaName, fira)
me:families:Add(firaSansName, firaSans)
            
            return now
        end
        
Array<File> fonts = GetAvailableFonts()
        i = 0
repeat while i < fonts:GetSize()
            File fontFile = fonts:Get(i)
            boolean possiblyLoaded = fontTable:HasKey(fontFile:GetNameNoExtension())
            boolean alreadyLoaded = false
            //if the font is already loaded, don't dispose of it
            if possiblyLoaded
                FontStrategy strategy = fontTable:GetValue(fontFile:GetNameNoExtension())
                if strategy:IsLoaded()
                    alreadyLoaded = true
                end
            end
            Font font
            font:LoadFont(fontFile)
            
            if font:IsLoaded()
                text familyName = font:GetFamilyName()
                FontFamily family = undefined
                if families:HasKey(familyName)
                    family = families:GetValue(familyName)
                else
                    FontFamily fam
                    family = fam
                    family:SetName(familyName)
                    families:Add(familyName, family)
                end
                
                text style = font:GetStyleName()
                CalculateFamilyPositionFromStyle(family, style, fontFile)
                if not alreadyLoaded
Dispose(font)
                end
            end
            i = i + 1
        end
    end
    
    
private action CalculateFamilyPositionFromStyle(FontFamily family, text style, File fontFile)
        //manufacturers can be a bit random. Try and guess what they meant for their font.
        //Inevitably, this action will be decent, but imperfect
        boolean regular = false
        boolean bold = false
        boolean boldItalic = false
        boolean italic = false
        text fontName = fontFile:GetNameNoExtension()
        if style = "Regular"
            regular = true
        elseif style = "Plain"
regular = true
        elseif style = "Italic"
italic = true
        elseif style = "Bold"
            bold = true
        elseif style = "Book"
regular = true
elseif style = "Light"
regular = true
elseif style = "Roman"
regular = true
        elseif style = "Bold Italic"
            boldItalic = true
        elseif style = "Thin"
regular = true
        elseif style = "Condensed"
regular = true
        elseif style = "Medium"
regular = true
        elseif style = "Inline"
regular = true
        elseif style = "Chancery"
regular = true
        elseif style = "Ornaments"
regular = true
        elseif style = "HouseScript"
regular = true
        elseif style = "Black"
regular = true
        end
        
        if regular and family:GetDefault() = undefined
            family:SetDefault(fontName)
        elseif bold and family:GetBold() = undefined
            family:SetBold(fontName)
elseif boldItalic and family:GetBoldItalic() = undefined
            family:SetBoldItalic(fontName)
elseif italic and family:GetItalic() = undefined
            family:SetItalic(fontName)
        end
    end

    integer counter = 0

    private action CreateFontStrategy returns FontStrategy
        counter = counter + 1

        Properties properties
        text os = properties:GetOperatingSystemName()

        boolean useFreeType = os:Contains("Windows")
        mac = os:Contains("Mac OS X")
        sim = os:Contains("iOS Simulator")
        device = os:Contains("iOS Device")
        android = os:Contains("Linux") and properties:GetProperty("java.runtime.name"):Contains("Android Runtime")

        useFreeType = useFreeType or mac or sim or device or android

        FontStrategy strategy = undefined

        if useFreeType
            FreeTypeStrategy freeStrategy
            strategy = freeStrategy
//        elseif gameStateManager:GetOperatingSystem() = "Web Browser"
//            QuorumStrategy quorumStrategy
//            strategy = quorumStrategy
        else    // Linux and Android
            FreeTypeStrategy freeStrategy
            strategy = freeStrategy
        end
        Color color
        color = color:White()
        strategy:SetColor(color)
        return strategy
    end
    
    action Dispose(Font font)
if font:IsLoaded()
            GetFontStrategy(font:GetIdentifier()):Dispose()
            fontTable:RemoveKey(font:GetIdentifier())
        end
    end
    
    /*This action disposes all Fonts stored in the manager, releasing any system resources associated
with them. This is used internally by the engine when needed and should almost never be called
by users explicitly.*/
    action Dispose
        Iterator<FontStrategy> fonts = fontTable:GetValueIterator()
        repeat while fonts:HasNext()
            FontStrategy font = fonts:Next()
if font:IsLoaded()
font:Dispose()
            end
        end
        fontTable:Empty()
    end
end