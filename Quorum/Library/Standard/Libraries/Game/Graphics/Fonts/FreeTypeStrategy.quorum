package Libraries.Game.Graphics.Fonts

use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.System.Properties
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Fonts.all
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Fonts.FontManager

/*
The FreeTypeStrategy class is used to load fonts on the system using the FreeType
font engine. 

Attribute: Example

    use Libraries.Game.Graphics.Font
    use Libraries.Game.Graphics.Label
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            Font font
            Label label
            if not font:IsFontAvailable("Verdana")
                output "The font could not be found!"
                return now
            end
            font:LoadFont("Verdana")
            font:SetSize(18)
            label:SetFont(font)
            Add(label)
        end
    end
*/
class FreeTypeStrategy is FontStrategy 
    private integer size = 14
    private number angle = 0
    private integer height = 0
    private integer maximumAscent = 0
    private integer maximumDescent = 0
    private integer underlinePosition = 0
    private integer underlineThickness = 0
    private boolean bordered = false
    private boolean initialized = false
    private HashTable<text, Glyph> glyphTable

    private FontImageSheet imageSheet = undefined
    private boolean loadedImageSheet = false
    GameStateManager gameStateManager
    FontManager fontManager = undefined

    private text style = ""

    on create
        Color color
        color = color:Black()
        SetColor(color)
        fontManager = gameStateManager:GetFontManager()
    end
    
    /*
    This action sets the style of font to use, such as bold, italic, condensed,
    and so on. This is only applicable to TrueTypeCollection (.ttc) files. Note
    that this is not currently supported using the FreeType system.

    Attribute: Parameter newStyle The style of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:SetStyle("Bold")
                font:LoadFont(file)
            end
        end
    */
    action SetStyle(text newStyle)
        style = newStyle
    end

    /*
    This action changes the style of the font. This is only applicable to TrueTypeCollection
    (.ttc) files. Note that this is not currently supported using the FreeType system.

    Attribute: Parameter style The style of the font to change to.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
                font:ChangeSubFont("Italic")
            end
        end
    */
    action ChangeSubFont(text style)
        
    end

    /*
    This action loads a font from a given font file. 

    Attribute: Parameter fontFile The font file to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
            end
        end
    */
    action LoadFont(File fontFile)
        if initialized
            Dispose()
            EmptyGlyphTable()
        end

        LoadFontNative(fontFile:GetAbsolutePath())
        UpdateFontProperties()
        initialized = true
    end

    /*
    This action will load a font by name from the system. On Windows, this will
    search for fonts in "C:\Windows\Fonts". On Mac, this will search for fonts
    in "/Library/Fonts".

    Attribute: Parameter fontName The name of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
            end
        end
    */
    action LoadFont(text fontName)
        if gameStateManager:GetOperatingSystem() = "Web Browser"
            LoadFontNative(fontName)
            UpdateFontProperties()
initialized = true
            return now
        end

        text location = fontManager:GetFontLocation()
        File fontFile
        fontFile:SetWorkingDirectory(location)

        text fontPath = FindFontExtension(fontName)
        if fontPath = ""
            alert("No font file named " + fontName + " could be found on the system!")
        else
            fontFile:SetPath(fontPath)
            LoadFont(fontFile)
        end
    end

    private system action LoadFontNative(text fontFile)

    private action FindFontExtension(text fontName) returns text
        text location = fontManager:GetFontLocation()
        File fontFile
        fontFile:SetWorkingDirectory(location)

        boolean success = false
        fontFile:SetPath(fontName + ".ttf")
        
        if fontFile:Exists()
           return fontName + ".ttf"
        else
            fontFile:SetPath(fontName + ".ttc")
            if fontFile:Exists()
                return fontName + ".ttc"
            else
                fontFile:SetPath(fontName + ".otf")
                if fontFile:Exists()
                    return fontName + ".otf"
                else
                    fontFile:SetPath(fontName + ".dfont")
                    if fontFile:Exists()
                        return fontName + ".dfont"
                    else
                        return ""
                    end
                end
            end
        end
    end

    /*
    This action will look in the default system font folder and look for a font
    of the given name. If a font is found with the same name, the action will
    return true. Otherwise, it returns false.

    Attribute: Parameter fontName The name of the font to check for on the system.

    Attribute: Returns Returns true if the font is on the system, and false otherwise.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                boolean hasFont = font:IsFontAvailable("Times New Roman")
            end
        end
    */
    action IsFontAvailable(text fontName) returns boolean
        if FindFontExtension(fontName) = ""
            return false
        else
            return true
        end
    end

    /*
    This action will set the size of the font. The default font size is 14.

    Attribute: Parameter newSize The size to change the font to.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetSize(16)
            end
        end
    */
    action SetSize (integer newSize)
        size = newSize
        if initialized
            SetSizeNative(newSize)
            UpdateFontProperties()
            EmptyGlyphTable()
        end
    end

    private system action SetSizeNative(integer newSize)

    /*
    This action will return the current size of the font. The default font size
    is 14.

    Attribute: Returns Returns the current size of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The default font size is " + font:GetSize()
            end
        end
    */
    action GetSize returns integer
        return size
    end

    /*
    This action will rotate the characters produced by this font by the given
    number of degrees.

    Attribute: Parameter rotation The number of degrees to rotate the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:Rotate(45)
            end
        end
    */
    action Rotate(number rotation)
        SetAngle(angle + rotation)
    end

    /*
    This action will set the angle in degrees of the characters produced by this
    font.

    Attribute: Parameter newAngle The number of degrees to angle the font by.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetAngle(90)
            end
        end
    */
    action SetAngle(number newAngle)
        if newAngle <= -360
            newAngle = newAngle - 360 * cast(integer, newAngle/360)
        end
        if newAngle < 0
            newAngle = 360 + newAngle
        end
        if newAngle >= 360
            newAngle = newAngle - 360 * cast(integer, newAngle/360)
        end

        angle = newAngle

        if initialized
            SetAngleNative(angle * -1)
            EmptyGlyphTable()
        end
    end

    private system action SetAngleNative(number angle)

    /*
    This action will set the color of the characters produced by this font.

    Attribute: Parameter newColor The color to use for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color
                font:SetColor(color:Orange())
            end
        end
    */
    action SetColor(Color newColor)
        textChanged = true
        if initialized
            EmptyGlyphTable()
        end
        SetColorNative(newColor)
    end

    private system action SetColorNative(Color newColor)

    /*
    This action will return the color of the characters produced by this font.

    Attribute: Returns The color being used by this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color = font:GetColor()
            end
        end
    */
    system action GetColor returns Color

    /*
    This action will return the current angle of the font. The default angle is
    0 degrees.

    Attribute: Returns Returns the current angle of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The font has an angle of " + font:GetAngle() + " degrees."
            end
        end
    */
    action GetAngle returns number
        return angle
    end

    /*
    This action will enable or disable bordered textures for this font.
    (In a more technical sense, this enables or disables signed-distance
    field textures for the glyphs.) By default, this is false.

    Attribute: Parameter bordered True to enable bordered glyph textures, or false to generate glyph textures normally.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetBordered(true)
            end
        end
    */
    action SetBordered(boolean bordered)
        me:bordered = bordered
        if initialized
            UpdateFontProperties()
            EmptyGlyphTable()
        end
    end

    /*
    This action will return whether or not bordered glyph textures (or more accurately,
    signed distance field textures) are currently enabled for this font. By default,
    this is false.

    Attribute: Returns True if this font is generating bordered texture glyphs, or false is it is generating standard textures.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The default font bordering state is " + font:IsBordered()
            end
        end
    */
    action IsBordered returns boolean
        return bordered
    end

    /*
    This action will release the resources used by a loaded font. The Font 
    object will no longer be usable until another font is loaded.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                font:Dispose()
            end
        end
    */
    action Dispose
        DisposeNative()
        initialized = false
    end

    private system action DisposeNative

    /*
    This action will return a Glyph object for this font's representation of the
    given character. 

    Attribute: Parameter character The character to create a glyph of.

    Attribute: Returns Returns a glyph representation of the character.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Glyph
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                Glyph a = font:GetGlyph("a")
            end
        end
    */
    action GetGlyph(text character) returns Glyph
        if IsImageSheetAvailable() and imageSheet:SupportsCharacter(character)
            return imageSheet:GetGlyph(character)
        elseif glyphTable:HasKey(character)
            return glyphTable:GetValue(character)
        else
            Glyph temp = undefined
            if bordered = false
                temp = GetGlyphNative(character)
            else
                temp = GetBorderedGlyphNative(character)
            end
            glyphTable:Add(character, temp)
            return temp
        end
    end

    action GetBorderedGlyph(text character) returns Glyph
        return GetBorderedGlyphNative(character)
    end

    private system action GetGlyphNative(text character) returns Glyph

    private system action GetBorderedGlyphNative(text character) returns Glyph

    private action IsImageSheetAvailable returns boolean
        if loadedImageSheet = false
            FontImageSheet sheet
            boolean success = LoadImageSheet(sheet, bordered)

            if success
                imageSheet = sheet
            end

            loadedImageSheet = true
        end

        return (imageSheet = undefined) = false
    end

    private system action LoadImageSheet(FontImageSheet sheet, boolean bordered) returns boolean

    /*
    This action calculates the kerning value between a pair of characters and then
    returns it.

    Attribute: Parameter currentCharacter The first character in the pair.

    Attribute: Parameter nextCharacter The second character in the pair.

    Attribute: Returns Returns the kerning value between these two characters.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer kerning = font:GetKerning("A", "V")
            end
        end
    */
    action GetKerning(text currentCharacter, text nextCharacter) returns integer
        return 0
    end

    /*
    This action will check if the font has been loaded yet. If the font has
    been loaded, this will return true. Otherwise, it will return false.

    Attribute: Returns Returns true if the font is loaded, and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                boolean loaded = font:IsLoaded()
            end
        end
    */
    action IsLoaded returns boolean
        return initialized
    end

    /*
    Updates the various values that are stored across the entire font, including
    font height, maximum ascent and descent, and underline properties.
    */
    private action UpdateFontProperties
        height = SystemGetHeight()
        maximumAscent = SystemGetMaximumAscent()
        maximumDescent = SystemGetMaximumDescent()
        underlinePosition = SystemGetUnderlinePosition()
        underlineThickness = SystemGetUnderlineThickness()
    end

    private system action SystemGetHeight returns integer

    private system action SystemGetMaximumAscent returns integer

    private system action SystemGetMaximumDescent returns integer

    private system action SystemGetUnderlinePosition returns integer

    private system action SystemGetUnderlineThickness returns integer

    /*
    This action will return the height of each line of text produced by this font.

    Attribute: Returns Returns the height of a line of text for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer height = font:GetLineHeight()
            end
        end
    */
    action GetLineHeight returns integer
        return height
    end

    /*
    This action will return an array of all files found in the system's default
    font folder.

    Attribute: Returns Returns an array with all the font files on the system.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Containers.Array
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Array<File> fontFiles = font:GetAvailableFonts()
                integer index = 0
                output "The following fonts are available on the system: "
                repeat fontFiles:GetSize() times
                    File temp = fontFiles:Get(index)
                    output temp:GetPath()
                    index = index + 1
                end
            end
        end
    */
    action GetAvailableFonts returns Array<File>
        text location = fontManager:GetFontLocation()
        File fontDirectory
        fontDirectory:SetWorkingDirectory(location)
        fontDirectory:SetPath("")
        return fontDirectory:GetDirectoryListing()
    end
    
    // Used to determine where to look for available fonts.
    private action GetOS returns text
        Properties properties
        text os = properties:GetOperatingSystemName()
        return os
    end

    private action EmptyGlyphTable
        Iterator<Glyph> glyphs = glyphTable:GetValueIterator()
        Glyph temp = undefined
        TextureRegion tempDrawable = undefined
        repeat while glyphs:HasNext()
            temp = glyphs:Next()
            tempDrawable = temp:texture

            if tempDrawable not= undefined
                tempDrawable:Dispose()
            end
        end
        glyphTable:Empty()

        // Reset the FontImageSheet as well.
        imageSheet:Dispose()
        imageSheet = undefined
        loadedImageSheet = false
    end

    action GetMaximumAscent returns integer
        return maximumAscent
    end

    action GetMaximumDescent returns integer
        return maximumDescent
    end

    action GetUnderlinePosition returns integer
        return underlinePosition
    end

    action GetUnderlineThickness returns integer
        return underlineThickness
    end
end
