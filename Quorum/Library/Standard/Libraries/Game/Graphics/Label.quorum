package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.System.File
use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.GameStateManager
use Libraries.Interface.Accessibility
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Events.FocusEvent

/*
The Label class is used to draw text on the screen using a Font that is loaded
from the system. Labels will wrap text if the text is longer than the width of
the Label.

Attribute: Example

    use Libraries.Game.Graphics.Label
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            Label label
            label:SetText("Hello world!")
            label:SetPosition(200, 200)
            Add(label)
        end
    end
*/
class Label is Control
    
    public constant integer LEFT_ALIGN = 0
    public constant integer RIGHT_ALIGN = 1
    public constant integer CENTER_ALIGN = 2
    public constant integer JUSTIFY_ALIGN = 3
    
    integer alignment = LEFT_ALIGN
    
    boolean isDefaultLoaded = false

    integer horizontalMargins = 0
    integer verticalMargins = 0

    private text targetText = "TEXT"
    private boolean textChanged = true

    private number maxWidth = 0

    // Used to determine if an OpenGL context is available before loading drawables.
    GameStateManager manager

    // Used to store Drawables for re-use, limiting the number of total object instantiations made.
    Array<GlyphDrawable> drawablePool

    /*
    Determines if the label places its Drawables along the baseline or not. If
    this value is false, then each Drawable will be adjusted upward by the 
    maximum descent of the Font.
    */
    boolean positionOnBaseLine = true

    /*
    If this is true, the first line of text will be placed at the y position of the label,
    and other lines will be placed below it. If this is false, the last line of text will
    be placed at the label's y-position, and prior lines will be placed above it.
    */
    boolean descendingLines = true

    integer lineCount = 0
    
    // A box used to indicate focus, if this Label is made focusable.
    Control focusBox = undefined

    on create
        LayoutProperties defaultProperties = GetDefaultLayoutProperties()
        defaultProperties:SetHorizontalLayoutMode(defaultProperties:FIT_CONTENTS)
        defaultProperties:SetVerticalLayoutMode(defaultProperties:FIT_CONTENTS)
        SetName("Label")
        SetInterfaceOptionsKey("Label")
        SetAccessibilityCode(parent:Item:LABEL)
        SetAccessibilityRoleDescription("Label")
    end


    private action LoadDefaultSettings
        isDefaultLoaded = true
        Font font
        font:SetSize(GetFontSize())

        text name = GetDefaultFontName()
        font:LoadFont(name)
        SetFont(font)
    end

    /*
    Sets the horizontal margins for this label. When the label's text is drawn,
    there will be whitespace between the beginning of the label and the start of
    the text and between the end of the text and the end of the label equal to
    the given horizontal margins. By default, the margins are 0.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label1
                label1:SetText("Hello world!")
                label1:SetPosition(200, 300)
                Add(label1)

                Label label2
                label2:SetText("Hello world!")
                label2:SetPosition(200, 200)
                label2:SetHorizontalMargins(50)
                Add(label2)
            end
        end
    */
    action SetHorizontalMargins(integer margins)
        horizontalMargins = margins
    end

    /*
    This action will return the currently set horizontal margins of the label.
    By default, the margins are 0.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:SetHorizontalMargins(50)
                Add(label)
                output "The margins are " + label:GetHorizontalMargins()
            end
        end
    */
    action GetHorizontalMargins returns integer
        return horizontalMargins
    end

    /*
    Sets the vertical margins for this label. When the label's text is drawn,
    there will be whitespace between the top of the label and the start of
    the text. By default, the margins are 0.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label1
                label1:SetText("Hello world!")
                label1:SetPosition(200, 200)
                Add(label1)

                Label label2
                label2:SetText("Hello world!")
                label2:SetPosition(400, 200)
                label2:SetVerticalMargins(50)
                Add(label2)
            end
        end
    */
    action SetVerticalMargins(integer margins)
        verticalMargins = margins
    end

    /*
    This action will return the currently set vertical margins of the label.
    By default, the margins are 0.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:SetVerticalMargins(50)
                Add(label)
                output "The margins are " + label:GetVerticalMargins()
            end
        end
    */
    action GetVerticalMargins returns integer
        return verticalMargins
    end

    /*
    This action will set the Font that is being used by this label. By default,
    labels will attempt to use Arial, Georgia, Times New Roman, or the first
    font that can be found on the system, if possible.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Label label

                if font:IsFontAvailable("Verdana")
                    font:LoadFont("Verdana")
                    label:SetFont(font)
                else
                    output "Could not find the font!"
                end
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                Add(label)
            end
        end
    */
    action SetFont(Font newFont)
        if parent:Control:GetFont() not= newFont
            textChanged = true
            if newFont:GetSize() not= GetSize()
                SetSize(newFont:GetSize())
            end
            parent:Control:SetFont(newFont)
        end
    end

    /*
    This action will set the text that is drawn on the screen by the Label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                Add(label)
            end
        end
    */
    action SetText(text newText)
        if targetText not= newText
            targetText = newText
            textChanged = true

            /*
            If this label doesn't have a custom description, labels use their
            text as the description instead, so inform the underlying
            accessibility architecture.
            */
            if parent:Item:GetDescription() = ""
                Accessibility accessibility = manager:GetAccessibility()
                if accessibility not= undefined
                    accessibility:DescriptionChanged(me)
                end
            end

            RequestLayout()
        end
    end

    /*
    This action will get the text that is being drawn on the screen by the Label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                Add(label)
                output "The label text is " + label:GetText()
            end
        end
    */
    action GetText returns text
        return targetText
    end

    /*
    This action will set the size of the font being used to draw the label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:SetSize(20)
                Add(label)
            end
        end
    */
    action SetSize(integer size)
        // This action still exists because it predates the Control system.
        // Now it's just an alias for the Control's SetFontSize action.
        SetFontSize(size)
    end

    /*
    This action will set the size of the font being used to draw the label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:SetSize(20)
                Add(label)
            end
        end
    */
    action SetFontSize(integer size)
        if GetFontSize() not= size
            textChanged = true
            parent:Control:SetFontSize(size)
        end
    end

    /*
    This action will set the color of the font being used to draw the label.

    Attribute: Parameter color The color to use for the label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                Color color
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:SetColor(color:Green())
                Add(label)
            end
        end
    */
    action SetColor(ColorGroup color)
        parent:Control:SetFontColor(color)
        ResetDrawableColors()
    end

    action SetInterfaceScale(number scale)
        if scale not= GetInterfaceScale()
            textChanged = true
        end
        parent:Control:SetInterfaceScale(scale)
    end

    private action ResetDrawableColors
        ColorGroup color = GetCurrentColor()
        Array<Item2D> children = GetChildren()
        integer counter = 0
        repeat while counter < children:GetSize()
            if children:Get(counter) is Drawable
                Drawable drawable = cast(Drawable, children:Get(counter))
                drawable:SetColor(color)
            end
            counter = counter + 1
        end
    end

    action SetFontColor(ColorGroup color)
        SetColor(color)
    end

    /*
    Used by LoadDrawables to color the incoming glyphs.
    Always returns the font color stored in the layout properties, but this
    can be overridden by inheriting classes to use colors from other sources.
    */
    private action GetCurrentColor returns ColorGroup
        return GetFontColor()
    end

    /*
    This action will set the color of the font being used to draw the label.
    The color will be made using the combined red, green, blue, and alpha (or
    transparency) components provided.

    Attribute: Parameter red The red component of the color to use for the label.
    Attribute: Parameter green The green component of the color to use for the label.
    Attribute: Parameter blue The blue component of the color to use for the label.
    Attribute: Parameter alpha The alpha (transparency) component of the color to use for the label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                // This will set the label to use a totally opaque shade of magenta.
                label:SetColor(1, 0, 1, 1)
                Add(label)
            end
        end
    */
    action SetColor(number red, number green, number blue, number alpha)
        Color c
        c:SetColor(red, green, blue, alpha)
        SetColor(c)
    end

    /*
    This action will return the color of the font being used to draw the label.

    Attribute: Returns The color of the text in the label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                Add(label)

                Color color = label:GetColor()
            end
        end
    */
    action GetColor returns ColorGroup
        return GetFontColor()
    end

    /*
    This action will get the size of the font being used to draw the label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                Add(label)
                output "The size of the label is " + label:GetSize()
            end
        end
    */
    action GetSize returns integer
        LayoutProperties properties = GetCurrentLayoutProperties()
        if properties = undefined
            properties = GetDefaultLayoutProperties()
        end

        return properties:GetFontSize()
    end

    /*
    This action rotate the label counter-clockwise by the given number of degrees.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:Rotate(30)
                Add(label)
            end
        end
    */
    action Rotate(number angle)
        textChanged = true
        GetFont():Rotate(angle)
        parent:Item2D:Rotate(angle)
    end

    /*
    This action sets the angle of the label in degrees.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:SetAngle(90)
                Add(label)
            end
        end
    */
    action SetAngle(number angle)
        textChanged = true
        GetFont():SetAngle(angle)
    end

    /*
    This action returns the angle of the label in degrees.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                
                label:SetText("Hello world!")
                label:SetPosition(200, 200)
                label:SetAngle(90)
                Add(label)
                output "The angle of the label is " + label:GetAngle()
            end
        end
    */
    action GetAngle returns number
        return GetFont():GetAngle()
    end

    action GetFont returns Font
        Font font = parent:Control:GetFont()
        if font = undefined or not font:IsLoaded()
            LoadDefaultSettings()
        end
        return parent:Control:GetFont()
    end

    /*
    This action is used to make the label reload the images of each character in
    the label's text. 
    */
    private action LoadDrawables
        if not manager:IsDisplayAvailable()
            return now
        end

        Font font = GetFont()
        if font:IsLoaded()
            // Ensure we're using a bordered font if needed.
            boolean isBordered = GetFontOutlineThickness() > 0 and GetFontOutlineColor() not= undefined
            if font:IsBordered() not= isBordered
                font:SetBordered(isBordered)
            end

            textChanged = false

            LayoutProperties properties = GetCurrentLayoutProperties()
            if properties = undefined
                properties = GetDefaultLayoutProperties()
            end

            /* 
            The size and angle are set before drawing to ensure that FreeType is
            using the proper parameters for each.
            NOTE: These calls force the Font to empty its glyph table, thus
            eliminating much of the benefit of caching them. Long-term, these
            calls should be removed, and the parameters should be handled more
            intelligently elsewhere.
            */
            font:SetSize(cast(integer, properties:GetFontSize() * properties:GetInterfaceScale()))
            font:SetAngle(font:GetAngle())

            // Dispose of the old sprites.
            RecycleDrawables()


            integer index = 0
            number x = 0
            number y = 0

            Drawable drawable = undefined
            Glyph glyph = undefined

            boolean endsWithSpace = false

            if targetText:GetSize() > 0
                endsWithSpace = targetText:GetCharacter(targetText:GetSize() - 1):Equals(" ")
            end

            number availableWidth = maxWidth - horizontalMargins

            number standardLayoutWidth = -1
            /*
            Hack to allow Labels to accept a percentage width of the parent.
            This should be replaced with a more comprehensive solution for
            layouts and Labels.
            */
            if properties:GetHorizontalLayoutMode() = properties:STANDARD and GetParent() is Control
                Control control = cast(Control, GetParent())
                standardLayoutWidth = properties:GetLeftMargin() + properties:GetRightMargin() + properties:GetPixelWidth() + (properties:GetPercentageWidth() * control:GetWidth())
            end

            if standardLayoutWidth >= 0
                availableWidth = standardLayoutWidth - horizontalMargins
            end

            Array<text> lines = Split(targetText, targetText:GetLineFeed())
            Array<text> words = undefined
            Array<Glyph> glyphs

            glyphs:SetSize(targetText:GetSize())
            
            // Arrays representing the placements of glyphs and spaces after initial, left-aligned layout is done.
            // Used to adjust final positions to respect text alignment.
            Array<Array<GlyphDrawable>> finalLineGlyphs
            Array<Array<integer>> finalLineSpaceIndices
            Array<Drawable> currentLineGlyphs
            Array<integer> currentLineSpaceIndices

            number originX = x + horizontalMargins
            number originY = y - verticalMargins

            x = originX
            y = originY

            // Index of the line we're working on.
            integer lineIndex = 0
            //Index of the current word we're working on.
            integer wordsIndex = 0
            // Index of the current character within the current line.
            integer lineGlyphIndex = 0
            // Index of a glyph within the current word.
            integer glyphIndex = 0
            text currentWord = ""
            integer currentWordLength = 0
            integer currentLineLength = 0

            number maxLineWidth = 0
            number startingOriginY = originY

            number maxDescent = 0

            // Recalculate line count. Reset to 0, then increment as we go.
            lineCount = 0

            if positionOnBaseLine = false
                maxDescent = font:GetMaximumDescent()
            end

            ColorGroup fontColor = GetCurrentColor()

            number outlineThickness = 0
            if HasFontOutlineThickness()
                outlineThickness = GetFontOutlineThickness()
            end

            ColorGroup outlineColor = GetFontOutlineColor()

            repeat lines:GetSize() times
                words = Split(lines:Get(lineIndex), " ")
                wordsIndex = 0
                lineGlyphIndex = 0
                currentLineLength = 0

                repeat words:GetSize() times
                    currentWord = words:Get(wordsIndex)
                    currentWordLength = 0
                    glyphIndex = 0

                    boolean hasSpace = false
                    if wordsIndex + 1 not= words:GetSize() or endsWithSpace
                        currentWord = currentWord + " "
                        hasSpace = true
                    end

                    repeat currentWord:GetSize() times
                        glyph = font:GetGlyph(currentWord:GetCharacter(glyphIndex))
                        glyphs:Set(glyphIndex, glyph)
                        currentWordLength = currentWordLength + glyph:horizontalAdvance
                        glyphIndex = glyphIndex + 1
                    end

                    if wordsIndex > 0 and availableWidth > 0 and currentLineLength + currentWordLength > availableWidth
                        if currentLineLength > maxLineWidth
                            maxLineWidth = currentLineLength
                        end
                        currentLineLength = 0
                        x = originX
                        y = originY - font:GetLineHeight()
                        originY = y
                        lineCount = lineCount + 1
                        
lineGlyphIndex = 0
                        finalLineGlyphs:Add(currentLineGlyphs)
                        finalLineSpaceIndices:Add(currentLineSpaceIndices)
                        Array<Drawable> newLineGlyphs
                        currentLineGlyphs = newLineGlyphs
                        Array<integer> newLineSpaceIndices
                        currentLineSpaceIndices = newLineSpaceIndices
                    end
                    
                    if hasSpace
                        currentLineSpaceIndices:Add(lineGlyphIndex + currentWord:GetSize() - 1)
                    end

                    glyphIndex = 0
                    repeat currentWord:GetSize() times
                        glyph = glyphs:Get(glyphIndex)
                        drawable = undefined
                        if glyph:texture not= undefined
                            GlyphDrawable newDrawable = GetDrawable()
                            newDrawable:SetName("Glyph")

                            if isBordered
                                newDrawable:LoadBorderedGlyph(glyph, outlineThickness, outlineColor)
                            else
                                newDrawable:LoadGlyph(glyph)
                            end

                            newDrawable:SetColor(fontColor)
                            drawable = newDrawable
                        end
                        
                        if drawable not= undefined
                            drawable:SetPosition(x + glyph:lengthToGlyph, y + glyph:heightFromBaseLine - drawable:GetHeight() - maxDescent)
                            Add(drawable)
                            currentLineGlyphs:Add(drawable)
                        else
                            Drawable space = GetDrawable()
                            space:SetTexture(undefined)
                            space:SetPosition(x + glyph:lengthToGlyph, y + glyph:heightFromBaseLine - maxDescent)
                            space:SetSize(glyph:horizontalAdvance, glyph:verticalAdvance)
                            Add(space)
                            currentLineGlyphs:Add(drawable)
                        end

                        glyphIndex = glyphIndex + 1
                        lineGlyphIndex = lineGlyphIndex + 1
                        x = x + glyph:horizontalAdvance
                        y = y + glyph:verticalAdvance
                        if wordsIndex > 0 and availableWidth > 0 and x - originX > availableWidth
                            currentLineLength = 0
                            currentWordLength = 0
                            x = originX
                            y = originY - font:GetLineHeight()
                            originY = y
                            lineCount = lineCount + 1
                            
lineGlyphIndex = 0
                        finalLineGlyphs:Add(currentLineGlyphs)
                        finalLineSpaceIndices:Add(currentLineSpaceIndices)
                        Array<Drawable> newLineGlyphs
                        currentLineGlyphs = newLineGlyphs
                        Array<integer> newLineSpaceIndices
                        currentLineSpaceIndices = newLineSpaceIndices
                        end
                    end

                    wordsIndex = wordsIndex + 1
                    currentLineLength = currentLineLength + currentWordLength

                end

                if currentLineLength > maxLineWidth
                    maxLineWidth = currentLineLength
                end

                // After iterating through all words on this line, we go to the
                // next line.
                lineIndex = lineIndex + 1
                x = originX
                y = originY - font:GetLineHeight()
                originY = y
                lineCount = lineCount + 1
                
lineGlyphIndex = 0
                        finalLineGlyphs:Add(currentLineGlyphs)
                        finalLineSpaceIndices:Add(currentLineSpaceIndices)
                        Array<Drawable> newLineGlyphs
                        currentLineGlyphs = newLineGlyphs
                        Array<integer> newLineSpaceIndices
                        currentLineSpaceIndices = newLineSpaceIndices
            end
            
            finalLineGlyphs:Add(currentLineGlyphs)
            finalLineSpaceIndices:Add(currentLineSpaceIndices)

            if descendingLines = false and lineCount > 1
                number offset = (lineCount - 1) * font:GetLineHeight()
                Array<Item2D> children = GetChildren()

                integer i = 0
                repeat while i < children:GetSize()
                    children:Get(i):MoveY(offset)
                    i = i + 1
                end
            end

            number newWidth = maxLineWidth + 2 * horizontalMargins

            if standardLayoutWidth >= 0
                newWidth = standardLayoutWidth
            end
            
            parent:Item2D:SetSize(newWidth, startingOriginY - originY)
            
            // Remove any trailing lines that are empty.
            repeat while finalLineGlyphs:IsEmpty() = false and finalLineGlyphs:GetFromEnd():IsEmpty()
                finalLineGlyphs:RemoveFromEnd()
                finalLineSpaceIndices:RemoveFromEnd()
            end
            
            // All characters have been laid out so far assuming left alignment. Correct them to match the actual alignment.
            if alignment = RIGHT_ALIGN or alignment = CENTER_ALIGN
                integer lineCounter = 0
                repeat while lineCounter < finalLineGlyphs:GetSize()
                    Array<GlyphDrawable> lineGlyphs = finalLineGlyphs:Get(lineCounter)
                    Array<integer> spaceIndices = finalLineSpaceIndices:Get(lineCounter)
                    integer lastGlyphIndex = lineGlyphs:GetSize() - 1
                    repeat until spaceIndices:Has(lastGlyphIndex) = false
                        lastGlyphIndex = lastGlyphIndex - 1
                    end
                    
                    if lastGlyphIndex >= 0
                        number leftBound = originX
                        number rightBound = leftBound + availableWidth
                        GlyphDrawable lastGlyphDrawable = lineGlyphs:Get(lastGlyphIndex)
                        
                        number glyphEndX = lastGlyphDrawable:GetX() + lastGlyphDrawable:GetWidth()
                        number adjustX = 0
                        if alignment = RIGHT_ALIGN
                            adjustX = rightBound - glyphEndX
                        elseif alignment = CENTER_ALIGN
                            adjustX = (rightBound - glyphEndX) / 2.0
                        end
                        
                        integer counter = 0
                        repeat while counter < lineGlyphs:GetSize()
                            GlyphDrawable currentDrawable = lineGlyphs:Get(counter)
                            currentDrawable:MoveX(adjustX)
                            counter = counter + 1
                        end
                    end
                    
                    lineCounter = lineCounter + 1
                end
            elseif alignment = JUSTIFY_ALIGN
integer lineCounter = 0
                // Justify every line except for the last one.
repeat while lineCounter < finalLineGlyphs:GetSize() - 1
Array<GlyphDrawable> lineGlyphs = finalLineGlyphs:Get(lineCounter)
                    Array<integer> spaceIndices = finalLineSpaceIndices:Get(lineCounter)
                    integer lastGlyphIndex = lineGlyphs:GetSize() - 1
                    repeat until spaceIndices:Has(lastGlyphIndex) = false
spaceIndices:Remove(lastGlyphIndex)
                        lastGlyphIndex = lastGlyphIndex - 1
                    end
                    
                    if lastGlyphIndex >= 0
number leftBound = originX
                        number rightBound = leftBound + availableWidth
                        GlyphDrawable lastGlyphDrawable = lineGlyphs:Get(lastGlyphIndex)
                        
                        number glyphEndX = lastGlyphDrawable:GetX() + lastGlyphDrawable:GetWidth()
                        number excessSpace = rightBound - glyphEndX
                        if spaceIndices:GetSize() > 1
                            integer pixelPadding = cast(integer, excessSpace) / spaceIndices:GetSize()
                            integer pixelPaddingRemainder = cast(integer, excessSpace) mod spaceIndices:GetSize()
                            
                            integer adjustX = 0
                            integer counter = 0
                            repeat while counter < lineGlyphs:GetSize()
                                GlyphDrawable currentGlyph = lineGlyphs:Get(counter)
                                currentGlyph:MoveX(adjustX)
                                if spaceIndices:Has(counter)
                                    integer currentPadding = pixelPadding
                                    if pixelPaddingRemainder > 0
                                        currentPadding = currentPadding + 1
                                        pixelPaddingRemainder = pixelPaddingRemainder - 1
                                    end
                                    currentGlyph:SetWidth(currentGlyph:GetWidth() + currentPadding)
                                    adjustX = adjustX + currentPadding
                                end
                                
                                counter = counter + 1
                            end
                        end
                    end
                    
                    lineCounter = lineCounter + 1
end
                
            end
            
            if IsFocusable()
                if focusBox = undefined
Control control
            focusBox = control
            
            ControlShaderView view
            view:Initialize()
            focusBox:SetView2D(view)
            
            Color background
            background:SetColor(1, 1, 1, 0)
            focusBox:SetBackgroundColor(background)
            focusBox:SetBorderColor(GetFocusColor())
            focusBox:SetBottomLeftPixelRounding(GetBottomLeftPixelRounding())
            focusBox:SetBottomRightPixelRounding(GetBottomRightPixelRounding())
            focusBox:SetTopLeftPixelRounding(GetTopLeftPixelRounding())
            focusBox:SetTopRightPixelRounding(GetTopRightPixelRounding())
            focusBox:SetBorderThickness(GetBorderThickness())
            
            Add(focusBox)
                end
                
if IsFocused() = false
                focusBox:Hide()
                else
                    focusBox:Show()
            end
            elseif focusBox not= undefined
                Remove(focusBox)
                focusBox = undefined
            end
            
if focusBox not= undefined
number borders = focusBox:GetBorderThickness() * GetInterfaceScale()
            // Use integer truncation of value + 0.5 for quick rounding.
            integer extraPadding = cast(integer, (1 + 1 * GetInterfaceScale()) + 0.5)
                number multiLineOffset = (GetLineCount() - 1) * GetLineHeight()
focusBox:SetSize(GetWidth() + 2 * (borders + extraPadding), GetHeight() + 2 * (borders + extraPadding))
            if positionOnBaseLine
focusBox:SetPosition(-borders - extraPadding, -borders - extraPadding + font:GetMaximumDescent() - multiLineOffset)
            else
focusBox:SetPosition(-borders - extraPadding, -borders - extraPadding - multiLineOffset)
            end
        end
        end
    end

    private action GetDrawable returns GlyphDrawable
        if drawablePool:IsEmpty() = false
            GlyphDrawable drawable = drawablePool:RemoveFromEnd()
            drawable:Show()
            return drawable
        else
            GlyphDrawable drawable
            return drawable
        end
    end

    private action RecycleDrawables
        Array<Item2D> children = GetChildren()

        repeat while children:IsEmpty() = false
            Item2D item = children:RemoveFromFront()
            if item is GlyphDrawable
                drawablePool:Add(cast(GlyphDrawable, item))
            end
        end
        
        // If this removed the focus box, add it back on.
        if focusBox not= undefined
            Add(focusBox)
        end
    end

    /* A custom implementation of the text Split action that does not truncate
    delimiters at the end of the text. */
    private action Split(text splitter, text delimiter) returns Array<text>
        return splitter:Split(delimiter, true)
    end

    /*
    This action is used to draw the label on the screen. This is handled by the
    game engine automatically, so most users will not need to use this action
    directly.
    */
    action QueueForDrawing(Painter2D painter)
        if textChanged
            LoadDrawables()
        end
        parent:Item2D:QueueForDrawing(painter)
    end

    /*
    Returns the width of the longest line of text in the label. This is set
    automatically when the label's text is added or modified. If the value of
    GetMaximumWidth() is greater than 0, the value returned by this action will
    be less than the maximum width, if possible.

    Attribute: Returns The width of the longest line of text in the Label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Label label
                label:SetPosition(200, 200)
                label:SetMaximumWidth(100)
                label:SetText("This is a lot of text!")
                Add(label)
                output "The text width is " + label:GetWidth()
            end

        end
    */
    action GetWidth returns number
        if textChanged
            LoadDrawables()
        end
        return parent:Item2D:GetWidth()
    end

    /*
    Returns the height of all of the text in the label, as it is drawn on the
    screen. This is set automatically when the label's text is added or
    modified.

    Attribute: Returns The height of the longest line of text in the Label.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Label label
                label:SetPosition(200, 200)
                label:SetMaximumWidth(100)
                label:SetText("This is a lot of text!")
                Add(label)
                output "The text height is " + label:GetHeight()
            end

        end
    */
    action GetHeight returns number
        if textChanged
            LoadDrawables()
        end
        return parent:Item2D:GetHeight()
    end

    /*
    The SetWidth action typically sets the width of an Item2D, but the Label
    automatically sets its own width when the text is modified. As a result,
    this action has no effect on the Label unless the given value is larger than
    the maximum width set on the Label, in which case it will set the maximum
    width, and then the Label will rearrange its characters.
    */
    action SetWidth(number width)
        if width > maxWidth
            SetMaximumWidth(width)
        end
    end

    /*
    The SetHeight action typically sets the height of an Item2D, but the Label
    automatically sets its own height when the text is modified. As a result,
    this action has no effect on a Label.
    */
    action SetHeight(number height)
        /*
        Do nothing. We only allow the height to be adjusted by the private
        LoadDrawables() action.
        */
    end

    /*
    The SetSize action typically sets the width and height of an Item2D, but the
    Label automatically sets its own dimensions when the text is modified. If
    the width is larger than the Label's maximum width, the maximum width will
    be set to the given width value. Otherwise, this action has no effect.
    */
    action SetSize(number width, number height)
        SetWidth(width)
    end

    /*
    This action sets the maximum width that the label can expand up to when
    arranging characters.

    Attribute: Parameter width The maximum width that the Label should be able to expand up to.
    */
    action SetMaximumWidth(number width)
        if maxWidth not= width
            maxWidth = width
            textChanged = true
        end
    end

    /*
    This action returns the maximum width that the label can expand up to when
    arranging characters.

    Attribute: Returns The maximum width that the Label should be able to expand up to.
    */
    action GetMaximumWidth returns number
        return maxWidth
    end

    /*
    Returns the height of each individual line of text in the label. This height
    is uniform for any given font of a particular size, regardless of what the
    text being drawn is.

    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Label label
                label:SetPosition(200, 200)
                label:SetMaximumWidth(100)
                label:SetText("This is a lot of text!")
                Add(label)
                output "The line height is " + label:GetLineHeight()
            end

        end
    */
    action GetLineHeight returns integer
        return GetFont():GetLineHeight()
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)
        LoadDrawables()

        if properties not= undefined
            properties:SetRenderingFlag(false)
        end
    end

    /*
    This action determines if the Label should place characters so that they're
    touching the base line. In other words, if this value is true, most glyphs
    will be positioned so the bottom of the character is located at the y value
    of the Label, and descending characters (such as "g" in many fonts) will
    hang below. If the value is false, the Label will move the position of
    glyphs upward so hanging glyphs don't descend past the y value of the Label.
    The default value is true.
    */
    action IsPositioningOnBaseLine returns boolean
        return positionOnBaseLine
    end

    /*
    This action determines if the Label should place characters so that they're
    touching the base line. In other words, if this value is true, most glyphs
    will be positioned so the bottom of the character is located at the y value
    of the Label, and descending characters (such as "g" in many fonts) will
    hang below. If the value is false, the Label will move the position of
    glyphs upward so hanging glyphs don't descend past the y value of the Label.
    The default value is true.
    */
    action SetPositionOnBaseLine(boolean position)
        positionOnBaseLine = position
    end

    action GetDescription returns text
        /*
        If a description hasn't been set, return the text of the Label.
        This provides a reasonable default for accessibility purposes.
        */
        text description = parent:Item:GetDescription()
        if description = ""
            return GetText()
        end
        return description
    end

    /*
    This action returns how many lines the text of this Label takes. By default,
    all Labels take only a single line (i.e. this action will return 1). If the
    Label has a maximum length that is shorter than the full text, however, word
    wrapping will cause the Label to take multiple lines.

    Attribute: Returns How many lines of text are in this Label.
    Attribute: Example

        use Libraries.Game.Graphics.Label
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Label label
                label:SetText("This is a long string of text which will require word wrapping.")
                label:SetPosition(200, 200)
                label:SetMaximumWidth(100)
                Add(label)
                output "The label has " + label:GetLineCount() + " lines"
            end
        end
    */
    action GetLineCount returns integer
        return lineCount
    end

    /*
    This action sets the thickness of the outlines around the text, in pixels.
    By default, this is 0. The thickness can be set to a maximum of 8 pixels,
    though for best results the thickness should usually be no more than 7.

    Attribute: Parameter outlineThickness The thickness of the text outlines, in pixels.
    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Label
    use Libraries.Game.Graphics.Color
    
    class Main is Game
    
        action Main
            StartGame()
        end
    
        action CreateGame
            Color color
    
            Label label
            label:SetFontSize(32)
            label:SetPosition(100, 300)
            label:SetText("Hello world!")
            label:SetFontColor(color:White())
            label:SetFontOutlineThickness(2)
            label:SetFontOutlineColor(color:Black())
            Add(label)
        end
    end
    */
    action SetFontOutlineThickness(number outlineThickness)
        parent:Control:SetFontOutlineThickness(outlineThickness)
        textChanged = true
        GetFont():SetBordered(outlineThickness > 0)
    end

    /*
    This action sets the color of the outlines around the text. Note that if the outline
    thickness isn't changed from its default value of zero, no outlines will be drawn.

    Attribute: Parameter color The new color of the outlining for text.
    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Label
    use Libraries.Game.Graphics.Color
    
    class Main is Game
    
        action Main
            StartGame()
        end
    
        action CreateGame
            Color color
    
            Label label
            label:SetFontSize(32)
            label:SetPosition(100, 300)
            label:SetText("Hello world!")
            label:SetFontColor(color:White())
            label:SetFontOutlineThickness(2)
            label:SetFontOutlineColor(color:Black())
            Add(label)
        end
    end
    */
    action SetFontOutlineColor(ColorGroup color)
        parent:Control:SetFontOutlineColor(color)
        textChanged = true
    end

    /*
    This action determines if new lines should descend below the first line.
    If this value is true, the first line of text will be positioned at the
    y-coordinate of the Label, and following lines will be placed beneath it.
    If this value is false, the last line of text will be positioned at the
    y-coordinate of the Label, and prior lines will be placed above it.
    By default, this value is true.

    Attribute: Parameter descendingLines True to place the first line at the Label's y-position and other lines below it, or false to position the last line at the y-position and other lines above it.
    */
    action SetDescendingLines(boolean descendingLines)
        me:descendingLines = descendingLines
    end

    /*
    This action returns if extra lines descend below the first line.
    If this value is true, the first line of text will be positioned at the
    y-coordinate of the Label, and following lines will be placed beneath it.
    If this value is false, the last line of text will be positioned at the
    y-coordinate of the Label, and prior lines will be placed above it.
    By default, this value is true.

    Attribute: Returns True if the first line is at the Label's y-position and other lines below it, or false if the last line is at the y-position and other lines above it.
    */
    action HasDescendingLines returns boolean
        return descendingLines
    end

    action GetAlignment returns integer
        return alignment
    end

    action SetAlignment(integer alignment)
        me:alignment = alignment
    end
    
    action SetLeftAlignment
        SetAlignment(LEFT_ALIGN)
    end
    
    action SetRightAlignment
        SetAlignment(RIGHT_ALIGN)
    end
    
    action SetCenterAlignment
        SetAlignment(CENTER_ALIGN)
    end
    
    action SetJustifyAlignment
        SetAlignment(JUSTIFY_ALIGN)
    end
    
    action IsLeftAligned returns boolean
        return alignment = LEFT_ALIGN
    end
    
    action IsRightAligned returns boolean
        return alignment = RIGHT_ALIGN
    end
    
    action IsCenterAligned returns boolean
        return alignment = CENTER_ALIGN
    end
    
    action IsJustifyAligned returns boolean
        return alignment = JUSTIFY_ALIGN
    end
    
    action SetFocusable(boolean focusable)
        if focusable = IsFocusable()
            return now
        end
        
        if focusBox not= undefined
            Remove(focusBox)
            focusBox = undefined
        end
        
// The focus box's dimensions are calculated along with the text, so regenerate it.
textChanged = true
        parent:Control:SetFocusable(focusable)
    end
    
    action GainedFocus(FocusEvent event)
        if focusBox not= undefined
            focusBox:Show()
        else
            textChanged = true
        end
        
        parent:Control:GainedFocus(event)
    end
    
    action LostFocus(FocusEvent event)
        if focusBox not= undefined
            focusBox:Hide()
        end
        
        parent:Control:LostFocus(event)
    end

end
