package Libraries.Game.Graphics

use Libraries.Game.Disposable
use Libraries.Game.GameStateManager
use Libraries.Game.Application
use Libraries.Game.WebApplication
use Libraries.Game.Graphics.FileTextureData
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.TextureWrap
use Libraries.Compute.Matrix
use Libraries.System.File
use Libraries.Language.Errors.Error
use Libraries.Containers.Array
use Libraries.Interface.Events.TextureLoadListener
use Libraries.Interface.Events.TextureLoadEvent
use Libraries.Interface.Controls.Control
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Game.Graphics.OpenGL.OpenGLManager
use Libraries.Game.Graphics.Vulkan.VulkanImageView
use Libraries.Game.Graphics.Vulkan.VulkanSampler
use Libraries.Game.Graphics.Vulkan.VulkanGraphics
use Libraries.Game.Graphics.Vulkan.VulkanTextureManager

/*
The Texture class represents an image that can be drawn on the screen. Once
an image is loaded into a texture, it can be drawn on the screen by loading
it into a Drawable.

Attribute: Example

    use Libraries.Game.Graphics.Texture
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Game

    class Main is Game

        Drawable drawable
        Texture texture
        Color red

        action Main
            StartGame()
        end

        action CreateGame
            red:SetColor(1, 0, 0, 1)
            texture:LoadFilledRectangle(80, 100, red)
            drawable:Load(texture)

            drawable:SetPosition(200, 200)
            Add(drawable)
        end
    end
*/
class Texture is Disposable

    TextureData data = undefined

    GameStateManager manager
    OpenGLConstants constants

    TextureFilter minimizeFilter
    TextureFilter magnifyFilter
    TextureWrap horizontalWrap
    TextureWrap verticalWrap

    text source = undefined

    boolean isLoadingAsync = false

    Array<TextureLoadListener> loadListeners

    // A Vulkan ImageView representing this texture's resources. Only present if the engine is using Vulkan, this remains undefined otherwise.
    VulkanImageView vulkanImageView = undefined

    // A Vulkan Sampler used to access the resources of the ImageView. Only present if the engine is using Vulkan, and may still be undefined if the Vulkan system is using a common sampler (e.g. for 3D).
    VulkanSampler vulkanSampler = undefined

    // An index associated with the global array of textures stored by the VulkanTextureManager, if Vulkan is being used for the engine.
    integer vulkanTextureIndex = -1

    on create
        minimizeFilter:ConstructTextureFilter(minimizeFilter:NEAREST)
        magnifyFilter:ConstructTextureFilter(magnifyFilter:NEAREST)
        horizontalWrap:ConstructTextureWrap(horizontalWrap:CLAMP_TO_EDGE)
        verticalWrap:ConstructTextureWrap(verticalWrap:CLAMP_TO_EDGE)
    end

    private action GetOpenGL returns OpenGLManager
        GraphicsManager graphics = manager:GetGameGraphics()
        if graphics is OpenGLManager
            return cast(OpenGLManager, graphics)
        end
        return undefined
    end

    /*
    This action loads a Texture from a file path given as text. The file path
    should be given relative to the directory where the program is executed from. 

    Attribute: Parameter filePath A file path pointing to the image file to load into this Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadFromFile("Images/Sample.png")
            end
        end
    */
    action LoadFromFile(text filePath)
        File file
        file:SetPath(filePath)
        LoadFromFile(file)
    end

    /*
    This action loads a Texture from a Quorum File. The File must already
    have its path set for this function.

    Attribute: Parameter file An image file to be loaded into this Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game
        use Libraries.System.File

        class Main is Game

            File myFile
            Texture myTexture

            action Main
                StartGame()
            end

            action CreateGame
                myFile:SetPath("Images/Sample.png")

                // This call will load the image that the "myFile" variable points to.
                // The file points to an image called "Sample.png" in a folder called "Images".
                myTexture:LoadFromFile(myFile)
            end
        end
    */
    action LoadFromFile(File file)
        LoadFromFile(file, undefined, false)
    end

    /*
    This action will load a texture asynchronously (that is, the texture is
    loaded separately from the rest of the program's execution) and then load
    that texture into the provided Drawable. This action is called internally
    and automatically by the game engine when run on the web. Most users will
    never need to use this action directly.

    Attribute: Parameter filePath A file path pointing to the image file to load into this Texture.
    Attribute: Parameter drawable A drawable that will be loaded with this Texture after the Texture has finished loading.
    */
    action LoadAsynchronously(text filePath, Drawable drawable)
        File file
        file:SetPath(filePath)
        LoadAsynchronously(file, drawable)
    end

    /*
    This action will load a texture asynchronously (that is, the texture is
    loaded separately from the rest of the program's execution) and then load
    that texture into the provided Drawable. This action is called internally
    and automatically by the game engine when run on the web. Most users will
    never need to use this action directly.

    Attribute: Parameter file An image file to load into this Texture.
    Attribute: Parameter drawable A drawable that will be loaded with this Texture after the Texture has finished loading.
    */
    action LoadAsynchronously(File file, Drawable drawable)
        LoadAsynchronously(file, undefined, false, drawable)
    end

    /*
    This action will load a texture asynchronously (that is, the texture is
    loaded separately from the rest of the program's execution) and then load
    that texture into the provided Drawable. This action is called internally
    and automatically by the game engine when run on the web. Most users will
    never need to use this action directly.

    Attribute: Parameter file An image file to load into this Texture.
    Attribute: Parameter format A Format object describing how the pixels of the Texture will be stored.
    Attribute: Parameter useMipMaps Whether or not mipmaps should be generated for this Texture.
    Attribute: Parameter drawable A drawable that will be loaded with this Texture after the Texture has finished loading.
    */
    action LoadAsynchronously(File file, Format format, boolean useMipMaps, Drawable drawable)
        source = file:GetPath()
        PixelMap temp
        temp:LoadAsynchronously(file, format, useMipMaps, drawable, me)
    end

    /*
    This action is used internally by the game engine to finish loading the data
    loaded by a LoadAsynchronously action. After this Texture has finished
    loading, the provided Drawable will be loaded with this Texture (if it is
    not undefined). This action is used by the engine automatically as needed,
    and most users will never need to use this action directly.

    Attribute: Parameter file An image file to be loaded into the Texture.
    Attribute: Parameter pixelMap A PixelMap containing the pixel information to be stored in this Texture.
    Attribute: Parameter format A Format object describing how the pixels of the Texture will be stored.
    Attribute: Parameter useMipMaps Whether or not mipmaps should be generated for this Texture.
    Attribute: Parameter drawable A drawable that will be loaded with this Texture after the Texture has finished loading.
    */
    action FinishLoadingAsynchronously(File file, PixelMap pixelMap, Format format, boolean useMipMaps, Drawable drawable)
        FileTextureData data
        data:InitializeFileTextureData(file, pixelMap, format, useMipMaps)
        LoadFromTextureData(data)

        TextureLoadEvent event
        event:SetTexture(me)

        integer counter = 0
        repeat while counter < loadListeners:GetSize()
            loadListeners:Get(counter):OnTextureLoad(event)
            counter = counter + 1
        end

        if drawable not= undefined
            number width = drawable:GetWidth()
            number height = drawable:GetHeight()

            drawable:Load(me)
            // Reset the scale of the drawable after loading to ensure proper positioning.
            drawable:SetScale(drawable:GetScaleX(), drawable:GetScaleY())
            if drawable:GetPhysicsProperties() not= undefined and not drawable:IsPhysicsEnabled()
                drawable:EnablePhysics(true)
            end

            // If the drawable had a size set before, reset it back to those values after loading.
            // If one of the values is NaN, then most likely division by zero occurred due to an expected value not being loaded yet, so the dimensions are invalid.
            if (width not= 0 and height not= 0) and (width:IsNotANumber() = false and height:IsNotANumber() = false)
                drawable:SetSize(width, height)
            end

            if drawable is Control
                // If the drawable is also a Control (e.g. it's an Icon) then make sure it gets laid out again.
                // Also make sure that if it has a bad aspect ratio value, we give it a reasonable default.
                Control control = cast(Control, cast(Object, drawable))
                if control:GetHorizontalLayoutMode() = control:MAINTAIN_ASPECT_RATIO and (control:GetPercentageWidth() = 0 or control:GetPercentageWidth():IsNotANumber())
                    control:SetPercentageWidth(cast(number, GetWidth()) / GetHeight())
                elseif control:GetVerticalLayoutMode() = control:MAINTAIN_ASPECT_RATIO and (control:GetPercentageHeight() = 0 or control:GetPercentageHeight():IsNotANumber())
                    control:SetPercentageHeight(cast(number, GetHeight()) / GetWidth())
                end


                control:RequestLayout()
            end

            drawable:OnTextureLoad(event)
        end
    end

    /*
    The LoadFromPixelMap action loads a PixelMap into this texture. The PixelMap
    will use its already given Format.

    Attribute: Parameter pixelMap The PixelMap to load.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.PixelMap
    use Libraries.Game.Graphics.Format
    use Libraries.Game.Graphics.Texture
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color

    class Main is Game

        Color color

        action Main
            StartGame()
        end

        action CreateGame
            PixelMap map
            Format format
            format:SetValue(format:RGBA8888)
            map:CreatePixelMap(200, 200, format)

            // We will create a pink box with a red stripe across it.
            map:Fill(color:Pink())

            integer x = 0
            integer y = 85
            repeat while y < 125
                x = 0
                repeat while x < 200
                    map:SetPixel(x, y, color:Red())
                    x = x + 1
                end
                y = y + 1
            end

            Texture texture
            texture:LoadFromPixelMap(map)

            Drawable drawable
            drawable:Load(texture)
            Add(drawable)
        end
    end
    */
    action LoadFromPixelMap(PixelMap pixelMap)
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixelMap, pixelMap:GetFormat(), false)
        LoadFromTextureData(data)
    end

    /*
    The LoadFromPixelMap action loads a PixelMap into this texture, using the
    given Format. If mip-mapping is supported on the given platform, mip-maps
    will be used if the boolean parameter is true.

    Attribute: Parameter pixelMap The PixelMap to load.
    Attribute: Parameter format A Format describing the PixelMap's data.
    Attribute: Parameter useMipMaps Whether or not to use mip-maps for this texture, if supported.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.PixelMap
    use Libraries.Game.Graphics.Format
    use Libraries.Game.Graphics.Texture
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color

    class Main is Game

        Color color

        action Main
            StartGame()
        end

        action CreateGame
            PixelMap map
            Format format
            format:SetValue(format:RGBA8888)
            map:CreatePixelMap(200, 200, format)

            // We will create a pink box with a red stripe across it.
            map:Fill(color:Pink())

            integer x = 0
            integer y = 85
            repeat while y < 125
                x = 0
                repeat while x < 200
                    map:SetPixel(x, y, color:Red())
                    x = x + 1
                end
                y = y + 1
            end

            Texture texture
            texture:LoadFromPixelMap(map, format, false)

            Drawable drawable
            drawable:Load(texture)
            Add(drawable)
        end
    end
    */
    action LoadFromPixelMap(PixelMap pixelMap, Format format, boolean useMipMaps)
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixelMap, format, useMipMaps)
        LoadFromTextureData(data)
    end

    /*
    This action will load a matrix into the Texture to create a monochrome
    (black and white) image. Each value is assumed to be between 0 and 1, 
    where 0 represents a black pixel and 1 represents a white pixel.

    Attribute: Parameter matrix The matrix representing the pixels to load.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Texture
    use Libraries.Compute.Matrix

    class Main is Game

        Texture texture
        Drawable drawable

        action Main
            StartGame()
        end

        action CreateGame
            Matrix matrix

            // 7x7 square that is black at edges and lightens as it goes towards the center.
            matrix:Fill(7, 7, 0)
            matrix:Set(1, 1, 0.33)
            matrix:Set(2, 1, 0.33)
            matrix:Set(3, 1, 0.33)
            matrix:Set(4, 1, 0.33)
            matrix:Set(5, 1, 0.33)
            matrix:Set(5, 2, 0.33)
            matrix:Set(5, 3, 0.33)
            matrix:Set(5, 4, 0.33)
            matrix:Set(5, 5, 0.33)
            matrix:Set(4, 5, 0.33)
            matrix:Set(3, 5, 0.33)
            matrix:Set(2, 5, 0.33)
            matrix:Set(1, 5, 0.33)
            matrix:Set(1, 4, 0.33)
            matrix:Set(1, 3, 0.33)
            matrix:Set(1, 2, 0.33)

            matrix:Set(2, 2, 0.66)
            matrix:Set(3, 2, 0.66)
            matrix:Set(4, 2, 0.66)
            matrix:Set(4, 3, 0.66)
            matrix:Set(4, 4, 0.66)
            matrix:Set(3, 4, 0.66)
            matrix:Set(2, 4, 0.66)
            matrix:Set(2, 3, 0.66)

            matrix:Set(3, 3, 1)

            // Loading the Texture and blowing up the size of the Drawable to make it easier to see.
            texture:LoadFromMatrix(matrix)
            drawable:Load(texture)
            Add(drawable)

            drawable:SetPosition(200, 200)
            drawable:SetSize(100, 100)
        end
    end
    */
    action LoadFromMatrix(Matrix matrix)
        PixelMap map
        map:LoadMatrix(matrix)
        LoadFromPixelMap(map)
    end

    /*
    This action loads a Texture from a Quorum File, storing it as the given
    Format type and optionally using it to create mip maps, if the boolean
    is true. The File must already have its path set for this function.

    Attribute: Parameter file An image file to be loaded into a Texture.
    Attribute: Parameter format A Format object describing how the pixels of the Texture will be stored.
    Attribute: Parameter useMipMaps Whether or not mipmaps should be generated for this Texture.

    Attribute: Example
    
        use Libraries.Game.Texture
        use Libraries.Game.Game
        use Libraries.System.File

        class Main is Game

            File myFile
            Texture myTexture

            action Main
                StartGame()
            end

            action CreateGame
                myFile:SetPath("Images/Sample.png")

                // This call will load the image that the "myFile" variable points to.
                // The file points to an image called "Sample.png" in a folder called "Images".
                myTexture:LoadFromFile(myFile, undefined, false)
            end
        end
    */
    private action LoadFromFile(File file, Format format, boolean useMipMaps)
        source = file:GetPath()

        GameStateManager manager
        Application application = manager:GetApplication()
        if application is WebApplication
            LoadAsynchronously(file, format, useMipMaps, undefined)
            return now
        end

        LoadFromTextureData(CreateTextureData(file, format, useMipMaps))
    end

    /*
    This action loads a Texture from a file path given as text. The file path
    should be given relative to the directory where the program is executed from.
    When loaded via this command, the Texture will be set to use linear filtering
    and repeated texture wrapping, which is typically preferred for 3D models.

    Attribute: Parameter fileName A file path pointing to the image file to load into a Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadModelTexture("Images/Sample.png")
            end
        end
    */
    action LoadModelTexture(text fileName)
        File tempFile
        text filePath = fileName:Replace(tempFile:GetWorkingDirectory(), "")
        LoadFromFile(filePath)

        TextureFilter minFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        TextureFilter magFilter
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        SetFilter(minFilter, magFilter)

        TextureWrap uWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        TextureWrap vWrap
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        SetWrap(uWrap, vWrap)
    end

    /*
    This action loads a Texture from a Quorum File. The File must already
    have its path set for this function. When loaded via this command, the
    Texture will be set to use linear filtering and repeated texture wrapping,
    which is typically preferred for 3D models.

    Attribute: Parameter file An image file to be loaded into a Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game
        use Libraries.System.File

        class Main is Game

            File myFile
            Texture myTexture

            action Main
                StartGame()
            end

            action CreateGame
                myFile:SetPath("Images/Sample.png")

                // This call will load the image that the "myFile" variable points to.
                // The file points to an image called "Sample.png" in a folder called "Images".
                myTexture:LoadModelTexture(myFile)
            end
        end
    */
    action LoadModelTexture(File file)
        LoadFromFile(file)

        TextureFilter minFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        TextureFilter magFilter
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        SetFilter(minFilter, magFilter)

        TextureWrap uWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        TextureWrap vWrap
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        SetWrap(uWrap, vWrap)
    end

    /*
    This action loads a Texture from TextureData. This is primarily for internal
    use, and most users will never need to use this action. 
    */
    private action LoadFromTextureData(TextureData data)
        if manager:GetGameGraphics() is VulkanGraphics
            VulkanGraphics graphics = cast(VulkanGraphics, manager:GetGameGraphics())
            VulkanTextureManager textureManager = graphics:GetTextureManager()
            
            me:data = data

            if data:IsPrepared() not= true
                data:Prepare()
            end

            textureManager:RequestLoad(me, data:ConsumePixelMap())

            return now
        end

        SetGraphicsInfo(constants:GL_TEXTURE_2D, CreateGLHandle())
        Load(data)
        AddReloadableTexture()
    end

    /*
    This action loads a Texture's data so it can be drawn to the screen. This is
    primarily for internal use, and most users will never need to use this action. 
    */
    private action Load(TextureData loadingData)
        if data not= undefined
            if loadingData:IsManaged() not= data:IsManaged()
                Error error
                error:SetErrorMessage("Newly loaded data must have the same type of data management as the old data.")
                alert(error)
            end
        end

        data = loadingData

        if data:IsPrepared() not= true
            data:Prepare()
        end

        Bind()

        UploadImageData(constants:GL_TEXTURE_2D, data)
        SetFilter(GetMinimizeFilter(), GetMagnifyFilter())
        SetWrap(GetHorizontalWrap(), GetVerticalWrap())
        
        BindToDefault()

        //parent:Item:width = data:GetWidth()
        //parent:Item:height = data:GetHeight()

    end

    /*
    Used to reload a Texture that's already been loaded. This is used internally
    to ensure a Texture is automatically regained if the information is lost due
    to a context loss (e.g., minimizing the application on an Android device).
    Users will most likely never need to call this action directly.
    */
    action Reload
        if data not= undefined
            SetGraphicsInfo(constants:GL_TEXTURE_2D, CreateGLHandle())
            Load(data)
        else
            alert("I couldn't reload this Texture because it had never been loaded before.")
        end
    end

    /*
    This action returns the width of a loaded Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadFromFile("Images/Sample.png")
                number width = myTexture:GetWidth()
            end
        end
    */
    action GetWidth returns integer
        if data not= undefined
            return data:GetWidth()
        end
        return 0
    end

    /*
    This action returns the height of a loaded Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadFromFile("Images/Sample.png")
                number width = myTexture:GetHeight()
            end
        end
    */
    action GetHeight returns integer
        if data not= undefined
            return data:GetHeight()
        end
        return 0
    end

    /*
    This action indicates that the texture should be reloaded after a context
    loss occurs.
    */
    private system action AddReloadableTexture

    /*
    This action activates this texture and binds the texture image to the
    internal texture ID. This is for internal use.
    */
    system action Bind

    /*
    This action binds the texture image to an internal index in the rendering system.
    This is used internally by the engine as needed, and most users won't need to use
    it directly.
    */
    system action Bind(integer textureUnit)

    private system action BindToDefault

    private system action CreateGLHandle returns integer

    private system action SetGraphicsInfo(integer target, integer handle)

    public system action GetGLTarget returns integer

    public system action GetGLHandle returns integer

    // All actions placed below are originally from GLTexture.

    private action CreateTextureData(File file, boolean useMipMaps) returns TextureData
        return CreateTextureData(file, undefined, useMipMaps)
    end

    private action CreateTextureData(File file, Format format, boolean useMipMaps) returns TextureData
        if file = undefined
            return undefined
        end
        
        text filePath = file:GetPath()

        if filePath:EndsWith(".cim") 
            //return new FileTextureData(file, PixmapIO.readCIM(file), format, useMipMaps);
        elseif filePath:EndsWith(".etc1") 
            //return new ETC1TextureData(file, useMipMaps);
        elseif filePath:EndsWith(".ktx") 
            //return new KTXTextureData(file, useMipMaps);
        end

        FileTextureData data
        PixelMap temp
        temp:LoadPixelMap(file)
        data:InitializeFileTextureData(file, temp, format, useMipMaps)
        return data
    end

    private action UploadImageData(integer target, TextureData data)
        UploadImageData(target, data, 0)
    end

    private action UploadImageData(integer target, TextureData data, integer mipLevel)

        if data = undefined
            Error error
            error:SetErrorMessage("Can not upload undefined image data!")
            alert(error)
        end

        if data:IsPrepared() not= true
            data:Prepare()
        end


        // If custom data types are allowed in the future, they will have to
        // be handled here. Otherwise, we use the standard.

        PixelMap pixelMap = data:ConsumePixelMap()
        boolean disposePixelMap = data:DisposePixelMap()

        Format pixelFormat = pixelMap:GetFormat()
        Format dataFormat = data:GetFormat()

        OpenGLManager openGL = GetOpenGL()
        if openGL not= undefined
            openGL:PixelStorageMode(constants:GL_UNPACK_ALIGNMENT,1)
        end

        if data:UseMipMaps()
            // Generate MipMaps - only used for 3D textures. Java code below.
            // MipMapGenerator.generateMipMap(target, pixmap, pixmap.getWidth(), pixmap.getHeight());
        else
            pixelMap:Define2DImage(target, mipLevel, 0)
        end

        if disposePixelMap = true
            pixelMap:Dispose()
        end

    end

    /*
    Sets the minimization filter and magnification filter, respectively, used
    for this Texture. See Libraries.Game.Graphics.TextureFilter for details on
    what the different filters do.
    */
    action SetFilter(TextureFilter minFilter, TextureFilter magFilter)
        
        minimizeFilter = minFilter
        magnifyFilter = magFilter
        Bind()
        
        OpenGLManager openGL = GetOpenGL()
        if openGL not= undefined
            openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_MIN_FILTER, minFilter:GetValue())
            openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_MAG_FILTER, magFilter:GetValue())
        end
    end

    /*
    Sets the horizontal and vertical texture wrapping modes, respectively, used
    for this Texture. See Libraries.Game.Graphics.TextureWrap for details on
    what the different texture wrapping modes do.
    */
    action SetWrap(TextureWrap hWrap, TextureWrap vWrap)

        horizontalWrap = hWrap
        verticalWrap = vWrap
        Bind()
        
        OpenGLManager openGL = GetOpenGL()
        if openGL not= undefined
            openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_WRAP_S, hWrap:GetValue())
            openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_WRAP_T, vWrap:GetValue())
        end
    end

    /*
    This action returns the minimization filter of this Texture. For more on how
    the TextureFilters work, see Libraries.Game.Graphics.TextureFilter.
    */
    action GetMinimizeFilter returns TextureFilter
        return minimizeFilter
    end

    /*
    This action returns the magnification filter of this Texture. For more on how
    the TextureFilters work, see Libraries.Game.Graphics.TextureFilter.
    */
    action GetMagnifyFilter returns TextureFilter
        return magnifyFilter
    end

    /*
    This action returns the horizontal texture wrapping mode. For more on how
    the TextureWrap works, see Libraries.Game.Graphics.TextureWrap.
    */
    action GetHorizontalWrap returns TextureWrap
        return horizontalWrap
    end

    /*
    This action returns the vertical texture wrapping mode. For more on how
    the TextureWrap works, see Libraries.Game.Graphics.TextureWrap.
    */
    action GetVerticalWrap returns TextureWrap
        return verticalWrap
    end

    /*
    This action will release the memory used to store pixel information for this
    Texture. This frees up resources, but will make the Texture no longer usable,
    including in classes that may have loaded the Texture, such as in Drawable.
    Use this when you are completely finished with a Texture and no longer intend
    to use it.
    */
    system action Dispose

    /*
    This action will create a new Texture with a white line that connects an
    imaginary point at 0,0 to the provided x,y coordinates.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadLine(20, 100)
                    Drawable line
                    line:Load(texture)
                    line:SetPosition(50, 50)
                    Add(line)
                end
            end
    */
    action LoadLine(integer x, integer y)
        Color white
        white = white:White()
        LoadLine(x, y, white)
    end

    /*
    This action will create a new Texture with a line of the given color that
    connects between an imaginary point at 0,0 to the provided x,y coordinates.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color cyan
                    cyan:SetColor(0, 1, 1, 1)
                    Texture texture
                    texture:LoadLine(20, 100, cyan)
                    Drawable line
                    line:Load(texture)
                    line:SetPosition(50, 50)
                    Add(line)
                end
            end
    */
    action LoadLine(integer x, integer y, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(x+1, y+1, format)

        /*
        integer originX = 0
        integer originY = 0
        if x < 0
            
        end*/

        pixmap:DrawLine(0, 0, x, y, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a hollow white rectangle with
    the given width and height.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadRectangle(20, 100)
                    Drawable rectangle
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadRectangle(integer width, integer height)
        Color white
        white = white:White()
        LoadRectangle(width, height, white)
    end

    /*
    This action will create a new Texture with a hollow rectangle of the given
    color with the given width and height. This texture is then loaded into the
    Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color yellow
                    yellow:SetColor(1, 1, 0, 1)
                    Texture texture
                    texture:LoadRectangle(20, 100, yellow)
                    Drawable rectangle
                    rectangle:Load(texture)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadRectangle(integer width, integer height, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(width, height, format)

        pixmap:DrawRectangle(0, 0, width, height, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a solid white rectangle with
    the given width and height.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadFilledRectangle(20, 100)
                    Drawable rectangle
                    rectangle:Load(texture)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadFilledRectangle(integer width, integer height)
        Color white
        white = white:White()
        LoadFilledRectangle(width, height, white)
    end

    /*
    This action will create a new Texture with a solid rectangle of the given
    color with the given width and height.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color green
                    green:SetColor(0, 1, 0, 1)
                    Texture texture
                    texture:LoadFilledRectangle(20, 100, green)
                    Drawable rectangle
                    rectangle:Load(texture)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadFilledRectangle(integer width, integer height, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(width, height, format)

        pixmap:FillRectangle(0, 0, width, height, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a hollow white circle with the
    given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadCircle(75)
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadCircle(integer radius)
        Color white
        white = white:White()
        LoadCircle(radius, white)
    end

    /*
    This action will create a new Texture with a hollow circle of the given
    color with the given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color red
                    red:SetColor(1, 0, 0, 1)
                    Texture texture
                    texture:LoadCircle(75, red)
                    Drawable circle
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadCircle(integer radius, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(radius * 2 + 2, radius * 2 + 2, format)

        pixmap:DrawCircle(radius + 1, radius + 1, radius, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a solid white circle with the
    given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadFilledCircle(75)
                    Drawable circle
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadFilledCircle(integer radius)
        Color white
        white = white:White()
        LoadFilledCircle(radius, white)
    end

    /*
    This action will create a new Texture with a solid circle of the given
    color with the given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color blue
                    blue:SetColor(0, 0, 1, 1)
                    Texture texture
                    texture:LoadCircle(75, blue)
                    Drawable circle
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadFilledCircle(integer radius, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(radius * 2 + 1, radius * 2 + 1, format)

        // Before we fill the circle, make sure the transparent background has the right RGB values.
        // This won't matter most of the time, but if the circle texture is rendered using LINEAR min/mag TextureFilters,
        // having the default black transparent background will cause dark artifacts around the edges of the circle.
        Color transparency = color:Copy()
        transparency:SetAlpha(0)
        pixmap:Fill(transparency)
        
        pixmap:FillCircle(radius, radius, radius, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a solid white triangle that is
    made of the points identified by the three given points.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadFilledTriangle(0, 0, 200, 200, 400, 0)
                    Drawable triangle
                    triangle:Load(texture)
                    triangle:SetPosition(50, 50)
                    Add(triangle)
                end
            end
    */
    action LoadFilledTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3)
        Color white
        white = white:White()
        LoadFilledTriangle(x1, y1, x2, y2, x3, y3, white)
    end

    /*
    This action will create a new Texture with a solid triangle of the given
    color that is made of the points identified by the three given points.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color purple
                    purple:SetColor(0.5, 0, 0.5, 1)
                    Texture texture
                    texture:LoadFilledTriangle(0, 0, 200, 200, 400, 0, purple)
                    Drawable triangle
                    triangle:Load(texture)
                    triangle:SetPosition(50, 50)
                    Add(triangle)
                end
            end
    */
    action LoadFilledTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, Color color)
        integer width = x1
        if x2 > width
            width = x2
        end
        if x3 > width
            width = x3
        end

        integer height = y1
        if y2 > height
            height = y2
        end
        if y3 > height
            height = y3
        end

        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(width, height, format)

        // Correcting for pixel map drawing top-down instead of bottom-up.
        integer t1 = height - y1
        integer t2 = height - y2
        integer t3 = height - y3

        pixmap:FillTriangle(x1, t1, x2, t2, x3, t3, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will set the texture wrapping of this Texture, assuming it is
    already bound and active. This method sacrifices safety for speed, and
    should never be used directly by users.
    */
    action UnsafeSetWrap(TextureWrap u, TextureWrap v)
        if u not= undefined and u:GetValue() not= horizontalWrap:GetValue()
            OpenGLManager openGL = GetOpenGL()
            if openGL not= undefined
                openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_WRAP_S, u:GetValue())
            end
            horizontalWrap = u
        end

        if v not= undefined and v:GetValue() not= verticalWrap:GetValue()
            OpenGLManager openGL = GetOpenGL()
            if openGL not= undefined
                openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_WRAP_T, v:GetValue())
            end

            verticalWrap = v
        end
    end

    /*
    This action will set the texture filter of this Texture, assuming it is
    already bound and active. This method sacrifices safety for speed, and
    should never be used directly by users.
    */
    action UnsafeSetFilter(TextureFilter min, TextureFilter mag)
        if min not= undefined and min:GetValue() not= minimizeFilter:GetValue()
            OpenGLManager openGL = GetOpenGL()
            if openGL not= undefined
                openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_MIN_FILTER, min:GetValue())
            end
            minimizeFilter = min
        end

        if mag not= undefined and mag:GetValue() not= magnifyFilter:GetValue()
            OpenGLManager openGL = GetOpenGL()
            if openGL not= undefined
                openGL:SetTextureParameter(GetGLTarget(), constants:GL_TEXTURE_MAG_FILTER, mag:GetValue())
            end

            magnifyFilter = mag
        end
    end

    /*
    This action returns the relative file path to the file that was used to
    load this texture, if there is one. If no file has been loaded, this will
    return an empty string instead.

    Attribute: Returns The relative file path to the loaded file, or the empty string if no file is loaded.
    */
    action GetSource returns text
        return source
    end

    /*
    This action returns true if the texture is asynchronously loading.
    While loading, the texture won't be ready for use yet. 
    Once the texture has loaded, any registered TextureLoadListeners
    will be triggered.

    Attribute: Returns True if this texture is currently loading a file, or false otherwise.
    */
    action IsLoadingAsynchronously returns boolean
        return isLoadingAsync
    end

    /*
    This action adds a TextureLoadListener to the texture. If the texture
    finishes asynchronously loading an image, the listener will be alerted.

    Attribute: Parameter listener A TextureLoadListener to be alerted when this texture finishes asynchronous loading.
    */
    action AddTextureLoadListener(TextureLoadListener listener)
        loadListeners:Add(listener)
    end

    /*
    This action removes a TextureLoadListener from the texture. If the listener
    was not previously added to this texture, this does nothing.

    Attribute: Parameter listener A TextureLoadListener to be removed from the Texture. 
    */
    action RemoveTextureLoadListener(TextureLoadListener listener)
        loadListeners:Remove(listener)
    end

    /*
    This action removes all TextureLoadListeners that have been added to the texture.
    */
    action EmptyTextureLoadListeners
        loadListeners:Empty()
    end

    /*
    This action returns the VulkanImageView associated with this Texture, if there is one.
    The image view represents resources used by this texture in the Vulkan system, if the
    Game engine is using the Vulkan graphics library. If not, this is undefined.
    This is a Vulkan internal component, and will never be needed by most users.
    */
    action GetVulkanImageView returns VulkanImageView
        return vulkanImageView
    end

    /*
    This action sets the VulkanImageView associated with this Texture.
    The image view represents resources used by this texture in the Vulkan system, if the
    Game engine is using the Vulkan graphics library. If not, this is undefined.
    This is a Vulkan internal component, and will never be needed by most users.
    */
    action SetVulkanImageView(VulkanImageView vulkanImageView)
        me:vulkanImageView = vulkanImageView
    end

    /*
    This action returns the VulkanSampler associated with this Texture, if there is one.
    The sampler is used to access the resources of the VulkanImageView. This will be
    undefined if the system isn't using the Vulkan graphics library, and even if it is,
    this still might be undefined if this texture is being used with an external sampler
    (e.g., for 3D rendering). This is a Vulkan internal component, and will never be needed
    by most users.
    */
    action GetVulkanSampler returns VulkanSampler
        return vulkanSampler
    end

    /*
    This action sets the VulkanSampler associated with this Texture.
    The sampler is used to access the resources of the VulkanImageView. This will be
    undefined if the system isn't using the Vulkan graphics library, and even if it is,
    this still might be undefined if this texture is being used with an external sampler
    (e.g., for 3D rendering). This is a Vulkan internal component, and will never be needed
    by most users.
    */
    action SetVulkanSampler(VulkanSampler vulkanSampler)
        me:vulkanSampler = vulkanSampler
    end

    /*
    This action returns the index used by the VulkanTextureManager to store this texture in the
    global array of textures, if Vulkan is being used for the engine. This value defaults to -1.
    This is an internal component used by the Vulkan system, and will never be needed by most users.
    */
    action GetVulkanTextureIndex returns integer
        return vulkanTextureIndex
    end

    /*
    This action sets the index used by the VulkanTextureManager to store this texture in the
    global array of textures, if Vulkan is being used for the engine. This value defaults to -1.
    This is an internal component used by the Vulkan system, and will never be needed by most users.
    */
    action SetVulkanTextureIndex(integer vulkanTextureIndex)
        me:vulkanTextureIndex = vulkanTextureIndex
    end

end