package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Game.Graphics.Shaders.Shader
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Containers.Number32BitArray
use Libraries.Containers.Iterator

/*
The GraphicsManager class represents a Quorum interface with OpenGL in order to
draw on the screen. This is used internally by the Game class, and most users
will not need to interact with this class directly.
*/
class WebGraphics is GraphicsManager
  
    /*
    This action sets the color to clear the screen with in OpenGL.
    */
    system action ClearScreenColor(number red, number green, number blue, number alpha)

    /*
    This action clears the screen with the currently stored color in OpenGL.
    */
    system action ClearScreen(integer mask)

    /*
    This action sets how OpenGL interprets virtual coordinates into screen
    coordinates, by setting the screen as though it were at the given virtual
    coordinates with the given width and height.
    */
    system action SetDrawingRegion(integer x, integer y, integer width, integer height)
  
    /*
    Sets how OpenGL stores and loads pixels as a number of bytes.
    */
    system action PixelStorageMode(integer type, integer parameter)

    /*
    Sets an option identified by the parameterType code inside the texture
    identified by the given targetTexture ID using the given parameterValue. 
    */
    system action SetTextureParameter(integer targetTexture, integer parameterType, integer parameterValue)

    /*
    This action gets an ID value for a new shader of the requested type (such as FRAGMENT_SHADER from Shader).
    */
    system action CreateShaderID(integer shaderType) returns integer

    /*
    This action associates shader code with a shader ID.
    */
    system action SetShaderCode(integer shaderID, text source)

    /*
    This action compiles a shader, identified by its ID number. The shader must have already had its source code
    set using SetShaderCode.
    */
    system action CompileShader(integer shaderID)

    /*
    This action returns true if the given shader has been compiled, or false if the shader has not compiled
    (or if compilation was attempted but failed due to an error).
    */
    system action IsShaderCompiled(integer shaderID) returns boolean

    /*
    This action returns log information for the given shader, or the empty string if no log information is available.
    Typically this is used to get error information from a shader.
    */
    system action GetShaderLog(integer shaderID) returns text

    /*
    This action makes a new shader of the requested type (e.g., FRAGMENT_SHADER or VERTEX_SHADER from the Shader class)
    using the given source code. If the shader code successfully compiles, this action will return an integer ID
    representing that shader. If the shader can't be created or it does not successfully compile, this will alert an error.
    */
    action CreateShader(integer shaderType, text sourceCode, text shaderName) returns integer
        integer id = CreateShaderID(shaderType)
        if id = 0
            alert("Could not create a new shader.")
        end

        SetShaderCode(id, sourceCode)
        CompileShader(id)
        
        if IsShaderCompiled(id) = false
            text typeText = "Unknown"
            OpenGLConstants constants
            if shaderType = constants:GL_FRAGMENT_SHADER
                typeText = "Fragment"
            elseif shaderType = constants:GL_VERTEX_SHADER
                typeText = "Vertex"
            end
            
            text dq = typeText:GetDoubleQuote()
            alert("Error compiling " + typeText + " shader " + dq + shaderName + dq + ": " + GetShaderLog(id))
        end

        return id
    end

    /*
    This action returns an integer ID representing a new shader program in the graphics system.
    */
    system action CreateShaderProgramID returns integer

    /*
    This action attaches a shader onto an unlinked shader program.
    */
    system action AttachShader(integer programID, integer shaderID)

    /*
    This action links together the shaders that have been attached to the given shader program.
    */
    system action LinkShaderProgram(integer programID)
    
    /*
    This action returns true if the given shader program has been linked, or false if the shader has not been linked
    (or if linking was attempted but failed due to an error).
    */
    system action IsShaderProgramLinked(integer programID) returns boolean

    /*
    This action returns log information for a shader program, or the empty string if no log information is available.
    Typically this is used to get error information from a shader program.
    */
    system action GetShaderProgramLog(integer programID) returns text

    /*

    */
    action CreateShaderProgram(ShaderProgram program) returns integer
        integer id = CreateShaderProgramID()
        if id = 0
            alert("Could not create new shader program ID.")
        end

        Iterator<Shader> shaders = program:GetIterator()

        repeat while shaders:HasNext()
            AttachShader(id, shaders:Next():GetID())
        end

        integer counter = 0
        Array<text> attributes = program:GetOrderedVertexInputs()
        repeat while counter < attributes:GetSize()
            SetVertexInputID(id, counter, attributes:Get(counter))
            counter = counter + 1
        end

        LinkShaderProgram(id)

        if IsShaderProgramLinked(id) = false
            alert("An error occurred while linking a shader program: " + GetShaderProgramLog(id))
        end

        return id
    end

    /*
    This action tells the graphics system to render content using the shader program indicated by the provided ID.
    */
    system action UseShaderProgram(integer programID)

    /*
    This action instructs the rendering system to delete the native resources allocated to a shader. After deleting
    a shader, it can't be used by the rendering system unless it's recompiled.
    */
    system action DeleteShader(integer shaderID)

    /*
    This action instructs the rendering system to delete the native resources allocated to a shader program. After deleting
    a shader program, it can't be used by the rendering system unless it's reloaded. Deleting a program doesn't automatically
    delete the shaders attached to it -- those must also be deleted manually.
    */
    system action DeleteShaderProgram(integer programID)

    /*
    This action enables a rendering property in the native rendering system. For example, enabling GL_BLEND will make
    OpenGL blend together pixel fragments (necessary for proper transparency).
    */
    system action EnableProperty(integer property)

    /*
    This action disables a rendering property in the native rendering system. Any property which can be enabled by EnableProperty
    can also be disabled using this action.
    */
    system action DisableProperty(integer property)

    /*
    This action enables or disables writing to the depth buffer.
    */
    system action SetDepthMask(boolean mask)

    /*
    This action sets the blending function used by the rendering system. This is most commonly used for transparency calculations.
    */
    system action SetBlendFunction(integer sourceFunction, integer destinationFunction)

    /*
    This action determines which faces of objects should be culled by the rendering system. Most commonly, this is set to 
    GL_BACK, which instructs the rendering system not to render back faces of objects (which would face away from the camera).
    */
    system action SetCullFace(integer face)

    /*
    This action takes a range of values between 0 and 1 to indicate how much of the depth buffer should be used. Most commonly,
    this is set to 0 and 1 for the near and far values, respectively, which indicate that the entire range of the depth buffer should be used.
    */
    system action SetDepthRange(number near, number far)

    /*
    This action returns the maximum number of textures that can be supported on the system. This number depends
    on the local hardware being used.
    */
    system action GetMaxTextureUnits returns integer

    /*
    This action sets the "active texture" within the rendering system. When using other texture-modifying graphics
    commands that don't explicitly use a specific texture, the modifications will apply to the active texture.
    */
    system action SetActiveTextureID(integer id)

    system action CreateVertexArray returns integer

    system action DeleteVertexArray(integer arrayID)

    system action BindVertexArray(integer arrayID)

    /*
    This action returns an ID for a new buffer in the rendering system. Buffers are used to relay information from the program
    to the graphics card. For example, they are used by VertexBufferObjects to communicate polygons and their associated info
    so they can be rendered. Before a buffer created by this action can be used, it has to be activated first with BindBuffer.

    Attribute: Returns An ID associated with a new buffer.
    */
    system action CreateBuffer returns integer

    /*
    This action activates a buffer and indicates what it should be used for. The first parameter is a code, such as GL_ARRAY_BUFFER,
    that indicates the purpose of the buffer, and the second is an ID generated by "CreateBuffer".

    Attribute: Parameter purpose A code representing what this buffer will be used for.
    Attribute: Parameter bufferID An ID representing the buffer that should be activated.
    */
    system action BindBuffer(integer purpose, integer bufferID)

    /*
    This action deletes a buffer in the rendering system. The ID provided should be an ID that was generated using CreateBuffer.
   
    Attribute: Parameter bufferID An ID representing the buffer to be deleted.
    */
    system action DeleteBuffer(integer bufferID)

    /*
    This action sets the data that is stored in the currently activated buffer (using the BindBuffer action).
    
    Attribute: Parameter purpose A code representing the purpose of the buffer, such as GL_ARRAY_BUFFER.
    Attribute: Parameter buffer The data to be stored in the buffer.
    Attribute: Parameter option A code representing a context-specific option, such as GL_STATIC_DRAW for GL_ARRAY_BUFFER data.
    */
    system action SetBuffer(integer purpose, Number32BitBuffer buffer, integer option)

    /*
    This action sets the data that is stored in the currently activated buffer (using the BindBuffer action).
    
    Attribute: Parameter purpose A code representing the purpose of the buffer, such as GL_ARRAY_BUFFER.
    Attribute: Parameter buffer The data to be stored in the buffer.
    Attribute: Parameter option A code representing a context-specific option, such as GL_STATIC_DRAW for GL_ARRAY_BUFFER data.
    */
    system action SetBuffer(integer purpose, Integer32BitBuffer buffer, integer option)

    /*
    This action sends information stored in the active GL_ARRAY_BUFFER to be drawn by the rendering system. 
    */
    system action DrawBuffer(integer primitiveType, integer offset, integer count)

    /*
    This action renders the vertices stored in the active GL_ARRAY_BUFFER, using the indices stored in the GL_ELEMENTS_ARRAY_BUFFER to determine
    the order of rendering.
    */
    system action DrawIndexedBuffer(integer primitiveType, integer count, integer indexType, integer indicesOffset)

    /*
    This action sets the function used to determine if a new value should overwrite an old value in the depth buffer. For example,
    a value of GL_LESS ensures that new values will overwrite old values in the depth buffer if they have a lower relative Z value
    than the previous value.
    */
    system action SetDepthFunction(integer function)

    /*
    This action returns the number of "ShaderInput" variables in a linked program. A uniform is a variable provided to a shader which is
    the same no matter what the shader is processing (e.g., it is the same value for every vertex in a vertex shader or for every
    fragment in a fragment shader).
    */
    system action GetShaderInputCount(integer programID) returns integer

    /*
    This action queries the rendering system for information about a uniform in the provided program.
    This will get the uniform at the given index and returns its internal location ID, size in bytes and 
    its type (as identified by an OpenGL constant), using the provided Integer parameters to return the 
    information. This will also directly return the name of the uniform.
    */
    system action GetShaderInputInformation(integer programID, integer index, Integer location, Integer size, Integer type) returns text

    /*
    This action takes the ID of a compiled shader program and 3 empty HashTables. All three HashTables will be given the names of the uniforms as keys, and
    the HashTables will store a corresponding integer value representing the uniform's location ID, byte size, or type ID (as an OpenGL constant), respectively.
    This action also returns an array containing all of the names of the uniforms in this program.
    */
    action GetShaderInputTables(integer programID, HashTable<text, integer> locations, HashTable<text, integer> sizes, HashTable<text, integer> types) returns Array<text>
        integer size = GetShaderInputCount(programID)

        Array<text> result
        Integer locationValue
        Integer sizeValue
        Integer typeValue

        integer counter = 0
        repeat while counter < size
            text name = GetShaderInputInformation(programID, counter, locationValue, sizeValue, typeValue)
            locations:Add(name, locationValue:GetValue())
            sizes:Add(name, sizeValue:GetValue())
            types:Add(name, typeValue:GetValue())
            result:Add(name)

            counter = counter + 1
        end

        return result
    end

    /*
    This action returns the number of input variables in a linked program.
    */
    system action GetVertexInputCount(integer programID) returns integer

    /*
    This action queries the rendering system for information about an input in the provided program.
    This will get the input at the given index and returns its internal location ID, size in bytes and 
    its type (as identified by an OpenGL constant), using the provided Integer parameters to return the 
    information. This will also directly return the name of the input.
    */
    system action GetVertexInputInformation(integer programID, integer index, Integer location, Integer size, Integer type) returns text

    /*
    This action takes the ID of a compiled shader program and 3 empty HashTables. All three HashTables will be given the names of the inputs as keys, and
    the HashTables will store a corresponding integer value representing the input's location ID, byte size, or type ID (as an OpenGL constant), respectively.
    This action also returns an array containing all of the names of the inputs in this program.
    */
    action GetVertexInputTables(integer programID, HashTable<text, integer> locations, HashTable<text, integer> sizes, HashTable<text, integer> types) returns Array<text>
        integer size = GetVertexInputCount(programID)

        Array<text> result
        Integer locationValue
        Integer sizeValue
        Integer typeValue

        integer counter = 0
        repeat while counter < size
            text name = GetVertexInputInformation(programID, counter, locationValue, sizeValue, typeValue)
            locations:Add(name, locationValue:GetValue())
            sizes:Add(name, sizeValue:GetValue())
            types:Add(name, typeValue:GetValue())
            result:Add(name)

            counter = counter + 1
        end

        return result
    end

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, integer value1)
    
    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, integer value1, integer value2)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, integer value1, integer value2, integer value3)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, integer value1, integer value2, integer value3, integer value4)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, number value)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, number value1, number value2)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, number value1, number value2, number value3)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    system action SetShaderInput(integer uniformID, number value1, number value2, number value3, number value4)
    
    /*
    This action sets the values of a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    system action SetShaderInputArray(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the values of an array of Vector2's in a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    system action SetShaderInputVector2Array(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the values of an array of Vector3's in a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    system action SetShaderInputVector3Array(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the values of an array of Vector4's in a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    system action SetShaderInputVector4Array(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the value of an array of Matrix4's in a shader "uniform" variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. The array is assumed to provide
    the matrix in column-major order, unless the transpose flag is set to true, in which case it will be assumed to be
    row-major instead.

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter matrixCount How many matrices should be set in the uniform. Each matrix requires 16 sequential values from the source array.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter transpose If set to true, the uniform will be set to the transpose of the Matrix.
    */
    system action SetShaderInputMatrix4Array(integer uniformID, integer matrixCount, Number32BitArray array, integer startIndex, boolean transpose)

    /*
    This action sets the value of an array of Matrix3's in a shader "uniform" variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. The array is assumed to provide
    the matrix in column-major order, unless the transpose flag is set to true, in which case it will be assumed to be
    row-major instead.

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter matrixCount How many matrices should be set in the uniform. Each matrix requires 9 sequential values from the source array.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter transpose If set to true, the uniform will be set to the transpose of the Matrix.
    */
    system action SetShaderInputMatrix3Array(integer uniformID, integer matrixCount, Number32BitArray array, integer startIndex, boolean transpose)

    /*
    This action informs the rendering system of how to interpret elements of vertex input data for a particular input.

    Attribute: Parameter inputID An ID that describes a vertex input.
    Attribute: Parameter size How many bytes from the array are needed to set a single instance of the input value in the shader. Must be between 1 and 4.
    Attribute: Parameter type A constant value representing the type of data, such as GL_INT.
    Attribute: Parameter normalize If set to true, fixed-point data values will be normalized when passed down to the system. If set to false, the values will be passed down without modification.
    Attribute: Parameter stride How many bytes of data separate each instance of data meant to be used for this input. If this value is 0, it's assumed that there is no additional data interleaved between data used for this input.
    Attribute: Parameter offset The index of the first element of this input's data in the input buffer, or in other words, how many bytes of data appear before the first instance of input data for this input.
    */
    system action SetVertexInputInformation(integer inputID, integer size, integer type, boolean normalize, integer stride, integer offset)

    /*
    This action informs the rendering system of how to interpret elements of vertex input data for a particular input.

    Attribute: Parameter inputID An ID that describes a vertex input.
    Attribute: Parameter size How many bytes from the array are needed to set a single instance of the input value in the shader. Must be between 1 and 4.
    Attribute: Parameter type A constant value representing the type of data, such as GL_INT.
    Attribute: Parameter normalize If set to true, fixed-point data values will be normalized when passed down to the system. If set to false, the values will be passed down without modification.
    Attribute: Parameter stride How many bytes of data separate each instance of data meant to be used for this input. If this value is 0, it's assumed that there is no additional data interleaved between data used for this input.
    Attribute: Parameter buffer A buffer containing vertex input data.
    */
//    blueprint action SetVertexInputInformation(integer inputID, integer size, integer type, boolean normalize, integer stride, Number32BitBuffer buffer)

    /*
    This action will enable a vertex input within the shader system. Whenever a polygon is sent to the rendering system,
    each vertex must provide input data for each enabled vertex input.

    Attribute: Parameter inputID An ID that identifies a particular vertex input.
    */
    system action EnableVertexInput(integer inputID)

    /*
    This action will disable a vertex input within the shader system. Whenever a polygon is sent to the rendering system,
    each vertex must provide input data for each enabled vertex input.

    Attribute: Parameter inputID An ID that identifies a particular vertex input.
    */
    system action DisableVertexInput(integer inputID)

    /*

    */
    system action SetDefaultVertexValue(integer location, number x)

    /*

    */
    system action SetDefaultVertexValue(integer location, number x, number y)

    /*

    */
    system action SetDefaultVertexValue(integer location, number x, number y, number z)

    /*

    */
    system action SetDefaultVertexValue(integer location, number x, number y, number z, number w)

    /*

    */
    system action SetVertexInputID(integer programID, integer inputID, text name)

    system action SetPixelClipping(integer x, integer y, integer width, integer height)

    system action GetGraphicsErrorCode returns integer

    system action GetGraphicsText(integer code) returns text

    system action GetGraphicsInteger(integer code) returns integer
    
    /*This action releases the resources associated with this graphics object.
This is handled internally by the game engine, and should never be called
by users.*/
    system action Dispose

end