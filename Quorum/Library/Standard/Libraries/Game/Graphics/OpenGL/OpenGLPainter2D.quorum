package Libraries.Game.Graphics.OpenGL

use Libraries.Containers.Array
use Libraries.Containers.Number32BitArray
use Libraries.Containers.Queue
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.Item2DDepthComparison
use Libraries.Containers.Integer32BitArray
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Compute.Matrix4
use Libraries.Game.GameStateManager
use Libraries.Game.GameDisplay
use Libraries.Compute.Vector3
use Libraries.Game.Graphics.Shaders.ShaderManager
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Shaders.Shader
use Libraries.Game.Graphics.Shaders.ShaderMapping
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Game.Graphics.all

/*
The Painter2D class is used to draw Drawable objects on the screen. The Game class
provides a default Painter2D, which is passed to Items and Drawables via their
Draw action. It is highly recommended to use that Painter2D when using the Game
class. 

Note that when using the Game class, in most cases it is not necessary to ever 
use the Painter2D class manually, as the Game class will automatically draw
Drawables that have been added to it.

Attribute: Example

    use Libraries.Game.Graphics.Painter2D
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Game

    class Main is Game

        Painter2D myPainter = undefined
        Drawable square

        action Main
            StartGame()
        end

        action CreateGame
            Color white
            white:SetColor(1, 1, 1, 1)
        
            square:LoadFilledRectangle(200, 200, white)

            myPainter = parent:Game:batch
            Color red
            red:SetColor(1, 0, 0, 1)
            myPainter:SetColor(red)

            Add(square)
        end

    end
*/
class OpenGLPainter2D is Painter2D 
    
    Texture lastTexture = undefined

    boolean drawing = false
    number inverseTextureWidth = 0
    number inverseTextureHeight = 0

    private Color color
    private number colorValue = 0
    boolean blendingDisabled = false

    private Number32BitArray vertices

    GameStateManager manager
    OpenGLConstants constants

    /*
    An array used to store incoming Drawables and sort them by depth.
    */
    private Array<Item2D> sortingArray

    Item2DDepthComparison depthSorter

    // The current Drawable which has been processed by the "Draw" action, but hasn't been flushed yet.
    // Only used if the current shader mapping doesn't support batching. Otherwise this is undefined.
    Drawable currentDrawable = undefined

    /*
    Values used for clipping via glScissor. The coordinates form an axis
    aligned rectangle. glScissor requires the values of clipX, clipY, clipWidth,
    and clipHeight. clipX2 and clipY2 (the right and top coordinates of the
    square, respectively) are stored due to the possibility of frequent reuse
    by items during drawing.
    */
    number clipX = 0
    number clipY = 0
    number clipX2 = 0
    number clipY2 = 0
    number clipWidth = 0
    number clipHeight = 0
    boolean isClipping = false

    // A vector used for calculating points via the combined view/projection matrix.
    Vector3 clipPoint

    /*
    Whether or not the Painter is currently processing an Item which is
    performing custom drawing.
    */
    boolean customDrawingItem = false

    //used in End
    integer lastSortedArraySize = -1

    // The default shader program used by this Painter if an Item doesn't have a custom program.
    ShaderProgram defaultProgram = undefined

    // The current shader program in use.
    ShaderProgram currentProgram = undefined

    // The current shader mapping in use. Especially important in case it supports batching.
    ShaderMapping currentMapping = undefined

    // The reusable mesh, used to render quads in bulk.
    Mesh mesh

    // The camera viewing the scene
    Camera camera = undefined

    // Projection matrix, taken from the Camera. Allows us to translate world coordinates to screen coordinates.
    Matrix4 projectionMatrix

    // If this boolean is true, we can safely batch together Drawables to be rendered together for performance.
    // Otherwise, each Drawable has to be rendered separately, because a custom shader program/mapping might need different values on a per-Drawable basis.
    boolean batchDrawables = true

    on create
        color = color:White()
        SetColor(color)
        LoadDefaultPainter()
    end
    
    private action GetGraphics returns OpenGLManager
        return cast(OpenGLManager, manager:GetGameGraphics())
    end

    /*
    This action will set a color filter on the painter, causing all Drawables
    drawn by this painter to be tinted with the given color. 

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                Color white
                white:SetColor(1, 1, 1, 1)

                square:LoadFilledRectangle(200, 200, white)

                myPainter = parent:Game:batch
                Color red
                red:SetColor(1, 0, 0, 1)
                myPainter:SetColor(red)

                Add(square)
            end

        end
    */
    action SetColor(Color newColor)
        color = newColor
        colorValue = color:EncodeColorAsNumber()
    end

    /*
    This action will set a color filter on the painter, causing all Drawables
    drawn by this painter to be tinted with the given color. The color is set by
    using four component values between 0 and 1, which represent red, green,
    blue, and alpha, in that order.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                Color white
                white:SetColor(1, 1, 1, 1)

                square:LoadFilledRectangle(200, 200, white)

                myPainter = parent:Game:batch
                myPainter:SetColor(1, 0, 0, 1)

                Add(square)
            end

        end
    */
    action SetColor(number red, number green, number blue, number alpha)
        color:SetColor(red, green, blue, alpha)
        colorValue = color:EncodeColorAsNumber()
    end

    /*
    This action returns the current color filter on the Painter2D. The default
    color filter is white.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Color color

            action Main
                StartGame()
            end

            action CreateGame

                myPainter = parent:Game:batch
                color = myPainter:GetColor()
            end

        end
    */
    action GetColor returns Color
        return color
    end

    /*
    This action returns whether the Painter2D is currently active for drawing. A
    Painter2D becomes active for drawing after calling Painter2D:Begin(), and stays
    active until Painter2D:End() is called.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                myPainter:Begin()
                output "Is Painter2D drawing? " + myPainter:IsDrawing()
                myPainter:End()
            end

        end
    */
    action IsDrawing returns boolean
        return drawing
    end

    /*
    This action returns whether the Painter2D is currently set to use blending in
    OpenGL for the pictures that are being drawn.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                output "Is Painter2D blending? " + myPainter:IsBlendingEnabled()
            end

        end
    */
    action IsBlendingEnabled returns boolean
        return not blendingDisabled
    end

    /*
    Initializes the Painter2D with default settings. The Painter2D can not be used
    until it is initialized with this action. Note that the default Painter2D
    provided by the Game class will already be loaded with this action, so you
    never have to call this action on that Painter2D.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myNewPainter

            action Main
                StartGame()
            end

            action CreateGame
                myNewPainter:LoadDefaultPainter()
            end

        end
    */
    private action LoadDefaultPainter
        DefaultVertexAttributes2D attributes
        mesh:Load(false, 4800, 6000, attributes)

        vertices:SetSize(4800)

        integer length = 6000
        Integer32BitArray indices
        indices:SetSize(length)

        integer indexCounter = 0
        integer vertexCounter = 0

        repeat while indexCounter < length
            indices:Set(indexCounter, vertexCounter)
            indices:Set(indexCounter + 1, vertexCounter + 1)
            indices:Set(indexCounter + 2, vertexCounter + 2)
            indices:Set(indexCounter + 3, vertexCounter + 2)
            indices:Set(indexCounter + 4, vertexCounter + 3)
            indices:Set(indexCounter + 5, vertexCounter)

            indexCounter = indexCounter + 6
            vertexCounter = vertexCounter + 4
        end

        mesh:SetIndices(indices)

        GameDisplay display = manager:GetGameDisplay()

        if display = undefined
            alert("I couldn't create the Painter2D because the display hasn't been initialized!")
        end

        projectionMatrix:SetToOrthographic2D(0, 0, display:GetWidth(), display:GetHeight())

        defaultProgram = GetDefaultShaders()
    end

    private action GetDefaultShaders returns ShaderProgram
        ShaderManager shaderManager = manager:GetShaderManager()
        return shaderManager:GetDefaultShaderProgram2D()
    end

    /*
    Activates this Painter2D so it may draw items. If the Painter2D is already
    active, this will cause an error.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                myPainter:Begin()
                myPainter:End()
            end

        end
    */
    action Begin
        if IsDrawing()
            alert("This painter is already drawing! Call End() before calling Begin() again.")
        end
        
        projectionMatrix:Set(camera:GetCombinedMatrix())
        drawing = true

        OpenGLManager graphics = GetGraphics()
        if isClipping
            UpdateClipping()
            graphics:EnableProperty(constants:GL_SCISSOR_TEST)
        else
            graphics:DisableProperty(constants:GL_SCISSOR_TEST)
        end
    end


    /*
    Deactivates this Painter2D. A deactivated Painter2D can not draw. If the Painter2D
    is already deactived, this will cause an error. This action also flushes the
    Painter's queue, causing any drawing queued up by the Draw action to
    complete and displaying the new draw buffer.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                myPainter:Begin()
                myPainter:End()
            end

        end
    */
    action End
        if not IsDrawing()
            alert("This painter isn't drawing yet! Call Begin() before calling End().")
        end

        integer counter = 0
        repeat while counter < sortingArray:GetSize()
            Item2D item = sortingArray:Get(counter)
            if item:IsCustomDrawing()
                customDrawingItem = true
                item:Draw(me)
                customDrawingItem = false
            elseif item is Drawable
                Draw(cast(Drawable, item))
            end
            
            counter = counter + 1
        end

        Flush()

        lastTexture = undefined
        drawing = false

        OpenGLManager graphics = GetGraphics()
        graphics:SetDepthMask(true)
        if IsBlendingEnabled()
            graphics:DisableProperty(constants:GL_BLEND)
        end

        if isClipping
            graphics:DisableProperty(constants:GL_SCISSOR_TEST)
        end

        if currentProgram not= undefined
            currentProgram:End()
            currentProgram = undefined
        end

        integer current = sortingArray:GetSize()
        sortingArray:Empty(false)

        if lastSortedArraySize > current
            sortingArray:ClearContents(current, lastSortedArraySize - 1)
        end
        lastSortedArraySize = current
    end

    /*
    Draws a Drawable on the screen. A Painter2D must be activated with Begin()
    before it can draw. When using this in the game engine, this should be used
    inside the Draw action of a class inheriting from Item. If it is drawn as
    part of the normal update process, the image will draw, then immediately be
    covered over by the Game's drawing step, keeping the drawn object from being
    seen.
    */
    action QueueForDrawing(Drawable drawable)
        if customDrawingItem
            Draw(drawable)
        else
            sortingArray:Add(drawable)
        end
    end

    /*
    This action queues an Item2D for rendering. Because Item2Ds (other than Drawables)
    cannot normally be rendered, this will have no effect unless the Item2D is either
    a Drawable or the Item2D has custom drawing enabled.
    */
    action QueueForDrawing(Item2D item)
        if item is Drawable
            QueueForDrawing(cast(Drawable, item))
        elseif item:IsCustomDrawing() and not customDrawingItem
            // Even though we can't draw a raw Item2D, since it's requesting
            // custom rendering, it's processed during the draw step (possibly
            // so it can determine how to draw its children).
            sortingArray:Add(item)
        end
    end

    /*
    Immediately draws the given Drawable to the screen on top of any other
    Drawables which have been drawn this frame, ignoring depth buffer values.
    This should typically only be used as part of custom drawing in an Item
    (see Item2D's SetCustomDrawing and Draw actions).
    */
    action Draw(Drawable drawable)
        if not IsDrawing()
            alert("Painter2D:Begin() must be called before Draw.")
        end

        drawable:SetClipCoordinates(me)

        // If the clip width or height is negative, then the drawing region is
        // empty. Don't bother drawing it.
        if IsClipping() and (clipWidth < 0 or clipHeight < 0)
            return now
        end

        // This will update the vertices stored in the Drawable. These vertices
        // will be used when Flush() is called (which is when the actual drawing
        // occurs).
        drawable:PrepareVertices()

        DrawableShape shape = drawable:GetDrawableShape()

        // If the Drawable's shape can't be rendered, then skip it entirely.
        if shape:IsRenderable() = false
            return now
        end

        // Update the shape to use the Painter's color if there's none set.
        if drawable:UsingCustomTint() = false
            shape:SetColor(colorValue)
        end

        ShaderProgram candidate = drawable:GetShaderProgram()
        if candidate = undefined
            candidate = defaultProgram
        end

        if candidate not= currentProgram
            Flush()
            if currentProgram not= undefined
                currentProgram:End()
            end

            currentProgram = candidate
            currentProgram:Begin()
            currentMapping = undefined
        end

        ShaderMapping candidateMapping = drawable:GetShaderMapping()
        if candidateMapping = undefined
            candidateMapping = currentProgram:GetShaderMapping()
        end

        if candidateMapping not= currentMapping
            Flush()
            if currentMapping not= undefined
                currentMapping:End(currentProgram)
            end

            currentMapping = candidateMapping
            currentMapping:Begin(currentProgram, camera)
        end

        integer verticesLength = GetVertices():GetSize()
        if drawable:GetTexture() not= lastTexture
            SwitchTexture(drawable:GetTexture())
        end

        if currentMapping:SupportsBatching()
            batchDrawables = true

            if currentMapping:CanIncludeInBatch(currentProgram, drawable) = false
                Flush()
            end

            currentMapping:MapInputs(currentProgram, drawable)
        else
            // If we can't batch this drawable, map its inputs then render it immediately.
            batchDrawables = false
            currentDrawable = drawable

            currentMapping:MapInputs(currentProgram, drawable)

            // Set the vertices of the default mesh before flushing.
            if shape:GetMesh() = undefined
                integer counter = 0
                repeat while counter < shape:GetDataCount()
                    SetVertex(counter, shape:GetVertexData(counter))
                    counter = counter + 1
                end
            end

            Flush()
        end
    end

    private action SwitchTexture(Texture texture)
        Flush()

        lastTexture = texture
        inverseTextureWidth = 1.0 / texture:GetWidth()
        inverseTextureHeight = 1.0 / texture:GetHeight()
    end

    /*
    This action is used to determine if the Painter is currently custom drawing
    an Item2D. If it is, this returns true.

    Attribute: Returns True if the Painter2D is currently custom drawing an Item2D, or false otherwise.
    */
    action IsCustomDrawing returns boolean
        return customDrawingItem
    end

    /*
    Disposes of the plugin data stored by the Painter2D, freeing up resources when
    the Painter2D is no longer needed. This should never be called on the default
    Painter2D provided by the Game class.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Painter2D myNewPainter
                myNewPainter:Dispose()
            end

        end
    */
    action Dispose
        mesh:Dispose()
        defaultProgram:Dispose()
    end

    /*
    This action forces the Painter2D to immediately draw all images it has stored
    inside of it that are awaiting processing.
    */
    action Flush
        if (currentMapping = undefined or currentMapping:IsBatching() = false) and (currentDrawable = undefined)
            return now
        end

OpenGLManager graphics = GetGraphics()

        lastTexture:Bind() 

        if blendingDisabled
            graphics:DisableProperty(constants:GL_BLEND)
        else
            graphics:EnableProperty(constants:GL_BLEND)
            graphics:SetBlendFunction(constants:GL_SRC_ALPHA, constants:GL_ONE_MINUS_SRC_ALPHA)
        end

        if currentMapping:IsBatching()
            currentMapping:RenderBatch(currentProgram, camera)
        else
            DrawableShape shape = currentDrawable:GetDrawableShape()
            if shape:GetMesh() not= undefined
                currentDrawable:SetMesh(shape:GetMesh())
                currentProgram:Draw(currentDrawable)
            else
                mesh:SetVertices(GetVertices())
                currentDrawable:SetMesh(mesh)       
                currentProgram:Draw(currentDrawable, 0, shape:GetIndexCount())
            end
        end

        currentDrawable = undefined
    end

    /*
    This action will set the Painter2D to render objects on the screen relative
    to the given camera.
    */
    action SetCamera(Camera camera)
        me:camera = camera
        if IsDrawing()
            projectionMatrix:Set(camera:GetCombinedMatrix())
        end
    end

    /*
    This action gives the plugins a shortcut to conveniently set a single index
    of the array. Although this action is private, the plugins may still access
    it because they do not respect the "private" flag.
    */
    private action SetVertex(integer index, number value)
        vertices:Set(index, value)
    end

    /*
    This action gives the plugins a way to conveniently reference the vertices
    array. Although this action is private, the plugins may still access it
    because they do not respect the "private" flag.
    */
    private action GetVertices returns Number32BitArray
        return vertices
    end

    /*
    The SetClipping action enables pixel clipping for anything which is drawn by
    this Painter. Pixels are clipped in a rectangle defined by the Painter's
    clip coordinates.

    Attribute: Parameter clip True to enable clipping, false to disable clipping.
    */
    action SetClipping(boolean clip)
        if clip = isClipping
            return now
        end

        Flush()

        isClipping = clip

        if drawing
            UpdateClipping()

OpenGLManager graphics = GetGraphics()

            if clip
                graphics:EnableProperty(constants:GL_SCISSOR_TEST)
            else
                graphics:DisableProperty(constants:GL_SCISSOR_TEST)
            end
        end
    end

    /*
    The IsClipping action returns whether or not the Painter is currently
    using pixel clipping during drawing.

    Attribute: Returns True to enable clipping, false to disable clipping.
    */
    action IsClipping returns boolean
        return isClipping
    end

    /*
    The GetClipX action returns the x coordinate (in world coordinates) of the
    bottom-left corner of the clipping rectangle.

    Attribute: Returns The bottom-left x coordinate of the clipping rectangle.
    */
    action GetClipX returns number
        return clipX
    end

    /*
    The GetClipY action returns the y coordinate (in world coordinates) of the
    bottom-left corner of the clipping rectangle.

    Attribute: Returns The bottom-left y coordinate of the clipping rectangle.
    */
    action GetClipY returns number
        return clipY
    end

    /*
    The GetClipX2 action returns the x coordinate (in world coordinates) of the
    top-right corner of the clipping rectangle.

    Attribute: Returns The top-right x coordinate of the clipping rectangle.
    */
    action GetClipX2 returns number
        return clipX2
    end

    /*
    The GetClipY2 action returns the y coordinate (in world coordinates) of the
    top-right corner of the clipping rectangle.

    Attribute: Returns The top-right y coordinate of the clipping rectangle.
    */
    action GetClipY2 returns number
        return clipY2
    end

    /*
    The GetClipWidth action returns the width (in world coordinates) of the
    clipping rectangle.

    Attribute: Returns The width of the clipping rectangle.
    */
    action GetClipWidth returns number
        return clipWidth
    end

    /*
    The GetClipHeight action returns the height (in world coordinates) of the
    clipping rectangle.

    Attribute: Returns The height of the clipping rectangle.
    */
    action GetClipHeight returns number
        return clipHeight
    end

    /*
    The SetClipCoordinates action sets the x, y coordinates of the bottom-left
    corner and the x, y coordinates of the top-right corner of the clipping
    rectangle.

    Attribute: Parameter x1 The x coordinate of the left side of the rectangle.
    Attribute: Parameter y1 The y coordinate of the bottom side of the rectangle.
    Attribute: Parameter x2 The x coordinate of the right side of the rectangle.
    Attribute: Parameter y2 The y coordinate of the top side of the rectangle.
    */
    action SetClipCoordinates(number x1, number y1, number x2, number y2)
        // Only update the clipping if something has changed. Updating the
        // clipping flushes outgoing vertices to the GPU.
        if clipX not= x1 or clipY not= y1 or clipX2 not= x2 or clipY2 not= y2
            clipX = x1
            clipY = y1
            clipX2 = x2
            clipY2 = y2
            clipWidth = x2 - x1
            clipHeight = y2 - y1
            UpdateClipping()
        end
    end

    /*
    The SetClipDimensions action sets the x, y coordinates of the bottom-left
    corner and the width and height of the clipping rectangle.

    Attribute: Parameter x The x coordinate of the left side of the rectangle.
    Attribute: Parameter y The y coordinate of the bottom side of the rectangle.
    Attribute: Parameter width The width of the rectangle.
    Attribute: Parameter height The height of the rectangle.
    */
    action SetClipDimensions(number x, number y, number width, number height)
        // Only update the clipping if something has changed. Updating the
        // clipping flushes outgoing vertices to the GPU.
        if clipX not= x or clipY not= y or clipWidth not= width or clipHeight not= height
            clipX = x
            clipY = y
            clipX2 = x + width
            clipY2 = y + height
            clipWidth = width
            clipHeight = height
            UpdateClipping()
        end
    end

    private action UpdateClipping
        if IsDrawing() = false or IsClipping() = false
            return now
        end

        Flush()

        GameDisplay display = manager:GetGameDisplay()

        clipPoint:Set(GetClipX(), GetClipY(), 0)

        /*
        The result of the multiplication will produce a vector containing
        values between -1 and 1. We want to adjust the range to 0 to 1 and then
        use the display's width and height to find the actual pixel values
        the clip point will apply to.
        */
        clipPoint:Multiply(projectionMatrix)
        integer x = cast(integer, ((clipPoint:GetX() + 1) / 2.0 * display:GetWidth()))
        integer y = cast(integer, ((clipPoint:GetY() + 1) / 2.0 * display:GetHeight()))
        
        clipPoint:Set(GetClipX2(), GetClipY2(), 0)
        
        clipPoint:Multiply(projectionMatrix)
        integer x2 = cast(integer, ((clipPoint:GetX() + 1) / 2.0 * display:GetWidth()))
        integer y2 = cast(integer, ((clipPoint:GetY() + 1) / 2.0 * display:GetHeight()))
        
        integer width = 0
        integer height = 0
        
        if (x2 >= x)
            width = x2 - x
        else
            width = x - x2
            x = x2
        end
        
        if (y2 >= y)
            height = y2 - y
        else
            height = y - y2
            y = y2
        end
        
        OpenGLManager graphics = GetGraphics()
        graphics:SetPixelClipping(x, y, width, height)
    end

    action IsBlendingDisabled returns boolean
        return blendingDisabled
    end

    action SetDefaultShaderProgram(ShaderProgram program)
        if drawing
            alert("I can't change the default shader program because I'm already drawing. Call End() before changing the default shader.")
        end

        defaultProgram = program
    end

    action GetDefaultShaderProgram returns ShaderProgram
        return defaultProgram
    end

end