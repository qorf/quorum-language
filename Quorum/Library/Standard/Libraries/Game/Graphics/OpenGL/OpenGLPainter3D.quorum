package Libraries.Game.Graphics.OpenGL

use Libraries.Containers.Array
use Libraries.Game.Disposable
use Libraries.Game.Graphics.IntegerAttribute
use Libraries.Game.Graphics.DepthTestAttribute
use Libraries.Game.Graphics.Environment
use Libraries.Game.Graphics.TextureDescriptor
use Libraries.Game.Graphics.Shaders.SkyboxShader
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Shaders.ShaderManager
use Libraries.Game.Graphics.Shaders.OpenGL.Vertex.DefaultVertexShader3DOpenGL
use Libraries.Game.Graphics.Shaders.OpenGL.Fragment.DefaultFragmentShader3DOpenGL
use Libraries.Game.Graphics.Shaders.DefaultShaderProgram3D
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Game.Graphics.all

class OpenGLPainter3D is Painter3D, Disposable
    
    Array<Renderable> renderables
    Camera camera = undefined
    Environment environment = undefined
    Skybox skybox = undefined
    SkyboxShader skyboxShader

    ShaderProgram defaultProgram = undefined
    boolean isRendering = false

    /*
    Used to detect if we've rendered the Skybox yet.
    We render the skybox after all opaque objects and before the first
    blended (i.e. transparent) objects.
    */
    boolean shouldRenderSkybox = false

    GameStateManager manager

    on create
        defaultProgram = GetDefaultShaders()
    end
    
private action GetGraphics returns OpenGLManager
        return cast(OpenGLManager, manager:GetGameGraphics())
    end

    private action GetDefaultShaders returns ShaderProgram
        GameStateManager manager
        ShaderManager shaderManager = manager:GetShaderManager()
        if shaderManager:HasShaderProgram(shaderManager:DEFAULT_3D_SHADER_PROGRAM)
            return shaderManager:GetShaderProgram(shaderManager:DEFAULT_3D_SHADER_PROGRAM)
        else
            DefaultShaderProgram3D default3D
            // Compiling this program will automatically register it with the manager.
            default3D:Compile()
            return default3D
        end
    end

    action Dispose
        // TO-DO
    end

    /*
    This action will set the Painter3D so it is prepared to accept models for
    rendering on the screen. The models will be rendered on screen as they are
    visible from the provided camera.
    */
    action Begin(Camera camera)
        SetCamera(camera)
        Begin()
    end

    action Render(Model model)
        integer offset = renderables:GetSize()
        model:GetRenderables(renderables)
        
        integer index = offset

        repeat while index < renderables:GetSize()
            Renderable renderable = renderables:Get(index)
            
            renderable:environment = environment
            renderable:camera = camera

            index = index + 1
        end
    end

    /*
    This action will set the camera for the Painter3D. When rendering, the 
    Painter3D will draw objects on the screen as they are visible from the
    currently set camera.
    */
    action SetCamera(Camera camera)
        if IsRendering() and renderables:GetSize() > 0
            Flush()
        end

        me:camera = camera
    end

    /*
    This action will return the camera that is currently being used by the 
    Painter3D. 
    */
    action GetCamera returns Camera
        return camera
    end

    /*
    This action will set the environment for the Painter3D. When rendering, the 
    Painter3D will draw objects on the screen using the lighting from the
    currently set environment.
    */
    action SetEnvironment(Environment environment)
        me:environment = environment
    end

    /*
    This action will return the environment that is currently being used by the 
    Painter3D. 
    */
    action GetEnvironment returns Environment
        return environment
    end

    /*
    This action will set the Skybox for the Painter3D. When rendering, the 
    Painter3D will draw the Skybox behind all other items on the screen.
    */
    action SetSkybox(Skybox skybox)
        me:skybox = skybox
    end

    /*
    This action will return the Skybox that is currently being used by the 
    Painter3D. 
    */
    action GetSkybox returns Skybox
        return skybox
    end

    /*
    This action will set the Painter3D so that it is ready to accept models to
    be rendered on the screen. The Painter3D must have a camera set using the
    SetCamera action before Begin is called.
    */
    action Begin
        if isRendering
            alert("The Painter3D is already rendering! Call End() before calling Begin() again.")
        elseif (camera = undefined)
            alert("The Painter3D must have a camera set before calling Begin().")
        end
        
        isRendering = true
        
        shouldRenderSkybox = (skybox not= undefined)
    end

    /*
    This action will make the Painter3D finish rendering, causing any objects
    provided by the Render() action to be rendered on the screen. After this
    action is called, the Begin() action must be called again before providing
    more models to be drawn with Render().
    */
    action End
        Flush()
        
        // Render the Skybox if we haven't already.
        if (shouldRenderSkybox)
            if (skybox:IsLoaded() = false)
                alert("I can't render the skybox because it wasn't fully loaded. Make sure all six sides are loaded before trying to use it.")
            end
            OpenGLManager graphics = GetGraphics()
            OpenGLConstants constants
            graphics:EnableProperty(constants:GL_DEPTH_TEST)
            graphics:EnableProperty(constants:GL_BLEND)
            skyboxShader:Render(skybox, camera)
        end

        EndGraphicsState()
        isRendering = false
    end

    private action EndGraphicsState
OpenGLManager graphics = GetGraphics()
        OpenGLConstants constants
        graphics:DisableProperty(constants:GL_DEPTH_TEST)
        graphics:SetDepthMask(true)
        graphics:DisableProperty(constants:GL_BLEND)
        graphics:DisableProperty(constants:GL_CULL_FACE)
    end

    action Flush
        renderables:Sort()
        ShaderProgram currentProgram = undefined
        
        if (shouldRenderSkybox and skybox:IsLoaded() = false)
            alert("I can't render the skybox because it wasn't fully loaded. Make sure all six sides are loaded before trying to use it.")
        end
        
        integer i = 0
        repeat while i < renderables:GetSize()
            Renderable renderable = renderables:Get(i)
            
            /*
            When we find our first blended object, render the skybox first.
            The Skybox should be in the background before any transparent
            objects are drawn, so they can blend the skybox into the rendered
            pixel fragments.
            */
            if (shouldRenderSkybox and renderable:UsesBlending())
                shouldRenderSkybox = false
                if (currentProgram not= undefined)
                    currentProgram:End()
                end
                currentProgram = undefined
OpenGLManager graphics = GetGraphics()
                OpenGLConstants constants
                graphics:EnableProperty(constants:GL_DEPTH_TEST)
                graphics:EnableProperty(constants:GL_BLEND)
                skyboxShader:Render(skybox, camera)
            end
            
            ShaderProgram candidateProgram = defaultProgram
            if renderable:shaderProgram not= undefined
                candidateProgram = renderable:shaderProgram
            end

            if (currentProgram not= candidateProgram) 
                if currentProgram not= undefined
                    currentProgram:End()
                end
                currentProgram = candidateProgram
                currentProgram:Begin()
            end
            currentProgram:Render(renderable)

            i = i + 1
        end

        if currentProgram not= undefined
            currentProgram:End()
        end
        
        if renderables:IsEmpty() = false
            renderables:Empty(false)
        end
    end

    /*
    This action will return whether or not the Painter3D is currently rendering
    objects.
    */
    action IsRendering returns boolean
        return isRendering
    end

end