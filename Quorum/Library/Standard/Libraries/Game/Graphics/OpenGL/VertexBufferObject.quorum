package Libraries.Game.Graphics.OpenGL

use Libraries.Containers.Array
use Libraries.Containers.Number32BitArray
use Libraries.Game.Graphics.VertexData
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Game.Disposable
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Game.Graphics.OpenGL.OpenGLManager
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.Graphics.Number32BitBuffer
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Shaders.OpenGL.OpenGLShaderProgram

class VertexBufferObject is VertexData

    VertexAttributes attributes = undefined
    Number32BitBuffer buffer = undefined

    integer bufferHandle = -1
    integer usage = -1
    boolean ownsBuffer = true
    boolean isDirty = false
    boolean isBound = false

    GameStateManager manager
    OpenGLConstants constants
    
private action GetGraphics returns OpenGLManager
        GraphicsManager graphics = manager:GetGameGraphics()
        return cast(OpenGLManager, graphics)
    end

    action Load(boolean isStatic, integer verticesCount, Array<VertexAttribute> attributes)
        VertexAttributes vertexAttributes
        vertexAttributes:SetAttributes(attributes)
        Load(isStatic, verticesCount, vertexAttributes)
    end

    action Load(boolean isStatic, integer verticesCount, VertexAttributes attributes)
OpenGLManager graphics = GetGraphics()
        
        bufferHandle = graphics:CreateBuffer()

        Number32BitBuffer newBuffer
        newBuffer:SetSize((attributes:vertexSize / 4) * verticesCount)
        SetBuffer(newBuffer, true, attributes)

        if isStatic
            SetUsage(constants:GL_STATIC_DRAW)
        else
            SetUsage(constants:GL_DYNAMIC_DRAW)
        end
    end

    private action SetBuffer(Number32BitBuffer data, boolean ownsBuffer, VertexAttributes value)
        if isBound
            alert("I cannot change the attributes of a VertexBufferObject while it is bound.")
        end

        if me:ownsBuffer and buffer not= undefined
            buffer:Dispose()
        end

        attributes = value
        buffer = data
        me:ownsBuffer = ownsBuffer
    end

    private action SetUsage(integer value)
        if isBound
            alert("I cannot change the attributes of a VertexBufferObject while it is bound.")
        end
        usage = value
    end

    action GetSize returns integer
        return (buffer:GetSize() * 4) / attributes:vertexSize
    end

    action GetMaxSize returns integer
        return (buffer:GetMaxSize() * 4) / attributes:vertexSize
    end

    action GetBuffer returns Number32BitBuffer
        return buffer
    end

    action GetAttributes returns VertexAttributes
        return attributes
    end

    action Get(integer index) returns number
        return buffer:Get(index)
    end

    action Dispose
OpenGLManager graphics = GetGraphics()
        graphics:BindBuffer(constants:GL_ARRAY_BUFFER, 0)
        graphics:DeleteBuffer(bufferHandle)
        bufferHandle = 0
        if ownsBuffer
            buffer:Dispose()
        end
    end

    action SetVertices(Number32BitArray vertices)
        isDirty = true
        buffer:Set(vertices)
        BufferChanged()
    end

    private action BufferChanged
        if isBound
OpenGLManager graphics = GetGraphics()
            graphics:SetBuffer(constants:GL_ARRAY_BUFFER, buffer, usage)   
            isDirty = false
        end
    end

    action UpdateVertices(integer targetOffset, Number32BitArray vertices, integer sourceOffset, integer count)
        isDirty = true
        buffer:Set(targetOffset, vertices, sourceOffset, count)
        BufferChanged()
    end

    action Reload
OpenGLManager graphics = GetGraphics()
        bufferHandle = graphics:CreateBuffer()
        isDirty = true
    end

    action Bind(ShaderProgram program)
        Bind(program, undefined)
    end

    action Bind(ShaderProgram shaderProgram, Array<integer> locations)
        OpenGLShaderProgram program = cast(OpenGLShaderProgram, shaderProgram:GetShaderProgramStrategy())
OpenGLManager graphics = GetGraphics()
        graphics:BindBuffer(constants:GL_ARRAY_BUFFER, bufferHandle)
        
        if isDirty
            graphics:SetBuffer(constants:GL_ARRAY_BUFFER, buffer, usage)
            isDirty = false
        end

        integer attributeCount = attributes:GetSize()
    
        if locations = undefined
            integer i = 0
            repeat while i < attributeCount
                VertexAttribute attribute = attributes:GetAttribute(i)
                integer id = program:GetVertexInputLocation(attribute:alias)

                if id >= 0
                    program:EnableVertexInput(id)
                    program:SetVertexInput(id, attribute:componentCount, attribute:type, attribute:normalized, attributes:vertexSize, attribute:offset)
                end

                i = i + 1
            end
        else
            integer i = 0
            repeat while i < attributeCount
                VertexAttribute attribute = attributes:GetAttribute(i)
                integer id = locations:Get(i)

                if id >= 0
                    program:EnableVertexInput(id)
                    program:SetVertexInput(id, attribute:componentCount, attribute:type, attribute:normalized, attributes:vertexSize, attribute:offset)
                end

                i = i + 1
            end
        end

        isBound = true
    end

    action Unbind(ShaderProgram program)
        Unbind(program, undefined)
    end

    action Unbind(ShaderProgram shaderProgram, Array<integer> locations)
        OpenGLShaderProgram program = cast(OpenGLShaderProgram, shaderProgram:GetShaderProgramStrategy())
OpenGLManager graphics = GetGraphics()
        integer attributeCount = attributes:GetSize()

        integer i = 0
        if locations = undefined
            repeat while i < attributeCount
                program:DisableVertexInput(attributes:GetAttribute(i):alias)
                i = i + 1
            end
        else
            repeat while i < attributeCount
                integer id = locations:Get(i)
                if id >= 0
                    program:DisableVertexInput(id)
                end
                i = i + 1
            end
        end

        graphics:BindBuffer(constants:GL_ARRAY_BUFFER, 0)
        isBound = false
    end

end