package Libraries.Game.Graphics.Shaders.Vulkan.Mapping

use Libraries.Game.Graphics.Shaders.ShaderMapping
use Libraries.Game.Graphics.Vulkan.VulkanDevice
use Libraries.Game.Graphics.Vulkan.VulkanPipelineInfo
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Shaders.Vulkan.VulkanShaderManager
use Libraries.Game.Graphics.Vulkan.VulkanPipelineCache
use Libraries.Game.Graphics.Vulkan.VulkanConstants
use Libraries.Containers.Array
use Libraries.Game.Graphics.Vulkan.VulkanVertexInputAttributeDescription
use Libraries.Game.Graphics.Vulkan.VulkanVertexInputBindingDescription
use Libraries.Game.Graphics.Vulkan.VulkanPipelineColorBlendAttachmentState
use Libraries.Game.Graphics.Vulkan.VulkanSampler
use Libraries.Game.Graphics.Vulkan.VulkanSamplerInfo
use Libraries.Game.Graphics.Vulkan.VulkanDescriptorSetLayout
use Libraries.Game.Graphics.Vulkan.VulkanDescriptorSetLayoutBinding
use Libraries.Game.Graphics.Vulkan.VulkanGraphics
use Libraries.Game.Graphics.Vulkan.VulkanTextureManager
use Libraries.Game.Graphics.Vulkan.VulkanPipelineLayout
use Libraries.Game.Graphics.Vulkan.VulkanDescriptorSetManager
use Libraries.Game.Graphics.Vulkan.VulkanBuffer
use Libraries.Game.Graphics.Vulkan.VulkanNumber32BitMappedMemory
use Libraries.Game.Graphics.Vulkan.VulkanDescriptorResourcesInfo
use Libraries.Game.Graphics.Vulkan.VulkanDescriptorSet
use Libraries.Game.Graphics.Shaders.Vulkan.VulkanShaderProgram
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Vulkan.VulkanCommandBuffer
use Libraries.Game.Graphics.Vulkan.Commands.BindDescriptorSetCommand
use Libraries.Compute.Matrix4
use Libraries.Containers.Number32BitArray

class DefaultShaderMapping2DVulkan is VulkanShaderMapping
    
// The sampler used to access 2D textures.
VulkanSampler immutableSampler = undefined
    
// Resources for the Camera uniform.
    Array<VulkanBuffer> cameraBuffers
    Array<VulkanNumber32BitMappedMemory> cameraMappings
    Array<VulkanDescriptorSet> cameraDescriptors
    
    // Layouts used to bind descriptors before drawing.
VulkanDescriptorSetLayout descriptorSetLayout = undefined
VulkanPipelineLayout pipelineLayout = undefined
    
    GameStateManager gameState
    
// An internal array used to transfer data from Matrix4 objects to mapped memory.
    Number32BitArray matrix4Array
    
on create
        matrix4Array:SetSize(16)
    end
    
/*This action is used to setup the values of a VulkanPipelineInfo that will be used to create the
VulkanPipeline needed for the shader program. This can also be used to create and keep copies of
any Vulkan resources that will be needed to send or change shader data.*/
    action CreatePipelineInfo(VulkanShaderProgram program, VulkanDevice device) returns VulkanPipelineInfo
        VulkanPipelineInfo info
        
//VulkanShaderManager shaderManager = cast(VulkanShaderManager, gameState:GetShaderManager())
            //Shader vertexShader = shaderManager:GetDefaultVertexShader2D()
            //Shader fragmentShader = shaderManager:GetDefaultFragmentShader2D()
//
            //Array<Shader> shaders
            //shaders:Add(vertexShader)
            //shaders:Add(fragmentShader)

            //VulkanPipelineCache cache = shaderManager:GetPipelineCache()
            VulkanConstants constants

            Array<VulkanVertexInputAttributeDescription> vertexAttributes = info:GetVertexInputAttributeDescriptions()
            Array<VulkanVertexInputBindingDescription> vertexBindings = info:GetVertexInputBindingDescriptions()
            Array<VulkanPipelineColorBlendAttachmentState> colorBlendAttachments = info:GetPipelineColorBlendAttachmentStates()

            // Create the vertex attribute descriptions, and the binding that will indicate how far apart each vertex's data is in the buffers.
    
            // How far into the data structure the current piece of data is.
            integer offset = 0

            // Position attribute
            VulkanVertexInputAttributeDescription positionAttribute
            positionAttribute:Set(0, 0, constants:FORMAT_R32G32B32_SFLOAT, offset)
            vertexAttributes:Add(positionAttribute)

            // Position is stored as 3 floats of 4 bytes each.
            offset = offset + (3 * 4)

            VulkanVertexInputAttributeDescription colorAttribute
            colorAttribute:Set(0, 1, constants:FORMAT_R8G8B8A8_UNORM, offset)
            vertexAttributes:Add(colorAttribute)

            // The color attribute is made of 4 components of 1 byte each.
            offset = offset + 4



            // Texture coordinate attribute
            VulkanVertexInputAttributeDescription textureCoordinatesAttribute
            textureCoordinatesAttribute:Set(0, 2, constants:FORMAT_R32G32_SFLOAT, offset)
            vertexAttributes:Add(textureCoordinatesAttribute)

            // Texture coordinates are stored as 2 floats of 4 bytes each.
            offset = offset + (2 * 4)


            // Texture index attribute. Used to access the right texture from the global texture array in the 2D fragment shader.
            VulkanVertexInputAttributeDescription textureIndexAttribute
            textureIndexAttribute:Set(0, 3, constants:FORMAT_R32_UINT, offset)
            vertexAttributes:Add(textureIndexAttribute)

            // Texture index is stored as a 32-bit (4 byte) integer.
            offset = offset + 4
            
            // Binding description, indicates how far apart each vertex's data is
            VulkanVertexInputBindingDescription bindingDescription
  
            bindingDescription:Set(0, offset, constants:VERTEX_INPUT_RATE_VERTEX)
//            output "WARNING: HARD-SETTING PAINTER2D DEFAULT PIPELINE STRIDE TO 24"
//            bindingDescription:Set(0, 24, constants:VERTEX_INPUT_RATE_VERTEX)
            vertexBindings:Add(bindingDescription)



            // Define the color blend attachment states, and use default transparency values.
            VulkanPipelineColorBlendAttachmentState colorBlend
            colorBlend:EnableDefaultTransparency()
            colorBlendAttachments:Add(colorBlend)


            // Define the dynamic states permitted by the pipeline. For our case, we want to be able to dynamically adjust viewport and scissor values.
            Array<integer> dynamicStates = info:GetDynamicStates()
            dynamicStates:Add(constants:DYNAMIC_STATE_VIEWPORT)
            dynamicStates:Add(constants:DYNAMIC_STATE_SCISSOR)


            // Create a sampler. We'll use this to access texture information in the shaders.
            VulkanSampler immutableSampler
            VulkanSamplerInfo defaultSamplerInfo
            immutableSampler:Create(device, defaultSamplerInfo)
            me:immutableSampler = immutableSampler


            // Create a structure for the uniforms. We'll need this for the projection matrix (i.e. the camera).
            // Define how our uniforms will be laid out.
            VulkanDescriptorSetLayout descriptorLayout
            Array<VulkanDescriptorSetLayoutBinding> descriptorBindings            

            // Describe the binding of the uniform buffers.
            VulkanDescriptorSetLayoutBinding uniformsBinding
            uniformsBinding:SetBinding(0)
            uniformsBinding:SetDescriptorType(constants:DESCRIPTOR_TYPE_UNIFORM_BUFFER)
            uniformsBinding:SetDescriptorCount(1)
            uniformsBinding:SetStageFlags(constants:SHADER_STAGE_VERTEX_BIT)
            descriptorBindings:Add(uniformsBinding)

            // Describe the binding of the image sampler
            VulkanDescriptorSetLayoutBinding samplerBinding
            samplerBinding:SetBinding(1)
            samplerBinding:SetDescriptorType(constants:DESCRIPTOR_TYPE_SAMPLER)
            samplerBinding:SetDescriptorCount(1)
            samplerBinding:SetStageFlags(constants:SHADER_STAGE_FRAGMENT_BIT)
            Array<VulkanSampler> immutableSamplers
            immutableSamplers:Add(immutableSampler)
            samplerBinding:SetImmutableSamplers(immutableSamplers)
            descriptorBindings:Add(samplerBinding)


            descriptorLayout:Create(device, descriptorBindings)
            descriptorSetLayout = descriptorLayout
            
            Array<VulkanDescriptorSetLayout> descriptorLayouts
            descriptorLayouts:Add(descriptorLayout)

            // We also need the descriptor set layout for the global textures. The texture manager holds onto that layout, so go fetch it.
            GameStateManager manager
            VulkanGraphics graphics = cast(VulkanGraphics, manager:GetGameGraphics())
            VulkanTextureManager textureManager = graphics:GetTextureManager()
            descriptorLayouts:Add(textureManager:GetGlobalTextureDescriptorSetLayout())
            

            VulkanPipelineLayout pipelineLayout = info:GetLayout()
            pipelineLayout:Create(device, descriptorLayouts)
            me:pipelineLayout = pipelineLayout

            // The info structure has lots of other values we could customize, but all of the default values will work well for us here.
            // We can now create the Pipeline itself.
            //boolean success = pipeline:Create(device, renderPass, cache, shaders, info)
        //    
            //if success
                //defaultPipeline = pipeline
            //else
                //pipeline:Dispose()
            //end

            // Create the buffers for the uniforms. We'll need to know how many images the swapchain has for this.
            // This is because we'll need separate buffers for each swapchain image, so each image can be done in parallel.
            // Once the buffers are made, we can also combine them together with the layouts to create our final DescriptorSets.
            VulkanDescriptorSetManager descriptorSetManager = graphics:GetDescriptorSetManager()

            integer counter = 0
            repeat while counter < graphics:GetSwapchain():GetImageCount()
                // These buffers are for a 4x4 matrix of floats, so 4 bytes * 16 values.
                VulkanBuffer buffer
                buffer:CreateMappableBuffer(device, 4 * 16, constants:BUFFER_USAGE_UNIFORM_BUFFER_BIT)
                cameraBuffers:Add(buffer)

                VulkanNumber32BitMappedMemory mapping = buffer:MapToNumber32BitMemory()
                cameraMappings:Add(mapping)

                VulkanDescriptorResourcesInfo cameraResourcesInfo
                cameraResourcesInfo:SetDescriptorType(constants:DESCRIPTOR_TYPE_UNIFORM_BUFFER)
                cameraResourcesInfo:AddBufferInfo(cameraBuffers:Get(counter), 0, cameraBuffers:Get(counter):GetSize())
                

                VulkanDescriptorSet set = descriptorSetManager:CreateDescriptorSet(descriptorLayout, cameraResourcesInfo)
                cameraDescriptors:Add(set)

                counter = counter + 1
            end
        
        return info
    end
    
action Begin(ShaderProgram program, Camera camera)
end
    
    action Begin(ShaderProgram program, Camera camera, VulkanCommandBuffer commandBuffer, integer swapchainIndex)
        
VulkanNumber32BitMappedMemory currentCameraMapping = cameraMappings:Get(swapchainIndex)
        VulkanDescriptorSet currentCameraDescriptor = cameraDescriptors:Get(swapchainIndex)
        
Number32BitArray projectionViewMatrix = MatrixToArray(camera:GetCombinedMatrix())
        currentCameraMapping:Set(projectionViewMatrix)
        
VulkanGraphics graphics = cast(VulkanGraphics, gameState:GetGameGraphics())
VulkanDescriptorSet texturesDescriptorSet = graphics:GetTextureManager():GetGlobalTextureDescriptorSet()
        
BindDescriptorSetCommand descriptorBind
            descriptorBind:SetPipelineLayout(pipelineLayout)
            descriptorBind:SetDescriptorSet(currentCameraDescriptor)
            commandBuffer:Record(descriptorBind)

            BindDescriptorSetCommand texturesBind
            texturesBind:SetPipelineLayout(pipelineLayout)
            texturesBind:SetDescriptorSet(texturesDescriptorSet)
            texturesBind:SetSetIndex(1)
            commandBuffer:Record(texturesBind)
    end

    action End(ShaderProgram program)
    end
    
private action MatrixToArray(Matrix4 matrix) returns Number32BitArray
        matrix4Array:Set(0, matrix:row0column0)
        matrix4Array:Set(1, matrix:row1column0)
        matrix4Array:Set(2, matrix:row2column0)
        matrix4Array:Set(3, matrix:row3column0)
        matrix4Array:Set(4, matrix:row0column1)
        matrix4Array:Set(5, matrix:row1column1)
        matrix4Array:Set(6, matrix:row2column1)
        matrix4Array:Set(7, matrix:row3column1)
        matrix4Array:Set(8, matrix:row0column2)
        matrix4Array:Set(9, matrix:row1column2)
        matrix4Array:Set(10, matrix:row2column2)
        matrix4Array:Set(11, matrix:row3column2)
        matrix4Array:Set(12, matrix:row0column3)
        matrix4Array:Set(13, matrix:row1column3)
        matrix4Array:Set(14, matrix:row2column3)
        matrix4Array:Set(15, matrix:row3column3)
        return matrix4Array
    end
    
end
