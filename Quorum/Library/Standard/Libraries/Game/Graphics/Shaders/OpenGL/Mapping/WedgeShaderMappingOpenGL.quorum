package Libraries.Game.Graphics.Shaders.OpenGL.Mapping

use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Camera
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.DefaultVertexAttributes2D
use Libraries.Containers.Array
use Libraries.Containers.Integer32BitArray
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.Graphics.DrawableShape
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Interface.Controls.Charts.Graphics.Wedge

class WedgeShaderMappingOpenGL is DefaultShaderMapping2DOpenGL

    ShaderProgram program = undefined
    GameStateManager manager

    constant integer BATCH_SIZE = 200

    VertexAttribute innerRadiusAttribute = undefined
    VertexAttribute outerRadiusAttribute = undefined
    VertexAttribute minAngleAttribute = undefined
    VertexAttribute maxAngleAttribute = undefined
    VertexAttribute originPointAttribute = undefined

    /*
    This action is called when the mapping is created. It must be used to set
    the initial values of the Mesh using the Mesh's Load action.
    */
    private action InitializeMesh(Mesh mesh)
        DefaultVertexAttributes2D attributes
        Array<VertexAttribute> extraAttributes
        VertexAttribute dummy
        innerRadiusAttribute = dummy:CustomNumberAttribute("a_innerRadius")
        outerRadiusAttribute = dummy:CustomNumberAttribute("a_outerRadius")
        minAngleAttribute = dummy:CustomNumberAttribute("a_minAngle")
        maxAngleAttribute = dummy:CustomNumberAttribute("a_maxAngle")
        originPointAttribute = dummy:CustomVectorAttribute("a_originPoint", 2)
        extraAttributes:Add(innerRadiusAttribute)
        extraAttributes:Add(outerRadiusAttribute)
        extraAttributes:Add(minAngleAttribute)
        extraAttributes:Add(maxAngleAttribute)
        extraAttributes:Add(originPointAttribute)
        attributes:SetAttributes(extraAttributes)
        
        /*
        We need a mesh with enough 32-bit float values for the vertices, and the correct number of indices.
        The "vertexSize" value is calculated as bytes, not floats, so we divide by 4 to get the correct number.
        We multiply by 4 because we'll be rendering quads (4 points per Drawable).

        For the indices, we need 2 triangles (3 points each) to render a quad, so we multiply by 6 to store the values in the array.
        */
        mesh:Load(false, (attributes:parent:VertexAttributes:vertexSize / 4) * 4 * BATCH_SIZE, 6 * BATCH_SIZE, attributes)

        integer length = 6 * BATCH_SIZE
        Integer32BitArray indices
        indices:SetSize(length)

        integer indexCounter = 0
        integer vertexCounter = 0

        // Setup the indices to make pairs of triangles to render quads of vertices.
        repeat while indexCounter < length
            indices:Set(indexCounter, vertexCounter)
            indices:Set(indexCounter + 1, vertexCounter + 1)
            indices:Set(indexCounter + 2, vertexCounter + 2)
            indices:Set(indexCounter + 3, vertexCounter + 2)
            indices:Set(indexCounter + 4, vertexCounter + 3)
            indices:Set(indexCounter + 5, vertexCounter)

            indexCounter = indexCounter + 6
            vertexCounter = vertexCounter + 4
        end

        mesh:SetIndices(indices)
    end

    action SetVertexData(ShaderProgram program, Drawable drawable, DrawableShape shape)
        if drawable is Wedge
            Wedge wedge = cast(Wedge, drawable)
            shape:SetDataForAllVertices(outerRadiusAttribute:offset / 4, wedge:GetOuterRadius())
            shape:SetDataForAllVertices(innerRadiusAttribute:offset / 4, wedge:GetInnerRadius())
            shape:SetDataForAllVertices(minAngleAttribute:offset / 4, wedge:GetStartPercentage())
            shape:SetDataForAllVertices(maxAngleAttribute:offset / 4, wedge:GetEndPercentage())
            
            number originX = 0
            number originY = 0

            if wedge:GetParent() = undefined
                originX = wedge:GetGlobalX() + wedge:GetWidth() / 2
                originY = wedge:GetGlobalY() + wedge:GetHeight() / 2
            else
                Item2D item = wedge:GetParent()
                originX = item:GetGlobalX() + item:GetWidth() / 2
                originY = item:GetGlobalY() + item:GetHeight() / 2
            end

            shape:SetDataForAllVertices(originPointAttribute:offset / 4, originX)
            shape:SetDataForAllVertices(originPointAttribute:offset / 4 + 1, originY)
        end
    end

    action End(ShaderProgram program)
        me:program = undefined
    end

    /*
    This action is called when it is time for the ShaderMapping to render its current batch with the given ShaderProgram.
    */
    action RenderBatch(ShaderProgram program, Camera camera)
        parent:BatchingShaderMapping2DOpenGL:RenderBatch(program, camera)
    end

end