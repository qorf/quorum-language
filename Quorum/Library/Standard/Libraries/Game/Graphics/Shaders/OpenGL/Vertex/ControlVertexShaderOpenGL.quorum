package Libraries.Game.Graphics.Shaders.OpenGL.Vertex
use Libraries.Game.Graphics.Shaders.Shader
use Libraries.Game.Graphics.Shaders.DefaultAttributeNames

class ControlVertexShaderOpenGL is Shader

    constant text SHADER_NAME = "Control Vertex Shader"

    on create
        SetType(parent:Shader:VERTEX_SHADER)
        SetName(SHADER_NAME)

        DefaultAttributeNames attributes
        SetCode(GetVersionHeader() +
"
" + GetPreprocessorDefinitions() + "
" +
"in vec4 " + attributes:POSITION + ";
in vec4 " + attributes:COLOR + ";
in vec2 " + attributes:TEXTURE_COORDINATES + "0;
in vec4 a_borderColor;
in vec4 a_rounding;
in float a_leftBorder;
in float a_rightBorder;
in float a_bottomBorder;
in float a_topBorder;
in float a_aspectRatio;
in float a_antiAlias;
uniform mat4 u_projTrans;
out vec4 v_color;
out vec4 v_borderColor;
out vec2 v_texCoords;
out vec4 v_rounding;
out vec4 v_borderThickness;
out float v_aspectRatio;
out float v_antiAlias;
" + GetExtraInputs() + "

" + GetExtraFunctions() + "

void main()
{
    v_color = " + attributes:COLOR + ";
    v_color.a = v_color.a * (255.0/254.0);
    v_borderColor = a_borderColor;
    v_texCoords = " + attributes:TEXTURE_COORDINATES + "0;
    v_rounding = a_rounding;
    v_borderThickness = vec4(a_leftBorder, a_topBorder, a_rightBorder, a_bottomBorder);
    v_aspectRatio = a_aspectRatio;
    v_antiAlias = a_antiAlias;

    " + GetAppendedCode() + "

    gl_Position =  u_projTrans * " + attributes:POSITION + ";
}"
)
    end

    private action GetPreprocessorDefinitions returns text
        return ""
    end

    private action GetExtraInputs returns text
        return ""
    end

    private action GetExtraFunctions returns text
        return ""
    end

    private action GetAppendedCode returns text
        return ""
    end

end