package Libraries.Game.Graphics.Shaders.OpenGL.Mapping

use Libraries.Game.Graphics.Shaders.ShaderMapping
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Control
use Libraries.Interface.Views.View2D
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Checkbox
use Libraries.Interface.Views.ToggleView
use Libraries.Interface.Controls.Tab
use Libraries.Game.Graphics.DrawableShape
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.DefaultVertexAttributes2D
use Libraries.Containers.Integer32BitArray
use Libraries.Containers.Number32BitArray
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Containers.Array
use Libraries.Game.NumberUtilities
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.WebApplication
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Interface.Views.PatternControlShaderView

class PatternControlShaderMappingOpenGL is BatchingShaderMapping2DOpenGL

    ShaderProgram program = undefined
    GameStateManager manager
    NumberUtilities utility

    constant integer BATCH_SIZE = 200

    VertexAttribute borderColorAttribute = undefined
    VertexAttribute arrayIndexAttribute = undefined
    VertexAttribute roundingAttribute = undefined
    VertexAttribute leftBorderAttribute = undefined
    VertexAttribute rightBorderAttribute = undefined
    VertexAttribute bottomBorderAttribute = undefined
    VertexAttribute topBorderAttribute = undefined
    VertexAttribute aspectRatioAttribute = undefined
    VertexAttribute antiAliasAttribute = undefined
    VertexAttribute patternDistanceAttribute = undefined
    VertexAttribute patternRotationAttribute = undefined
    VertexAttribute patternThicknessAttribute = undefined
    VertexAttribute patternColorAttribute = undefined

    /*
    This action is called when the mapping is created. It must be used to set
    the initial values of the Mesh using the Mesh's Load action.
    */
    private action InitializeMesh(Mesh mesh)
        DefaultVertexAttributes2D attributes
        Array<VertexAttribute> extraAttributes
        VertexAttribute dummy
        borderColorAttribute = dummy:CustomColorAttribute("a_borderColor")
        roundingAttribute = dummy:CustomNormalizedVector4Attribute("a_rounding")
        leftBorderAttribute = dummy:CustomNumberAttribute("a_leftBorder")
        rightBorderAttribute = dummy:CustomNumberAttribute("a_rightBorder")
        bottomBorderAttribute = dummy:CustomNumberAttribute("a_bottomBorder")
        topBorderAttribute = dummy:CustomNumberAttribute("a_topBorder")
        aspectRatioAttribute = dummy:CustomNumberAttribute("a_aspectRatio")
        antiAliasAttribute = dummy:CustomNumberAttribute("a_antiAlias")
        patternDistanceAttribute = dummy:CustomNumberAttribute("a_patternDistance")
        patternRotationAttribute = dummy:CustomNumberAttribute("a_patternRotation")
        patternThicknessAttribute = dummy:CustomNumberAttribute("a_patternThickness")
        patternColorAttribute = dummy:CustomColorAttribute("a_patternColor")
        extraAttributes:Add(borderColorAttribute)
        extraAttributes:Add(roundingAttribute)
        extraAttributes:Add(leftBorderAttribute)
        extraAttributes:Add(rightBorderAttribute)
        extraAttributes:Add(bottomBorderAttribute)
        extraAttributes:Add(topBorderAttribute)
        extraAttributes:Add(aspectRatioAttribute)
        extraAttributes:Add(antiAliasAttribute)
        extraAttributes:Add(patternDistanceAttribute)
        extraAttributes:Add(patternRotationAttribute)
        extraAttributes:Add(patternThicknessAttribute)
        extraAttributes:Add(patternColorAttribute)
        attributes:SetAttributes(extraAttributes)
        
        /*
        We need a mesh with enough 32-bit float values for the vertices, and the correct number of indices.
        The "vertexSize" value is calculated as bytes, not floats, so we divide by 4 to get the correct number.
        We multiply by 4 because we'll be rendering quads (4 points per Drawable).

        For the indices, we need 2 triangles (3 points each) to render a quad, so we multiply by 6 to store the values in the array.
        */
        mesh:Load(false, (attributes:parent:VertexAttributes:vertexSize / 4) * 4 * BATCH_SIZE, 6 * BATCH_SIZE, attributes)

        integer length = 6 * BATCH_SIZE
        Integer32BitArray indices
        indices:SetSize(length)

        integer indexCounter = 0
        integer vertexCounter = 0

        // Setup the indices to make pairs of triangles to render quads of vertices.
        repeat while indexCounter < length
            indices:Set(indexCounter, vertexCounter)
            indices:Set(indexCounter + 1, vertexCounter + 1)
            indices:Set(indexCounter + 2, vertexCounter + 2)
            indices:Set(indexCounter + 3, vertexCounter + 2)
            indices:Set(indexCounter + 4, vertexCounter + 3)
            indices:Set(indexCounter + 5, vertexCounter)

            indexCounter = indexCounter + 6
            vertexCounter = vertexCounter + 4
        end

        mesh:SetIndices(indices)
    end

    action SetVertexData(ShaderProgram program, Drawable drawable, DrawableShape shape)
        number leftBorder = 0
        number topBorder = 0
        number rightBorder = 0
        number bottomBorder = 0

        number bottomLeftRounding = 0
        number bottomRightRounding = 0
        number topRightRounding = 0
        number topLeftRounding = 0

        number borderThickness = 0
        ColorGroup borderColor = undefined
        ColorGroup backgroundColor = undefined

        number width = drawable:GetWidth() * drawable:GetScaleX()
        number height = drawable:GetHeight() * drawable:GetScaleY()
        number aspectRatio = width / height

        boolean selected = false

        // The degree of rotation needed for this particular pattern. Determined by the pattern constant.
        number rotation = 0

        // The interface scaling on the Control, or 1 if no scaling is available.
        number interfaceScale = 1

        ChartOptions chartOptions

        /*
        We want to get the control or layout properties used to define the element. We'll check these places, in order of priority:
        1. The drawable's shader data
        2. If the drawable itself is a Control
        3. If the drawable is a view, see if the view is attached to a Control
        */
        if drawable:GetShaderData() is LayoutProperties
            LayoutProperties properties = cast(LayoutProperties, drawable:GetShaderData())
            
            interfaceScale = properties:GetInterfaceScale()
            borderThickness = (1.0 / height) * (properties:GetBorderThickness() * interfaceScale)

            if borderThickness > 0
                if properties:HasLeftBorder()
                    leftBorder = borderThickness
                end
                if properties:HasTopBorder()
                    topBorder = borderThickness
                end
                if properties:HasRightBorder()
                    rightBorder = borderThickness
                end
                if properties:HasBottomBorder()
                    bottomBorder = borderThickness
                end
            end

            bottomLeftRounding = properties:GetBottomLeftRounding()
            bottomRightRounding = properties:GetBottomRightRounding()
            topRightRounding = properties:GetTopRightRounding()
            topLeftRounding = properties:GetTopLeftRounding()

            /*
            Determine how much the pixel rounding contributes to the overall percentage.
            At a minimum, 0 pixels of rounding contributes nothing. The maximum contribution
            possible is a number of pixels equal to half of the width or height (whichever is
            smaller). We calculate using half the dimensions because each corner represents one
            quadrant of the rectangle.
            */
            number halfSize = width / 2.0
            if height / 2.0 < halfSize
                halfSize = height / 2.0
            end

            bottomLeftRounding = bottomLeftRounding + properties:GetBottomLeftPixelRounding() * interfaceScale / halfSize
            bottomRightRounding = bottomRightRounding + properties:GetBottomRightPixelRounding() * interfaceScale / halfSize
            topLeftRounding = topLeftRounding + properties:GetTopLeftPixelRounding() * interfaceScale / halfSize
            topRightRounding = topRightRounding + properties:GetTopRightPixelRounding() * interfaceScale / halfSize

            // Clamp the values between 0 and 1.
            if bottomLeftRounding > 1.0
                bottomLeftRounding = 1.0
            elseif bottomLeftRounding < 0
                bottomLeftRounding = 0
            end

            if bottomRightRounding > 1.0
                bottomRightRounding = 1.0
            elseif bottomRightRounding < 0
                bottomRightRounding = 0
            end

            if topLeftRounding > 1.0
                topLeftRounding = 1.0
            elseif topLeftRounding < 0
                topLeftRounding = 0
            end

            if topRightRounding > 1.0
                topRightRounding = 1.0
            elseif topRightRounding < 0
                topRightRounding = 0
            end

            if properties:GetBorderColor() not= undefined
                borderColor = properties:GetBorderColor():GetBottomLeft()
            end
            backgroundColor = properties:GetBackgroundColor()
        else
            Control control = undefined

            if drawable:GetShaderData() is Control
                control = cast(Control, drawable:GetShaderData())
            elseif drawable is Control
                control = cast(Control, cast(Object, drawable))
            elseif drawable is View2D
                View2D view = cast(View2D, cast(Object, drawable))
                Item2D item = view:GetItem()
                if item is Control
                    control = cast(Control, item)
                end
                if view is ToggleView
                    ToggleView toggle = cast(ToggleView, view)
                    selected = toggle:GetToggleState()
                end

                if view is PatternControlShaderView
                    PatternControlShaderView patternView = cast(PatternControlShaderView, view)
                    integer patternType = patternView:GetPatternType()

                    if patternType = chartOptions:VERTICAL_LINES or patternType = chartOptions:PLAIN_CROSSHATCH
                        rotation = 0
                    elseif patternType = chartOptions:HORIZONTAL_LINES
                        rotation = 90
                    elseif patternType = chartOptions:DIAGONAL_DOWN_LINES or patternType = chartOptions:DIAGONAL_CROSSHATCH or patternType = chartOptions:PINPOINT_DASHES
                        rotation = 45
                    elseif patternType = chartOptions:DIAGONAL_UP_LINES
                        rotation = 135
                    end
                end
            end

            if control not= undefined
                interfaceScale = control:GetInterfaceScale()

                // If we're working with a chart drawable, figure out what kind of pattern it's using to determine the needed rotation value.
                if control is ChartDrawable
                    ChartDrawable element = cast(ChartDrawable, control)
                    integer patternType = element:GetPattern()

                    if patternType = chartOptions:VERTICAL_LINES or patternType = chartOptions:PLAIN_CROSSHATCH
                        rotation = 0
                    elseif patternType = chartOptions:HORIZONTAL_LINES
                        rotation = 90
                    elseif patternType = chartOptions:DIAGONAL_DOWN_LINES or patternType = chartOptions:DIAGONAL_CROSSHATCH or patternType = chartOptions:PINPOINT_DASHES
                        rotation = 45
                    elseif patternType = chartOptions:DIAGONAL_UP_LINES
                        rotation = 135
                    end
                end

                borderThickness = (1.0 / height) * (control:GetBorderThickness() * interfaceScale)

                if borderThickness > 0
                    if control:HasLeftBorder()
                        leftBorder = borderThickness
                    end
                    if control:HasTopBorder()
                        topBorder = borderThickness
                    end
                    if control:HasRightBorder()
                        rightBorder = borderThickness
                    end
                    if control:HasBottomBorder()
                        bottomBorder = borderThickness
                    end
                end
    
                bottomLeftRounding = control:GetBottomLeftRounding()
                bottomRightRounding = control:GetBottomRightRounding()
                topRightRounding = control:GetTopRightRounding()
                topLeftRounding = control:GetTopLeftRounding()

                /*
                Determine how much the pixel rounding contributes to the overall percentage.
                At a minimum, 0 pixels of rounding contributes nothing. The maximum contribution
                possible is a number of pixels equal to half of the width or height (whichever is
                smaller). We calculate using half the dimensions because each corner represents one
                quadrant of the rectangle.
                */
                number halfSize = width / 2.0
                if height / 2.0 < halfSize
                    halfSize = height / 2.0
                end
    
                bottomLeftRounding = bottomLeftRounding + control:GetBottomLeftPixelRounding() * interfaceScale / halfSize
                bottomRightRounding = bottomRightRounding + control:GetBottomRightPixelRounding() * interfaceScale / halfSize
                topLeftRounding = topLeftRounding + control:GetTopLeftPixelRounding() * interfaceScale / halfSize
                topRightRounding = topRightRounding + control:GetTopRightPixelRounding() * interfaceScale / halfSize
    
                // Clamp the values between 0 and 1.
                if bottomLeftRounding > 1.0
                    bottomLeftRounding = 1.0
                elseif bottomLeftRounding < 0
                    bottomLeftRounding = 0
                end
    
                if bottomRightRounding > 1.0
                    bottomRightRounding = 1.0
                elseif bottomRightRounding < 0
                    bottomRightRounding = 0
                end
    
                if topLeftRounding > 1.0
                    topLeftRounding = 1.0
                elseif topLeftRounding < 0
                    topLeftRounding = 0
                end
    
                if topRightRounding > 1.0
                    topRightRounding = 1.0
                elseif topRightRounding < 0
                    topRightRounding = 0
                end

                /*
                Determine what color the control should be, based on how the user is interacting with it.
                We check a hierarchy of potential events, falling through to the next case if the event
                wasn't fulfilled or if there was no color assigned to that event.
                */
                if control:IsRenderingMouseDown()
                    backgroundColor = control:GetMouseDownColor()
                end

                if control:IsRenderingSelection() or selected
                    if control:IsRenderingFocus() = false
                        if backgroundColor = undefined
                            backgroundColor = control:GetUnfocusedSelectionColor()
                        end
                        if borderColor = undefined
                            borderColor = control:GetUnfocusedSelectionBorderColor()
                        end
                    end

                    if backgroundColor = undefined
                        backgroundColor = control:GetSelectionColor()
                    end
                    if borderColor = undefined
                        borderColor = control:GetSelectionBorderColor()
                    end
                end

                if backgroundColor = undefined and control:IsRenderingMouseOver()
                    backgroundColor = control:GetMouseOverColor()
                end

                if control:IsFocused()
                    if backgroundColor = undefined
                        backgroundColor = control:GetFocusColor()
                    end

                    if borderColor = undefined
                        borderColor = control:GetFocusBorderColor()
                    end
                end

                if backgroundColor = undefined
                    backgroundColor = control:GetBackgroundColor()
                end

                // Get the border color, as well.
                if borderColor = undefined
                    borderColor = control:GetBorderColor()
                end
            end
        end

        if backgroundColor not= undefined
            drawable:GetDrawableShape():SetColor(backgroundColor)
        end

        if borderColor not= undefined
            if borderColor is Color
                Color border = cast(Color, borderColor)
                shape:SetDataForAllVertices(borderColorAttribute:offset / 4, border:EncodeColorAsNumber())
            else
                Color bottomRight = borderColor:GetBottomRight()
                Color bottomLeft = borderColor:GetBottomLeft()
                Color topRight = borderColor:GetTopRight()
                Color topLeft = borderColor:GetTopLeft()
                shape:SetVertexData(borderColorAttribute:offset / 4, bottomRight:EncodeColorAsNumber())
                shape:SetVertexData(borderColorAttribute:offset / 4 + shape:GetVertexSize(), topRight:EncodeColorAsNumber())
                shape:SetVertexData(borderColorAttribute:offset / 4 + shape:GetVertexSize() * 2, bottomLeft:EncodeColorAsNumber())
                shape:SetVertexData(borderColorAttribute:offset / 4 + shape:GetVertexSize() * 3, topLeft:EncodeColorAsNumber())
            end
        else
            shape:SetDataForAllVertices(borderColorAttribute:offset / 4, 0)
        end

        if manager:GetApplication() is WebApplication
            // On some web browsers (such as Firefox) having all four values at 1.0 causes abberant rendering, because the packed value will become a malformed NaN value.
            if bottomRightRounding = 1.0 and topRightRounding = 1.0 and bottomLeftRounding = 1.0 and topLeftRounding = 1.0
                bottomRightRounding = 0.995
                topLeftRounding = 0.995
                bottomLeftRounding = 0.995
                topRightRounding = 0.995
            end
        end

        shape:SetDataForAllVertices(roundingAttribute:offset / 4, utility:PackNormalizedVector4(bottomRightRounding, topRightRounding, bottomLeftRounding, topLeftRounding))
        shape:SetDataForAllVertices(leftBorderAttribute:offset / 4, leftBorder)
        shape:SetDataForAllVertices(rightBorderAttribute:offset / 4, rightBorder)
        shape:SetDataForAllVertices(bottomBorderAttribute:offset / 4, bottomBorder)
        shape:SetDataForAllVertices(topBorderAttribute:offset / 4, topBorder)
        shape:SetDataForAllVertices(aspectRatioAttribute:offset / 4, aspectRatio)
        shape:SetDataForAllVertices(antiAliasAttribute:offset / 4, 1.0 / height)

        Math math
        // Currently we use index 0 for the pattern indices. These values aren't conveniently exposed from the drawables and currently are irrelevant.
        number patternDistance = math:Round(chartOptions:GetPatternDistanceFromPalette(0) * interfaceScale)
        number patternThickness = math:Round(chartOptions:GetPatternThicknessFromPalette(0) * interfaceScale)
        Color patternColor = chartOptions:GetPatternColorFromPalette(0)

        shape:SetDataForAllVertices(patternDistanceAttribute:offset / 4, patternDistance / width)
        shape:SetDataForAllVertices(patternRotationAttribute:offset / 4, math:DegreesToRadians(rotation))
        shape:SetDataForAllVertices(patternThicknessAttribute:offset / 4, patternThickness / width)
        shape:SetDataForAllVertices(patternColorAttribute:offset / 4, utility:PackNormalizedVector4(patternColor:GetRed(), patternColor:GetGreen(), patternColor:GetBlue(), patternColor:GetAlpha()))
    end

    /*
    This action is called when it is time for the ShaderMapping to render its current batch with the given ShaderProgram.
    */
    action RenderBatch(ShaderProgram program, Camera camera)
        parent:BatchingShaderMapping2DOpenGL:RenderBatch(program, camera)
    end

end