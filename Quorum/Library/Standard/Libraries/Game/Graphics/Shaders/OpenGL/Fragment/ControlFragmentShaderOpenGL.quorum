package Libraries.Game.Graphics.Shaders.OpenGL.Fragment

use Libraries.Game.Graphics.Shaders.Shader

class ControlFragmentShaderOpenGL is Shader

    constant text SHADER_NAME = "Control Fragment Shader"

    on create
        SetName(SHADER_NAME)
        SetType(parent:Shader:FRAGMENT_SHADER)
        SetCode(GetVersionHeader() + "
" + GetPreprocessorDefinitions() +
"
#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif

in LOWP vec4 v_color;
in LOWP vec4 v_borderColor;
in vec2 v_texCoords;
in vec4 v_rounding;
in vec4 v_borderThickness;
in float v_aspectRatio;
in float v_antiAlias;

uniform sampler2D u_texture;
" + GetExtraInputs() + "

layout (location = 0) out vec4 outputColor;

// Calculate how far a point is from the outer shell of a rounded rectangle.
// The rounding vector contains edge roundness values for:
// x: top-right
// y: bottom-right
// z: top-left
// w: bottom-left
float signedDistanceFunction(in vec2 point, in vec2 dimensions, in vec4 rounding)
{
    // We calculate as though the point is in the top-right quadrant.
    // If this isn't true, we need adjust which of the edge rounding values we use.
    rounding.xy = (point.x > 0.0) ? rounding.xy : rounding.zw;
    rounding.x = (point.y > 0.0) ? rounding.x : rounding.y;
    
    // We take the absolute value of the point to ensure we're calculating from the top-right quadrant
    vec2 calc = abs(point) - dimensions + rounding.x;
    return min(max(calc.x, calc.y), 0.0) + length(max(calc, 0.0)) - rounding.x;
}

" + GetExtraFunctions() + "

void main()
{
    vec4 rounding = v_rounding;
    vec4 borderThickness = v_borderThickness;
    float aspectRatio = v_aspectRatio;
    float antiAliasDistance = v_antiAlias;

    vec4 borderColor = v_borderColor;
    bool renderBorders = (borderThickness.x + borderThickness.y + borderThickness.z + borderThickness.w) > 0.0;
    bool renderAllBorders = (borderThickness.x > 0.0) && (borderThickness.y > 0.0) && (borderThickness.z > 0.0) && (borderThickness.w > 0.0);

    vec2 point = (v_texCoords.xy - 0.5) * 2.0;
    point.x *= aspectRatio;
    vec2 dimensions = vec2(aspectRatio, 1.0);

    float distance = signedDistanceFunction(point, dimensions, rounding);
    vec4 resultColor;

    if (renderAllBorders)
    {
        resultColor = mix(borderColor * texture(u_texture, v_texCoords), vec4(borderColor.rgb, 0.0), smoothstep(0.0, antiAliasDistance, distance));
        resultColor = mix(v_color * texture(u_texture, v_texCoords), resultColor, smoothstep(0.0, antiAliasDistance, distance + borderThickness.x + borderThickness.z));
    }
    else if (renderBorders)
    {
        // The enabled borders vector stores values for the sides in the following order:
        // x: right
        // y: top (y-positive: technically the bottom due to how GLSL handles texture coordinates)
        // z: left
        // w: bottom (y-negative)
        vec2 fillPoint = point - vec2(borderThickness.x - borderThickness.z, borderThickness.y - borderThickness.w);
        vec2 fillDimensions = vec2(dimensions.x - borderThickness.x - borderThickness.z, dimensions.y - borderThickness.y - borderThickness.w);
        float fillDistance = signedDistanceFunction(fillPoint, fillDimensions, rounding);
    
        resultColor = mix(borderColor * texture(u_texture, v_texCoords), vec4(borderColor.rgb, 0.0), smoothstep(0.0, antiAliasDistance, distance));
        resultColor = mix(v_color * texture(u_texture, v_texCoords), resultColor, smoothstep(0.0, antiAliasDistance, fillDistance));
    }
    else
    {
        resultColor = v_color * texture(u_texture, v_texCoords);
        resultColor = mix(resultColor, vec4(resultColor.rgb, 0.0), smoothstep(0.0, antiAliasDistance, distance));
    }

    " + GetAppendedCode() + "

    outputColor = resultColor;
}

")

    end

    private action GetPreprocessorDefinitions returns text
        return ""
    end

    private action GetExtraInputs returns text
        return ""
    end

    private action GetExtraFunctions returns text
        return ""
    end

    private action GetAppendedCode returns text
        return ""
    end

end