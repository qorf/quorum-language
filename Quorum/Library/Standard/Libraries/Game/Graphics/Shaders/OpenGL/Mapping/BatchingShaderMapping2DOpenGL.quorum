package Libraries.Game.Graphics.Shaders.OpenGL.Mapping

use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.DrawableShape
use Libraries.Game.Graphics.VertexData
use Libraries.Game.Graphics.Camera
use Libraries.Containers.Array
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Game.Graphics.OpenGL.OpenGLManager
use Libraries.Game.Graphics.Shaders.OpenGL.OpenGLShaderProgram
use Libraries.Game.Graphics.Shaders.ShaderMapping
use Libraries.Game.Graphics.Shaders.ShaderProgram

class BatchingShaderMapping2DOpenGL is ShaderMapping

    ShaderProgram program = undefined
    GameStateManager manager
    Mesh mesh

    integer vertexOffset = 0
    integer indexCount = 0

    Array<integer> vertexLocations = undefined

    integer projectionTransformID = -1
    integer textureID = -1

    on create
        InitializeMesh(mesh)
    end

    /*
    This action is called when the mapping is created. It must be used to set
    the initial values of the Mesh using the Mesh's Load action.
    */
    private blueprint action InitializeMesh(Mesh mesh)

    action GetVertexSize returns integer
        return mesh:GetVertexAttributes():vertexSize / 4
    end

    action Begin(ShaderProgram program, Camera camera)
        me:program = program

        GraphicsManager graphics = manager:GetGameGraphics()
        OpenGLConstants constants
        if graphics is OpenGLManager
            OpenGLManager openGL = cast(OpenGLManager, graphics)
openGL:SetDepthMask(true)
        openGL:EnableProperty(constants:GL_DEPTH_TEST)
        openGL:SetDepthFunction(constants:GL_LEQUAL)
        openGL:DisableProperty(constants:GL_CULL_FACE)
        end

            OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
// Grab and cache the input IDs if we don't already have them.
        if projectionTransformID < 0
            projectionTransformID = glProgram:GetShaderInputLocation("u_projTrans")
            textureID = glProgram:GetShaderInputLocation("u_texture")
        end

        // TO-DO: Replace hard-coded values with references to constants
        glProgram:SetShaderInputMatrix(projectionTransformID, camera:GetCombinedMatrix())
        glProgram:SetShaderInput(textureID, 0)
    end

    action End(ShaderProgram program)
        me:program = undefined
    end

    /*
    Returns the Mesh used by this ShaderMapping to support batching.
    By default, this returns undefined, but it can be overridden to
    provide a custom Mesh.

    If this action returns undefined, no batching will be performed
    using this ShaderMapping.
    */
    action GetBatchingMesh returns Mesh
        return mesh
    end

    /*
    This action returns the cached vertex locations of the provided VertexAttributes within
    the given ShaderProgram. The cached value will be calculated if it isn't available already.
    */
    private action GetCachedVertexLocations(ShaderProgram program, VertexAttributes attributes) returns Array<integer>
        if vertexLocations = undefined
            OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
            
            Array<integer> locations
            vertexLocations = locations

            integer i = 0
            repeat while i < attributes:GetSize()
                VertexAttribute attribute = attributes:GetAttribute(i)
                integer id = glProgram:GetVertexInputLocation(attribute:alias)

                if id >= 0
                    vertexLocations:Add(id)
                end

                i = i + 1
            end
        end

        return vertexLocations
    end
    
    /*
    This action is called just before the first item in a Batch is passed to the MapInputs call.
    */
    action BeginBatch(ShaderProgram program)
        vertexOffset = 0
        indexCount = 0
    end

    /*
    This action is called when it is time for the ShaderMapping to render its current batch with the given ShaderProgram.
    */
    action RenderBatch(ShaderProgram program, Camera camera)
        Array<integer> locations = GetCachedVertexLocations(program, mesh:GetVertexAttributes())
        if locations not= undefined
            program:Draw(mesh, camera, 0, indexCount, locations)
        else
            program:Draw(mesh, camera, 0, indexCount)
        end

        vertexOffset = 0
        indexCount = 0
    end

    action MapInputs(ShaderProgram program, Drawable drawable)
        DrawableShape shape = drawable:GetDrawableShape()

        Mesh mesh = GetBatchingMesh()
        VertexData data = mesh:GetVertexData()
        data:UpdateVertices(vertexOffset, shape:GetVertexData(), 0, shape:GetDataCount())

        vertexOffset = vertexOffset + shape:GetDataCount()
        indexCount = indexCount + shape:GetIndexCount()
    end


    /*
    This action determines if the provided Drawable can be included in the current batch.
    If this returns false, then the current batch must be rendered before this Drawable can
    be added.

    This action should only be called if the mapping supports batching. By default, a mapping
    that doesn't support batching will return false from this action.
    */
    action CanIncludeInBatch(ShaderProgram program, Drawable drawable) returns boolean
        return vertexOffset + drawable:GetDrawableShape():GetDataCount() < mesh:GetVertexData():GetMaxSize()
    end

    /*
    This action returns true if the ShaderMapping currently has a batch awaiting rendering,
    or false if there are no Drawables awaiting rendering in a batch.

    This action should only be called if the mapping supports batching. By default, a mapping
    that doesn't support batching will return false from this action.
    */
    action IsBatching returns boolean
        return vertexOffset not= 0
    end

end