package Libraries.Game.Graphics.Shaders.OpenGL.Fragment

/*
The CrosshatchPatternFragmentShaderPart isn't a full fragment shader, but rather
a post-processing "addendum" to be used alongside another, full shader,
such as the ControlFragmentShader.
*/
class CrosshatchPatternFragmentShaderPartOpenGL

    private action GetExtraInputs returns text
        return 
"in float v_patternDistance;
in float v_patternRotation;
in float v_patternThickness;
in vec4 v_patternColor;"
    end

    private action GetAppendedCode returns text
        return "resultColor = postProcess(resultColor);"
    end

    private action GetExtraFunctions returns text
        return "vec4 postProcess(vec4 startColor)
{
    vec2 point = (v_texCoords.xy - 0.5) * 2.0;
    point.x = point.x * v_aspectRatio;
    point = vec2(point.x * cos(v_patternRotation) - point.y * sin(v_patternRotation), point.y * cos(v_patternRotation) + point.x * sin(v_patternRotation));
    point.x = point.x / v_aspectRatio;
    point = (point.xy + 1.0) / 2.0;

    float x = mod(point.x, v_patternDistance);
    float y = mod(point.y, v_patternDistance * v_aspectRatio);
    float xDistance = abs(x - (v_patternDistance / 2.0)) / (v_patternThickness / 2.0);
    float yDistance = abs(y - (v_patternDistance * v_aspectRatio / 2.0)) / (v_patternThickness * v_aspectRatio / 2.0);
    float distance = min(xDistance, yDistance);

    vec4 result = mix(v_patternColor, startColor, smoothstep(0.0, 1.0, distance));
    result.a = startColor.a;

    return result;
}"
    end

end