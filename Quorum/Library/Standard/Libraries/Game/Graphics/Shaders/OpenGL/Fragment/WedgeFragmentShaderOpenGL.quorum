package Libraries.Game.Graphics.Shaders.OpenGL.Fragment

use Libraries.Game.Graphics.Shaders.Shader

class WedgeFragmentShaderOpenGL is Shader

    on create
        SetType(parent:Shader:FRAGMENT_SHADER)
        SetName("Wedge Fragment Shader")      

        SetCode(GetVersionHeader() + "
" + GetPreprocessorDefinitions() +
"
#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif
in LOWP vec4 v_color;
in vec2 v_texCoords;
in float v_innerRadius;
in float v_outerRadius;
in float v_minAngle;
in float v_maxAngle;
in vec2 v_originPoint;
in float v_aspectRatio;
uniform sampler2D u_texture;
layout (location = 0) out vec4 resultColor;

float PI = 3.1415926538;

" + GetExtraInputs() + "

" + GetExtraFunctions() + "

void main()
{
    float x = gl_FragCoord.x - v_originPoint.x;
    float y = gl_FragCoord.y - v_originPoint.y;
    vec2 point = vec2(x, y);
    float length = length(point);
    float angle = atan(x, y);
    if (angle < 0.0)
        angle = PI + (PI + angle);
    angle = angle / (2.0 * PI);

    if (angle < v_minAngle || angle > v_maxAngle || length < v_innerRadius || length > v_outerRadius)
        resultColor = vec4(0.0);
    else
        resultColor = v_color * texture(u_texture, v_texCoords);

    " + GetAppendedCode() + "
}")
    end

    private action GetPreprocessorDefinitions returns text
        return ""
    end

    private action GetExtraInputs returns text
        return ""
    end

    private action GetExtraFunctions returns text
        return ""
    end

    private action GetAppendedCode returns text
        return ""
    end

end