package Libraries.Game.Graphics.Shaders.OpenGL.Mapping

use Libraries.Compute.Matrix4
use Libraries.Compute.BitwiseOperations
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Renderable
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.Environment
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.DirectionalLightsAttribute
use Libraries.Game.Graphics.PointLight
use Libraries.Game.Graphics.PointLightsAttribute
use Libraries.Game.Graphics.Attributes
use Libraries.Game.Graphics.BlendingAttribute
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Attribute
use Libraries.Game.Graphics.IntegerAttribute
use Libraries.Game.Graphics.NumberAttribute
use Libraries.Game.Graphics.DepthTestAttribute
use Libraries.Game.Graphics.Color
use Libraries.Compute.Vector3
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.Graphics.TextureAttribute
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Game.Graphics.TextureBinder
use Libraries.Game.Graphics.AmbientCubemap
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Game.Graphics.VertexData
use Libraries.Compute.Matrix3
use Libraries.Containers.Number32BitArray
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Game.Graphics.OpenGL.OpenGLManager
use Libraries.Game.Graphics.Shaders.OpenGL.OpenGLShaderProgram
use Libraries.Game.Graphics.Shaders.ShaderMapping
use Libraries.Game.Graphics.Shaders.ShaderProgram

class DefaultShaderMapping3DOpenGL is ShaderMapping

    GameStateManager manager
    OpenGLConstants constants
    BitwiseOperations bits

    Camera camera = undefined
    Mesh currentMesh = undefined
    ShaderProgram program = undefined

    // Used to bind textures for models during each run of rendering.
    TextureBinder textureBinder

    boolean enableDiffuseTexture = false
    boolean enableSpecularTexture = false
    boolean enableLighting = false
    boolean enableSpecular = false
    boolean enableBlending = false
    boolean enableAlphaTest = false

    boolean lightsSet = false
    constant integer maxDirectionalLights = 2
    constant integer maxPointLights = 5

    // IDs for different shader inputs.
    boolean shaderIDsFetched = false

    integer enableDiffuseTextureID = -1
    integer enableSpecularTextureID = -1
    integer enableLightingID = -1
    integer enableSpecularID = -1
    integer enableBlendingID = -1
    integer enableAlphaTestID = -1

    integer projectionViewTransformID = -1
    integer worldTransformID = -1
    integer diffuseColorID = -1
    integer diffuseUVTransformID = -1   
    integer specularUVTransformID = -1 
    integer normalMatrixID = -1
    integer directionalLightCountID = -1
    integer pointLightCountID = -1
    integer ambientCubemapID = -1
    integer cameraPositionID = -1
    integer shininessID = -1
    integer diffuseTextureID = -1
    integer specularTextureID = -1
    integer specularColorID = -1
    integer opacityID = -1
    integer alphaTestID = -1
    integer vertexColorID = -1
    
    // Specific IDs and values for sub-fields of the directional/point light struct arrays    
    Array<integer> directionalLightColorID
    Array<integer> directionalLightDirectionID
    Array<integer> pointLightColorID
    Array<integer> pointLightPositionID
    Array<integer> pointLightIntensityID


    // Used to perform light calculations and transfer matrix data to the shader
    Matrix3 tempMatrix3
    Matrix4 tempMatrix4

    // Used for repeated vector calculations
    Vector3 tempVector3

    // Used to calculate ambient lighting
    AmbientCubemap ambientCubemap

    // Used to test which default attributes are present between the environment and material
    Attributes combinedAttributes

    // Used to store locations/ids for vertex inputs
    Array<integer> vertexLocations

    // TO-DO: Consider removing these if the attribute system changes (i.e. if these become irrelevant)
    // Dummy attributes, used to provide values for testing.
    BlendingAttribute blendingAttribute
    IntegerAttribute integerAttribute
    NumberAttribute numberAttribute
    DepthTestAttribute depthTestAttribute
    DirectionalLightsAttribute directionalLightsAttribute
    PointLightsAttribute pointLightsAttribute
    TextureAttribute textureAttribute
    ColorAttribute colorAttribute

    // Used to cache the locations/ids of known vertex inputs
    HashTable<integer, integer> vertexInputTable

    /* 
    Which faces of objects should be culled by the rendering system by default. 
    This is set in Begin if no value has been provided beforehand, and can be
    overridden by materials of individual renderables.
    This will default to GL_BACK (i.e. the system will not render the back faces of objects)
    */
    integer defaultCullFace = -1

    /*
    What function should be used to determine if a drawn object is in front of another or not
    (or to put it another way, to determine if an object is visible and or if it is obstructed by
    another object and shouldn't be rendered). This is set in Begin if no value has been provided
    beforehand, and can be overridden by materials of individual renderables.
    This will default to GL_LEQUAL (i.e., an object is in front of other objects if its depth value
    relative to the camera is less-or-equal to the depth of previous objects drawn).
    */
    integer defaultDepthFunction = -1


    // The last OpenGL property values set by this mapping.
    integer blendSource = -1
    integer blendDestination = -1
    integer depthFunction = -1
    number depthRangeNear = -1
    number depthRangeFar = -1
    boolean depthMask = false
    integer cullFace = -1

    action Begin(ShaderProgram glProgram, Camera camera)
        if me:program not= undefined
            alert("I am already mapping to a shader, so I can't Begin again. Call End first.")
        end

        me:camera = camera
        currentMesh = undefined
        me:program = glProgram

        textureBinder:Begin()
        
        OpenGLShaderProgram program = cast(OpenGLShaderProgram, glProgram:GetShaderProgramStrategy())

        if shaderIDsFetched = false
            enableDiffuseTextureID = program:GetShaderInputLocation("enableDiffuseTexture")
            enableSpecularTextureID = program:GetShaderInputLocation("enableSpecularTexture")
            enableLightingID = program:GetShaderInputLocation("enableLighting")
            enableSpecularID = program:GetShaderInputLocation("enableSpecular")
            enableBlendingID = program:GetShaderInputLocation("enableBlending")
            enableAlphaTestID = program:GetShaderInputLocation("enableAlphaTest")

            projectionViewTransformID = program:GetShaderInputLocation("u_projViewTrans")
            worldTransformID = program:GetShaderInputLocation("u_worldTrans")
            diffuseColorID = program:GetShaderInputLocation("u_diffuseColor")
            diffuseUVTransformID = program:GetShaderInputLocation("u_diffuseUVTransform")
            specularUVTransformID = program:GetShaderInputLocation("u_specularUVTransform")
            normalMatrixID = program:GetShaderInputLocation("u_normalMatrix")
            directionalLightCountID = program:GetShaderInputLocation("directionalLightCount")
            pointLightCountID = program:GetShaderInputLocation("pointLightCount")
            ambientCubemapID = program:GetShaderInputLocation("u_ambientCubemap[0]")
            cameraPositionID = program:GetShaderInputLocation("u_cameraPosition")
            shininessID = program:GetShaderInputLocation("u_shininess")
            diffuseTextureID = program:GetShaderInputLocation("u_diffuseTexture")
            specularTextureID = program:GetShaderInputLocation("u_specularTexture")
            specularColorID = program:GetShaderInputLocation("u_specularColor")
            opacityID = program:GetShaderInputLocation("u_opacity")
            alphaTestID = program:GetShaderInputLocation("u_alphaTest")
            vertexColorID = program:GetVertexInputLocation("a_color")
            
            directionalLightColorID:SetSize(maxDirectionalLights)
            directionalLightDirectionID:SetSize(maxDirectionalLights)
            integer i = 0
            repeat while i < maxDirectionalLights
                directionalLightColorID:Set(i,program:GetShaderInputLocation("u_dirLights[" + i + "].color"))
                directionalLightDirectionID:Set(i, program:GetShaderInputLocation("u_dirLights[" + i + "].direction"))
                i = i + 1
            end
            
            pointLightColorID:SetSize(maxPointLights)
            pointLightPositionID:SetSize(maxPointLights)
            i = 0
            repeat while i < maxPointLights
                pointLightColorID:Set(i, program:GetShaderInputLocation("u_pointLights[" + i + "].color"))
                pointLightPositionID:Set(i, program:GetShaderInputLocation("u_pointLights[" + i + "].position"))
                i = i + 1
            end

            shaderIDsFetched = true
        end

        // Set the projection-view transform
        tempMatrix4:Set(camera:GetCombinedMatrix())
        InvertViewZ(tempMatrix4)
        program:SetShaderInputMatrix(projectionViewTransformID, tempMatrix4)

        // Set the camera position
        program:SetShaderInput(cameraPositionID, camera:GetPosition():GetX(), camera:GetPosition():GetY(), camera:GetPosition():GetZ(), 1.1881 / (camera:GetFar() * camera:GetFar()))

        lightsSet = false

        // TO-DO: If the GL values are moved to a constants class, this doesn't need to be done as part of the Begin call, it can be in "on create" instead
        if defaultCullFace = -1
            GraphicsManager graphics = manager:GetGameGraphics()
            defaultCullFace = constants:GL_BACK
        end

        if defaultDepthFunction = -1
            GraphicsManager graphics = manager:GetGameGraphics()
            defaultDepthFunction = constants:GL_LEQUAL
        end

        BeginGraphicsState()
    end

    action End(ShaderProgram program)
        EndGraphicsState()

        me:program = undefined
        if currentMesh not= undefined
            currentMesh:Unbind(program)
            currentMesh = undefined
        end

        textureBinder:End()
    end

    action MapInputs(ShaderProgram glProgram, Renderable renderable)
        combinedAttributes:Empty()
        VertexAttributes vertices = renderable:meshPart:mesh:GetVertexAttributes()
        
        OpenGLShaderProgram program = cast(OpenGLShaderProgram, glProgram:GetShaderProgramStrategy())

        if currentMesh not= renderable:meshPart:mesh
            if currentMesh not= undefined
                currentMesh:Unbind(glProgram, vertexLocations)
            end

            currentMesh = renderable:meshPart:mesh
            Array<integer> locations = GetAttributeLocations(glProgram, vertices)
            currentMesh:Bind(glProgram, locations)
        end     


        if renderable:environment not= undefined
            combinedAttributes:Add(renderable:environment)
        end

        if renderable:material not= undefined
            combinedAttributes:Add(renderable:material)
        end

        if not combinedAttributes:HasAttribute(blendingAttribute:GetBlendedValue())
            EnableBlending(false)
        end

        BindMaterial(combinedAttributes)

        if vertices:HasAttribute(vertices:NORMAL)
            BindLights(combinedAttributes, renderable)
        else
            EnableLighting(false)
        end

        // If there's no vertex color attribute provided, ensure there's a default value instead.
        // If these are present, they'll be handled when the mesh is bound.
        if not (vertices:HasAttribute(vertices:COLOR_PACKED) or vertices:HasAttribute(vertices:COLOR_UNPACKED))
            program:DisableVertexInput(vertexColorID)
            program:SetDefaultVertexInputValue(vertexColorID, 1, 1, 1, 1)
        end

        // Setting uniform values for the shaders.

        // Set the world transform. The z value is inverted as a lazy hack to invert from a right-handed system to a left-handed one. 
        // This may change in the future.
        tempMatrix4:Set(renderable:worldTransform)
        InvertPositionZ(tempMatrix4)
        program:SetShaderInputMatrix(worldTransformID, tempMatrix4)
    end

    private action BeginGraphicsState
        /*
        Invalidate the cached values to guarantee these functions set the requested values.
        This is needed because these graphics values may have been modified by other shaders/mappings
        since the last time this was run.
        */
        depthFunction = -1
        depthMask = false
        enableBlending = true
        cullFace = -1

        SetDepthTest(defaultDepthFunction, 0, 1)
        SetDepthMask(true)
        EnableBlending(false)
        // TO-DO: Make this actually use "GL_NONE" from a GL Constants class
        SetCullFace(0)
    end

    private action EndGraphicsState
        SetDepthTest(0, 0, 1)
        SetDepthMask(false)
        EnableBlending(false)
        SetCullFace(0)
    end

    private action GetAttributeLocations(ShaderProgram glProgram, VertexAttributes attributes) returns Array<integer>
        vertexLocations:Empty(false)
        integer i = 0
        OpenGLShaderProgram program = cast(OpenGLShaderProgram, glProgram:GetShaderProgramStrategy())
        repeat while i < attributes:GetSize()
            VertexAttribute attribute = attributes:GetAttribute(i)
            integer key = attribute:GetKey()
            if vertexInputTable:HasKey(key)
                vertexLocations:Add(vertexInputTable:GetValue(key))
            else
                integer id = program:GetVertexInputLocation(attribute:alias)
                if id >= 0
                    vertexInputTable:Add(key, id)
                    vertexLocations:Add(id)
                else
                    // Unknown attribute: -1 indicates it should be skipped
                    vertexLocations:Add(-1)
                end
            end

            i = i + 1
        end
        return vertexLocations
    end

    private action SetBlendingFunction(integer source, integer destination)
        if source not= blendSource or destination not= blendDestination
            blendSource = source
            blendDestination = destination

            GraphicsManager graphics = manager:GetGameGraphics()
            if graphics is OpenGLManager
                OpenGLManager openGL = cast(OpenGLManager, graphics)
openGL:SetBlendFunction(source, destination)
            end
        end
    end

    private action SetCullFace(integer cullFace)
        if cullFace not= me:cullFace
            me:cullFace = cullFace
            GraphicsManager graphics = manager:GetGameGraphics()
            
if graphics is OpenGLManager
                OpenGLManager openGL = cast(OpenGLManager, graphics)
openGL:SetCullFace(cullFace)
                
if cullFace = 0
                openGL:DisableProperty(constants:GL_CULL_FACE)
            else
                openGL:EnableProperty(constants:GL_CULL_FACE)
            end
            end
            
        end
    end

    private action SetDepthTest(integer function, number near, number far)
        boolean wasEnabled = (depthFunction not= 0)
        boolean enabled = (function not= 0)

        GraphicsManager graphics = manager:GetGameGraphics()

        if depthFunction not= function
            depthFunction = function
            if graphics is OpenGLManager
                OpenGLManager openGL = cast(OpenGLManager, graphics)
if enabled
                openGL:EnableProperty(constants:GL_DEPTH_TEST)
                openGL:SetDepthFunction(depthFunction)
            else
                openGL:DisableProperty(constants:GL_DEPTH_TEST)
            end
            end
            
        end

        if enabled
            if wasEnabled = false or depthRangeNear not= near or depthRangeFar not= far
depthRangeNear = near
                depthRangeFar = far
                if graphics is OpenGLManager
OpenGLManager openGL = cast(OpenGLManager, graphics)
openGL:SetDepthRange(depthRangeNear, depthRangeFar)
                end
            end
        end
    end

    private action SetDepthMask(boolean mask)
        if depthMask not= mask
            GraphicsManager graphics = manager:GetGameGraphics()
if graphics is OpenGLManager
OpenGLManager openGL = cast(OpenGLManager, graphics)
openGL:SetDepthMask(mask)
                end
            depthMask = mask
        end
    end

    private action BindMaterial(Attributes attributes)
        integer cullFace = defaultCullFace
        integer depthFunction = defaultDepthFunction
        number depthRangeNear = 0.0
        number depthRangeFar = 1.0
        boolean depthMask = true
        boolean setAlphaTest = false
        boolean setDiffuseTexture = false
        boolean setSpecularTexture = false
        boolean setSpecular = false
        boolean setShininess = false
        boolean setDiffuseColor = false
        boolean setSpecularColor = false
        boolean setBlending = false

        Array<Attribute> array = attributes:GetAttributeArray()
        GraphicsManager graphics = manager:GetGameGraphics()
        
        OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())

        integer counter = 0
        repeat while counter < array:GetSize()
            Attribute attribute = array:Get(counter)
            integer type = attribute:GetType()
            if bits:And(type, blendingAttribute:GetBlendedValue()) = type
                BlendingAttribute current = cast(BlendingAttribute, attribute)
                EnableBlending(true)
                SetBlendingFunction(current:sourceFunction, current:destinationFunction)
                glProgram:SetShaderInput(opacityID, current:opacity)
                setBlending = true
            elseif bits:And(type, integerAttribute:GetCullFaceValue()) = type
                IntegerAttribute current = cast(IntegerAttribute, attribute)
                cullFace = current:value
            elseif bits:And(type, numberAttribute:GetAlphaTestValue()) = type
                NumberAttribute current = cast(NumberAttribute, attribute)
                EnableAlphaTest(true)
                glProgram:SetShaderInput(alphaTestID, current:value)
                setAlphaTest = true
            elseif bits:And(type, depthTestAttribute:GetDepthTestValue()) = type
                DepthTestAttribute current = cast(DepthTestAttribute, attribute)
                depthFunction = current:depthFunction
                depthRangeNear = current:depthRangeNear
                depthMask = current:depthMask
            elseif bits:And(type, textureAttribute:GetDiffuseValue()) = type
                EnableDiffuseTexture(true)

                TextureAttribute current = cast(TextureAttribute, attribute)
                integer unit = textureBinder:Bind(current:descriptor)
                glProgram:SetShaderInput(diffuseTextureID, unit)
                glProgram:SetShaderInput(diffuseUVTransformID, current:offsetU, current:offsetV, current:scaleU, current:scaleV)

                setDiffuseTexture = true
            elseif bits:And(type, textureAttribute:GetSpecularValue()) = type
                EnableSpecularTexture(true)
                EnableSpecular(true)

                TextureAttribute current = cast(TextureAttribute, attribute)
                integer unit = textureBinder:Bind(current:descriptor)
                glProgram:SetShaderInput(specularTextureID, unit)
                glProgram:SetShaderInput(specularUVTransformID, current:offsetU, current:offsetV, current:scaleU, current:scaleV)

                setSpecularTexture = true
                setSpecular = true
            elseif bits:And(type, colorAttribute:GetSpecularValue()) = type
                EnableSpecular(true)

                ColorAttribute current = cast(ColorAttribute, attribute)
                glProgram:SetShaderInput(specularColorID, current:color)

                setSpecularColor = true
                setSpecular = true
            elseif bits:And(type, colorAttribute:GetDiffuseValue()) = type
                ColorAttribute current = cast(ColorAttribute, attribute)
                glProgram:SetShaderInput(diffuseColorID, current:color)
                setDiffuseColor = true
            elseif bits:And(type, numberAttribute:GetShininessValue()) = type
                NumberAttribute current = cast(NumberAttribute, attribute)
                glProgram:SetShaderInput(shininessID, current:value)
                setShininess = true
            end

            counter = counter + 1
        end

        SetCullFace(cullFace)
        SetDepthTest(depthFunction, depthRangeNear, depthRangeFar)
        SetDepthMask(depthMask)

        if setBlending = false
            EnableBlending(false)
        end

        if setAlphaTest = false
            EnableAlphaTest(false)
        end

        if setDiffuseTexture = false
            EnableDiffuseTexture(false)
        end

        if setSpecularTexture = false
            EnableSpecularTexture(false)
        end

        if setSpecular = false
            EnableSpecular(false)
        elseif setShininess = false
            glProgram:SetShaderInput(shininessID, 20.0)
        end

        if setDiffuseColor = false
            glProgram:SetShaderInput(diffuseColorID, 1.0, 1.0, 1.0, 1.0)
        end

        if setSpecularColor = false
            glProgram:SetShaderInput(specularColorID, 1.0, 1.0, 1.0, 1.0)
        end
    end

    private action BindLights(Attributes attributes, Renderable renderable)
        Environment environment = renderable:environment
        OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())

        if environment = undefined or environment:ContainsLighting() = false
            glProgram:SetShaderInput(enableLightingID, false)
            return now
        end

        tempVector3 = renderable:worldTransform:GetTranslation()
        tempVector3:Scale(1, 1, -1)
        if attributes:HasAttribute(colorAttribute:GetAmbientLightValue())
            ColorAttribute ambientAttribute = cast(ColorAttribute, attributes:GetAttribute(colorAttribute:GetAmbientLightValue()))
            ambientCubemap:SetColor(ambientAttribute:color)
        else
            ambientCubemap:Empty()
        end

        DirectionalLightsAttribute directionalAttribute = cast(DirectionalLightsAttribute, attributes:GetAttribute(directionalLightsAttribute:GetDirectionalLightsValue()))
        Array<DirectionalLight> directionalLights = undefined
        if directionalAttribute not= undefined
            directionalLights = directionalAttribute:lights
        end

        if directionalLights not= undefined
            integer counter = 0
            integer max = directionalLights:GetSize()
            if max > maxDirectionalLights
                max = maxDirectionalLights
            end

            repeat while counter < directionalLights:GetSize()
                DirectionalLight current = directionalLights:Get(counter)
                Color color = current:GetColor()
                tempVector3:Set(current:GetDirection())
                tempVector3:Normalize()
                
                if counter < max
                    glProgram:SetShaderInput(directionalLightColorID:Get(counter), color:GetRed(), color:GetGreen(), color:GetBlue())
                    glProgram:SetShaderInput(directionalLightDirectionID:Get(counter), tempVector3:GetX(), tempVector3:GetY(), -tempVector3:GetZ())
                else
                    ambientCubemap:Add(color, tempVector3)
                end

                counter = counter + 1
            end

            glProgram:SetShaderInput(directionalLightCountID, max)
        else
            glProgram:SetShaderInput(directionalLightCountID, 0)
        end

        PointLightsAttribute pointAttribute = cast(PointLightsAttribute, attributes:GetAttribute(pointLightsAttribute:GetPointLightsValue()))
        Array<PointLight> pointLights = undefined
        if pointAttribute not= undefined
            pointLights = pointAttribute:lights
        end

        if pointLights not= undefined
            integer counter = 0
            integer max = pointLights:GetSize()
            if max > maxPointLights
                max = maxPointLights
            end

            repeat while counter < pointLights:GetSize()
                PointLight current = pointLights:Get(counter)
                Color color = current:GetColor()
                Vector3 position = current:GetGlobalPosition()
                number intensity = current:GetIntensity()

                if counter < max
                    glProgram:SetShaderInput(pointLightColorID:Get(counter), color:GetRed() * intensity, color:GetGreen() * intensity, color:GetBlue() * intensity)
                    glProgram:SetShaderInput(pointLightPositionID:Get(counter), position:GetX(), position:GetY(), -position:GetZ())
                else
                    ambientCubemap:Add(color, position, tempVector3, intensity)
                end

                counter = counter + 1
            end
            glProgram:SetShaderInput(pointLightCountID, max)
        else
            glProgram:SetShaderInput(pointLightCountID, 0)
        end

        glProgram:SetShaderInput(enableLightingID, true)

        ambientCubemap:Clamp()

        glProgram:SetShaderInputVector3Array(ambientCubemapID, ambientCubemap:GetData(), 0, 18)

        tempMatrix3:Set(renderable:worldTransform)
        tempMatrix3:Inverse()
        tempMatrix3:Transpose()
        glProgram:SetShaderInputMatrix(normalMatrixID, tempMatrix3)

        lightsSet = true
    end

    private action EnableDiffuseTexture(boolean enable)
        if enableDiffuseTexture not= enable
OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
            enableDiffuseTexture = enable
            glProgram:SetShaderInput(enableDiffuseTextureID, enable)
        end
    end

    private action EnableSpecularTexture(boolean enable)
        if enableSpecularTexture not= enable
OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
            enableSpecularTexture = enable
            glProgram:SetShaderInput(enableSpecularTextureID, enable)
        end
    end

    private action EnableLighting(boolean enable)
        if enableLighting not= enable
OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
            enableLighting = enable
            glProgram:SetShaderInput(enableLightingID, enable)
        end
    end

    private action EnableSpecular(boolean enable)
        if enableSpecular not= enable
OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
            enableSpecular = enable
            glProgram:SetShaderInput(enableSpecularID, enable)
        end
    end

    private action EnableBlending(boolean enable)
            enableBlending = enable
OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
            glProgram:SetShaderInput(enableBlendingID, enable)

            GraphicsManager graphics = manager:GetGameGraphics()
        if graphics is OpenGLManager
            OpenGLManager openGL = cast(OpenGLManager, graphics)
if enable
                openGL:EnableProperty(constants:GL_BLEND)
            else
                openGL:DisableProperty(constants:GL_BLEND)
            end
        end
            
    end

    private action EnableAlphaTest(boolean enable)
        if enableAlphaTest not= enable
OpenGLShaderProgram glProgram = cast(OpenGLShaderProgram, program:GetShaderProgramStrategy())
            enableAlphaTest = enable
            glProgram:SetShaderInput(enableAlphaTestID, enable)
        end
    end

    private action InvertPositionZ(Matrix4 matrix)
        matrix:row2column3 = -matrix:row2column3
    end
    
    private action InvertViewZ(Matrix4 matrix)
        matrix:row0column0 = -matrix:row0column0
        matrix:row0column1 = -matrix:row0column1
        matrix:row0column3 = -matrix:row0column3

        matrix:row1column2 = -matrix:row1column2
        matrix:row2column2 = -matrix:row2column2
        matrix:row3column2 = -matrix:row3column2
    end
end