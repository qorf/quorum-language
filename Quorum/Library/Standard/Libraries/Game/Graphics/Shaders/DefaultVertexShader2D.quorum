package Libraries.Game.Graphics.Shaders
use Libraries.Game.GameStateManager

class DefaultVertexShader2D is Shader

    on create
        SetType(parent:Shader:VERTEX_SHADER)
        GameStateManager gameState
        ShaderManager manager = gameState:GetShaderManager()
        SetName(manager:DEFAULT_2D_VERTEX_SHADER)

        DefaultAttributeNames attributes
//        SetCode(GetVersionHeader() +
//"
//" +
//"in vec4 " + attributes:POSITION + ";
//in vec4 " + attributes:COLOR + ";
//in vec2 " + attributes:TEXTURE_COORDINATES + "0;
//uniform mat4 u_projTrans;
//out vec4 v_color;
//out vec2 v_texCoords;
//
//void main()
//{
//    v_color = " + attributes:COLOR + ";
//    v_color.a = v_color.a * (255.0/254.0);
//    v_texCoords = " + attributes:TEXTURE_COORDINATES + "0;
//    gl_Position =  u_projTrans * " + attributes:POSITION + ";
//}"
//)
        SetCode(GetVersionHeader() +
"
" +
"layout(location = 0) in vec4 " + attributes:POSITION + ";
layout(location = 1) in vec4 " + attributes:COLOR + ";
layout(location = 2) in vec2 " + attributes:TEXTURE_COORDINATES + "0;
layout(location = 3) in uint a_textureIndex;

layout(location = 0) out vec4 v_color;
layout(location = 1) out vec2 v_textureCoords;
layout(location = 2) flat out uint v_textureIndex;

layout(set = 0, binding = 0) uniform Camera
{
    mat4 projectionViewMatrix;
} camera;

void main()
{
    v_color = " + attributes:COLOR + ";
    v_textureCoords = " + attributes:TEXTURE_COORDINATES + "0;
    v_textureIndex = a_textureIndex;
    gl_Position =  camera.projectionViewMatrix * " + attributes:POSITION + ";
}"
)
    end

end