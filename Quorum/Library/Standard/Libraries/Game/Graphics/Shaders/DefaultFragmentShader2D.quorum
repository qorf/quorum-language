package Libraries.Game.Graphics.Shaders
use Libraries.Game.GameStateManager

class DefaultFragmentShader2D is Shader

    on create
        SetType(parent:Shader:FRAGMENT_SHADER)
        GameStateManager gameState
        ShaderManager manager = gameState:GetShaderManager()
        SetName(manager:DEFAULT_2D_FRAGMENT_SHADER)

        // TO-DO: Possibly adjust variable names to use constants instead?
        DefaultAttributeNames attributes
//        SetCode(GetVersionHeader() +
//"
//" +
//"#ifdef GL_ES
//    #define LOWP lowp
//    precision mediump float;
//#else
//    #define LOWP 
//#endif
//in LOWP vec4 v_color;
//in vec2 v_texCoords;
//uniform sampler2D u_texture;
//layout (location = 0) out vec4 outputColor;
//
//void main()
//{
//    outputColor = v_color * texture(u_texture, v_texCoords);
//}"
//)
        SetCode(GetVersionHeader() +
"
" +
"#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif

// Adds support for nonuniformEXT and unsized descriptor arrays.
#extension GL_EXT_nonuniform_qualifier : require

layout(set = 0, binding = 1) uniform sampler immutableSampler;
layout(set = 1, binding = 0) uniform texture2D globalTextures[];

layout (location = 0) in vec4 v_color;
layout (location = 1) in vec2 v_textureCoords;
layout (location = 2) flat in uint v_textureIndex;

layout (location = 0) out vec4 outputColor;

void main()
{
    outputColor = texture(nonuniformEXT(sampler2D(globalTextures[v_textureIndex], immutableSampler)), v_textureCoords) * v_color;
    //outputColor = texture(nonuniformEXT(sampler2D(globalTextures[v_textureIndex], immutableSampler)), v_textureCoords);
//    outputColor = texture(nonuniformEXT(sampler2D(globalTextures[v_textureIndex], immutableSampler)), v_textureCoords) * v_color + vec4(1.0, 0.0, 0.0, 1.0);
//    outputColor = vec4(1.0, 0.0, 0.0, 1.0);
}"
)
    end

end