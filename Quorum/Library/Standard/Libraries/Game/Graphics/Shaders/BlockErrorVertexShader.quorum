package Libraries.Game.Graphics.Shaders

class BlockErrorVertexShader is Shader

    constant text SHADER_NAME = "Block Error Vertex Shader"

    on create
        SetType(parent:Shader:VERTEX_SHADER)
        SetName(SHADER_NAME)

        DefaultAttributeNames attributes
        SetCode(GetVersionHeader() +
"
" +
"
#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif

in vec4 " + attributes:POSITION + ";
in vec4 " + attributes:COLOR + ";
in vec2 " + attributes:TEXTURE_COORDINATES + "0;
in vec4 a_borderColor;
in vec4 a_rounding;
in float a_leftBorder;
in float a_rightBorder;
in float a_bottomBorder;
in float a_topBorder;
in float a_aspectRatio;
in float a_antiAlias;
in vec3 a_notchSize;
in vec2 a_notchPositions;
in vec4 a_secondaryColor;
uniform mat4 u_projTrans;
uniform float u_notchHeight;
out vec4 v_color;
out vec4 v_borderColor;
out vec2 v_texCoords;
out vec4 v_rounding;
out vec4 v_borderThickness;
out float v_aspectRatio;
out float v_antiAlias;
out vec3 v_notchSize;
out vec2 v_notchPositions;
out vec4 v_secondaryColor;

void main()
{
    v_color = " + attributes:COLOR + ";
    v_color.a = v_color.a * (255.0/254.0);
    v_borderColor = a_borderColor;
    v_texCoords = " + attributes:TEXTURE_COORDINATES + "0;
    v_rounding = a_rounding;
    v_borderThickness = vec4(a_leftBorder, a_topBorder, a_rightBorder, a_bottomBorder);
    v_aspectRatio = a_aspectRatio;
    v_antiAlias = a_antiAlias;
    v_notchSize = a_notchSize;
    v_notchPositions = a_notchPositions;
    v_secondaryColor = a_secondaryColor;

    float bottomOffset = " + attributes:TEXTURE_COORDINATES + "0.y > 0.5 ? (u_notchHeight + 1.0) : 0.0;
    vec4 adjustedPosition = vec4(" + attributes:POSITION + ".x, " + attributes:POSITION + ".y - bottomOffset, "  + attributes:POSITION + ".zw);

    gl_Position =  u_projTrans * adjustedPosition;
}"
)
    end

end