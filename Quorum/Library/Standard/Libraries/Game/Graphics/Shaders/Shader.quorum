package Libraries.Game.Graphics.Shaders

use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.GraphicsManager
use Libraries.System.Properties
use Libraries.Game.Graphics.OpenGL.OpenGLConstants

class Shader

    ShaderConstants constants

    // This type constant is used to indicate that the shader is a vertex shader. Every shader program must have a vertex shader as its first shader step.
    public constant integer VERTEX_SHADER = constants:VERTEX_SHADER

    // This type constant is used to indicate that the shader is a fragment shader. Every shader program must have a fragment shader as its final shader step.
    public constant integer FRAGMENT_SHADER = constants:FRAGMENT_SHADER
    
    // This type constant is used to indicate that the shader is a geometry shader. This shader step is optional.
    public constant integer GEOMETRY_SHADER = constants:GEOMETRY_SHADER

    // This type constant is used to indicate that the shader is a tessellation control shader. This shader step is optional. If used, this should precede a tessellation evaluation shader in a shader program.
    public constant integer TESSELLATION_CONTROL_SHADER = constants:TESSELLATION_CONTROL_SHADER

    // This type constant is used to indicate that the shader is a tessellation evaluation shader. This shader step is optional. If used, this should follow after a tessellation control shader in a shader program.
    public constant integer TESSELLATION_EVALUATION_SHADER = constants:TESSELLATION_EVALUATION_SHADER

    GameStateManager manager

    integer type = 0
    text name = ""
    text code = ""
    boolean compiled = false

    integer shaderID = -1

    // A shader can become invalidated if the OpenGL context is lost, and thus needs to be recompiled in the new context.
    // Most commonly a concern on mobile platforms when the user minimizes/reopens an application.
    boolean invalidated = false

    action GetType returns integer
        return type
    end

    action SetType(integer type)
        me:type = type
    end

    action GetCode returns text
        return code
    end

    action SetCode(text code)
        me:code = code
    end

    action IsInvalidated returns boolean
        return invalidated
    end

    action Invalidate
        invalidated = true
    end

    action GetID returns integer
        return shaderID
    end

    action GetName returns text
        return name
    end

    action SetName(text name)
        if IsCompiled()
            alert("I can't rename the shader called " + GetName() + " because it has already been compiled. Names can only be changed before the shader is compiled.")
        end

        me:name = name
    end

    action Dispose
        ShaderManager shaderManager = manager:GetShaderManager()
        shaderManager:DisposeShader(me)
        shaderID = -1
        code = ""
        compiled = false
        invalidated = false
    end


    action Compile
        if IsCompiled()
            return now
        end

        text name = GetName()
        if name = ""
            alert("I couldn't compile this shader because its name hasn't been set. Use the SetName action before compiling this shader.")
        end

        ShaderManager shaderManager = manager:GetShaderManager()
        shaderID = shaderManager:CompileShader(me)
        compiled = true
    end

    action IsCompiled returns boolean
        return compiled
    end

    action Reload
        if not IsInvalidated()
            return now
        end

        ShaderManager shaderManager = manager:GetShaderManager()
        shaderID = shaderManager:ReloadShader(me)

        invalidated = false
    end

    /*
        This action takes platform into account and returns a default version of OpenGL's number to be placed at the top of a shader. For shaders
        not using OpenGL, this action does not provide useful information. The version number is calculated by Quorum, not the graphics hardware.
    */
    action GetVersionHeader returns text
        ShaderManager shaderManager = manager:GetShaderManager()
        return shaderManager:GetVersionHeader()
    end

    /*
    This action only exists to force plugin creation for this class. Since the class has a system action, even if it's
    never used, the Shader class will now have a corresponding plugin. We do this because Vulkan shaders need to
    store a 64-bit integer handle, which we need the plugins for.
    */
    private system action ForcePluginCreation

end