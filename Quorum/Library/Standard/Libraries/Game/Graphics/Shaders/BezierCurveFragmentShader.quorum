package Libraries.Game.Graphics.Shaders

use Libraries.Game.Graphics.Shaders.Shader
use Libraries.Game.Graphics.Shaders.ShaderManager
use Libraries.Game.GameStateManager

class BezierCurveFragmentShader is Shader

    on create
        SetType(parent:Shader:FRAGMENT_SHADER)
        GameStateManager gameState
        ShaderManager manager = gameState:GetShaderManager()
        SetName("BezierCurveFragmentShader")

        /*
        This code is adapted from a shader by Inigo Quilez under the MIT License.
        https://www.shadertoy.com/view/MlKcDD
        */
        SetCode(GetVersionHeader() +
"
" +
"#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif
in LOWP vec4 v_color;
in vec2 v_texCoords;
uniform sampler2D u_texture;
uniform float u_aspectRatio;
uniform float u_lineThickness;
uniform float u_dotThickness;
uniform float u_antiAliasDistance;
uniform vec4 u_lineColor;
uniform vec4 u_dotColor;
uniform vec4 u_borderColor;
uniform vec2 u_point1;
uniform vec2 u_point2;
uniform vec2 u_control1;
uniform vec2 u_control2;
uniform bool u_dotEnabled;
layout (location = 0) out vec4 outputColor;

// Adapted from a shader by Inigo Quilez on Shadertoy, under the MIT License.
// https://www.shadertoy.com/view/XdVBWd

float length2(in vec2 v) 
{
    return dot(v,v); 
}

float sdSegmentSq( in vec2 p, in vec2 a, in vec2 b )
{
    vec2 pa = p-a, ba = b-a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length2( pa - ba*h );
}

// Tesselation in linear segments. There are better, more performant ways to calculate this,
// but this implementation is simple and sufficient for basic use cases.
float udBezier(vec2 p0, vec2 p1, vec2 p2, in vec2 p3, vec2 pos)
{   
    const int kNum = 50;
    float result = 1e10;
    vec2 a = p0;
    for( int i=1; i<kNum; i++ )
    {
        float t = float(i)/float(kNum-1);
        float s = 1.0-t;
        vec2 b = p0*s*s*s + p1*3.0*s*s*t + p2*3.0*s*t*t + p3*t*t*t;
        float d = sdSegmentSq( pos, a, b );
        result = min(d, result);
        a = b;
    }
    
    return sqrt(result);
}

void main()
{
    vec2 p = (v_texCoords.xy - 0.5) * 2.0;
    p.x *= u_aspectRatio;
    float px = u_antiAliasDistance;

    float be = udBezier(u_point1, u_control1, u_control2, u_point2, p);
    vec4 color = vec4(u_lineColor.rgb, 0.0);

    // bezier
    float d = be;
    color = mix(color, u_lineColor, 1.0 - smoothstep(u_lineThickness, u_lineThickness + px, d));
         
    // Render the points, if enabled
    if (u_dotEnabled)
    {
        float d1 = length(u_point1 - p); 
        vec4 dotColor = vec4(u_dotColor.rgb, 0.0);
        float dotAliasDistance = u_dotThickness + px;
        dotColor = mix(dotColor, u_dotColor, 1.0 - smoothstep(u_dotThickness, dotAliasDistance, d1));
    
        float d2 = length(u_point2 - p);
        dotColor = mix(dotColor, u_dotColor, 1.0 - smoothstep(u_dotThickness, dotAliasDistance, d2));

        // Favor the dot color over the line color if the pixel is within a dot.
        outputColor = mix(dotColor, color, float(min(d1, d2) > dotAliasDistance));
    }    
    else
    {
        outputColor = color;
    }
}
"
)
    end

end