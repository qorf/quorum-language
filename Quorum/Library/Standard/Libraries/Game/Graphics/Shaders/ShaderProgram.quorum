package Libraries.Game.Graphics.Shaders

use Libraries.Compute.Matrix3
use Libraries.Compute.Matrix4
use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Containers.Number32BitArray
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Renderable
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.ModelData.MeshPart
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.DrawableShape
use Libraries.Game.Graphics.VertexData
use Libraries.Game.Graphics.IndexData
use Libraries.Game.Graphics.OpenGL.OpenGLConstants
use Libraries.Game.Graphics.OpenGL.OpenGLManager
use Libraries.Game.Graphics.Shaders.Vulkan.VulkanShaderManager
use Libraries.Game.Graphics.Shaders.OpenGL.OpenGLShaderProgram
use Libraries.Game.Graphics.Shaders.Vulkan.VulkanShaderProgram

class ShaderProgram

    ShaderProgramStrategy strategy = undefined
    text name = ""
    
// The default mapping object that can be used to translate Quorum data into vertex/shader input data.
    ShaderMapping shaderMapping = undefined
    
    action GetShaderProgramStrategy returns ShaderProgramStrategy
        if strategy = undefined
            GameStateManager manager
            ShaderManager shaders = manager:GetShaderManager()
            if shaders is VulkanShaderManager
                VulkanShaderProgram strategy
                strategy:SetProgram(me)
                me:strategy = strategy
            else
                OpenGLShaderProgram strategy
                strategy:SetProgram(me)
                me:strategy = strategy
            end
        end
        return strategy
    end
    
    action IsVulkanProgram returns boolean
        return GetShaderProgramStrategy() is VulkanShaderProgram
    end
    
    action IsOpenGLProgram returns boolean
        return GetShaderProgramStrategy() is OpenGLShaderProgram
    end

    action Add(Shader shader)
        ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Add(shader)
    end

    action Remove(Shader shader)
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Remove(shader)
    end

    action GetShaderIterator returns Iterator<Shader>
ShaderProgramStrategy program = GetShaderProgramStrategy()
        return program:GetShaderIterator()
    end

    /*
    This action returns a unique ID representing this shader program. This is provided by
    the rendering system once the program has been compiled. If this program hasn't been
    compiled yet, this value will be -1.
    */
    action GetID returns integer
ShaderProgramStrategy program = GetShaderProgramStrategy()
        return program:GetID()
    end

    action GetName returns text
        return name
    end

    action SetName(text name)
        if IsCompiled()
            alert("I can't rename the shader called " + GetName() + " because it has already been compiled. Names can only be changed before the shader is compiled.")
        end

        me:name = name
    end

    action IsCompiled returns boolean
ShaderProgramStrategy program = GetShaderProgramStrategy()
        return program:IsCompiled()
    end

    action Compile
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Compile()
    end

    action Begin
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Begin()
    end

    action End
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:End()
    end

    action Dispose
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Dispose()
    end

    action Render(Renderable renderable)
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Render(renderable)
    end

    action Draw(Drawable drawable)
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Draw(drawable)
    end

    action Draw(Drawable drawable, integer startIndex, integer totalIndices)
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Draw(drawable, startIndex, totalIndices)
    end

    action Draw(Mesh mesh, Camera camera, integer startIndex, integer totalIndices)
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Draw(mesh, camera, startIndex, totalIndices)
    end

    action Draw(Mesh mesh, Camera camera, integer startIndex, integer totalIndices, Array<integer> vertexLocations)
ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Draw(mesh, camera, startIndex, totalIndices, vertexLocations)
    end

    action GetShaderMapping returns ShaderMapping
        return shaderMapping
    end

    action SetShaderMapping(ShaderMapping shaderMapping)
        me:shaderMapping = shaderMapping
    end
    
    action Reload
        ShaderProgramStrategy program = GetShaderProgramStrategy()
        program:Reload()
    end

end