package Libraries.Game.Graphics

use Libraries.Game.NumberUtilities
use Libraries.Game.GameStateManager
use Libraries.Game.Application
use Libraries.Game.WebApplication
use Libraries.Game.Shapes.Rectangle
use Libraries.Game.Graphics.Painter2D
use Libraries.Containers.Array
use Libraries.Compute.BitwiseOperations
use Libraries.Compute.Math
use Libraries.Compute.Matrix
use Libraries.Interface.Item2D
use Libraries.Game.Collision.Shapes.Circle
use Libraries.Game.Collision.Shapes.Polygon
use Libraries.Compute.Vector2
use Libraries.Language.Errors.Error
use Libraries.System.File
use Libraries.Containers.Number32BitArray
use Libraries.Containers.Integer32BitArray
use Libraries.Game.Scenes.SceneProperties
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.Shaders.ShaderMapping

/*
    The Drawable class is an Item2D that can be drawn on the
    screen. It has x and y coordinates to represent its location on the screen.
    A Drawable with coordinates (0, 0) is located at the bottom left corner of
    the screen. Increasing the x and y coordinates will move the Drawable right
    and up, respectively.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle
            Drawable circle

            action Main
                StartGame()
            end

            action CreateGame
                rectangle:LoadFilledRectangle(100, 50)
                circle:LoadFilledCircle(40)

                rectangle:SetPosition(25, 100)
                circle:SetPosition(150, 200)

                Add(rectangle)
                Add(circle)
            end

        end
*/
class Drawable is TextureRegion, Item2D

    private ColorGroup colorGroup = undefined
    private boolean useCustomColor = false
    private boolean useCustomGradient = false
    Math math

    integer drawableType = 0

    // The shape that defines this Drawable. Holds the vertex information used by the graphics card when drawing this Drawable. Undefined until loading occurs.
    DrawableShape shape = undefined

    // A custom shader program. If this isn't undefined, this will be used instead of the default shader to render this object.
    ShaderProgram shaderProgram = undefined

    // A custom shader mapping. If this isn't undefined, it will be used to map this Drawable to shader inputs when it's rendered by a shader.
    ShaderMapping shaderMapping = undefined

    /*
    An optional field with an arbitrary object containing additional data for use by a shader.
    This is undefined by default. If it isn't undefined, it's up to the ShaderMapping to determine
    how this data should be used. The default shaders/mappings will typically ignore this value.
    */
    Object shaderData = undefined

    // The mesh used to render this object to the screen.
    Mesh mesh = undefined

    // Values used internally by the rendering system to track which indices in the Mesh are reserved for this Drawable for a given render.
    integer meshIndex = 0
    integer indicesCount = 0

    on create
        SceneProperties properties
        drawableType = properties:NONE
    end

    /*
        This action will create a new texture from the image file located at the
        given file path. This texture will then be loaded into this Drawable.
        This sets the Drawable's appearance when it is drawn on the screen.

        Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game

                Drawable bunny

                action Main
                    StartGame()
                end

                action CreateGame
                    // Assuming that we have a file in our project named "Rabbit.png"
                    bunny:Load("Rabbit.png")
                    Add(bunny)
                end
            end
    */
    action Load(text filePath)
        Texture temp

        GameStateManager manager
        Application application = manager:GetApplication()
        if application is WebApplication
            temp:LoadAsynchronously(filePath, me)
            return now
        end

        temp:LoadFromFile(filePath)
        Load(temp)
    end

    /*
        This action will create a new texture from provided image file. This 
        texture will then be loaded into this Drawable. This sets the Drawable's
        appearance when it is drawn on the screen.

        Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.System.File
            use Libraries.Game.Game

            class Main is Game

                Drawable bunny
                File imageFile

                action Main
                    StartGame()
                end

                action CreateGame
                    // Assuming that we have a folder in our project called
                    // "Assets" containing a file named "hare.jpg"
                    imageFile:SetWorkingDirectory("Assets")
                    imageFile:SetPath("hare.jpg")
                    bunny:Load(imageFile)
                    Add(bunny)
                end
            end
    */
    action Load(File file)
        Texture temp
        
        GameStateManager manager
        Application application = manager:GetApplication()
        if application is WebApplication
            temp:LoadAsynchronously(file, me)
            return now
        end
        
        temp:LoadFromFile(file)
        Load(temp)
    end

    /*
        This action will load the given texture into this Drawable. This sets
        the Drawable's appearance when it is drawn on the screen.

        Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Game

            class Main is Game

                Drawable circle1
                Drawable circle2
                Texture circleTexture

                action Main
                    StartGame()
                end

                action CreateGame
                    circleTexture:LoadFilledCircle(50)
                    circle1:Load(circleTexture)
                    circle2:Load(circleTexture)
                    circle1:SetPosition(50, 100)
                    circle2:SetPosition(250, 100)
                    Add(circle1)
                    Add(circle2)
                end
            end
    */
    action Load(Texture texture)
        Load(texture, 0, 0, cast(integer, texture:GetWidth()), cast(integer, texture:GetHeight()))
    end

    /*
        This action will load the given texture into this Drawable, loading from
        the lower left corner of the texture to the given width and height.

        Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Game

            class Main is Game

                Drawable semicircle1
                Drawable semicircle2
                Texture circleTexture

                action Main
                    StartGame()
                end

                action CreateGame
                    circleTexture:LoadFilledCircle(50)
                    semicircle1:Load(circleTexture, circleTexture:GetWidth()/2, circleTexture:GetHeight())
                    semicircle2:Load(circleTexture, circleTexture:GetWidth(), circleTexture:GetHeight()/2)
                    semicircle1:SetPosition(50, 100)
                    semicircle2:SetPosition(250, 100)
                    Add(semicircle1)
                    Add(semicircle2)
                end
            end
    */
    action Load(Texture texture, integer sourceWidth, integer sourceHeight)
        Load(texture, 0, 0, sourceWidth, sourceHeight)
    end

    /*
        This action will load the given texture into this Drawable, loading from
        the given x,y coordinates of the texture to the given width and height.

        Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Game

            class Main is Game

                Drawable circlePiece
                Texture circleTexture

                action Main
                    StartGame()
                end

                action CreateGame
                    circleTexture:LoadFilledCircle(50)
                    circlePiece:Load(circleTexture, circleTexture:GetWidth()/4, 0, circleTexture:GetWidth()/2, circleTexture:GetHeight())
                    circlePiece:SetPosition(250, 100)
                    Add(circlePiece)
                end
            end
    */
    action Load(Texture newTexture, integer sourceX, integer sourceY, integer sourceWidth, integer sourceHeight)
        if newTexture = undefined
            Error error
            error:SetErrorMessage("Can not define a Drawable with an undefined Texture!")
            alert(error)
        end

        SetTexture(newTexture)
        SetRegion(sourceX, sourceY, sourceWidth, sourceHeight)
        SetSize(math:AbsoluteValue(sourceWidth), math:AbsoluteValue(sourceHeight))
        SetOrigin(parent:Item2D:GetWidth() / 2.0, parent:Item2D:GetHeight() / 2.0)

        // When a new texture is loaded, replace the previous color with white.
        // Most of the time, a newly loaded texture is used to completely refresh the Drawable.
        // If this isn't replaced, the DrawableShape's color values will be out of sync with the Drawable's color, unless we specifically set it again.
        Color white
        white:SetColor(1, 1, 1, 1)
        
        DrawableShape newShape
        SetDrawableShape(newShape)
        newShape:LoadRectangle(sourceWidth, sourceHeight, me)
        
        SetColor(white)

        SceneProperties properties
        drawableType = properties:CUSTOM
    end

    /*
        This action will load the given TextureRegion into this Drawable, which
        will set its appearance when drawn on screen.

        Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.TextureRegion
            use Libraries.Game.Game

            class Main is Game

                Drawable circle
                Texture circleTexture
                TextureRegion circleRegion

                action Main
                    StartGame()
                end

                action CreateGame
                    circleTexture:LoadFilledCircle(50)
                    circleRegion:LoadTextureRegion(circleTexture)
                    circle:Load(circleRegion)
                    circle:SetPosition(250, 100)
                    Add(circle)
                end
            end
    */
    action Load(TextureRegion region)
        SetTexture(region:GetTextureField())
        SetRegion(region)
        SetSize(region:GetRegionWidth(), region:GetRegionHeight())
        SetOrigin(parent:Item2D:GetWidth() / 2.0, parent:Item2D:GetHeight() / 2.0)

        DrawableShape newShape
        SetDrawableShape(newShape)
        newShape:LoadRectangle(GetWidth(), GetHeight(), me)

        SceneProperties properties
        drawableType = properties:CUSTOM
    end

    /*
        This action will load the given TextureRegion into this Drawable, 
        loading from the given x,y coordinates of the texture to the given width
        and height.

        Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.TextureRegion
            use Libraries.Game.Game

            class Main is Game

                Drawable circlePiece
                Texture circleTexture
                TextureRegion circleRegion

                action Main
                    StartGame()
                end

                action CreateGame
                    circleTexture:LoadFilledCircle(50)
                    circleRegion:LoadTextureRegion(circleTexture)
                    circlePiece:Load(circleRegion, circleTexture:GetWidth()/4, 0, circleTexture:GetWidth()/2, circleTexture:GetHeight())
                    circlePiece:SetPosition(250, 100)
                    Add(circlePiece)
                end
            end
    */
    action Load(TextureRegion region, integer sourceX, integer sourceY, integer sourceWidth, integer sourceHeight)
        SetTexture(region:GetTextureField())
        SetRegion(region, sourceX, sourceY, sourceWidth, sourceHeight)
        SetSize(math:AbsoluteValue(sourceWidth), math:AbsoluteValue(sourceHeight))
        SetOrigin(parent:Item2D:GetWidth() / 2.0, parent:Item2D:GetHeight() / 2.0)
        
        // If we don't have a color, provide white as a default.
        if colorGroup = undefined
            Color white
            white:SetColor(1, 1, 1, 1)
            SetColor(white)
        end

        DrawableShape newShape
        SetDrawableShape(newShape)
        newShape:LoadRectangle(sourceWidth, sourceHeight, me)
        newShape:SetColor(colorGroup)

        SceneProperties properties
        drawableType = properties:CUSTOM
    end

    /*
    Sets the color filter on this Drawable. This will reduce the intensity of
    colors in the Drawable that are not part of the filter, while leaving the
    other colors that are part of the filter as the same.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game

                Drawable circle
                Color red
                Color yellow

                action Main
                    StartGame()
                end

                action CreateGame
                    red:SetColor(1, 0, 0, 1)
                    yellow:SetColor(1, 1, 0, 1)
                    circle:LoadFilledCircle(50, yellow)
                    circle:SetColor(red)
                    circle:SetPosition(50, 100)
                    Add(circle)
                end
            end
    */
    action SetColor(ColorGroup tint)
        colorGroup = tint

        if shape not= undefined
            shape:SetColor(tint)
        end
    end

    /*
    Sets the alpha of the Drawable. The alpha represents how transparent the
    Drawable is. The given value should be between 0 and 1, where a value of 0
    is totally transparent, and a value of 1 is totally opaque.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game

                Drawable circle

                action Main
                    StartGame()
                end

                action CreateGame
                    circle:LoadFilledCircle(50)
                    circle:SetAlpha(0.5)
                    circle:SetPosition(50, 100)
                    Add(circle)
                end
            end
    */
    action SetAlpha(number alpha)
        colorGroup:GetTopLeft():SetAlpha(alpha)
        colorGroup:GetTopRight():SetAlpha(alpha)
        colorGroup:GetBottomLeft():SetAlpha(alpha)
        colorGroup:GetBottomRight():SetAlpha(alpha)
    end

    /*
    Sets the color filter of the Drawable from the given components of red,
    green, blue, and alpha. The values for the components should be between 0
    and 1, representing 0% to 100% of that color or alpha. 

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game

                Drawable circle
                Color white

                action Main
                    StartGame()
                end

                action CreateGame
                    white:SetColor(1, 1, 1, 1)
                    circle:LoadFilledCircle(50, white)
                    circle:SetColor(0.5, 1, 0.25, 1)
                    circle:SetPosition(50, 100)
                    Add(circle)
                end
            end
    */
    action SetColor(number red, number green, number blue, number alpha)
        Color color
        colorGroup = color
        color:SetColor(red, green, blue, alpha)
        BitwiseOperations ops
        NumberUtilities utility

        if shape not= undefined
            shape:SetColor(color)
        end
    end

    /*
    This action returns the color filter stored in the Drawable. To see if it's
    currently in use, use the UsingCustomColor action. If the Drawable is using
    a different type of filter (such as a Gradient) this will return undefined.
    To get whatever filter the Drawable is using regardless of type, use the
    GetColorGroup action.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                Drawable drawable
                drawable:SetColor(0, 1, 1, 1)
                color = drawable:GetColor()
            end

        end
    */
    action GetColor returns Color
        if colorGroup is Color
            Color color = cast(Color, colorGroup)
            return color
        end
        return undefined
    end

    /*
    This action returns the gradient stored in the Drawable. To see if it's
    currently in use, use the UsingCustomGradient action. If the Drawable is using
    a different type of filter (such as a Color) this will return undefined.
    To get whatever filter the Drawable is using regardless of type, use the
    GetColorGroup action.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Gradient
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Gradient gradient
            Color color

            action Main
                StartGame()
            end

            action CreateGame
                Drawable drawable
                Gradient gradient
                gradient:Set(color:Red(), color:Green(), color:Blue(), color:White())
                drawable:SetGradient(gradient)

                drawGradient = drawable:GetGradient()
            end

        end
    */
    action GetGradient returns Gradient
        if colorGroup is Gradient
            Gradient gradient = cast(Gradient, colorGroup)
            return gradient
        end
        return undefined
    end

    /*
    This action returns the color filter stored in the Drawable. The returned
    value is a ColorGroup object, which describes how the color is mapped to the
    four corners of the Drawable. If no filter is in use, this action will
    return undefined.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Graphics.ColorGroup
        use Libraries.Game.Game

        class Main is Game

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                Drawable drawable
                drawable:SetColor(0, 1, 1, 1)
                ColorGroup group = drawable:GetColorGroup()
            end

        end
    */
    action GetColorGroup returns ColorGroup
        return colorGroup
    end

    /*
    This action returns an integer code representing the type of graphics that's
    been loaded into this Drawable. The type values can be found in the 
    SceneProperties class. The default value is NONE.

    Attribute: Returns An integer code from the SceneProperties class that describes the type of image this Drawable uses.
    */
    action GetDrawableType returns integer
        return drawableType
    end

    /*
    This action sets an integer code representing the type of graphics that's
    been loaded into this Drawable. The type values can be found in the
    SceneProperties class. This action is used internally by the engine as
    needed, and most users won't ever need to call this directly.
    */
    action SetDrawableType(integer type)
        drawableType = type
    end

    /*
    This action selects the portion of the loaded texture to use when drawing.
    The four parameters represent the left, top, right, and bottom sides of the
    texture, respectively. For the left and right parameters, 0 represents the
    left of the base texture, and 1 represents the right of the base texture.
    For the top and bottom parameters, 0 represents the bottom, and 1 represents
    the top.
    */
    action SetRegion(number left, number top, number right, number bottom)
        parent:TextureRegion:SetRegion(left, top, right, bottom)
        if shape not= undefined
            shape:SetTextureRegion(left, right, bottom, top)
        end
    end

    /*
    This action selects a point on the loaded texture that this Drawable will
    consider to be the left edge of the image to be drawn. 0 represents the left
    edge of the base texture, and 1 represents the right edge of the base texture.
    */
    action SetLeftSide(number left)
        parent:TextureRegion:SetLeftSide(left)
        if shape not= undefined
            shape:SetTextureRegion(left, GetRightSide(), GetBottomSide(), GetTopSide())
        end
    end

    /*
    This action selects a point on the loaded texture that this Drawable will
    consider to be the top edge of the image to be drawn. 0 represents the bottom
    edge of the base texture, and 1 represents the top edge of the base texture.
    */
    action SetTopSide(number top)
        parent:TextureRegion:SetTopSide(top)
        if shape not= undefined
            shape:SetTextureRegion(GetLeftSide(), GetRightSide(), GetBottomSide(), top)
        end
    end

    /*
    This action selects a point on the loaded texture that this Drawable will
    consider to be the right edge of the image to be drawn. 0 represents the left
    edge of the base texture, and 1 represents the right edge of the base texture.
    */
    action SetRightSide(number right)
        parent:TextureRegion:SetRightSide(right)
        if shape not= undefined
            shape:SetTextureRegion(GetLeftSide(), right, GetBottomSide(), GetTopSide())
        end
    end

    /*
    This action selects a point on the loaded texture that this Drawable will
    consider to be the bottom edge of the image to be drawn. 0 represents the bottom
    edge of the base texture, and 1 represents the top edge of the base texture.
    */
    action SetBottomSide(number bottom)
        parent:TextureRegion:SetBottomSide(bottom)
        if shape not= undefined
            shape:SetTextureRegion(GetLeftSide(), GetRightSide(), bottom, GetTopSide())
        end
    end

    /*
    This action flips the Drawable along the x-axis, or in other words, flips it
    horizontally in 2D space.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable line
                    line:LoadLine(20, 100)
                    line:SetPosition(50, 50)
                    line:FlipX()
                    Add(line)
                end
            end
    */
    action FlipX
        parent:TextureRegion:FlipX()

        if shape not= undefined
            shape:FlipX()
        end

        parent:Item2D:FlipX()
    end

    /*
    This action flips the Drawable along the y-axis, or in other words, flips it
    vertically in 2D space.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable line
                    line:LoadLine(20, 100)
                    line:SetPosition(50, 50)
                    line:FlipY()
                    Add(line)
                end
            end
    */
    action FlipY
        parent:TextureRegion:FlipY()

        if shape not= undefined
            shape:FlipY()
        end

        parent:Item2D:FlipY()
    end

    /*
    This action returns whether or not the Drawable has a custom Color filter.
    This will return false if a different type of filter, such as a Gradient, is
    in use. To check for a filter regardless of type, use the UsingCustomTint
    action.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Color cyan
                cyan:SetColor(0, 1, 1, 1)

                Drawable drawable
                drawable:LoadFilledCircle(100, cyan)
                output "Drawable has custom color filter = " + drawable:UsingCustomColor()
                
                drawable:SetColor(0, 1, 0, 1)
                output "Drawable now has custom color filter = " + drawable:UsingCustomColor()
            end

        end
    */
    action UsingCustomColor returns boolean
        return colorGroup is Color
    end

    /*
    This action returns whether or not the Drawable is using a gradient.
    This will return false if a different type of filter, such as a Gradient, is
    in use. To check for a filter regardless of type, use the UsingCustomTint
    action.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Gradient
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Color cyan
                cyan:SetColor(0, 1, 1, 1)

                Drawable drawable
                drawable:LoadFilledCircle(100, cyan)
                output "Drawable has custom color gradient? " + drawable:UsingCustomGradient()
                
                Gradient gradient
                Color color
                gradient:Set(color:Red(), color:Green(), color:Blue(), color:White())
                drawable:SetGradient(gradient)
                output "Drawable now has custom color gradient? " + drawable:UsingCustomGradient()
            end
        end
    */
    action UsingCustomGradient returns boolean
        return colorGroup is Gradient
    end

    /*
    This action returns whether or not the Drawable is being tinted by a
    ColorGroup, such as a Color or Gradient.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Gradient
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Color cyan
                cyan:SetColor(0, 1, 1, 1)

                Drawable drawable
                drawable:LoadFilledCircle(100, cyan)
                // This will return true - the circle is using a cyan tint.
                output "Is the Drawable tinted with a color? " + drawable:UsingCustomTint()
                
                Gradient gradient
                Color color
                gradient:Set(color:Red(), color:Green(), color:Blue(), color:White())
                drawable:SetGradient(gradient)
                // This will return true because the circle is tinted with a gradient.
                output "After using a gradient, is the Drawable tinted? " + drawable:UsingCustomTint()

                drawable:UseDefaultColor()
                // This should return false. The Drawable is no longer using a tint.
                output "After resetting the color, is the Drawable still tinted? " + drawable:UsingCustomTint()
            end
        end
    */
    action UsingCustomTint returns boolean
        return colorGroup not= undefined
    end

    /*
    This action removes the color filter from a Drawable.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Color cyan
                cyan:SetColor(0, 1, 1, 1)

                Drawable drawable
                drawable:LoadFilledCircle(100, cyan)
                drawable:SetColor(0, 1, 0, 1)
                output "Drawable has custom color filter = " + drawable:UsingCustomColor()
                
                drawable:UseDefaultColor()
                output "Drawable now has custom color filter = " + drawable:UsingCustomColor()
            end

        end
    */
    action UseDefaultColor
        colorGroup = undefined
    end

    /*
    This action returns the texture that is currently loaded into the Drawable.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Texture
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Drawable drawable
                drawable:LoadFilledCircle(75)
                Texture circle = drawable:GetTexture()
            end

        end
    */
    action GetTexture returns Texture
        return parent:TextureRegion:GetTextureField()
    end

    /*
    This action returns true if there is a texture currently loaded into the 
    Drawable, otherwise it returns false.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Drawable drawable
                output "Drawable is loaded = " + drawable:IsLoaded()
                drawable:LoadFilledCircle(75)
                output "Drawable is now loaded = " + drawable:isLoaded()
            end

        end
    */
    action IsLoaded returns boolean
        return GetTexture() not= undefined
    end

    /*
    The Dispose action will dispose the currently loaded texture. This frees up
    computer resources, but the texture will no longer be usable. Note that
    multiple Drawables can use the same texture, and disposing of it will get
    rid of the texture information not just for this Drawable, but any Drawable
    that is using the texture. 

    Dispose should be used when a texture will not be used again. Here are some
    guide lines for when you should or should not dispose a Drawable:

    1. If the Drawable was loaded using Load(text) or Load(File), then the
    Drawable created new texture data when it was loaded. This can be safely
    disposed, unless you copied the Drawable, e.g. with Load(Drawable).

    2. If the Drawable was loaded as a shape, e.g. with the LoadRectangle action,
    the Drawable created new texture data when it loaded. It can be safely
    disposed, unless you copied the Drawable, e.g. with Load(Drawable).

    3. If the Drawable was loaded using a Texture or a TextureRegion, such as
    with the Load(Texture) action, then it is NOT safe to dispose this if there
    are any other Drawables that are still in use which were also loaded with
    the same Texture. If there are no other Drawables that were loaded with the
    Texture, it is safe to dispose. If a texture was used to load multiple
    Drawables, it is good practice to use the Dispose action directly from the
    Texture once all of the Drawables are no longer in use.

    4. If the Drawable was loaded with an ImageSheet, you should NEVER dispose
    the Drawable's texture. All Drawables loaded from an ImageSheet use the same
    Texture data, so disposing of any Drawable from an ImageSheet will delete
    the ImageSheet's texture data. If you ever wish to dispose an ImageSheet's
    texture data, it is good practice to use the ImageSheet's Dispose action.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Drawable drawable
                drawable:LoadFilledCircle(75)
                Add(drawable)

                // When we no longer need the Drawable, we can remove it from
                // the Game, and then Dispose it to clean up the memory it used.
                Remove(drawable)
                drawable:Dispose()
            end

        end
    */
    action Dispose
        parent:TextureRegion:Dispose()
    end

    /*
    The QueueForDrawing action is what makes a Drawable appear on the screen. This action
    will automatically be called by the Game class if the Drawable has been
    added to the Game with the Add(Item) action. 
    */
    action QueueForDrawing(Painter2D painter)
        if not IsShowing()
            return now
        end

        parent:Item2D:QueueForDrawing(painter)

        if GetTexture() not= undefined and IsCustomDrawing() = false
            painter:QueueForDrawing(me)
        end
    end

    /*
    The Draw action is used to perform custom drawing on this Item and its
    children. This is only called during the Game engine's draw phase if this
    Item has enabled custom drawing via the SetCustomDrawing action. This is
    an advanced feature, and shouldn't be used by most users.

    If custom drawing is enabled, this action should be overriden -- if it isn't,
    the Item will attempt to provide default rendering for itself, its view, and
    its children, without regard to depth buffering. This action is responsible
    for instructing the provided Painter on how to draw this item, the view, and 
    its children, and in what order to do so. 
    */
    action Draw(Painter2D painter)
        if not IsShowing()
            return now
        end

        if GetView2D() not= undefined
            GetView2D():Draw(painter)
        end

        if GetTexture() not= undefined
            painter:Draw(me)
        end

        integer counter = 0
        Array<Item2D> children = GetChildren()
        repeat while counter < children:GetSize()
            children:Get(counter):Draw(painter)
            counter = counter + 1
        end
    end

    /*
    This action will return true if the Drawable has been flipped across the
    x-axis, or false if it has not.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable line
                    line:LoadLine(20, 100)
                    line:FlipX()
                    boolean flipX = line:IsFlippedX()
                end
            end
    */
    action IsFlippedX returns boolean
        return parent:Item2D:IsFlippedX()
    end

    /*
    This action will return true if the Drawable has been flipped across the
    y-axis, or false if it has not.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable line
                    line:LoadLine(20, 100)
                    line:FlipY()
                    boolean flipY = line:IsFlippedY()
                end
            end
    */
    action IsFlippedY returns boolean
        return parent:Item2D:IsFlippedY()
    end

    /*
    This action will load a matrix into a Texture to create a monochrome
    (black and white) image, then load the Texture into this Drawable. Each 
    value is assumed to be between 0 and 1, where 0 represents a black pixel and
    1 represents a white pixel.

    Attribute: Parameter matrix The matrix representing the pixels to load.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Texture
    use Libraries.Compute.Matrix

    class Main is Game

        Texture texture
        Drawable drawable

        action Main
            StartGame()
        end

        action CreateGame
            Matrix matrix

            // 7x7 square that is black at edges and lightens as it goes towards the center.
            matrix:Fill(7, 7, 0)
            matrix:Set(1, 1, 0.33)
            matrix:Set(2, 1, 0.33)
            matrix:Set(3, 1, 0.33)
            matrix:Set(4, 1, 0.33)
            matrix:Set(5, 1, 0.33)
            matrix:Set(5, 2, 0.33)
            matrix:Set(5, 3, 0.33)
            matrix:Set(5, 4, 0.33)
            matrix:Set(5, 5, 0.33)
            matrix:Set(4, 5, 0.33)
            matrix:Set(3, 5, 0.33)
            matrix:Set(2, 5, 0.33)
            matrix:Set(1, 5, 0.33)
            matrix:Set(1, 4, 0.33)
            matrix:Set(1, 3, 0.33)
            matrix:Set(1, 2, 0.33)

            matrix:Set(2, 2, 0.66)
            matrix:Set(3, 2, 0.66)
            matrix:Set(4, 2, 0.66)
            matrix:Set(4, 3, 0.66)
            matrix:Set(4, 4, 0.66)
            matrix:Set(3, 4, 0.66)
            matrix:Set(2, 4, 0.66)
            matrix:Set(2, 3, 0.66)

            matrix:Set(3, 3, 1)

            // Loading the Drawable and making it larger so that it's easier to see.
            drawable:Load(matrix)
            Add(drawable)

            drawable:SetPosition(200, 200)
            drawable:SetSize(100, 100)
        end
    end
    */
    action Load(Matrix matrix)
        Texture texture
        texture:LoadFromMatrix(matrix)
        Load(texture)
    end

    /*
    This action will create a new Texture with a black line that connects an
    imaginary point at 0,0 to the provided x,y coordinates. This texture is then
    loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable line
                    line:LoadLine(20, 100)
                    line:SetPosition(50, 50)
                    Add(line)
                end
            end
    */
    action LoadLine(integer x, integer y)
        Color color
        Texture temp
        temp:LoadLine(x, y)
        Load(temp)
        SetColor(color:Black())
    end

    /*
    This action will create a new Texture with a line of the given color that
    connects between an imaginary point at 0,0 to the provided x,y coordinates.
    This texture is then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color cyan
                    cyan:SetColor(0, 1, 1, 1)
                    Drawable line
                    line:LoadLine(20, 100, cyan)
                    line:SetPosition(50, 50)
                    Add(line)
                end
            end
    */
    action LoadLine(integer x, integer y, ColorGroup color)
        Texture temp
        temp:LoadLine(x, y)
        Load(temp)
        SetColor(color)
    end

    /*
    This action will create a new Texture with a hollow black rectangle with
    the given width and height. This texture is then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable rectangle
                    rectangle:LoadRectangle(20, 100)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadRectangle(integer width, integer height)
        Color color
        color:SetColor(0, 0, 0, 1)
        LoadRectangle(width, height, color)
    end

    /*
    This action will create a new Texture with a hollow rectangle of the given
    color with the given width and height. This texture is then loaded into the
    Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color yellow
                    yellow:SetColor(1, 1, 0, 1)
                    Drawable rectangle
                    rectangle:LoadRectangle(20, 100, yellow)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadRectangle(integer width, integer height, ColorGroup color)
        Texture temp
        temp:LoadRectangle(width, height)
        Load(temp)
        SetColor(color)

        SceneProperties properties
        drawableType = properties:RECTANGLE
    end

    /*
    This action will create a new Texture with a solid black rectangle with
    the given width and height. This texture is then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable rectangle
                    rectangle:LoadFilledRectangle(20, 100)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadFilledRectangle(integer width, integer height)
        Color color
        color:SetColor(0, 0, 0, 1)
        LoadFilledRectangle(width, height, color)
    end

    /*
    This action will create a new Texture with a solid rectangle of the given
    color with the given width and height. This texture is then loaded into the
    Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color green
                    green:SetColor(0, 1, 0, 1)
                    Drawable rectangle
                    rectangle:LoadFilledRectangle(20, 100, green)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadFilledRectangle(integer width, integer height, ColorGroup color)
        GameStateManager manager
        SharedTextureManager textureManager = manager:GetSharedTextureManager()
        Texture temp = textureManager:GetUnitTexture()
        Load(temp)
        SetSize(width, height)
        SetColor(color)

        SceneProperties properties
        drawableType = properties:FILLED_RECTANGLE
    end

    /*
    This action will create a new Texture with a hollow black circle with the
    given radius. This texture is then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable circle
                    circle:LoadCircle(75)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadCircle(integer radius)
        Color color
        color:SetColor(0, 0, 0, 1)
        LoadCircle(radius, color)
    end

    /*
    This action will create a new Texture with a hollow circle of the given
    color with the given radius. This texture is then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color red
                    red:SetColor(1, 0, 0, 1)
                    Drawable circle
                    circle:LoadCircle(75, red)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadCircle(integer radius, ColorGroup color)
        Texture temp
        temp:LoadCircle(radius)
        Load(temp)
        SetColor(color)
        Circle circle
        circle:SetRadius(radius)
        SetShape(circle)

        SceneProperties properties
        drawableType = properties:CIRCLE
    end

    /*
    This action will create a new Texture with a solid black circle with the
    given radius. This texture is then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable circle
                    circle:LoadFilledCircle(75)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadFilledCircle(integer radius)
        Color color
        color:SetColor(0, 0, 0, 1)
        LoadFilledCircle(radius, color)
    end

    /*
    This action will create a new Texture with a solid circle of the given
    color with the given radius. This texture is then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color blue
                    blue:SetColor(0, 0, 1, 1)
                    Drawable circle
                    circle:LoadFilledCircle(75, blue)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadFilledCircle(integer radius, ColorGroup color)
        Texture temp
        temp:LoadFilledCircle(radius)
        Load(temp)
        SetColor(color)
        Circle circle
        circle:SetRadius(radius)
        SetShape(circle)

        SceneProperties properties
        drawableType = properties:FILLED_CIRCLE
    end

    /*
    This action will create a new Texture with a solid black triangle that is
    made of the points identified by the three given points. The three points
    are relative to the origin of the Drawable. This texture is then loaded into
    the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Drawable triangle
                    triangle:LoadFilledTriangle(0, 0, 200, 200, 400, 0)
                    triangle:SetPosition(50, 50)
                    Add(triangle)
                end
            end
    */
    action LoadFilledTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3)
        Color color
        color:SetColor(0, 0, 0, 1)
        LoadFilledTriangle(x1, y1, x2, y2, x3, y3, color)
    end

    /*
    This action will create a new Texture with a solid triangle of the given
    color that is made of the points identified by the three given points. The
    three points are relative to the origin of the Drawable. This texture is 
    then loaded into the Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color purple
                    purple:SetColor(0.5, 0, 0.5, 1)
                    Drawable triangle
                    triangle:LoadFilledTriangle(0, 0, 200, 200, 400, 0, purple)
                    triangle:SetPosition(50, 50)
                    Add(triangle)
                end
            end
    */
    action LoadFilledTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, ColorGroup color)
        GameStateManager manager
        SharedTextureManager textureManager = manager:GetSharedTextureManager()
        Texture temp = textureManager:GetUnitTexture()
        Load(temp)
        SetColor(color)
        Vector2 vertex1
        Vector2 vertex2
        Vector2 vertex3
        vertex1:Set(x1, y1)
        vertex2:Set(x2, y2)
        vertex3:Set(x3, y3)
        Array<Vector2> vertices
        vertices:Add(vertex1)
        vertices:Add(vertex2)
        vertices:Add(vertex3)
        Polygon polygon
        polygon:Set(vertices, 3)
        SetShape(polygon)

        DrawableShape shape
        shape:LoadTriangle(x1, y1, x2, y2, x3, y3, me)
        shape:SetColor(color)
        SetDrawableShape(shape)

        SceneProperties properties
        drawableType = properties:FILLED_TRIANGLE

        JavaScriptObjectNotation points
        points:SetArray()
        points:Add(x1)
        points:Add(y1)
        points:Add(x2)
        points:Add(y2)
        points:Add(x3)
        points:Add(y3)
        SetProperty(properties:POINTS, points)
    end

    /*
    
    */
    action LoadShape(Array<number> points)
        Color color
        color:SetColor(0, 0, 0, 1)
        LoadShape(points, color)
    end

    /*
    
    */
    action LoadShape(Array<number> points, ColorGroup color)
        Texture temp
        temp:LoadFilledRectangle(4, 4)
        Load(temp)
        SetColor(color)

        JavaScriptObjectNotation jsonPoints
        jsonPoints:SetArray()

        number minX = points:Get(0)
        number maxX = minX
        number minY = points:Get(1)
        number maxY = minY

        integer counter = 0
        Array<Vector2> vertices
        repeat while counter < points:GetSize()
            number x = points:Get(counter)
            number y = points:Get(counter + 1)

            if x < minX
                minX = x
            elseif x > maxX
                maxX = x
            end

            if y < minY
                minY = y
            elseif y > maxY
                maxY = y
            end

            Vector2 vertex
            vertex:Set(x, y)
            vertices:Add(vertex)

            jsonPoints:Add(x)
            jsonPoints:Add(y)

            counter = counter + 2
        end

        SetOrigin((maxX - minX) / 2, (maxY - minY) / 2)

        check
            Polygon polygon
            polygon:Set(vertices, vertices:GetSize())
            SetShape(polygon)
        detect error
            /*
            The polygon set action can fail if we received vertices that are very close together.
            If this happens, just ignore it. Allow default collision handling to do its work.
            In this case, the item is most likely incredibly small anyway, so high precision collision is less important.
            */
        end

        DrawableShape shape
        SetDrawableShape(shape)
        shape:Load(points, me)
        shape:SetColor(color)

        SceneProperties properties
        drawableType = properties:CUSTOM_SHAPE

        SetProperty(properties:POINTS, jsonPoints)
    end

    /*
    
    */
    action LoadShape(Array<number> points, Array<Color> colors)
        Texture temp
        temp:LoadFilledRectangle(4, 4)
        Load(temp)
        SetColor(colors:Get(0))

        JavaScriptObjectNotation jsonPoints
        jsonPoints:SetArray()

        number minX = points:Get(0)
        number maxX = minX
        number minY = points:Get(1)
        number maxY = minY

        integer counter = 0
        Array<Vector2> vertices
        repeat while counter < points:GetSize()
            number x = points:Get(counter)
            number y = points:Get(counter + 1)

            if x < minX
                minX = x
            elseif x > maxX
                maxX = x
            end

            if y < minY
                minY = y
            elseif y > maxY
                maxY = y
            end

            Vector2 vertex
            vertex:Set(x, y)
            vertices:Add(vertex)

            jsonPoints:Add(x)
            jsonPoints:Add(y)

            counter = counter + 2
        end

        SetOrigin((maxX - minX) / 2, (maxY - minY) / 2)

        check
            Polygon polygon
            polygon:Set(vertices, vertices:GetSize())
            SetShape(polygon)
        detect error
            /*
            The polygon set action can fail if we received vertices that are very close together.
            If this happens, just ignore it. Allow default collision handling to do its work.
            In this case, the item is most likely incredibly small anyway, so high precision collision is less important.
            */
        end

        DrawableShape shape
        SetDrawableShape(shape)
        shape:Load(points, me)
        shape:SetColor(colors)

        SceneProperties properties
        drawableType = properties:CUSTOM_SHAPE

        SetProperty(properties:POINTS, jsonPoints)
    end

    action GetShaderProgram returns ShaderProgram
        return shaderProgram
    end

    action SetShaderProgram(ShaderProgram shaderProgram)
        me:shaderProgram = shaderProgram
    end

    action GetShaderMapping returns ShaderMapping
        return shaderMapping
    end

    action SetShaderMapping(ShaderMapping shaderMapping)
        me:shaderMapping = shaderMapping
    end

    action GetShaderData returns Object
        return shaderData
    end

    action SetShaderData(Object shaderData)
        me:shaderData = shaderData
    end

    action GetMesh returns Mesh
        return mesh
    end

    action SetMesh(Mesh mesh)
        me:mesh = mesh
    end

    action SetDrawableShape(DrawableShape shape)
        me:shape = shape
        shape:SetDrawable(me)
    end

    action GetDrawableShape returns DrawableShape
        return shape
    end

    /*
    This action is used internally by the rendering system to determine what
    index a Drawable starts at in a Mesh. Most users will never need to call
    this action directly.
    */
    action GetMeshIndex returns integer
        return meshIndex
    end

    /*
    This action is used internally by the rendering system to set what
    index a Drawable starts at in a Mesh. Most users will never need to call
    this action directly.
    */
    action SetMeshIndex(integer meshIndex)
        me:meshIndex = meshIndex
    end

    /*
    This action is used internally by the rendering system to determine how
    many indices a Drawable uses in a Mesh. Most users will never need to call
    this action directly.
    */
    action GetIndicesCount returns integer
        return indicesCount
    end

    /*
    This action is used internally by the rendering system to set how
    many indices a Drawable uses in a Mesh. Most users will never need to call
    this action directly.
    */
    action SetIndicesCount(integer indicesCount)
        me:indicesCount = indicesCount
    end

end