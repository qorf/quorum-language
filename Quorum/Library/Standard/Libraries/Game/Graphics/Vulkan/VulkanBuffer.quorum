package Libraries.Game.Graphics.Vulkan
use Libraries.Compute.BitwiseOperations

class VulkanBuffer

    VulkanDevice device = undefined
    integer size = 0
    boolean supportsMapping = false

    boolean initialized = false

    action CreateTransferSourceBuffer(VulkanDevice device, integer size) returns boolean
        VulkanConstants constants
        // Create a buffer that will be used as a transfer source, using automatic memory type detection, and allocated so the host (i.e. the program) can access the memory for mapped sequential writing.
        return Create(device, size, constants:BUFFER_USAGE_TRANSFER_SOURCE_BIT, constants:MEMORY_USAGE_AUTO, constants:ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT, 0, 0, false)
    end

    action CreateTransferDestinationBuffer(VulkanDevice device, integer size, integer bufferUsage) returns boolean
        VulkanConstants constants
        BitwiseOperations bits
        integer usage = bits:Or(bufferUsage, constants:BUFFER_USAGE_TRANSFER_DESTINATION_BIT)

        return Create(device, size, usage, constants:MEMORY_USAGE_AUTO, 0, 0, 0, false)
    end

    action CreateMappableBuffer(VulkanDevice device, integer size, integer bufferUsage) returns boolean
        VulkanConstants constants
        // Create a buffer on host-accessible memory for mapped sequential writing, using whatever usage flags the user provides.
        return Create(device, size, bufferUsage, constants:MEMORY_USAGE_AUTO, constants:ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT, 0, 0, false)
    end

    action CreateReadbackBuffer(VulkanDevice device, integer size) returns boolean
        VulkanConstants constants
        // Create a buffer that can be transferred into and that can be read at arbitrary times and places.
        return Create(device, size, constants:BUFFER_USAGE_TRANSFER_DESTINATION_BIT, constants:MEMORY_USAGE_AUTO, constants:ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT, 0, 0, false)
    end

    action Create(VulkanDevice device, integer size, integer bufferUsage, integer memoryUsage, integer allocationFlags, integer requiredMemoryFlags, integer preferredMemoryFlags, boolean allowConcurrentAccess) returns boolean
        VulkanConstants constants
        integer sharingMode = constants:SHARING_MODE_EXCLUSIVE
        if allowConcurrentAccess
            sharingMode = constants:SHARING_MODE_CONCURRENT
        end

        boolean success = CreateNative(device, size, bufferUsage, memoryUsage, allocationFlags, requiredMemoryFlags, preferredMemoryFlags, sharingMode)
        if success
            me:device = device
            me:size = size
            initialized = true

            BitwiseOperations bits
            if ( (bits:And(requiredMemoryFlags, constants:MEMORY_PROPERTY_HOST_VISIBLE_BIT) not= 0) or 
                 (bits:And(allocationFlags, bits:Or(constants:ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT, constants:ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT)) not= 0) )

                supportsMapping = true
            end
        end

        return success
    end

    private system action CreateNative(VulkanDevice device, integer size, integer usageFlags, integer memoryFlags, integer sharingMode) returns boolean

    private system action CreateNative(VulkanDevice device, integer size, integer bufferUsage, integer memoryUsage, integer allocationFlags, integer requiredMemoryFlags, integer preferredMemoryFlags, integer sharingMode) returns boolean

    action Dispose
        alert("NYI")
    end

    /*
    This action returns true if this buffer supports "mapped" memory that is directly accessible from the program, or false otherwise.
    Non-mapped (or "local") memory is stored directly on the GPU, which is more performant but not directly accessible from the program.
    Buffers don't support mapping by default, but can use mapped memory if they are created with the "MEMORY_PROPERTY_HOST_VISIBLE_BIT" 
    as part of the memory flags when they are created.
    */
    action SupportsMapping returns boolean
        return supportsMapping
    end

    action GetDevice returns VulkanDevice
        return device
    end

    action GetSize returns integer
        return size
    end

    /*
    This action returns true if the VulkanBuffer is currently mapping to a section of memory, or false otherwise. If the buffer doesn't support
    mapping (i.e. it wasn't created with the "MEMORY_PROPERTY_HOST_VISIBLE_BIT" property) then this will always return false.
    */
    system action IsMapping returns boolean

    /*
    This action allocates a chunk of memory that is accessible to the program, and maps the memory to the GPU's resources. The allocated memory
    must be freed later using the StopMapping action when it is no longer needed, or it will automatically be freed when calling the Dispose action.
    If this buffer doesn't support mapping, using this action will cause an error.
    */
    system action BeginMapping returns boolean

    /*
    This action frees the memory that has been previously allocated by the BeginMapping action. If the buffer doesn't currently have mapped memory,
    or if it doesn't support mapping, this action will do nothing. 
    */
    system action StopMapping

    action MapToNumber64BitMemory returns VulkanNumber64BitMappedMemory
        if not initialized
            alert("I couldn't map to memory because this VulkanBuffer hasn't been initialized! Use Create() first.")
        end
        if not SupportsMapping()
            alert("I couldn't map to memory because this VulkanBuffer doesn't support mapping! Create it using the 'MEMORY_PROPERTY_HOST_VISIBLE_BIT' property.")
        end

        VulkanNumber64BitMappedMemory result
        result:Create(me)
        return result
    end

    action MapToNumber32BitMemory returns VulkanNumber32BitMappedMemory
        if not initialized
            alert("I couldn't map to memory because this VulkanBuffer hasn't been initialized! Use Create() first.")
        end
        if not SupportsMapping()
            alert("I couldn't map to memory because this VulkanBuffer doesn't support mapping! Create it using the 'MEMORY_PROPERTY_HOST_VISIBLE_BIT' property.")
        end

        VulkanNumber32BitMappedMemory result
        result:Create(me)
        return result
    end

    action MapToInteger32BitMemory returns VulkanInteger32BitMappedMemory
        if not initialized
            alert("I couldn't map to memory because this VulkanBuffer hasn't been initialized! Use Create() first.")
        end
        if not SupportsMapping()
            alert("I couldn't map to memory because this VulkanBuffer doesn't support mapping! Create it using the 'MEMORY_PROPERTY_HOST_VISIBLE_BIT' property.")
        end

        VulkanInteger32BitMappedMemory result
        result:Create(me)
        return result
    end

end