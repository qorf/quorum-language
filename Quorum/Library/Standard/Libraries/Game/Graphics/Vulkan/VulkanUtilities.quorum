package Libraries.Game.Graphics.Vulkan

use Libraries.Compute.BitwiseOperations
use Libraries.Containers.Array
use Libraries.System.Properties
use Libraries.Game.Graphics.Shaders.ShaderConstants

shared class VulkanUtilities
    
    BitwiseOperations bits
    
    /*This action converts a Vulkan API version number from traditional "major.minor.patch" format
(e.g., "1.1.0") to a single integer code. This can be used anywhere that a Vulkan API version
number is required, but for most uses it's highly recommended to use one of the Vulkan API constant values
from the VulkanConstants class instead.

The encoded version ID will be an integer where the major component is bit-shifted left
22 places, the minor component is shifted left 12 places, and the patch bits remain in-place.*/
    action ConvertToAPIVersionID(integer major, integer minor, integer patch) returns integer
        integer majorComponent = bits:ShiftLeft(major, 22)
        integer minorComponent = bits:ShiftLeft(minor, 12)
        return bits:Or(bits:Or(majorComponent, minorComponent), patch)
    end
    
    /*This action returns an array containing the names of all the layers that are available on
this platform. 
Attribute: Returns An array containing the names of all layers available on this platform.*/
    action GetSupportedLayers returns Array<text>
        Array<text> layerNames
        GetSupportedLayers(layerNames)
        return layerNames
    end
    
/*This action fetches all of the names of all the layers that are available on this platform,
and adds them to the end of the provided text array.
Attribute: Parameter returnedLayers A text array that will contain the names of the available layers when the action finishes.*/
    system action GetSupportedLayers(Array<text> returnedLayers)
    
    /*
    This action finds the optimal set of validation layers that are available on this system and returns them
    as names in an array.
    */
    action GetSupportedValidationLayers returns Array<text>
        Array<text> resultLayers
        GetSupportedValidationLayers(resultLayers)
        return resultLayers
    end

    /*
    This action finds the optimal set of validation layers that are available on this system and adds them
    to the end of the provided text array.
    */
    action GetSupportedValidationLayers(Array<text> resultLayers)
        Array<text> layerNames = GetSupportedLayers()
        VulkanConstants constants
        
        // Try to find the optimal validation layers and only return those. 
        // Begin with the standard Khronos validation layer. If it's not available, try to use the LunarG validation layer instead.
        if layerNames:Has(constants:KHRONOS_VALIDATION_LAYER)
            resultLayers:Add(constants:KHRONOS_VALIDATION_LAYER)
        elseif layerNames:Has(constants:LUNARG_STANDARD_VALIDATION_LAYER)
            resultLayers:Add(constants:LUNARG_STANDARD_VALIDATION_LAYER)
        else
            // If neither of our first options were available, grab whatever fallbacks are available.
            if layerNames:Has(constants:GOOGLE_THREADING_VALIDATION_LAYER)
                resultLayers:Add(constants:GOOGLE_THREADING_VALIDATION_LAYER)
            end
            if layerNames:Has(constants:LUNARG_PARAMETER_VALIDATION_LAYER)
                resultLayers:Add(constants:LUNARG_PARAMETER_VALIDATION_LAYER)
            end
            if layerNames:Has(constants:LUNARG_OBJECT_TRACKER_VALIDATION_LAYER)
                resultLayers:Add(constants:LUNARG_OBJECT_TRACKER_VALIDATION_LAYER)
            end
            if layerNames:Has(constants:LUNARG_CORE_VALIDATION_LAYER)
                resultLayers:Add(constants:LUNARG_CORE_VALIDATION_LAYER)
            end
            if layerNames:Has(constants:GOOGLE_UNIQUE_OBJECTS_VALIDATION_LAYER)
                resultLayers:Add(constants:GOOGLE_UNIQUE_OBJECTS_VALIDATION_LAYER)
            end
        end
    end
    
    /*This action returns true if this platform has available validation layers for Vulkan, or false otherwise.
    Validation layers can be enabled to check for Vulkan errors and warnings, but they slow performance, so they
    typically should only be used while debugging.
    
    Attribute: Returns True if there are available validation layers to use, or false otherwise. */
    action AreValidationLayersSupported returns boolean
        return GetSupportedValidationLayers():IsEmpty() = false
    end

    /*This action returns an array containing the names of all the extensions that are available on
this platform. 
Attribute: Returns An array containing the names of all extensions available on this platform.*/
    action GetSupportedExtensions returns Array<text>
        Array<text> extensionNames
        GetSupportedExtensions(extensionNames)
        return extensionNames
    end

/*This action fetches all of the names of all the extensions that are available on this platform,
and stores them inside the provided text array.
Attribute: Parameter returnedExtensions A text array that will contain the names of the available extensions when the action finishes.*/
    system action GetSupportedExtensions(Array<text> returnedExtensions)

    /*
    This action finds any extensions that are required for Vulkan to render to the display on this platform. The found
    extensions will be added to the end of the provided array.

    Attribute: Parameter returnedExtensions An array of text to store results. The names of the found extensions will be added to the end of this array.
    */
    system action GetRequiredDisplayExtensions(Array<text> returnedExtensions)

    /*
    This action finds any extensions that are required for Vulkan to operate on the current platform and adds them to the
    end of the provided array. The required extensions are different depending on whether or not validation layers will be
    used for a VulkanInstance. To get extensions for use with validation layers, the boolean value should be true. To get
    extensions for use without validation layers, the value should be false instead.

    Attribute: Parameter returnedExtensions An array of text to store results. The names of the found extensions will be added to the end of this array.
    Attribute: Parameter useValidationLayers True if the extensions are to be used with validation layers enabled, or false otherwise.
    */
    action GetRequiredPlatformInstanceExtensions(Array<text> returnedExtensions, boolean useValidationLayers)
        VulkanConstants constants

        if useValidationLayers
            returnedExtensions:Add(constants:DEBUG_UTILITIES_EXTENSION)
        end

        Array<text> availableExtensions = GetSupportedExtensions()
        Properties properties
        if properties:IsMac()
            if useValidationLayers = true and availableExtensions:Has(constants:MAC_PORTABILITY_SUBSET_EXTENSION)
                returnedExtensions:Add(constants:MAC_PORTABILITY_SUBSET_EXTENSION)
            elseif useValidationLayers = false and availableExtensions:Has(constants:MAC_PORTABILITY_EXTENSION)
                returnedExtensions:Add(constants:MAC_PORTABILITY_EXTENSION)
            end
        end
    end

    /*
    This action finds any extensions that are required for VulkanDevices to operate on the current platform and adds them to the
    end of the provided array. The required extensions are different depending on whether or not validation layers will be
    used for a VulkanInstance. To get extensions for use with validation layers, the boolean value should be true. To get
    extensions for use without validation layers, the value should be false instead.

    Attribute: Parameter returnedExtensions An array of text to store results. The names of the found extensions will be added to the end of this array.
    Attribute: Parameter useValidationLayers True if the extensions are to be used with validation layers enabled, or false otherwise.
    */
    action GetRequiredPlatformDeviceExtensions(Array<text> returnedExtensions, boolean useValidationLayers)
        VulkanConstants constants

        Array<text> availableExtensions = GetSupportedExtensions()
        Properties properties
        if properties:IsMac()
            if useValidationLayers = true and availableExtensions:Has(constants:MAC_PORTABILITY_SUBSET_EXTENSION)
                returnedExtensions:Add(constants:MAC_PORTABILITY_SUBSET_EXTENSION)
            elseif useValidationLayers = false and availableExtensions:Has(constants:MAC_PORTABILITY_EXTENSION)
                returnedExtensions:Add(constants:MAC_PORTABILITY_EXTENSION)
            end
        end
    end

    /*
    This action converts a shader type from the ShaderConstants class to its corresponding
    Vulkan shader stage constant.
    */
    action ShaderTypeToVulkanShaderStage(integer shaderType) returns integer
        ShaderConstants shaders
        VulkanConstants constants
        if shaderType = shaders:FRAGMENT_SHADER
            return constants:SHADER_STAGE_FRAGMENT_BIT
        elseif shaderType = shaders:VERTEX_SHADER
            return constants:SHADER_STAGE_VERTEX_BIT
        elseif shaderType = shaders:GEOMETRY_SHADER
            return constants:SHADER_STAGE_GEOMETRY_BIT
        elseif shaderType = shaders:TESSELLATION_CONTROL_SHADER
            return constants:SHADER_STAGE_TESSELLATION_CONTROL_BIT
        elseif shaderType = shaders:TESSELLATION_EVALUATION_SHADER
            return constants:SHADER_STAGE_TESSELLATION_EVALUATION_BIT
        end

        return -1
    end

    /*
    This action converts a shader stage from the VulkanConstants to its corresponding type
    in the ShaderConstants.
    */
    action VulkanShaderStageToShaderType(integer shaderStage) returns integer
        ShaderConstants shaders
        VulkanConstants constants
        if shaderStage = constants:SHADER_STAGE_FRAGMENT_BIT
            return shaders:FRAGMENT_SHADER
        elseif shaderStage = constants:SHADER_STAGE_VERTEX_BIT
            return shaders:VERTEX_SHADER
        elseif shaderStage = constants:SHADER_STAGE_GEOMETRY_BIT
            return shaders:GEOMETRY_SHADER
        elseif shaderStage = constants:SHADER_STAGE_TESSELLATION_CONTROL_BIT
            return shaders:TESSELLATION_CONTROL_SHADER
        elseif shaderStage = constants:SHADER_STAGE_TESSELLATION_EVALUATION_BIT
            return shaders:TESSELLATION_EVALUATION_SHADER
        end

        return -1
    end
    
end