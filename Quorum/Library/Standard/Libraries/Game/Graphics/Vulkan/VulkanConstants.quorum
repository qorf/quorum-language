package Libraries.Game.Graphics.Vulkan

shared class VulkanConstants
    
    VulkanUtilities utilities
    
    // Constants representing common target Vulkan API versions. For other possible versions, see VulkanUtilities "ConvertToAPIVersionID" action.
    public constant integer API_VERSION_1_0_0 = utilities:ConvertToAPIVersionID(1, 0, 0)
    public constant integer API_VERSION_1_1_0 = utilities:ConvertToAPIVersionID(1, 1, 0)
    public constant integer DEFAULT_API_VERSION = API_VERSION_1_1_0

    // Values representing the engine information provided to Vulkan Instances when they're created under the hood.
    // These can be used to identify what engine is implementing Vulkan for hardware providers, such as driver manufacturers, if they choose to check.
    public constant text VULKAN_ENGINE_NAME = "Quorum"
    public constant integer VULKAN_ENGINE_VERSION = 1
    
    // Validation layer names. A platform might support some of these layers. If it does, it can use them for validation and error checking.
    public constant text KHRONOS_VALIDATION_LAYER = "VK_LAYER_KHRONOS_validation"
    public constant text LUNARG_STANDARD_VALIDATION_LAYER = "VK_LAYER_LUNARG_standard_validation"
    public constant text LUNARG_PARAMETER_VALIDATION_LAYER = "VK_LAYER_LUNARG_parameter_validation"
    public constant text LUNARG_OBJECT_TRACKER_VALIDATION_LAYER = "VK_LAYER_LUNARG_object_tracker"
    public constant text LUNARG_CORE_VALIDATION_LAYER = "VK_LAYER_LUNARG_core_validation"
    public constant text GOOGLE_THREADING_VALIDATION_LAYER = "VK_LAYER_GOOGLE_threading"
    public constant text GOOGLE_UNIQUE_OBJECTS_VALIDATION_LAYER = "VK_LAYER_GOOGLE_unique_objects"

    // Extension names. Used during the creation of VulkanInstances.
    public constant text DEBUG_UTILITIES_EXTENSION = "VK_EXT_debug_utils"
    public constant text MAC_PORTABILITY_EXTENSION = "VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME"
    public constant text MAC_PORTABILITY_SUBSET_EXTENSION = "VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME"
    
    // Flag bit values for defining the features of queue families. Needed while creating a physical device (to check which features it supports).
    public constant integer QUEUE_GRAPHICS_BIT = 1
    public constant integer QUEUE_COMPUTE_BIT = 2
    public constant integer QUEUE_TRANSFER_BIT = 4
    public constant integer QUEUE_SPARSE_BINDING_BIT = 8
    public constant integer QUEUE_PROTECTED_BIT = 16
    public constant integer QUEUE_VIDEO_DECODE_BIT = 32
    public constant integer QUEUE_VIDEO_ENCODE_BIT = 64
    public constant integer QUEUE_OPTICAL_FLOW_BIT = 256

    // An extension for devices and physical devices. Used to take graphics rendered to a swapchain and display them on the screen.
    public constant text SWAPCHAIN_EXTENSION = "VK_KHR_swapchain"

    // Constants representing types of physical devices. 
    public constant integer PHYSICAL_DEVICE_TYPE_OTHER = 0
    public constant integer PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
    public constant integer PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
    public constant integer PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
    public constant integer PHYSICAL_DEVICE_TYPE_CPU = 4

    
    // Data formats. Used for representing colors, inputs, attachments, and during Swapchain creation, among other things.
    public constant integer FORMAT_UNDEFINED = 0
    public constant integer FORMAT_R4G4_UNORM_PACK8 = 1
    public constant integer FORMAT_R4G4B4A4_UNORM_PACK16 = 2
    public constant integer FORMAT_B4G4R4A4_UNORM_PACK16 = 3
    public constant integer FORMAT_R5G6B5_UNORM_PACK16 = 4
    public constant integer FORMAT_B5G6R5_UNORM_PACK16 = 5
    public constant integer FORMAT_R5G5B5A1_UNORM_PACK16 = 6
    public constant integer FORMAT_B5G5R5A1_UNORM_PACK16 = 7
    public constant integer FORMAT_A1R5G5B5_UNORM_PACK16 = 8
    public constant integer FORMAT_R8_UNORM = 9
    public constant integer FORMAT_R8_SNORM = 10
    public constant integer FORMAT_R8_USCALED = 11
    public constant integer FORMAT_R8_SSCALED = 12
    public constant integer FORMAT_R8_UINT = 13
    public constant integer FORMAT_R8_SINT = 14
    public constant integer FORMAT_R8_SRGB = 15
    public constant integer FORMAT_R8G8_UNORM = 16
    public constant integer FORMAT_R8G8_SNORM = 17
    public constant integer FORMAT_R8G8_USCALED = 18
    public constant integer FORMAT_R8G8_SSCALED = 19
    public constant integer FORMAT_R8G8_UINT = 20
    public constant integer FORMAT_R8G8_SINT = 21
    public constant integer FORMAT_R8G8_SRGB = 22
    public constant integer FORMAT_R8G8B8_UNORM = 23
    public constant integer FORMAT_R8G8B8_SNORM = 24
    public constant integer FORMAT_R8G8B8_USCALED = 25
    public constant integer FORMAT_R8G8B8_SSCALED = 26
    public constant integer FORMAT_R8G8B8_UINT = 27
    public constant integer FORMAT_R8G8B8_SINT = 28
    public constant integer FORMAT_R8G8B8_SRGB = 29
    public constant integer FORMAT_B8G8R8_UNORM = 30
    public constant integer FORMAT_B8G8R8_SNORM = 31
    public constant integer FORMAT_B8G8R8_USCALED = 32
    public constant integer FORMAT_B8G8R8_SSCALED = 33
    public constant integer FORMAT_B8G8R8_UINT = 34
    public constant integer FORMAT_B8G8R8_SINT = 35
    public constant integer FORMAT_B8G8R8_SRGB = 36
    public constant integer FORMAT_R8G8B8A8_UNORM = 37
    public constant integer FORMAT_R8G8B8A8_SNORM = 38
    public constant integer FORMAT_R8G8B8A8_USCALED = 39
    public constant integer FORMAT_R8G8B8A8_SSCALED = 40
    public constant integer FORMAT_R8G8B8A8_UINT = 41
    public constant integer FORMAT_R8G8B8A8_SINT = 42
    public constant integer FORMAT_R8G8B8A8_SRGB = 43
    public constant integer FORMAT_B8G8R8A8_UNORM = 44
    public constant integer FORMAT_B8G8R8A8_SNORM = 45
    public constant integer FORMAT_B8G8R8A8_USCALED = 46
    public constant integer FORMAT_B8G8R8A8_SSCALED = 47
    public constant integer FORMAT_B8G8R8A8_UINT = 48
    public constant integer FORMAT_B8G8R8A8_SINT = 49
    public constant integer FORMAT_B8G8R8A8_SRGB = 50
    public constant integer FORMAT_A8B8G8R8_UNORM_PACK32 = 51
    public constant integer FORMAT_A8B8G8R8_SNORM_PACK32 = 52
    public constant integer FORMAT_A8B8G8R8_USCALED_PACK32 = 53
    public constant integer FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
    public constant integer FORMAT_A8B8G8R8_UINT_PACK32 = 55
    public constant integer FORMAT_A8B8G8R8_SINT_PACK32 = 56
    public constant integer FORMAT_A8B8G8R8_SRGB_PACK32 = 57
    public constant integer FORMAT_A2R10G10B10_UNORM_PACK32 = 58
    public constant integer FORMAT_A2R10G10B10_SNORM_PACK32 = 59
    public constant integer FORMAT_A2R10G10B10_USCALED_PACK32 = 60
    public constant integer FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
    public constant integer FORMAT_A2R10G10B10_UINT_PACK32 = 62
    public constant integer FORMAT_A2R10G10B10_SINT_PACK32 = 63
    public constant integer FORMAT_A2B10G10R10_UNORM_PACK32 = 64
    public constant integer FORMAT_A2B10G10R10_SNORM_PACK32 = 65
    public constant integer FORMAT_A2B10G10R10_USCALED_PACK32 = 66
    public constant integer FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
    public constant integer FORMAT_A2B10G10R10_UINT_PACK32 = 68
    public constant integer FORMAT_A2B10G10R10_SINT_PACK32 = 69
    public constant integer FORMAT_R16_UNORM = 70
    public constant integer FORMAT_R16_SNORM = 71
    public constant integer FORMAT_R16_USCALED = 72
    public constant integer FORMAT_R16_SSCALED = 73
    public constant integer FORMAT_R16_UINT = 74
    public constant integer FORMAT_R16_SINT = 75
    public constant integer FORMAT_R16_SFLOAT = 76
    public constant integer FORMAT_R16G16_UNORM = 77
    public constant integer FORMAT_R16G16_SNORM = 78
    public constant integer FORMAT_R16G16_USCALED = 79
    public constant integer FORMAT_R16G16_SSCALED = 80
    public constant integer FORMAT_R16G16_UINT = 81
    public constant integer FORMAT_R16G16_SINT = 82
    public constant integer FORMAT_R16G16_SFLOAT = 83
    public constant integer FORMAT_R16G16B16_UNORM = 84
    public constant integer FORMAT_R16G16B16_SNORM = 85
    public constant integer FORMAT_R16G16B16_USCALED = 86
    public constant integer FORMAT_R16G16B16_SSCALED = 87
    public constant integer FORMAT_R16G16B16_UINT = 88
    public constant integer FORMAT_R16G16B16_SINT = 89
    public constant integer FORMAT_R16G16B16_SFLOAT = 90
    public constant integer FORMAT_R16G16B16A16_UNORM = 91
    public constant integer FORMAT_R16G16B16A16_SNORM = 92
    public constant integer FORMAT_R16G16B16A16_USCALED = 93
    public constant integer FORMAT_R16G16B16A16_SSCALED = 94
    public constant integer FORMAT_R16G16B16A16_UINT = 95
    public constant integer FORMAT_R16G16B16A16_SINT = 96
    public constant integer FORMAT_R16G16B16A16_SFLOAT = 97
    public constant integer FORMAT_R32_UINT = 98
    public constant integer FORMAT_R32_SINT = 99
    public constant integer FORMAT_R32_SFLOAT = 100
    public constant integer FORMAT_R32G32_UINT = 101
    public constant integer FORMAT_R32G32_SINT = 102
    public constant integer FORMAT_R32G32_SFLOAT = 103
    public constant integer FORMAT_R32G32B32_UINT = 104
    public constant integer FORMAT_R32G32B32_SINT = 105
    public constant integer FORMAT_R32G32B32_SFLOAT = 106
    public constant integer FORMAT_R32G32B32A32_UINT = 107
    public constant integer FORMAT_R32G32B32A32_SINT = 108
    public constant integer FORMAT_R32G32B32A32_SFLOAT = 109
    public constant integer FORMAT_R64_UINT = 110
    public constant integer FORMAT_R64_SINT = 111
    public constant integer FORMAT_R64_SFLOAT = 112
    public constant integer FORMAT_R64G64_UINT = 113
    public constant integer FORMAT_R64G64_SINT = 114
    public constant integer FORMAT_R64G64_SFLOAT = 115
    public constant integer FORMAT_R64G64B64_UINT = 116
    public constant integer FORMAT_R64G64B64_SINT = 117
    public constant integer FORMAT_R64G64B64_SFLOAT = 118
    public constant integer FORMAT_R64G64B64A64_UINT = 119
    public constant integer FORMAT_R64G64B64A64_SINT = 120
    public constant integer FORMAT_R64G64B64A64_SFLOAT = 121
    public constant integer FORMAT_B10G11R11_UFLOAT_PACK32 = 122
    public constant integer FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
    public constant integer FORMAT_D16_UNORM = 124
    public constant integer FORMAT_X8_D24_UNORM_PACK32 = 125
    public constant integer FORMAT_D32_SFLOAT = 126
    public constant integer FORMAT_S8_UINT = 127
    public constant integer FORMAT_D16_UNORM_S8_UINT = 128
    public constant integer FORMAT_D24_UNORM_S8_UINT = 129
    public constant integer FORMAT_D32_SFLOAT_S8_UINT = 130
    public constant integer FORMAT_BC1_RGB_UNORM_BLOCK = 131
    public constant integer FORMAT_BC1_RGB_SRGB_BLOCK = 132
    public constant integer FORMAT_BC1_RGBA_UNORM_BLOCK = 133
    public constant integer FORMAT_BC1_RGBA_SRGB_BLOCK = 134
    public constant integer FORMAT_BC2_UNORM_BLOCK = 135
    public constant integer FORMAT_BC2_SRGB_BLOCK = 136
    public constant integer FORMAT_BC3_UNORM_BLOCK = 137
    public constant integer FORMAT_BC3_SRGB_BLOCK = 138
    public constant integer FORMAT_BC4_UNORM_BLOCK = 139
    public constant integer FORMAT_BC4_SNORM_BLOCK = 140
    public constant integer FORMAT_BC5_UNORM_BLOCK = 141
    public constant integer FORMAT_BC5_SNORM_BLOCK = 142
    public constant integer FORMAT_BC6H_UFLOAT_BLOCK = 143
    public constant integer FORMAT_BC6H_SFLOAT_BLOCK = 144
    public constant integer FORMAT_BC7_UNORM_BLOCK = 145
    public constant integer FORMAT_BC7_SRGB_BLOCK = 146
    public constant integer FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
    public constant integer FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
    public constant integer FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
    public constant integer FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
    public constant integer FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
    public constant integer FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
    public constant integer FORMAT_EAC_R11_UNORM_BLOCK = 153
    public constant integer FORMAT_EAC_R11_SNORM_BLOCK = 154
    public constant integer FORMAT_EAC_R11G11_UNORM_BLOCK = 155
    public constant integer FORMAT_EAC_R11G11_SNORM_BLOCK = 156
    public constant integer FORMAT_ASTC_4x4_UNORM_BLOCK = 157
    public constant integer FORMAT_ASTC_4x4_SRGB_BLOCK = 158
    public constant integer FORMAT_ASTC_5x4_UNORM_BLOCK = 159
    public constant integer FORMAT_ASTC_5x4_SRGB_BLOCK = 160
    public constant integer FORMAT_ASTC_5x5_UNORM_BLOCK = 161
    public constant integer FORMAT_ASTC_5x5_SRGB_BLOCK = 162
    public constant integer FORMAT_ASTC_6x5_UNORM_BLOCK = 163
    public constant integer FORMAT_ASTC_6x5_SRGB_BLOCK = 164
    public constant integer FORMAT_ASTC_6x6_UNORM_BLOCK = 165
    public constant integer FORMAT_ASTC_6x6_SRGB_BLOCK = 166
    public constant integer FORMAT_ASTC_8x5_UNORM_BLOCK = 167
    public constant integer FORMAT_ASTC_8x5_SRGB_BLOCK = 168
    public constant integer FORMAT_ASTC_8x6_UNORM_BLOCK = 169
    public constant integer FORMAT_ASTC_8x6_SRGB_BLOCK = 170
    public constant integer FORMAT_ASTC_8x8_UNORM_BLOCK = 171
    public constant integer FORMAT_ASTC_8x8_SRGB_BLOCK = 172
    public constant integer FORMAT_ASTC_10x5_UNORM_BLOCK = 173
    public constant integer FORMAT_ASTC_10x5_SRGB_BLOCK = 174
    public constant integer FORMAT_ASTC_10x6_UNORM_BLOCK = 175
    public constant integer FORMAT_ASTC_10x6_SRGB_BLOCK = 176
    public constant integer FORMAT_ASTC_10x8_UNORM_BLOCK = 177
    public constant integer FORMAT_ASTC_10x8_SRGB_BLOCK = 178
    public constant integer FORMAT_ASTC_10x10_UNORM_BLOCK = 179
    public constant integer FORMAT_ASTC_10x10_SRGB_BLOCK = 180
    public constant integer FORMAT_ASTC_12x10_UNORM_BLOCK = 181
    public constant integer FORMAT_ASTC_12x10_SRGB_BLOCK = 182
    public constant integer FORMAT_ASTC_12x12_UNORM_BLOCK = 183
    public constant integer FORMAT_ASTC_12x12_SRGB_BLOCK = 184

    /*
    Constants for the color space, which describes the format the monitor expects colors in. This primarily comes in the form of SRGB or UNORM values.
    "UNORM" is normalized linear color space. Setting the value as UNORM means no transformation will be done. Monitors almost exclusively work in 
    the SRGB color space, though. This boils down to a concept known as "Gamma Correction." Using UNORM will typically result in aberrantly bright,
    uncorrected colors, so for most display applications, SRGB space is preferred.
    */
    public constant integer COLOR_SPACE_SRGB_NONLINEAR = 0


    // Constants used to describe whether or not resources can be accessed simultaneously by multiple queue families or swapchains.
    public constant integer SHARING_MODE_EXCLUSIVE = 0
    public constant integer SHARING_MODE_CONCURRENT = 1

    // Presentation modes for Swapchains. These control the timing of when rendered images are presented and how additional incoming images are stored.
    // These match the Vulkan present mode constants from Khronos. More info can be found here: https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentModeKHR.html
    /*
    The FIFO (or First In, First Out) presentation mode will present the next available image when the monitor refreshes. This is the only mode required to be supported 
    by hardware according to the Vulkan spec. Because it aligns with the refresh rate of the monitor, the FIFO mode implies the use of vSync. Note that if the queue of 
    images is full, the application will block!
    */
    public constant integer PRESENT_MODE_FIFO = 2
    /*
    The Immediate presentation mode will display each image as soon as it's ready. This doesn't match the monitor refresh rate, so this can cause screen tearing. This
    mode implies vSync is off.
    */
    public constant integer PRESENT_MODE_IMMEDIATE = 0
    /*
    The Mailbox presentation mode is similar to FIFO in that it displays images during monitor refreshes, but unlike FIFO it will only queue 1 image at a time.
    If an image is already queued when a new one comes in, it'll overwrite the previous image in the queue, and no blocking occurs. This means Mailbox can provide
    vSync-like effects (display on monitor refresh and no screen tearing), but we don't have to block if the GPU is working faster than the display.
    */
    public constant integer PRESENT_MODE_MAILBOX = 1
    /*
    The FIFO Relaxed mode is an adjustment to the FIFO mode. Like FIFO, this mode stores images in a queue, which are presented during monitor refreshes. However, if
    a monitor refresh occurs and there's no available image, then the next image will be presented as soon as it becomes available. Essentially, this mode is FIFO that
    will try to play catch-up if it's needed -- FIFO if rendering is fast, and IMMEDIATE if it's slow.
    */
    public constant integer PRESENT_MODE_FIFO_RELAXED = 3

    /*
    Composite alpha values for the Swapchain dictate how transparency is calculated for the window. This does NOT impact transparency calculated inside the application,
    e.g. a sprite with transparency drawn on top of another sprite. Instead, a composite alpha value can be used to show things behind the window. For most applications,
    using the OPAQUE value is best, because it is the fastest option and we don't usually want to show the content behind the window.
    */
    public constant integer COMPOSITE_ALPHA_OPAQUE_BIT = 1

    /*
    Bitmask values used to indicate which aspects of an image are being accessed as part of an ImageView.
    */
    public constant integer IMAGE_ASPECT_COLOR_BIT = 1

    /*
    Type values for defining the structure and use of Images.
    */
    public constant integer IMAGE_VIEW_TYPE_2D = 1

    /*
    Flags used during the creation of Command Pools.
    */
    public constant integer COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2

    /*
    Sampling flags, used when defining color attachments, and also used for the Rasterization Sampling value of
    VulkanPipelineInfo. 1 bit of sampling is the most direct and simple way to sample color.
    Multiple bits are used for multisampling, which is typically used to perform anti-aliasing. 
    */
    public constant integer SAMPLE_COUNT_1_BIT = 1
    public constant integer SAMPLE_COUNT_2_BIT = 2
    public constant integer SAMPLE_COUNT_4_BIT = 4
    public constant integer SAMPLE_COUNT_8_BIT = 8
    public constant integer SAMPLE_COUNT_16_BIT = 16
    public constant integer SAMPLE_COUNT_32_BIT = 32
    public constant integer SAMPLE_COUNT_64_BIT = 64

    /*
    Constants for load and store operations for attachments. Load operations indicate what operations, if any, should be performed on the data in an attachment when it's loaded
    (i.e. first time using the attachment during a pass). Store operations indicate what operations should be done on the data once the pass is finished with the attachment.
    */
    public constant integer ATTACHMENT_STORE_OP_STORE = 0
    public constant integer ATTACHMENT_STORE_OP_DONT_CARE = 1
    public constant integer ATTACHMENT_LOAD_OP_LOAD = 0
    public constant integer ATTACHMENT_LOAD_OP_CLEAR = 1
    public constant integer ATTACHMENT_LOAD_OP_DONT_CARE = 2
    
    /*
    Constants representing image layouts. These describe the format of stored image data. 
    */
    public constant integer IMAGE_LAYOUT_UNDEFINED = 0
    public constant integer IMAGE_LAYOUT_GENERAL = 1
    public constant integer IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
    public constant integer IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
    public constant integer IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
    public constant integer IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
    public constant integer IMAGE_LAYOUT_TRANSFER_SOURCE_OPTIMAL = 6
    public constant integer IMAGE_LAYOUT_TRANSFER_DESTINATION_OPTIMAL = 7
    public constant integer IMAGE_LAYOUT_PREINITIALIZED = 8
    public constant integer IMAGE_LAYOUT_PRESENT_SOURCE = 1000001002

    /*
    Constants used to bind to pipeline stages.
    */
    public constant integer PIPELINE_BIND_POINT_GRAPHICS = 0

    /*
    A constant value indicating that part of a subpass occurs outside of the regular Vulkan pipeline, such as work with the swapchain
    (because presentation occurs outside of the regular pipeline).
    */
    public constant integer SUBPASS_EXTERNAL = -1

    /*
    Bitmask constants for pipeline stages. Used in subpass dependencies and barriers to indicate what stages work begins and finishes in.
    */
    public constant integer PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
    public constant integer PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
    public constant integer PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
    public constant integer PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
    public constant integer PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
    public constant integer PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
    public constant integer PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
    public constant integer PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
    public constant integer PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 245
    public constant integer PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
    public constant integer PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
    public constant integer PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
    public constant integer PIPELINE_STAGE_TRANSFER_BIT = 4096
    public constant integer PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
    public constant integer PIPELINE_STAGE_HOST_BIT = 16384
    public constant integer PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
    public constant integer PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536

    /*
    Bitmask constants for access masks. Used for subpass dependencies, barriers, and broadly for identifying what elements can be accessed at certain times.
    */
    public constant integer ACCESS_INDIRECT_COMMAND_READ_BIT = 1
    public constant integer ACCESS_INDEX_READ_BIT = 2
    public constant integer ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
    public constant integer ACCESS_UNIFORM_READ_BIT = 8
    public constant integer ACCESS_INPUT_ATTACHMENT_READ_BIT  = 16
    public constant integer ACCESS_SHADER_READ_BIT = 32
    public constant integer ACCESS_SHADER_WRITE_BIT = 64
    public constant integer ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
    public constant integer ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
    public constant integer ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
    public constant integer ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
    public constant integer ACCESS_TRANSFER_READ_BIT = 2048
    public constant integer ACCESS_TRANSFER_WRITE_BIT = 4096
    public constant integer ACCESS_HOST_READ_BIT = 8192
    public constant integer ACCESS_HOST_WRITE_BIT = 16384
    public constant integer ACCESS_MEMORY_READ_BIT = 32768
    public constant integer ACCESS_MEMORY_WRITE_BIT = 65536

    /*
    Constants used for the Input Rate value of VulkanVertexInputBindingDescription. These indicate that values are provided
    either per-vertex or per-instance while using a particular Pipeline.
    */
    public constant integer VERTEX_INPUT_RATE_VERTEX = 0
    public constant integer VERTEX_INPUT_RATE_INSTANCE = 1

    /*
    Constants for the Topology value of VulkanPipelineInfo. These represent different ways for vertices
    to be combined together into geometry.
    */
    public constant integer PRIMITIVE_TOPOLOGY_POINT_LIST = 0
    public constant integer PRIMITIVE_TOPOLOGY_LINE_LIST = 1
    public constant integer PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
    public constant integer PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
    public constant integer PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
    public constant integer PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
    public constant integer PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
    public constant integer PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
    public constant integer PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
    public constant integer PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
    public constant integer PRIMITIVE_TOPOLOGY_PATCH_LIST = 10

    /*
    Constants for the Polygon Mode value of VulkanPipelineInfo. These describe how polygons should be filled in,
    sketched, or otherwise rendered.
    */
    public constant integer POLYGON_MODE_FILL = 0
    public constant integer POLYGON_MODE_LINE = 1
    public constant integer POLYGON_MODE_POINT = 2
    public constant integer POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000

    /*
    Constants used for the Cull Mode value of VulkanPipelineInfo. These describe which polygons are culled during
    rendering based on their orientation, or in other words, which side(s) of a rendered model should be ignored.
    */
    public constant integer CULL_MODE_NONE = 0
    public constant integer CULL_MODE_FRONT_BIT = 1
    public constant integer CULL_MODE_BACK_BIT = 2
    public constant integer CULL_MODE_FRONT_AND_BACK = 3

    /*
    Constants used for the Front Face value of VulkanPipelineInfo. These are used to determine which way a polygon
    is facing, based on the order of the provided vertices, and which way they rotate about their center point.
    */
    public constant integer FRONT_FACE_COUNTER_CLOCKWISE = 0
    public constant integer FRONT_FACE_CLOCKWISE = 1

    /*
    Constants for color components.
    */
    public constant integer COLOR_COMPONENT_R_BIT = 1
    public constant integer COLOR_COMPONENT_G_BIT = 2
    public constant integer COLOR_COMPONENT_B_BIT = 4
    public constant integer COLOR_COMPONENT_A_BIT = 8

    /*
    Constants representing Shader stages. These are different the shader type values in the ShaderConstants, but they can be
    converted to and from using VulkanUtilities' "ShaderTypeToVulkanShaderStage" and "VulkanShaderStageToShaderType" actions.
    */
    public constant integer SHADER_STAGE_VERTEX_BIT = 1
    public constant integer SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
    public constant integer SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
    public constant integer SHADER_STAGE_GEOMETRY_BIT = 8
    public constant integer SHADER_STAGE_FRAGMENT_BIT = 16
    public constant integer SHADER_STAGE_COMPUTE_BIT = 32
    public constant integer SHADER_STAGE_ALL_GRAPHICS = 31
    public constant integer SHADER_STAGE_ALL = 2147483647

    /*
    These constants are used to indicate the "level" of a command buffer. Buffers can be either primary or secondary buffers.
    According to the Vulkan documentation, primary command buffers can execute secondary command buffers and are submitted to queues,
    while secondary command buffers can be executed by primary command buffers and are not directly submitted to queues.
    */
    public constant integer COMMAND_BUFFER_LEVEL_PRIMARY = 0
    public constant integer COMMAND_BUFFER_LEVEL_SECONDARY = 1

    /*
    Values indicating how a command buffer will be used.
    */
    public constant integer COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
    public constant integer COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
    public constant integer COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4

    /*
    These values indicate how a chunk of memory will be used. These can be used for the "memoryUsage"
    parameter for creating a VulkanBuffer. For most purposes, MEMORY_USAGE_AUTO will give best results
    when combined with an appropriate "bufferUsage" value.
    */
    public constant integer MEMORY_USAGE_UNKNOWN = 0
    public constant integer MEMORY_USAGE_GPU_LAZILY_ALLOCATED = 6
    public constant integer MEMORY_USAGE_AUTO = 7
    public constant integer MEMORY_USAGE_AUTO_PREFER_DEVICE = 8
    public constant integer MEMORY_USAGE_AUTO_PREFER_HOST = 9

    /*
    Memory property bits, used when allocating memory (e.g. for VulkanBuffers). These can be used for the 
    "requiredMemoryFlags" and "preferredMemoryFlags" parameters for creating a VulkanBuffer, and they can
    be combined with the "Or" action in BitwiseOperations.
    */
    public constant integer MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
    public constant integer MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
    public constant integer MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
    public constant integer MEMORY_PROPERTY_HOST_CACHED_BIT = 8
    public constant integer MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
    public constant integer MEMORY_PROPERTY_PROTECTED_BIT = 32
    public constant integer MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
    public constant integer MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
    public constant integer MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256

    /*
    Constants used by the Vulkan Memory Allocator and by the VulkanBuffer classes to describe how to allocate memory.
    These can be used for the "allocationFlags" parameter for creating a VulkanBuffer, and can be combined with the
    "Or" action in BitwiseOperations.
    */
    public constant integer ALLOCATION_CREATE_DEDICATED_MEMORY_BIT = 1
    public constant integer ALLOCATION_CREATE_NEVER_ALLOCATE_BIT = 2
    public constant integer ALLOCATION_CREATE_MAPPED_BIT = 4
    public constant integer ALLOCATION_CREATE_RESERVED_1_BIT = 8
    public constant integer ALLOCATION_CREATE_RESERVED_2_BIT = 16
    public constant integer ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT = 32
    public constant integer ALLOCATION_CREATE_UPPER_ADDRESS_BIT = 64
    public constant integer ALLOCATION_CREATE_DONT_BIND_BIT = 128
    public constant integer ALLOCATION_CREATE_WITHIN_BUDGET_BIT = 256
    public constant integer ALLOCATION_CREATE_CAN_ALIAS_BIT = 512
    public constant integer ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT = 1024
    public constant integer ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT = 2048
    public constant integer ALLOCATION_CREATE_HOST_ACCESS_ALLOW_TRANSFER_INSTEAD_BIT = 4096
    public constant integer ALLOCATION_CREATE_STRATEGY_MINIMUM_MEMORY_BIT = 8192
    public constant integer ALLOCATION_CREATE_STRATEGY_MINIMUM_TIME_BIT = 16384
    public constant integer ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT = ALLOCATION_CREATE_STRATEGY_MINIMUM_MEMORY_BIT

    /*
    These constants indicate how VulkanBuffers are intended to be used. These can be combined with BitwiseOperations and sent
    as the "usageFlags" parameter when using VulkanBuffer's Create action.
    */    
    public constant integer BUFFER_USAGE_TRANSFER_SOURCE_BIT = 1
    public constant integer BUFFER_USAGE_TRANSFER_DESTINATION_BIT = 2
    public constant integer BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
    public constant integer BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
    public constant integer BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
    public constant integer BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
    public constant integer BUFFER_USAGE_INDEX_BUFFER_BIT = 64
    public constant integer BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
    public constant integer BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
    public constant integer BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
    public constant integer BUFFER_USAGE_VIDEO_DECODE_SOURCE_BIT_KHR = 8192
    public constant integer BUFFER_USAGE_VIDEO_DECODE_DESTINATION_BIT_KHR = 16384
    public constant integer BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
    public constant integer BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
    public constant integer BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
    public constant integer BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 33554432
    public constant integer BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
    public constant integer BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
    public constant integer BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
    public constant integer BUFFER_USAGE_VIDEO_ENCODE_DESTINATION_BIT_KHR = 32768
    public constant integer BUFFER_USAGE_VIDEO_ENCODE_SOURCE_BIT_KHR = 65536
    public constant integer BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152
    public constant integer BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304
    public constant integer BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864
    public constant integer BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608
    public constant integer BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216
    public constant integer BUFFER_USAGE_RAY_TRACING_BIT_NV = BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR
    public constant integer BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT
    public constant integer BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT

    // Constants used to describe how Vulkan Images will be used. These are bit flags, so they can be combined in a bitmask.
    public constant integer IMAGE_USAGE_TRANSFER_SOURCE_BIT = 1
    public constant integer IMAGE_USAGE_TRANSFER_DESTINATION_BIT = 2
    public constant integer IMAGE_USAGE_SAMPLED_BIT = 4
    public constant integer IMAGE_USAGE_STORAGE_BIT = 8
    public constant integer IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
    public constant integer IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
    public constant integer IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
    public constant integer IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
    public constant integer IMAGE_USAGE_HOST_TRANSFER_BIT = 4194304
    public constant integer IMAGE_USAGE_VIDEO_DECODE_DESTINATION_BIT_KHR = 1024
    public constant integer IMAGE_USAGE_VIDEO_DECODE_SOURCE_BIT_KHR = 2048
    public constant integer IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096
    public constant integer IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
    public constant integer IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256
    public constant integer IMAGE_USAGE_VIDEO_ENCODE_DESTINATION_BIT_KHR = 8192
    public constant integer IMAGE_USAGE_VIDEO_ENCODE_SOURCE_BIT_KHR = 16384
    public constant integer IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768
    
    /*
    These constants represent how commands will be submitted to a VulkanCommandBuffer during a render pass.
    */
    public constant integer SUBPASS_CONTENTS_INLINE = 0
    public constant integer SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
    public constant integer SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS = 1000451000

    /*
    These constants represent dynamic states that can be enabled in VulkanPipelines. Use these in the
    "dynamicStates" Array of VulkanPipelineInfo.
    */
    public constant integer DYNAMIC_STATE_SCISSOR = 1
    public constant integer DYNAMIC_STATE_VIEWPORT = 0

    /*
    Data types for index buffers. Used with the BindIndexBufferCommand class.
    */
    public constant integer INDEX_TYPE_UINT16 = 0
    public constant integer INDEX_TYPE_UINT32 = 1

    /*
    Data types for descriptors. Used to access data from shaders for things like uniforms.
    */
    public constant integer DESCRIPTOR_TYPE_SAMPLER = 0
    public constant integer DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
    public constant integer DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
    public constant integer DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
    public constant integer DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
    public constant integer DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
    public constant integer DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
    public constant integer DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
    public constant integer DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
    public constant integer DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
    public constant integer DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10

    /*
    Vulkan error codes.
    */
    public constant integer SUCCESS = 0
    public constant integer ERROR_OUT_OF_POOL_MEMORY = -1000069000

    /*
    Image types, used to indicate how many dimensions a VulkanImage has. IMAGE_TYPE_2D is suitable for most cases.
    */
    public constant integer IMAGE_TYPE_1D = 0
    public constant integer IMAGE_TYPE_2D = 1
    public constant integer IMAGE_TYPE_3D = 2

    /*
    Image tiling values, used during image creation. IMAGE_TILING_OPTIMAL is suitable for most cases.
    */
    public constant integer IMAGE_TILING_OPTIMAL = 0
    public constant integer IMAGE_TILING_LINEAR = 1

    /*
    This value indicates that the queue family is not used for an operation. Used in VulkanImageMemoryBarrier, among other possible places.
    */
    public constant integer QUEUE_FAMILY_IGNORED = -1

    /*
    Filter values used by image samplers, defining how values are retrieved while performing texture lookups.
    Impacts how textures are sampled when they're rendered to the screen bigger or smaller than the original texture.
    */
    public constant integer FILTER_NEAREST = 0
    public constant integer FILTER_LINEAR = 1

    /*
    Mipmap modes, used by image samplers to specify how texture lookups should be performed for mipmapped textures.
    */
    public constant integer SAMPLER_MIPMAP_MODE_NEAREST = 0
    public constant integer SAMPLER_MIPMAP_MODE_LINEAR = 1

    /*
    Address modes, or wrap modes, dictate how an image sampler should act when asked to lookup a texture outside of its defined coordinates.
    */
    public constant integer SAMPLER_ADDRESS_MODE_REPEAT = 0
    public constant integer SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
    public constant integer SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
    public constant integer SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
    public constant integer SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4

    /*
    Comparison operators are used by depth, stencil, and sampler operations to compare values. The exact results depend on what context the operations are being used in.
    */
    public constant integer COMPARE_OP_NEVER = 0
    public constant integer COMPARE_OP_LESS = 1
    public constant integer COMPARE_OP_EQUAL = 2
    public constant integer COMPARE_OP_LESS_OR_EQUAL = 3
    public constant integer COMPARE_OP_GREATER = 4
    public constant integer COMPARE_OP_NOT_EQUAL = 5
    public constant integer COMPARE_OP_GREATER_OR_EQUAL = 6
    public constant integer COMPARE_OP_ALWAYS = 7

    /*
    A special value used in VulkanSamplerInfo for the "maxLod" property, indicating that maximum LoD clamping should not be performed.
    */
    public constant number LOD_CLAMP_NONE = 1000.0

    /*
    Values used by VulkanSamplerInfo's "borderColor" property. Used in conjunction with "SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER" wrap mode to provide a default color
    when sampling outside of the texture's defined bounds.
    */
    public constant integer BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
    public constant integer BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
    public constant integer BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
    public constant integer BORDER_COLOR_INT_OPAQUE_BLACK = 3
    public constant integer BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
    public constant integer BORDER_COLOR_INT_OPAQUE_WHITE = 5

end
