package Libraries.Game.Graphics

use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Color
use Libraries.System.Properties
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Fonts.FontManager

/*
The Font class is used to load a font from the system. 

Attribute: Example

    use Libraries.Game.Graphics.Font
    use Libraries.Game.Graphics.Label
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            Font font
            Label label
            if not font:IsFontAvailable("Verdana")
                output "The font could not be found!"
                return now
            end
            font:LoadFont("Verdana")
            font:SetSize(18)
            label:SetFont(font)
            Add(label)
        end
    end
*/
class Font 
    GameStateManager gameStateManager
    
    boolean isSystemFont = true
    //This is the full path of the font, including the name
    text fontName = ""
    //This field is the raw name of the font
    text name = ""
    integer fontSize = 14
    number angle = 0

    boolean bordered = false

    Color color

    text subFont = ""
    text style = ""

    text fontIdentifier = ""
    boolean needToRecalculateID = true

    on create
        Setup()
    end
    
    private action Setup
        color = color:Black()
        SetColor(color)
    end

    /*
    This action sets the style of the font to use, such as bold, italic, condensed,
    and so on. This is only applicable to TrueTypeCollection (.ttc) files.

    Attribute: Parameter style The style of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:SetStyle("Regular")
                font:LoadFont(file)
            end
        end
    */
    action SetStyle(text style)
        me:style = style
    end

    /*
    This action changes the style of the font. This is only applicable to TrueTypeCollection
    (.ttc) files.

    Attribute: Parameter style The style of the font to change to.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
                font:ChangeSubFont("Italic")
            end
        end
    */
    action ChangeSubFont(text style)
        subFont = style
    end

    /*
    This action loads a font from a given font file. 

    Attribute: Parameter fontFile The file to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
            end
        end
    */
    action LoadFont(File fontFile)
        needToRecalculateID = true
        isSystemFont = false
        fontName = fontFile:GetAbsolutePath()
        name = fontFile:GetNameNoExtension()
    end
    
    /*This action gets the name of the font, including the file extension.

Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
                output font:GetName()
            end
        end*/
    action GetName returns text
        return name
    end

    /*
    This action will load a font by name from the system. On Windows, this will
    search for fonts in "C:\Windows\Fonts". On Mac, this will search for fonts
    in "/Library/Fonts".

    Attribute: Parameter fontName The name of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
            end
        end
    */
    action LoadFont(text fontName)
        if IsFontAvailable(fontName) = false
            alert("I couldn't find a system font named " + fontName + ".")
        end

        needToRecalculateID = true
        isSystemFont = true
        me:fontName = fontName
        name = fontName
    end

    /*
    This action will look in the default system font folder and look for a font
    of the given name. If a font is found with the same name, the action will
    return true. Otherwise, it returns false.

    Attribute: Parameter fontName The name of the font to check for on the system.
    
    Attribute: Returns Returns true if the font is on the system, and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output font:IsFontAvailable("Times New Roman")
            end
        end
    */
    action IsFontAvailable(text fontName) returns boolean
        FontManager manager = gameStateManager:GetFontManager()
        return manager:IsFontAvailable(fontName)
    end

    /*
    This action will set the size of the font. The default font size is 14.

    Attribute: Parameter newSize The size to change the font to.
    
    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetSize(16)
            end
        end
    */
    action SetSize (integer newSize)
        needToRecalculateID = true
        fontSize = newSize
    end

    /*
    This action will return the current size of the font. The default font size
    is 14.

    Attribute: Returns Returns the current size of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The default font size is " + font:GetSize()
            end
        end
    */
    action GetSize returns integer
        return fontSize
    end

    /*
    This action will rotate the characters produced by this font by the given
    number of degrees.

    Attribute: Parameter rotation The number of degrees to rotate the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:Rotate(45)
            end
        end
    */
    action Rotate(number rotation)
        needToRecalculateID = true
        angle = angle + rotation
    end

    /*
    This action will set the angle in degrees of the characters produced by this
    font.

    Attribute: Parameter newAngle The number of degrees to angle the font by.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetAngle(90)
            end
        end
    */
    action SetAngle(number newAngle)
        needToRecalculateID = true
        angle = newAngle
    end

    /*
    This action will set the color of the characters produced by this font.

    Attribute: Parameter newColor The color to use for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color
                font:SetColor(color:Orange())
            end
        end
    */
    private action SetColor(Color newColor)
        color = newColor
    end

    /*
    This action will return the color of the characters produced by this font.

    Attribute: Returns The color being used by this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color = font:GetColor()
            end
        end
    */
    private action GetColor returns Color
        return color
    end

    /*
    This action will return the current angle of the font. The default angle is
    0 degrees.

    Attribute: Returns Returns the current angle of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The font has an angle of " + font:GetAngle() + " degrees."
            end
        end
    */
    action GetAngle returns number
        return angle
    end

    /*
    This action will either enable or disable borders for this font. By default, fonts do not support borders.

    Attribute: Parameter bordered True to enable borders, or false to disable them.
    
    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetBordered(true)
            end
        end
    */
    action SetBordered(boolean bordered)
        needToRecalculateID = true
        me:bordered = bordered
    end

    /*
    This action will return true if this font currently supports borders, or false if it does not.
    The default value is false.

    Attribute: Returns Returns whether or not borders are enabled on this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "By default, font borders enabled = " + font:IsBordered()
            end
        end
    */
    action IsBordered returns boolean
        return bordered
    end

    /*
    This action will release the resources used by a loaded font. The Font 
    object will no longer be usable until another font is loaded.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                font:Dispose()
            end
        end
    */
    action Dispose
        fontName = ""
        needToRecalculateID = true
        isSystemFont = true
        fontSize = 14
        angle = 0
        bordered = false
        subFont = ""
        style = ""
        color = color:Black()
    end

    /*
    This action will return a Glyph object for this font's representation of the
    given character. 

    Attribute: Parameter character The character to create a glyph of.

    Attribute: Returns Returns a glyph representation of the character.
    
    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Glyph
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                Glyph a = font:GetGlyph("a")
            end
        end
    */
    action GetGlyph(text character) returns Glyph
        FontManager manager = gameStateManager:GetFontManager()
        Glyph glyph = manager:GetGlyph(me, character)
        glyph:color = color
        return glyph
    end

    /*
    This action will check if the font has been loaded yet. If the font has
    been loaded, this will return true. Otherwise, it will return false.

    Attribute: Returns Returns true if the font is loaded, and false if it is not.
    
    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                boolean loaded = font:IsLoaded()
            end
        end
    */
    action IsLoaded returns boolean
        return fontName not= ""
    end

    /*
    This action will return the height of each line of text produced by this font.

    Attribute: Returns Returns the height of a line of text for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer height = font:GetLineHeight()
            end
        end
    */
    action GetLineHeight returns integer
        FontManager manager = gameStateManager:GetFontManager()
        return manager:GetLineHeight(me)
    end

    /*
    This action will return an array of all files found in the system's default
    font folder.

    Attribute: Returns Returns an array with all the font files on the system.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Containers.Array
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Array<File> fontFiles = font:GetAvailableFonts()
                integer index = 0
                output "The following fonts are available on the system: "
                repeat fontFiles:GetSize() times
                    File temp = fontFiles:Get(index)
                    output temp:GetPath()
                    index = index + 1
                end
            end
        end
    */
    action GetAvailableFonts returns Array<File>
        FontManager manager = gameStateManager:GetFontManager()
        return manager:GetAvailableFonts()
    end
    
    /*
    This action calculates the kerning value between a pair of characters and then
    returns it.

    Attribute: Parameter currentCharacter The first character in the pair.

    Attribute: Parameter nextCharacter The second character in the pair.

    Attribute: Returns Returns the kerning value between these two characters.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer kerning = font:GetKerning("A", "V")
            end
        end
    */
    action GetKerning(text currentCharacter, text nextCharacter) returns integer
        FontManager manager = gameStateManager:GetFontManager()
        return manager:GetKerning(me, currentCharacter, nextCharacter)
    end

    action GetMaximumAscent returns integer
        FontManager manager = gameStateManager:GetFontManager()
        return manager:GetMaximumAscent(me)
    end

    action GetMaximumDescent returns integer
        FontManager manager = gameStateManager:GetFontManager()
        return manager:GetMaximumDescent(me)
    end

    action GetUnderlinePosition returns integer
        FontManager manager = gameStateManager:GetFontManager()
        return manager:GetUnderlinePosition(me)
    end

    action GetUnderlineThickness returns integer
        FontManager manager = gameStateManager:GetFontManager()
        return manager:GetUnderlineThickness(me)
    end

    /*
    This action returns an identifier that uniquely identifies whatever Font has
    been loaded by this object. This is used to request Font information from
    the FontManager. Most users will never need to use this action directly.
    */
    action GetIdentifier returns text
        if needToRecalculateID
            CalculateIdentifier()
        end
        return fontIdentifier
    end

    /*
        This action copies the Font.

        Attribute: Returns the copied font

        Attribute: Example
        use Libraries.Game.Graphics.Font
        Font font
        Font font2 = font:Copy()
        output "Hooray!"
    */
    action Copy returns Font
        Font font
        font:isSystemFont = me:isSystemFont
        font:fontName = me:fontName
        font:fontSize = me:fontSize
        font:angle = me:angle
        font:subFont = me:subFont
        font:style = me:style
        font:fontIdentifier = me:fontIdentifier
        font:needToRecalculateID = me:needToRecalculateID
        font:bordered = me:bordered
        return font
    end

    private action CalculateIdentifier
        needToRecalculateID = false
        FontManager manager = gameStateManager:GetFontManager()

        text systemText = manager:SYSTEM_PREFIX
        if isSystemFont = false
            systemText = manager:FILE_PREFIX
        end

        text borderText = manager:BORDERLESS_TAG
        if bordered
            borderText = manager:BORDERED_TAG
        end

        text delimiter = manager:FONT_DELIMITER

        fontIdentifier = systemText + delimiter + fontName + delimiter + fontSize + delimiter + angle + delimiter + borderText
    end
end