package Libraries.Game

use Libraries.Game.WebConfiguration
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Controls.TextField

class WebDisplay is GameDisplay

    text name = "default"

    action SetName(text newName)
        name = newName
    end

    action GetName returns text
        return name
    end

    /* 
    This action sets the ApplicationConfiguration being used by the game,
    which includes data for the screen. The ApplicationConfiguration must be of
    the correct type or otherwise an error will be thrown, i.e., if the
    GameDisplay is a WebDisplay, it must receive a WebConfiguration.
    */
    action SetConfiguration(ApplicationConfiguration configuration)
        if not (configuration is WebConfiguration)
            alert("Attempted to configure a WebDisplay with an application configuration that is not used for the web!")
        end
        SetConfigurationNative(cast(WebConfiguration, configuration))
    end

    private system action SetConfigurationNative(WebConfiguration config)

    /*
    This action returns the ApplicationConfiguration being used by the
    GameDisplay.
    */
    system action GetConfiguration returns ApplicationConfiguration

    /*
    This action prepares the display for use. The WebDisplay must already have
    been given a WebConfiguration using the SetConfiguration action, and the
    provided configuration must have a valid canvas identifier to be used by the
    display.
    */
    system action SetupDisplay()

    /*
    This action sets the width and height of the GameDisplay, and optionally
    makes the game full screen. Returns a boolean value indicating whether the
    action was successful - for example, this should typically work on desktops,
    but on mobile devices it will fail and return false.
    */
    system action SetDisplayMode(integer width, integer height, 
                                 boolean fullscreen) returns boolean

    /*
    This action returns the width of the GameDisplay.
    */
    system action GetWidth returns integer

    /*
    This action returns the height of the GameDisplay.
    */
    system action GetHeight returns integer

    /*
    This action sets vSync on or off for the GameDisplay.
    */
    system action SetVSync(boolean vsync)

    /*
    This action returns whether the GameDisplay is resizable or not.
    */
    system action GetResize returns boolean

    /*
    This action returns whether or not the GameDisplay has been resized.
    */
    system action WasResized returns boolean

    /*
    This action tells the GameDisplay to render to the screen.
    */
    system action RequestRendering

    /*
    This action returns whether or not the GameDisplay has currently been asked
    to render.
    */
    system action RenderingRequested returns boolean

    /*
    This action closes the window.
    */
    system action Destroy

    /*
    This action updates the game's timekeeping information. Also resets the
    flag for requested rendering.
    */
    system action UpdateTime

    /*
    This action records the time when the action is called, and stores it.
    */
    system action SetLastTime

    /*
    This action tests how many seconds have passed since the last time that the
    time was updated.
    */
    system action GetSecondsBetweenFrames returns number

    /*
    This action returns the number of seconds that have passed since the game
    was started.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.GameDisplay
    use Libraries.Game.GameStateManager
    
    class Main is Game

        GameDisplay display = undefined
        integer frameCount = 0

        action Main
            StartGame()
        end

        action CreateGame
            GameStateManager manager
            display = manager:GetGameDisplay()
        end

        action Update(number seconds)
            frameCount = frameCount + 1
            if frameCount = 30
                number time = display:GetSecondsSinceStart()
                output "The game has been running for " + time + " seconds."
            end
        end
    end
    */
    system action GetSecondsSinceStart returns number

    /*
    This action returns the ratio between screen coordinates and pixels.
    */
    system action GetPixelScaleFactor returns number

    /*
    The IsAvailable action returns whether or not a display is available
    to draw on. If no display is available, actions that try to create or draw
    graphics (such as loading a Drawable) will create an error. This will return
    false if called before StartGame() is called in the Game class, and will
    typically return true after the game has been started.
    */
    system action IsAvailable returns boolean
    
/*
        Not all implementations support a clipboard, but all displays support
        the operations so that they can be called everywhere. If an implementation
        supports a clipboard, the appopriate system mechanisms are handled 
        automatically.
    */
    system action GetClipboard returns text
    
    /*
        Not all implementations support a clipboard, but all displays support
        the operations so that they can be called everywhere. If an implementation
        supports a clipboard, the appropriate system mechanisms are handled 
        automatically.
    */
    system action SetClipboard(text value)
    
    /*This action will paste into the TextBox at the given index from system clipboard. This 
is an asynchronous action, meaning the result won't occur immediately -- it depends on 
how long the browser takes to retrieve the contents of the clipboard. */
    system action PasteFromClipboard(TextBox box, integer index)
    
/*This action will paste into the TextBox at the given index from system clipboard. This 
is an asynchronous action, meaning the result won't occur immediately -- it depends on 
how long the browser takes to retrieve the contents of the clipboard. */
    system action PasteFromClipboard(TextField field, integer index)

end