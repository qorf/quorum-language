/*
    The foundation of any game. Any user created game should inherit from this
    and must implement CreateGame and Update.
*/

package Libraries.Game

use Libraries.Game.GameDisplay
use Libraries.Game.DesktopDisplay
use Libraries.Game.GameStateManager
use Libraries.Game.Application
use Libraries.Game.DesktopApplication
use Libraries.Game.AndroidApplication
use Libraries.Game.AndroidDisplay
use Libraries.Game.AndroidConfiguration
use Libraries.Game.Graphics.AndroidGraphics
use Libraries.Game.IOSApplication
use Libraries.Game.IOSConfiguration
use Libraries.Game.IOSDisplay
use Libraries.Game.GameInput
use Libraries.Game.DesktopInput
use Libraries.Game.IOSInput
use Libraries.Game.WebApplication
use Libraries.Game.WebDisplay
use Libraries.Game.WebConfiguration
use Libraries.Game.WebInput
use Libraries.Game.FocusManager
use Libraries.Game.Scenes.Scene
use Libraries.Game.Scenes.SceneManager
use Libraries.Game.Scenes.DefaultSceneManager
use Libraries.Game.Graphics.WebGraphics
use Libraries.Game.Graphics.IOSGraphics
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Skybox
use Libraries.Game.Graphics.PointLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Fonts.FontManager
use Libraries.Interface.Accessibility
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Behaviors.FocusNextBehavior
use Libraries.Interface.Behaviors.FocusPreviousBehavior
use Libraries.Interface.Behaviors.CancelBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCaretStartMoveBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxStartDeleteBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxStartNewLineBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxInsertBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxAddIndentationBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxRemoveIndentationBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxOpenKeyboardBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCaretToDocumentStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCaretToDocumentEndBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectToDocumentStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectToDocumentEndBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCaretToTokenEndBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCaretToTokenStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectToTokenStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectToTokenEndBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectWordStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectWordEndBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldCaretStartMoveBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldStartDeleteBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldInsertBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCopyToClipboardBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCutToClipboardBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxPasteFromClipboardBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldCopyToClipboardBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldCutToClipboardBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldPasteFromClipboardBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCaretToLineStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxCaretToLineEndBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldCaretToStartBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldCaretToTokenStartBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldCaretToTokenEndBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldCaretToEndBehavior  
use Libraries.Interface.Behaviors.Controls.TextFieldSelectToStartBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldSelectToEndBehavior   
use Libraries.Interface.Behaviors.Controls.TextFieldSelectTokenStartBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldSelectTokenEndBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxDoubleClickSelectWordBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldDoubleClickSelectWordBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxPageDownBehavior  
use Libraries.Interface.Behaviors.Controls.TextBoxPageUpBehavior  
use Libraries.Interface.Behaviors.Controls.TextBoxSavePreviousCaretPositionBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectToMouseClickBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldSavePreviousCaretPositionBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldSelectToMouseClickBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectToLineStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectToLineEndBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxWordJumpStartBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxWordJumpEndBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxUndoBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxRedoBehavior
use Libraries.Interface.Behaviors.Controls.TextBoxSelectAllBehavior
use Libraries.Interface.Behaviors.Controls.TextFieldSelectAllBehavior
use Libraries.Containers.List
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.System.Properties
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.TextInputListener
use Libraries.Interface.Events.ResizeListener
use Libraries.Interface.Events.SelectionListener
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Events.TabChangeListener
use Libraries.Interface.Events.MenuChangeListener
use Libraries.Interface.Events.TreeChangeListener
use Libraries.Interface.Events.ControlActivationListener
use Libraries.Interface.Events.WindowFocusListener
use Libraries.Interface.Item
use Libraries.Interface.Item2D
use Libraries.Interface.Item3D
use Libraries.Interface.Events.CollisionEvent
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionListener3D
use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Interface.Behaviors.Controls.TextBoxOpenPopupMenuBehavior
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Undo.EditManager
use Libraries.System.File
use Libraries.System.SystemHelper
use Libraries.Interface.Behaviors.Controls.ChartNavigateBehavior
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Interface.Events.GestureListener
use Libraries.Interface.Options.LightModeOptions
use Libraries.Interface.Events.GestureEvent
use Libraries.Interface.DefaultInputSets
use Libraries.Interface.Behaviors.Controls.ChartMovableRegressionDragBehavior
use Libraries.Interface.Events.ScreenshotListener
use Libraries.Containers.Support.SortableContainer
use Libraries.Interface.Events.ScreenshotEvent
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.SharedTextureManager
use Libraries.Game.Graphics.Shaders.ShaderManager

/*
The Game class is the heart of any game in Quorum. The basic Game class will
just display a gray screen. To make your own game, you should make a new class
that inherits from Game, and make your own versions of the CreateGame() and
Update(number) actions. The example below will pop up an empty gray window.

Attribute: Author William Allee

Attribute: Example

    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
        end

        action Update(number seconds)
        end
    end
*/
class Game
    DesktopConfiguration desktopConfig
    IOSConfiguration iosConfig
    AndroidConfiguration androidConfig
    WebConfiguration webConfig
    GraphicsManager gl20 = undefined
    GameStateManager manager
    FocusManager focusManager
    Accessibility accessibility = undefined
    EditManager editManager
    InterfaceOptions interfaceOptions = undefined

    SharedTextureManager sharedTextureManager
    ShaderManager shaderManager

    public boolean exitRequested = false

    // An instance of a GameInput, e.g. DesktopInput, WebInput, etc. Handles the
    // input for the game.
    private GameInput gameInput = undefined

    // Variables for the Layer system.
    private Array<Layer> layers
    private Layer2D currentLayer2D = undefined
    private Layer3D currentLayer3D = undefined

    private constant integer ANDROID_APPLICATION = 1
    private constant integer DESKTOP_APPLICATION = 2
    private constant integer IOS_APPLICATION = 3
    private constant integer WEB_APPLICATION = 4

    private integer applicationType = -1

    /* This allows us to turn off collisions for the entire game. */
    private boolean collide = true

    // How much time must pass after typing characters for first letter navigation before the filter resets.
    number firstLetterNavigationTime = 0.400

    // A pool storing used DialogLayers for later reuse.
    DialogLayerPool dialogLayerPool

    // Used to save to and load from scene files.
    SceneManager sceneManager = undefined

    /*
    A list of screenshots that need to be taken after rendering the next frame
    of animation. The screenshot events contain the coordinate information for
    where the screenshot should be taken from the screen. The listeners are
    optional and may be undefined. If they're not, they act as callbacks specific
    to their related ScreenshotEvent.

    Entries are removed after processing, so this array will be empty at the
    beginning of each frame.
    */
    Array<SortableContainer<ScreenshotEvent, ScreenshotListener>> pendingScreenshots

    on create
        LightModeOptions options
        interfaceOptions = options
    end

    /* This allows us to know if collisions are on or off for the layer. */
    action IsColliding returns boolean
        return collide
    end

    /* This allows us to turn collisions on or off for the layer. */
    action SetColliding(boolean collide)
        me:collide = collide
    end

    /*
    The StartGame action will start your game. Specifically, it does this:
    1. Creates the Game window.
    2. Calls the CreateGame() action.
    3. Repeatedly calls Update() until Exit() is called or the window is closed.

    If you are using any actions to change the starting settings of the window,
    call those before calling StartGame().

    Attribute: Example

        use Libraries.Game.Game

        class Main
            action Main
                Game game
                Game:StartGame()
            end
        end
    */
    action StartGame
        manager:SetGame(me)

        SystemHelper systemHelper
        manager:SetMainThreadName(systemHelper:GetThreadName())

        Application application = SelectApplicationType()
        if application = undefined
            alert("I could not identify what type of application to use for this operating system!")
        end

        if application is DesktopApplication
            if desktopConfig:title = ""
                desktopConfig:title = "Game"
            end

            gl20 = manager:GetGameGraphics()

            DesktopInput newInput
            gameInput = newInput
            manager:SetInput(gameInput)

            DesktopDisplay display
            manager:SetGameDisplay(display)

            display:SetConfiguration(desktopConfig)
            display:SetupDisplay()
        elseif application is AndroidApplication
            manager:SetApplication(application)
            StartAndroidGame()
            return now

        elseif application is IOSApplication

            gl20 = manager:GetGameGraphics()
            
            IOSInput newInput
            gameInput = newInput
            manager:SetInput(newInput)

            IOSDisplay display
            manager:SetGameDisplay(display)
            display:SetConfiguration(iosConfig)

            IOSGraphics iosGraphics
            manager:SetGameGraphics(iosGraphics)
        elseif application is WebApplication
            WebInput newInput
            newInput:InitializeGestureProcessor(webConfig:containerID)
            gameInput = newInput
            manager:SetInput(newInput)

            WebDisplay display
            manager:SetGameDisplay(display)
            display:SetName("StartGame")
            display:SetConfiguration(webConfig)
            //display:SetupDisplay()

            WebGraphics webGraphics
            manager:SetGameGraphics(webGraphics)

            WebApplication webApp = cast(WebApplication, application)
            webApp:SetConfiguration(webConfig)

            gl20 = webGraphics
        end

        CompleteInitialSetup(application)
    end

    /*
        This action gets the default EditManager from the system.

        Attribute: Returns The EditManager

        Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Undo.EditManager

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                EditManager edits = GetEditManager()
            end

            action Update(number seconds)
            end
        end
    */
    action GetEditManager returns EditManager
        return editManager
    end

    /*
        This action sets the default EditManager from the system to a custom one.

        Attribute: Parameter The EditManager
        
        Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Undo.EditManager

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                EditManager edits
                SetEditManager(edits)
            end

            action Update(number seconds)
            end
        end
    */
    action SetEditManager(EditManager edits)
        me:editManager = edits
    end

    /*
        Not all implementations support a clipboard, but all displays support
        the operations so that they can be called everywhere. If an implementation
        supports a clipboard, the appopriate system mechanisms are handled 
        automatically. The example here would output whatever is currently
        on the clipboard.

        Attribute: Returns this action returns text from the system clipboard.

        Attribute: Example

        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                output GetClipboard()
            end

            action Update(number seconds)
            end
        end
    */
    action GetClipboard returns text
        GameDisplay display = manager:GetGameDisplay()
        return display:GetClipboard()
    end
    
    /*
        Not all implementations support a clipboard, but all displays support
        the operations so that they can be called everywhere. If an implementation
        supports a clipboard, the appopriate system mechanisms are handled 
        automatically. The example here sets a message to the clipboard, which can
        then be used across other applications.

        Attribute: Parameter value this action set text to the system clipboard.

        Attribute: Example

        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                output SetClipboard("My Message")
            end

            action Update(number seconds)
            end
        end
    */
    action SetClipboard(text value)
        GameDisplay display = manager:GetGameDisplay()
        display:SetClipboard(value)
    end

    /*
    Complete game set up and begin the main loop. Used from StartGame, as well
    as other places that "act like" StartGame for platforms with special timing
    considerations (e.g., StartAndroidGame).
    */
    private action CompleteInitialSetup(Application application)
        /*
        We pass a reference to the layers array to the GameInput. This will 
        allow it to properly test input on items in the game. Because it is an
        object reference, future changes to the array of layers will also be
        reflected in the GameInput.
        */
        gameInput:SetLayers(layers)

        SetFocusManager(focusManager)
        CreateDefaultInputTables()

        DefaultSceneManager manager
        sceneManager = manager
    
        if accessibility not= undefined
            accessibility:Setup()
        end

        application:Setup(me)
    end

    /*
    Attempts to start an Android game. If the screen orientation doesn't match
    the requested one, this instead sets the screen orientation and awaits the
    driver Android activity to call it again once the orientation has changed.

    This is due to an issue where changing the screen orientation forcibly
    restarts the activity. If we didn't do it this way but instead just launched
    the game directly, we'd initialize and run the game twice due to being in
    the wrong screen orientation.
    */
    private action StartAndroidGame
        AndroidApplication androidApp = cast(AndroidApplication, manager:GetApplication())
        
        if androidApp:RequiresOrientationChange(androidConfig)
            androidApp:ResetOrientationToDefault(androidConfig)
            return now
        end

        AndroidInput newInput
        gameInput = newInput
        manager:SetInput(gameInput)

        AndroidDisplay display
        manager:SetGameDisplay(display)
        display:SetConfiguration(androidConfig)

        AndroidGraphics graphics
        manager:SetGameGraphics(graphics)
        gl20 = graphics

        CompleteInitialSetup(androidApp)
    end

    /*
    Used to create the initial InputTables used for default input handling.
    */
    private action CreateDefaultInputTables
        KeyboardEvent keys
        MouseEvent mouse

        InputTable defaultTable = GetDefaultInputTable()

        // Creating input sets for the default focus behaviors.
        InputSet tabFocus
        tabFocus:SetKeyboardInput(keys:TAB)
        FocusNextBehavior tabBehavior
        defaultTable:Add(tabFocus, tabBehavior)

        InputSet shiftTabFocus
        shiftTabFocus:SetKeyboardInput(keys:TAB)
        shiftTabFocus:AddModifier(shiftTabFocus:SHIFT)
        FocusPreviousBehavior shiftTabBehavior
        defaultTable:Add(shiftTabFocus, shiftTabBehavior)

        //Input tables for the Scene Editor
        DefaultInputSets sets
        sets:SetupSceneEditorInput(gameInput)

        //Input table for toolbars
        sets:SetupToolbarInput(gameInput)

        //Input table for ButtonGroup
        sets:SetupButtonGroupInput(gameInput)

        //input table for dialogs
        sets:SetupDialogInput(gameInput)

        // Adding the input table for TabPanes.
        sets:SetupTabPaneInput(gameInput)

        // Adding the input table for Buttons
        sets:SetupButtonInput(gameInput)

        // Adding Menu Input
        sets:SetupMenuInput(gameInput)

        // Adding Tree Input
        sets:SetupTreeInput(gameInput)

        // Adding Spreadsheet Input
        sets:SetupSpreadsheetInput(gameInput)

        // Adding TreeTable Input
        sets:SetupTreeTableInput(gameInput)

        // Adding List Input
        sets:SetupListInput(gameInput)

        // Adding Gutter Input
        sets:SetupGutterInput(gameInput)

        // Creating input sets for the default TextBox behaviors.
        sets:SetupTextBoxInput(gameInput)

        // Adding the input table for TextFields.
        sets:SetupTextFieldInput(gameInput)

        // Adding Chart Input
        sets:SetupChartInput(gameInput)

        // Adding FlowChart Input, which is different than typical charts.
        sets:SetupFlowChartInput(gameInput)

        // Adding Block Editor Input
        sets:SetupBlockEditorInput(gameInput)

        // Add the default input sets for the scroll bars of ScrollableControls.
        sets:SetupScrollBarControlInput(gameInput)

        // Add the default input sets for ScrollPanes.
        sets:SetupScrollPaneInput(gameInput)
    end

    /*
    The Add action will add an item to the Game. More specifically, the item
    will be added to the current default Layer2D. This will make the game handle
    the item for many tasks. For example, adding a Drawable will make it draw on
    the screen.

    Attribute: Parameter item The item to be added to the current default Layer2D.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Drawable

        class Main is Game
            Drawable bunny

            action Main
                StartGame()
            end

            action CreateGame
                bunny:Load("Images/Rabbit.png")
                Add(bunny)
            end
        end
    */
    action Add(Item2D item)
        currentLayer2D:Add(item)
    end

    /*
    The Add action will add an item to the Game. More specifically, the item
    will be added to the current default Layer3D. This will make the game handle
    the item for many tasks. For example, adding a Model will make it draw on 
    the screen.

    Attribute: Parameter item The item to be added to the current default Layer3D.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Model

        class Main is Game
            Model car

            action Main
                StartGame()
            end

            action CreateGame
                car:Load("sedan.g3db")
                Add(car)
            end
        end
    */
    action Add(Item3D item)
        currentLayer3D:Add(item)
    end

    /*
    The Remove action will remove an item that was put into the game using the
    Add action. More specifically, the item will be removed from the current
    default Layer2D. The game will no longer handle removed items - for example,
    removing a Drawable will make the game engine stop drawing it.

    Attribute: Parameter item The item to be removed from the default Layer2D.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Drawable

        class Main is Game
            Drawable bunny

            action Main
                StartGame()
            end

            action CreateGame
                bunny:Load("Images/Rabbit.png")
                Add(bunny)

                // If we don't have this remove command, the bunny will draw.
                Remove(bunny)
            end
        end
    */
    action Remove(Item2D item)
        currentLayer2D:Remove(item)
    end

    /*
    The Remove action will remove an item that was put into the game using the
    Add action. More specifically, the item will be removed from the current
    default Layer3D. The game will no longer handle removed items - for example,
    removing a Model will make the game engine stop drawing it.

    Attribute: Parameter item The item to be removed from the default Layer3D.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Model

        class Main is Game
            Model car

            action Main
                StartGame()
            end

            action CreateGame
                car:Load("sedan.g3db")
                Add(car)

                // If we don't have this remove command, the bunny will draw.
                Remove(car)
            end
        end
    */
    action Remove(Item3D item)
        currentLayer3D:Remove(item)
    end

    /*
    Draws all layers on the screen. Called from ContinueGame.
    */
    private action DrawAll
        integer counter = 0
        repeat layers:GetSize() times
            layers:Get(counter):Draw()
            counter = counter + 1
            ResetDepthBuffer()
        end
    end

    /*
    Processes any screenshots that have been requested. This should be called after drawing occurs,
    but before clearing the screen. Called from ContinueGame.
    */
    private action ProcessScreenshots
        repeat until pendingScreenshots:IsEmpty()
            SortableContainer<ScreenshotEvent, ScreenshotListener> current = pendingScreenshots:RemoveFromFront()
            ScreenshotEvent event = current:GetSorter()
            ScreenshotListener callback = current:GetValue()

            if event:GetWidth() = 0 and event:GetHeight() = 0
                event:SetDimensions(0, 0, GetScreenWidth(), GetScreenHeight())
            end

            PixelMap pixelMap
            pixelMap:Screenshot(event:GetX(), event:GetY(), event:GetWidth(), event:GetHeight())
            event:SetScreenshot(pixelMap)

            if callback not= undefined
                callback:OnScreenshot(event)
            end

            gameInput:NotifyScreenshotListeners(event)
        end
    end

    /*
    Clears out the old pixel data. Called from ContinueGame.
    */
    private action ClearScreen
        /*
        16640 is the result of an OR operation on GL_COLOR_BUFFER_BIT and 
        GL_DEPTH_BUFFER_BIT from the GraphicsManager. This means that both the
        color and depth buffers are cleared in OpenGL (failing to do this will
        cause odd rendering behavior).
        */
        gl20:ClearScreen(16640)
    end

    /*
    Resets the depth buffer so that multiple Layer3D can render.
    */
    private action ResetDepthBuffer
        /*
        256 is the value of GL_COLOR_BUFFER_BIT.
        */
        gl20:ClearScreen(256)
    end

    /*
    This action is used by the Game to regularly handle core engine processes.
    It is automatically called by the Game when necessary, and should never be
    used by users.
    */
    action ContinueGame
        gameInput:ProcessInputEvents()
        UpdateAll()
        
        number seconds = GetSecondsBetweenFrames()
        Update(seconds)
        
        if collide
            TestForCollisions(seconds)
        end

        if accessibility not= undefined
            accessibility:Update()
        end

        ClearScreen()
        DrawAll()

        // Process pending screenshots, if there are any (which most of the time, there won't be).
        ProcessScreenshots()
    end

    /*
    This action will set the game configuration when run on desktop platforms.
    The configuration contains data that affect many technical details of the
    game, such as how large the screen will be. This should be set before
    calling StartGame().

    Attribute: Parameter config The DesktopConfiguration to use.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.DesktopConfiguration

    class Main is Game

        action Main
            DesktopConfiguration configuration
            configuration:width = 1000
            configuration:height = 800
            configuration:resizable = true
            SetConfiguration(configuration)
            StartGame()
        end

    end

    */
    action SetConfiguration(DesktopConfiguration config)
        desktopConfig = config
    end

    /*
    This action will return the game's configuration for desktop platforms.

    Attribute: Returns The current DesktopConfiguration.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.DesktopConfiguration

    class Main is Game

        action Main
            DesktopConfiguration configuration = GetDesktopConfiguration()
            output "The default width and height of the Game are " + configuration:width + ", " + configuration:height
            StartGame()
        end

    end

    */
    action GetDesktopConfiguration returns DesktopConfiguration
        return desktopConfig
    end

    /*
    This action will set the game configuration when run on web browsers.
    The configuration contains data that affect many technical details of the
    game, such as whether or not to limit the FPS. This should be set before
    calling StartGame().

    Attribute: Parameter config The WebConfiguration to use.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.WebConfiguration

    class Main is Game

        action Main
            WebConfiguration configuration
            configuration:containerID = "game-container"
            configuration:capFramesPerSecond = true
            configuration:framesPerSecondLimit = 45
            SetConfiguration(configuration)
            StartGame()
        end

    end

    */
    action SetConfiguration(WebConfiguration config)
        webConfig = config
    end

    /*
    This action will return the game's configuration for web platforms.

    Attribute: Returns The current WebConfiguration.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.WebConfiguration

    class Main is Game

        action Main
            WebConfiguration configuration = GetWebConfiguration()
            configuration:capFramesPerSecond = true
            StartGame()
        end

    end

    */
    action GetWebConfiguration returns WebConfiguration
        return webConfig
    end

    /*
    This action will set the game configuration when run on an Android device.
    The configuration contains data that affect many technical details of the
    game, such as whether the device should use portrait or landscape
    orientation while running the game. This should be set before calling 
    StartGame().

    Attribute: Parameter config The AndroidConfiguration to use.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.AndroidConfiguration

    class Main is Game

        action Main
            AndroidConfiguration configuration
            configuration:defaultOrientation = configuration:PORTRAIT
            SetConfiguration(configuration)
            StartGame()
        end

    end

    */
    action SetConfiguration(AndroidConfiguration config)
        androidConfig = config
    end

    /*
    This action will return the game's configuration for Android devices.

    Attribute: Returns The current AndroidConfiguration.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.AndroidConfiguration

    class Main is Game

        action Main
            AndroidConfiguration configuration = GetAndroidConfiguration()
            configuration:defaultOrientation = configuration:PORTRAIT
            StartGame()
        end

    end

    */
    action GetAndroidConfiguration returns AndroidConfiguration
        return androidConfig
    end

    /*
    The GetScreenWidth action will return the width of the screen as an integer.

    Attribute: Returns The width of the screen.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                output GetScreenWidth()
            end
        end
    */
    action GetScreenWidth returns integer
        return manager:GetGameDisplay():GetWidth()
    end

    /*
    The GetScreenHeight action will return the height of the screen as an integer.

    Attribute: Returns The height of the screen.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                output GetScreenHeight()
            end
        end
    */
    action GetScreenHeight returns integer
        return manager:GetGameDisplay():GetHeight()
    end

    /*
    Using SetColorFilter will tint all drawn objects on the currently active 
    Layer2D that do not have their own custom color tint. For example, using a 
    red color filter will make all objects drawn on the currently active Layer2D
    to appear to be more red.

    Attribute: Parameter color The color filter to apply to the currently active Layer2D.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color

        class Main is Game
        
            Drawable bunny
            Color tint

            action Main
                StartGame()
            end

            action CreateGame
                bunny:Load("Rabbit.png")
                Add(bunny)
                
                tint = tint:Maroon()

                SetColorFilter(tint)
            end
        end
    */
    action SetColorFilter(Color color)
        currentLayer2D:SetColorFilter(color)
    end

    /*
    SetColorFilter can also be called using four number parameters instead of a
    color object. The four parameters are the red, green, blue, and opacity
    of the filter, respectively. All four of the parameters should be between 0
    and 1, representing between 0% and 100% of that color component. For example,
    a value of 0 for red means that the tinting color will have no red, while a
    value of 1 will have all red components. An opacity of 0 is totally
    transparent, while an opacity of 1 will be totally visible. 

    Attribute: Parameter red The red component of the color filter to apply.
    Attribute: Parameter green The green component of the color filter to apply.
    Attribute: Parameter blue The blue component of the color filter to apply.
    Attribute: Parameter alpha The alpha (or transparency) component of the color filter to apply. 

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Drawable

        class Main is Game
        
            Drawable bunny

            action Main
                StartGame()
            end

            action CreateGame
                bunny:Load("Rabbit.png")
                Add(bunny)
                
                // Our color will have 75% red, 0% green, 75% blue, and be
                // totally opaque. This will tint our bunny image purple.

                SetColorFilter(0.75, 0, 0.75, 1)
            end
        end
    */
    action SetColorFilter(number red, number green, number blue, number alpha)
        currentLayer2D:SetColorFilter(red, green, blue, alpha)
    end

    /*
    GetSecondsBetweenFrames will return the number of seconds that has passed
    between the current frame and the previous one. Frames are the still images
    drawn on the screen in rapid succession to make the images appear to move.
    Note that the value from this field is approximately the same value as the
    parameter in the Update action.

    Attribute: Returns How many seconds have passed since the previous frame.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action Update(number time)
                output "Seconds since last frame: " + GetSecondsBetweenFrames()
            end
        end
    */
    action GetSecondsBetweenFrames returns number
        return manager:GetGameDisplay():GetSecondsBetweenFrames()
    end

    /*
    The Update action is where most of the game's logic goes. The code inside
    Update will be called on every frame of the game. In other words, for
    every time a picture is drawn on the screen, the Update action is called.
    The number parameter is the amount of seconds that has passed since the last
    time Update was called.

    Attribute: Parameter time The number of seconds that have passed since the last time Update was called.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            // It is very important when making our own Update action that it has
            // the time parameter! If we don't have it, it won't be called.
            action Update(number time)
                output "Update was called!"
            end
        end
    */
    action Update(number time)

    end

    /*
    CreateGame is called when you first start the game, and is useful for setting
    up things that need to be initialized before they can be used, like loading
    Drawables.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Drawable

        class Main is Game

            Drawable bunny

            action Main
                StartGame()
            end

            action CreateGame
                bunny:Load("Rabbit.png")
                Add(bunny)
            end
            
        end
    */
    action CreateGame

    end

    /*
    The Exit action is used to tell the Game class to close the application
    after it completes the current iteration of the main loop.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            number timer = 0

            action Main
                StartGame()
            end

            action Update(number time)
                timer = timer + time
                if timer > 3
                    Exit()
                    output "Exiting the game!"
                end
            end
            
        end
    */
    action Exit
        exitRequested = true
    end

    /*
    The OnExit action is called when the Game is about to close, either because
    the Exit action was called or because the user requested it (for example, by
    attempting to close the window on desktop platforms). The action must return
    a boolean value representing whether or not the application should proceed
    to shut down. If the returned value is true, the application will shut down.
    If it is false, the program will continue running instead. Users should
    always make sure that it is possible for OnExit to return true in some cases
    to allow the user to close the program.

    This action doesn't prevent the Game from shutting down on all platforms.
    For example, mobile devices typically don't allow an application to keep
    itself open after a close has been requested.

    Attribute: Returns True if the Game should be allowed to close, false if the Game should continue running.

    Attribute: Example

    use Libraries.Game.Game

    class Main is Game
        integer countdown = 3

        action Main
            StartGame()
        end

        action OnExit returns boolean
            if countdown <= 0
                return true
            end
            output "Countdown: " + countdown
            countdown = countdown - 1
            return false
        end
    end
    */
    action OnExit returns boolean
        return true
    end

    /*
    This action updates each of the Layers in the Game. This is called 
    automatically by the Game class as part of the main loop (see ContinueGame).
    */
    private action UpdateAll
        integer counter = 0
        repeat layers:GetSize() times
            layers:Get(counter):Update(GetSecondsBetweenFrames())
            counter = counter + 1
        end
    end

    /*
    This action looks for input events and notifies any event handlers that
    have been added to the Game class as necessary. This action is called
    automatically by the Game class as part of the main loop, so most users will
    never need to use this action directly.
    */
    private action ProcessInputEvents
        gameInput:ProcessInputEvents()
    end

    /*
    This action adds a MouseListener to the Game. The mouse listener will be
    notified of mouse buttons being clicked and released, so long as the event
    is not handled by any listeners in the layers.

    Attribute: Parameter listener The MouseListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.MouseListener

        class Main is Game

            MouseListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddMouseListener(listener)
            end
            
        end
    */
    action AddMouseListener(MouseListener listener)
        gameInput:AddMouseListener(listener)
    end

    /*
    This action adds a MouseMovementListener to the Game. The listener will be 
    notified of mouse movement and dragging, so long as the event is not handled
    by any listeners in the layers.

    Attribute: Parameter listener The MouseMovementListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.MouseMovementListener

        class Main is Game

            MouseMovementListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddMouseMovementListener(listener)
            end
            
        end
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        gameInput:AddMouseMovementListener(listener)
    end

    /*
    This action adds a MouseWheelListener to the Game. The listener will be
    notified of mouse wheel scrolling, so long as the event is not handled by
    any listeners in the layers.

    Attribute: Parameter listener The MouseWheelListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.MouseWheelListener

        class Main is Game

            MouseWheelListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddMouseWheelListener(listener)
            end
            
        end
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        gameInput:AddMouseWheelListener(listener)
    end

    /*
    This action adds a KeyboardListener to the Game. The listener will be 
    notified of keys being pressed and released.

    Attribute: Parameter listener The KeyboardListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.KeyboardListener

        class Main is Game

            KeyboardListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddKeyboardListener(listener)
            end
            
        end
    */
    action AddKeyboardListener(KeyboardListener listener)
        gameInput:AddKeyboardListener(listener)
    end

    /*
    This action adds a TextInputListener to the Game. The listener will be 
    notified when the Game receives textual input from the keyboard.

    Attribute: Parameter listener The TextInputListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.TextInputListener

        class Main is Game

            TextInputListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddTextInputListener(listener)
            end
            
        end
    */
    action AddTextInputListener(TextInputListener listener)
        gameInput:AddTextInputListener(listener)
    end

    /*
    This action adds a ResizeListener to the Game. The listener will be 
    notified when the size of the Game rendering space changes size, such as a
    window being resized or made fullscreen, or a phone rotating orientation.

    Attribute: Parameter listener The ResizeListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.ResizeListener

        class Main is Game

            ResizeListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddResizeListener(listener)
            end
            
        end
    */
    action AddResizeListener(ResizeListener listener)
        gameInput:AddResizeListener(listener)
    end

    /*
    This action removes a MouseListener from the Game. The mouse listener will 
    no longer receive mouse events from the Game. If the given MouseListener was
    not part of the Game, then this will have no effect.

    Attribute: Parameter listener The MouseListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.MouseListener

        class Main is Game

            MouseListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddMouseListener(listener)

                RemoveMouseListener(listener)
            end
            
        end
    */
    action RemoveMouseListener(MouseListener listener)
        gameInput:RemoveMouseListener(listener)
    end

    /*
    This action removes a MouseMovementListener from the Game. The listener will
    no longer receive events from the Game. If the given MouseMovementListener
    was not part of the Game, then this will have no effect.

    Attribute: Parameter listener The MouseMovementListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.MouseMovementListener

        class Main is Game

            MouseMovementListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddMouseMovementListener(listener)

                RemoveMouseMovementListener(listener)
            end
            
        end
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        gameInput:RemoveMouseMovementListener(listener)
    end

    /*
    This action removes a MouseWheelListener from the Game. The listener will no
    longer receive events from the Game. If the given MouseWheelListener is not
    part of the Game, then this will have no effect.

    Attribute: Parameter listener The MouseWheelListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.MouseWheelListener

        class Main is Game

            MouseWheelListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddMouseWheelListener(listener)

                RemoveMouseWheelListener(listener)
            end
            
        end
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        gameInput:RemoveMouseWheelListener(listener)
    end

    /*
    This action removes a KeyboardListener from the Game. The listener will no
    longer receive events for key presses and releases.

    Attribute: Parameter listener The KeyboardListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.KeyboardListener

        class Main is Game

            KeyboardListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddKeyboardListener(listener)

                RemoveKeyboardListener(listener)
            end
            
        end
    */
    action RemoveKeyboardListener(KeyboardListener listener)
        gameInput:RemoveKeyboardListener(listener)
    end

    /*
    This action removes a TextInputListener from the Game. The listener will no
    longer receive events for text input from the keyboard.

    Attribute: Parameter listener The TextInputListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.TextInputListener

        class Main is Game

            TextInputListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddTextInputListener(listener)

                RemoveTextInputListener(listener)
            end
            
        end
    */
    action RemoveTextInputListener(TextInputListener listener)
        gameInput:RemoveTextInputListener(listener)
    end

    /*
    This action removes a ResizeListener from the Game. The listener will no
    longer receive resize events.

    Attribute: Parameter listener The ResizeListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.ResizeListener

        class Main is Game

            ResizeListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddResizeListener(listener)

                RemoveResizeListener(listener)
            end
            
        end
    */
    action RemoveResizeListener(ResizeListener listener)
        gameInput:RemoveResizeListener(listener)
    end

    /*
    This action adds a TouchListener to the Game. The touch listener will be
    notified when the user interacts with a touch screen, so long as the event
    is not handled by any items in the layers.

    Attribute: Parameter listener The TouchListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.TouchListener

        class Main is Game

            TouchListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddTouchListener(listener)
            end
            
        end
    */
    action AddTouchListener(TouchListener listener)
        gameInput:AddTouchListener(listener)
    end

    /*
    This action removes a TouchListener from the Game. The listener will no
    longer receive TouchEvents from the Game. If the given TouchListener is not
    a part of the Game, this action will have no effect.

    Attribute: Parameter listener The TouchListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.TouchListener

        class Main is Game

            TouchListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddTouchListener(listener)

                RemoveTouchListener(listener)
            end
            
        end
    */
    action RemoveTouchListener(TouchListener listener)
        gameInput:RemoveTouchListener(listener)
    end

    /*
    This action adds a GestureListener to the Game. The gesture listener will be
    notified when the user performs a gesture on mobile devices, so long as the event
    is not handled by any items in the layers.

    Attribute: Parameter listener The GestureListener to add to the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.GestureListener

        class Main is Game

            GestureListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddGestureListener(listener)
            end
            
        end
    */
    action AddGestureListener(GestureListener listener)
        gameInput:AddGestureListener(listener)
    end

    /*
    This action removes a GestureListener from the Game. The listener will no
    longer receive GestureEvents from the Game. If the given GestureListener is not
    a part of the Game, this action will have no effect.

    Attribute: Parameter listener The GestureListener to be removed from the Game.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Events.GestureListener

        class Main is Game

            GestureListener listener

            action Main
                StartGame()
            end

            action CreateGame
                AddGestureListener(listener)

                RemoveGestureListener(listener)
            end
            
        end
    */
    action RemoveGestureListener(GestureListener listener)
        gameInput:RemoveGestureListener(listener)
    end

    /*
    This action sets windowed size of the game (the default size is 800 by 600).
    This action can be called before calling StartGame() to set the initial
    window size. If this action is used when the game is in fullscreen, it will
    return it to windowed mode. If the game is already started, this action will
    adjust the cameras on the default 2D and 3D layers to correspond to the new
    window size.

    Attribute: Parameter width The screen width.
    Attribute: Parameter height The screen height.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                SetScreenSize(1024, 800)
                StartGame()
            end
        end
    */
    action SetScreenSize(integer width, integer height)
        SetScreenSize(width, height, true)
    end

    /*
    This action sets windowed size of the game (the default size is 800 by 600).
    This action can be called before calling StartGame() to set the initial
    window size. If this action is used when the game is in fullscreen, it will
    return it to windowed mode. If the game is already running and the boolean
    parameter is set to true, then the default cameras will be adjusted to fit
    the new window size. If the value is set to false, the cameras will not be
    adjusted.

    Attribute: Parameter width The screen width.
    Attribute: Parameter height The screen height.
    Attribute: Parameter adjustCameras True to adjust the default cameras to the new dimensions, false to keep the cameras the same.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                SetScreenSize(1024, 800)
                StartGame()
            end
        end
    */
    action SetScreenSize(integer width, integer height, boolean adjustCameras)
        desktopConfig:width = width
        desktopConfig:height = height

        if applicationType = DESKTOP_APPLICATION
            number startWidth = 0
            number startHeight = 0
            number startX = 0
            number startY = 0

            if adjustCameras = false
                Camera cam2D = GetCamera2D()

                startWidth = cam2D:GetWidth()
                startHeight = cam2D:GetHeight()
                startX = cam2D:GetPosition():GetX()
                startY = cam2D:GetPosition():GetY() 
            end

            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            display:SetDisplayMode(width, height, false)

            if adjustCameras = false
                Camera cam2D = GetCamera2D()

                cam2D:SetPosition(startX, startY, cam2D:GetPosition():GetZ())
                cam2D:SetSize(startWidth, startHeight)

                cam2D:Update()
            end
        end
    end

    /*
    This action sets whether the game should launch in full screen or windowed
    mode on desktop platforms (e.g. Windows or Mac) when the game is started.
    By default, games are windowed. This action should be called before calling
    StartGame().

    Attribute: Parameter fullScreen Whether or not the Game should launch in full screen mode on desktops.

    Attribute: Example

    use Libraries.Game.Game

    class Main is Game

        number timer = 0

        action Main
            SetFullScreen(true)
            StartGame()
        end

        action CreateGame
        end

        action Update(number seconds)
            timer = timer + seconds
            if timer > 3
                output "Exiting game..."
                Exit()
            end
        end

    end

    */
    action SetFullScreen(boolean fullScreen)
        if fullScreen
            UseDesktopResolution()
        else
            SetScreenSize(desktopConfig:width, desktopConfig:height)
        end
    end

    /*
    This action maximizes the screen, or restores a maximized screen to its
    original size. If this is called before the Game window opens, it will
    launch the window in maximized mode. If the Game is being displayed in
    full screen, this action will do nothing. This action is only for desktop
    platforms -- on other platforms, it does nothing.

    Attribute: Parameter maximized True to maximize the window, or false to restore it to its original size.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                SetWindowMaximized(true)
                StartGame()
            end
        end
    */
    action SetWindowMaximized(boolean maximized)
        desktopConfig:maximized = maximized
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())

            if maximized
                if display:IsWindowMaximized() = false
                    display:MaximizeWindow()
                end
            else
                if display:IsWindowMaximized() = true
                    display:RestoreWindow()
                end
            end
        end
    end

    /*
    On desktop platforms, this action returns true if the application is in a
    maximized window, or false otherwise. On other platforms, this always
    returns false.

    Attribute: Returns True if the window is maximized, false otherwise.
    */
    action IsWindowMaximized returns boolean
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            return display:IsWindowMaximized()
        end
        return false
    end

    /*
    This action minimizes the screen, or restores a minimized screen to its
    original size. This action is only for desktop platforms -- on other 
    platforms, it does nothing.

    Attribute: Parameter minimized True to minimize the window, or false to restore it to its original size.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                SetWindowMinimized(true)
            end
        end
    */
    action SetWindowMinimized(boolean minimized)
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())

            if minimized
                if display:IsWindowMinimized() = false
                    display:MinimizeWindow()
                end
            else
                if display:IsWindowMinimized() = true
                    display:RestoreWindow()
                end
            end
        end
    end

    /*
    On desktop platforms, this action returns true if the application is
    currently minimized, or false otherwise. On other platforms, this always
    returns false.

    Attribute: Returns True if the window is maximized, false otherwise.
    */
    action IsWindowMinimized returns boolean
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            return display:IsWindowMinimized()
        end
        return false
    end

    /*
    This action enables or disables vSync in the game. Passing a value of true
    enables it, a value of false disables it. vSync is enabled by default. 
    This action should be called before calling StartGame(). This option is only
    used when the game is run on desktops.

    Attribute: Parameter vSync Whether or not vSync should be enabled.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                SetVSync(false)
                StartGame()
            end
        end
    */
    action SetVSync(boolean vSync)
        desktopConfig:vSyncEnabled = vSync
    end

    /*
    This action enables or disables resizing the game window by dragging the
    edges of the screen. Passing a value of true enables it, a value of false
    disables it. Resizing is disabled by default. It is only relevant for games
    which are run on desktops.
    This action should be called before calling StartGame().

    Attribute: Parameter resize Whether or not the game window should be resizable.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                EnableResizing(true)
                StartGame()
            end
        end
    */
    action EnableResizing(boolean resize)
        desktopConfig:resizable = resize
    end

    /*
    This action sets the name of the game. The default name is "Game".
    This action should be called before calling StartGame().
    On desktop platforms, this name is displayed at the top of the window.
    On the web, it is only used for accessibility. This action currently has
    no effect on other platforms.

    Attribute: Parameter name The name to display on the Game window.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                SetGameName("Mariachi Band Simulator 3000")
                StartGame()
            end
        end
    */
    action SetGameName(text name)
        desktopConfig:title = name
        webConfig:title = name
    end

    /*
    This action returns the name of the game displayed at the top of the window. 
    The default name is "Game". 

    Attribute: Returns The name displayed on the Game window.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                output "The default name is " + GetGameName()
                SetGameName("Mariachi Band Simulator 3000")
                output "The new name is " + GetGameName()
                StartGame()
            end
        end
    */
    action GetGameName returns text
        return desktopConfig:title
    end

    /*
    This action enables or disables auto resizing of textures if the game window
    is resized. Passing a value of true enables it, a value of false disables it.
    Texture auto resizing is enabled by default. This action should be called
    before calling StartGame(). This option is only relevant on desktop platforms.

    Attribute: Parameter resize Whether or not to automatically resize textures on window resizing.

    Attribute: Example

        use Libraries.Game.Game

        class Main is Game

            action Main
                EnableTextureAutoResizing(false)
                StartGame()
            end
        end
    */
    action EnableTextureAutoResizing(boolean resize)
        desktopConfig:autoResizeTextures = resize
    end

    /*
    Adds a collision listener to the game that will listen for collisions between
    2D game objects that have been flagged as collidable. This listener can
    respond to collisions by implementing the BeginCollision and FinishCollision
    actions.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.CollisionListener2D
        use Libraries.Interface.Events.CollisionEvent2D

        class Main is Game, CollisionListener2D

            Item2D item1
            Item2D item2

            action Main
                StartGame()
            end

            action CreateGame
                AddCollisionListener(me)
                item1:SetCollidable(true)
                item2:SetCollidable(true)
            end
            
            action BeginCollision(CollisionEvent2D event)

            end

            action FinishCollision(CollisionEvent3D event)

            end

        end
    */
    action AddCollisionListener(CollisionListener2D listener)
        currentLayer2D:AddCollisionListener(listener)
    end

    /*
    Adds a collision listener to the game that will listen for collisions between
    3D game objects that have been flagged as collidable. This listener can
    respond to collisions by implementing the BeginCollision and FinishCollision
    actions.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Item3D
        use Libraries.Interface.Events.CollisionListener3D
        use Libraries.Interface.Events.CollisionEvent3D

        class Main is Game, CollisionListener3D

            Item3D item1
            Item3D item2

            action Main
                StartGame()
            end

            action CreateGame
                AddCollisionListener(me)
                item1:SetCollidable(true)
                item2:SetCollidable(true)
            end
            
            action BeginCollision(CollisionEvent3D event)

            end

            action FinishCollision(CollisionEvent3D event)

            end

        end
    */
    action AddCollisionListener(CollisionListener3D listener)
        currentLayer3D:AddCollisionListener(listener)
    end

    /*
    Removes a 2D collision listener from the game. This collision listener will
    no longer receive collision events from the game engine.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.CollisionListener2D
        use Libraries.Interface.Events.CollisionEvent2D

        class Main is Game, CollisionListener2D

            Item2D item1
            Item2D item2

            action Main
                StartGame()
            end

            action CreateGame
                AddCollisionListener(me)
                item1:SetCollidable(true)
                item2:SetCollidable(true)

                RemoveCollisionListener(me)
            end
            
            action BeginCollision(CollisionEvent2D event)

            end

            action FinishCollision(CollisionEvent2D event)

            end

        end
    */
    action RemoveCollisionListener(CollisionListener2D listener)
        currentLayer2D:RemoveCollisionListener(listener)
    end

    /*
    Removes a 3D collision listener from the game. This collision listener will
    no longer receive collision events from the game engine.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Item3D
        use Libraries.Interface.Events.CollisionListener3D
        use Libraries.Interface.Events.CollisionEvent3D

        class Main is Game, CollisionListener3D

            Item3D item1
            Item3D item2

            action Main
                StartGame()
            end

            action CreateGame
                AddCollisionListener(me)
                item1:SetCollidable(true)
                item2:SetCollidable(true)

                RemoveCollisionListener(me)
            end
            
            action BeginCollision(CollisionEvent3D event)

            end

            action FinishCollision(CollisionEvent3D event)

            end

        end
    */
    action RemoveCollisionListener(CollisionListener3D listener)
        currentLayer3D:RemoveCollisionListener(listener)
    end

    private action TestForCollisions(number seconds)
        integer i = 0
        repeat while i < layers:GetSize()
            Layer layer = layers:Get(i)
            if layer is Layer2D
                Layer2D layer2D = cast(Layer2D, layer)
                layer2D:TestForCollisions(seconds)
            else
                Layer3D layer3D = cast(Layer3D, layer)
                layer3D:TestForCollisions(seconds)
            end

            i = i + 1
        end
    end

    /*
    This action will set the type of Application that should be running. The
    type of application returned will also be used to determine the type of
    other platform specific classes, e.g. GameDisplay, GraphicsManager, etc.
    */
    private action SelectApplicationType returns Application

        applicationType = SelectApplicationTypeNative()
        if applicationType = ANDROID_APPLICATION
            AndroidApplication app
            return app
        end
        if applicationType = DESKTOP_APPLICATION
            DesktopApplication app
            return app
        end
        if applicationType = IOS_APPLICATION
            IOSApplication app
            return app
        end
        if applicationType = WEB_APPLICATION
            WebApplication app
            return app
        end
        // ... Other options

        return undefined
    end

    private system action SelectApplicationTypeNative returns integer

    /*
    This action sets the game to use the default layers. The default layers
    consist of a single 3D layer, with a single 2D layer on top of it. This
    action is automatically called by the Game engine during StartGame. Users
    may use it again to "reset" the layers to default, but generally users will
    not need to use this action directly.
    */
    action InitializeLayers
        // TO-DO: Consider moving this elsewhere. This needs to happen as a first step in initializing graphics before Painters are made, which occurs when creating layers.
        manager:GetGameGraphics():UseDefaultVertexArray()

        layers:Empty()
        
        Layer3D layer3D
        Layer2D layer2D
        
        layers:Add(layer3D)
        layers:Add(layer2D)

        currentLayer3D = layer3D
        currentLayer2D = layer2D

        currentLayer3D:SetName("Default Layer3D")
        currentLayer2D:SetName("Default Layer2D")

        gameInput:SetLayers(layers)
    end

    /*
    This action will add a new Layer to the Game. It will be added on top of all
    other layers currently in the game.

    Attribute: Parameter layer The Layer to be added to the Game.

    use Libraries.Game.Game
    use Libraries.Game.Layer2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end
    */
    action AddLayer(Layer layer)
        layers:Add(layer)
    end

    /*
    This action will remove the given Layer from the Game.

    Attribute: Parameter layer The Layer to be removed from the Game.

    use Libraries.Game.Game
    use Libraries.Game.Layer2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            AddLayer(layer)

            RemoveLayer(layer)
        end

        action Update(number seconds)
        end
    end
    */
    action RemoveLayer(Layer layer)
        layers:Remove(layer)
    end

    /*
    This action will add the given Layer to the Game at the given index. Layers
    are handled (e.g. updated, drawn, etc.) in the order they're added, starting
    at index 0 with additional layers placed at higher indices.

    Attribute: Parameter index The index to place the Layer at.
    Attribute: Parameter layer The Layer to be added to the Game.

    use Libraries.Game.Game
    use Libraries.Game.Layer2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // This will add the layer at index 0, making it the first layer drawn.
            Layer2D layer
            AddLayer(0, layer)
        end

        action Update(number seconds)
        end
    end
    */
    action AddLayer(integer index, Layer layer)
        layers:Add(index, layer)
    end

    /*
    This action will remove the Layer stored in the Game at the given index
    within the internal layer array, where the first element (at index 0) of the
    array is the bottom layer, and further elements of the array are placed on
    top of previous elements.

    Attribute: Parameter index The index of the Layer to be removed.

    use Libraries.Game.Game
    use Libraries.Game.Layer2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // This will remove the bottom Layer of the Game.
            RemoveLayer(0)
        end

        action Update(number seconds)
        end
    end

    */
    action RemoveLayer(integer index)
        layers:RemoveAt(index)
    end

    /*
    This action will set the given index to use the given Layer, overwriting any
    Layer that was already at that index. This will not force disposal of any
    resources that the Layer's items may have been using. 

    Attribute: Parameter index The index to set the Layer at.
    Attribute: Parameter layer The Layer to be added to the Game.

    use Libraries.Game.Game
    use Libraries.Game.Layer2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // This will set the layer at index 0, making it the first layer drawn.
            Layer2D layer
            SetLayer(0, layer)
        end

        action Update(number seconds)
        end
    end

    */
    action SetLayer(integer index, Layer layer)
        layers:Set(index, layer)
    end

    /*
    This action will set the currently active Layer2D. The current Layer2D will
    receive the effect of actions such as Add(Item2D) or Remove(Item2D), which
    do not specify which Layer to act upon. Other actions that specify an index
    or a Layer to act upon will ignore this setting.

    Attribute: Parameter layer The Layer2D to set as currently active.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Drawable box1
            box1:LoadFilledRectangle(200, 200, color:Maroon())
            box1:SetPosition(250, 150)

            Drawable box2
            box2:LoadFilledRectangle(200, 200, color:Teal())
            box2:SetPosition(350, 250)

            Layer2D layer
            AddLayer(0, layer)

            Add(box1)

            SetCurrentLayer2D(layer)
            Add(box2)
        end

    end
    */
    action SetCurrentLayer2D(Layer2D layer)
        currentLayer2D = layer
    end

    /*
    This action will set the currently active Layer3D. The current Layer3D will
    receive the effect of actions such as Add(Item3D) or Remove(Item3D), which
    do not specify which Layer to act upon. Other actions that specify an index
    or a Layer to act upon will ignore this setting.

    Attribute: Parameter layer The Layer3D to set as currently active.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer3D
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box1
            box1:LoadBox(2, 2, 2, color:Teal())
            box1:SetPosition(0, 0, 5)

            Model box2
            box2:LoadBox(5, 5, 5, color:Maroon())
            box2:SetPosition(0, 0, 2)

            Layer3D layer
            AddLayer(0, layer)

            Add(box1)

            SetCurrentLayer3D(layer)
            Add(box2)
        end

    end
    */
    action SetCurrentLayer3D(Layer3D layer)
        currentLayer3D = layer
    end

    /*
    This action will return the current Layer2D which will be used during
    actions that require a Layer if the user does not specify one, e.g., using
    the Add(Item2D) action.

    Attribute: Returns The currently active Layer2D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D

    class Main is Game
    
        Layer2D activeLayer = undefined

        action Main
            StartGame()
        end

        action CreateGame
            activeLayer = GetCurrentLayer2D()
        end

    end

    */
    action GetCurrentLayer2D returns Layer2D
        return currentLayer2D
    end

    /*
    This action will return the current Layer3D which will be used during
    actions that require a Layer if the user does not specify one, e.g., using
    the Add(Item3D) action.

    Attribute: Returns The currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer3D

    class Main is Game
    
        Layer3D activeLayer = undefined

        action Main
            StartGame()
        end

        action CreateGame
            activeLayer = GetCurrentLayer3D()
        end

    end

    */
    action GetCurrentLayer3D returns Layer3D
        return currentLayer3D
    end

    /*
    This action will return the camera that is a part of the current Layer2D.

    Attribute: Returns The Camera in use by the currently active Layer2D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera

    class Main is Game
    
        Camera camera = undefined

        action Main
            StartGame()
        end

        action CreateGame
            camera = GetCamera2D()
        end

    end

    */
    action GetCamera2D returns Camera
        return currentLayer2D:GetCamera()
    end

    /*
    This action will return the camera that is a part of the current Layer3D.

    Attribute: Returns The Camera in use by the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera

    class Main is Game
    
        Camera camera = undefined

        action Main
            StartGame()
        end

        action CreateGame
            camera = GetCamera3D()
        end

    end

    */
    action GetCamera3D returns Camera
        return currentLayer3D:GetCamera()
    end

    /*
    This action will set the camera that is being used by the current Layer2D.

    Attribute: Parameter cam The Camera to use for the currently active Layer2D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.OrthographicCamera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            OrthographicCamera camera
            SetCamera2D(camera)
        end

    end

    */
    action SetCamera2D(Camera cam)
        currentLayer2D:SetCamera(cam)
    end

    /*
    This action will set the camera that is being used by the current Layer3D.

    Attribute: Parameter cam The Camera to use for the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.PerspectiveCamera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            PerspectiveCamera camera
            SetCamera3D(camera)
        end

    end

    */
    action SetCamera3D(Camera cam)
        currentLayer3D:SetCamera(cam)
    end

    /*
    This action will return an iterator containing the Game's layers. The first
    Layer in the iterator will be the bottom Layer, and each following Layer
    in the iterator will be the Layer on top of the previous one.

    Attribute: Returns An Iterator containing all of the Layers added to the Game.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.OrthographicCamera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            OrthographicCamera camera
            SetCamera2D(camera)
        end

    end

    */
    action GetLayerIterator returns Iterator<Layer>
        return layers:GetIterator()
    end

    /*
    This action will add a DirectionalLight to the currently active Layer3D.

    Attribute: Parameter light The light to add to the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(1, -2, 1)
            Add(light)
        end

    end
    */
    action Add(DirectionalLight light)
        currentLayer3D:Add(light)
    end

    /*
    This action will add a PointLight to the currently active Layer3D.

    Attribute: Parameter light The light to add to the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(4, 3, -2)
            light:SetIntensity(30)
            Add(light)
        end

    end
    */
    action Add(PointLight light)
        currentLayer3D:Add(light)
    end

    /*
    This action will set the ambient light on the currently active Layer3D.

    Attribute: Parameter light The AmbientLight to use in the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(1, -2, 1)
            Add(light)
        end

    end

    */
    action SetAmbientLight(AmbientLight light)
        currentLayer3D:SetAmbientLight(light)
    end

    /*
    This action will remove a DirectionalLight from the currently active Layer3D.

    Attribute: Parameter light The light to remove from the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(1, -2, 1)
            Add(light)

            Remove(light)
        end

    end
    */
    action Remove(DirectionalLight light)
        currentLayer3D:Remove(light)
    end

    /*
    This action will remove a PointLight from the currently active Layer3D.

    Attribute: Parameter light The light to remove from the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(4, 3, -2)
            light:SetIntensity(30)
            Add(light)

            Remove(light)
        end

    end

    */
    action Remove(PointLight light)
        currentLayer3D:Remove(light)
    end

    /*
    This action will remove the ambient lighting from the currently active
    Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(4, 3, -2)
            light:SetIntensity(30)
            Add(light)

            RemoveAmbientLight()
        end

    end
    */
    action RemoveAmbientLight
        currentLayer3D:RemoveAmbientLight()
    end

    /*
    This action will get a DirectionalLight from the currently active Layer3D, which
    is stored at the given index inside the layer. If there are no DirectionalLights
    within the layer, or if the index is out of bounds, then an error will be
    thrown.

    Attribute: Parameter index The index to retrieve the DirectionalLight from.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        DirectionalLight myLight

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(1, -2, 1)
            Add(light)

            myLight = GetDirectionalLight(0)
        end

    end
    */
    action GetDirectionalLight(integer index) returns DirectionalLight
        return currentLayer3D:GetDirectionalLight(index)
    end

    /*
    This action will get a PointLight from the currently active Layer3D, which
    is stored at the given index inside the layer. If there are no PointLights
    within the layer, or if the index is out of bounds, then an error will be
    thrown.

    Attribute: Parameter index The index to retrieve the PointLight from.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight

    class Main is Game

        PointLight myLight

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(4, 3, -2)
            light:SetIntensity(30)
            Add(light)

            myLight = GetPointLight(0)
        end

    end
    */
    action GetPointLight(integer index) returns PointLight
        return currentLayer3D:GetPointLight(index)
    end

    /*
    This action will return a new AmbientLight object which contains the ambient
    lighting data of the currently active Layer3D.

    Attribute: Returns The AmbientLight of the currently active Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        AmbientLight myLight

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Teal())
            Add(box)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(1, -2, 1)
            Add(light)

            myLight = GetAmbientLight()
        end

    end

    */
    action GetAmbientLight returns AmbientLight
        return currentLayer3D:GetAmbientLight()
    end

    /*
    This action will return an iterator containing all of the DirectionalLight
    objects stored within the currently active Layer3D.

    Attribute: Returns An Iterator containing all DirectionalLights on the currently active Layer3D.
    */
    action GetDirectionalLights returns Iterator<DirectionalLight>
        return currentLayer3D:GetDirectionalLights()
    end

    /*
    This action will return an iterator containing all of the PointLight
    objects stored within the currently active Layer3D.

    Attribute: Returns An Iterator containing all PointLights on the currently active Layer3D.
    */
    action GetPointLights returns Iterator<PointLight>
        return currentLayer3D:GetPointLights()
    end

    action SetGravity2D(Vector2 gravity)
        currentLayer2D:SetGravity(gravity)
    end 

    action SetGravity2D(number gravityX, number gravityY)
        currentLayer2D:SetGravity(gravityX, gravityY)
    end

    action EnablePhysics2D(boolean flag)
        currentLayer2D:EnablePhysics(flag)
    end

    action SetGravity3D(Vector3 gravity)
        currentLayer3D:SetGravity(gravity)
    end 

    action SetGravity3D(number gravityX, number gravityY, number gravityZ)
        currentLayer3D:SetGravity(gravityX, gravityY, gravityZ)
    end

    action EnablePhysics3D(boolean flag)
        currentLayer3D:EnablePhysics(flag)
    end

    /*
    This action will set a game running on a desktop platform to use the given
    ScreenResolution. This will have no effect on non-desktop platforms. Using
    this action will also adjust the size of the cameras on the default 2D and
    3D layers to match the new screen size. To change the screen size without
    changing the cameras, use SetScreenResolution(ScreenResolution, false).

    Attribute: Parameter resolution The ScreenResolution to use for the game's display.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.ScreenResolution
    use Libraries.Game.InputMonitor
    use Libraries.Interface.Events.KeyboardEvent

    class Main is Game

        InputMonitor monitor
        KeyboardEvent keys

        action Main
            StartGame()
        end

        action CreateGame
            ScreenResolution resolution = GetDesktopResolution()
            SetScreenResolution(resolution)
        end

        action Update(number seconds)
            // Using the desktop resolution will typically make the game go fullscreen.
            // To exit the game, the user can press the ESCAPE key.
            if monitor:IsKeyPressed(keys:ESCAPE)
                Exit()
            end
        end
    end
    */
    action SetScreenResolution(ScreenResolution resolution)
        SetScreenResolution(resolution, true)
    end

    /*
    This action will set a game running on a desktop platform to use the given
    ScreenResolution. This will have no effect on non-desktop platforms. If the
    second parameter is set to true, then this action will also adjust the size 
    of the cameras on the default 2D and 3D layers to match the new screen size.
    If the parameter is false, then the cameras will not be changed.

    Attribute: Parameter resolution The ScreenResolution to use for the game's display.
    Attribute: Parameter adjustCameras True to adjust the default cameras to the new dimensions, false to keep the cameras the same.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.ScreenResolution
    use Libraries.Game.InputMonitor
    use Libraries.Interface.Events.KeyboardEvent
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        InputMonitor monitor
        KeyboardEvent keys

        action Main
            StartGame()
        end

        action CreateGame
            Drawable leftSquare
            leftSquare:LoadFilledRectangle(100, 100)
            leftSquare:SetPosition(0, 250)
            Add(leftSquare)

            Drawable rightSquare
            rightSquare:LoadFilledRectangle(100, 100)
            rightSquare:SetPosition(700, 250)
            Add(rightSquare)
        end

        action Update(number seconds)
            // Pressing the spacebar will set the game to use the desktop's resolution.
            // If the boolean is false, the cameras will not be adjusted to the new screen size,
            // making them appear to be zoomed in on the original area.
            // If the boolean is true (or omitted), the cameras will be adjusted to view the
            // new size of the screen. Drawables will remain at their original size and position.
            if monitor:IsKeyPressed(keys:SPACE)
                ScreenResolution resolution = GetDesktopResolution()
                SetScreenResolution(resolution, false)
            end
            // Using the desktop resolution will typically make the game go fullscreen.
            // To exit the game, the user can press the ESCAPE key.
            if monitor:IsKeyPressed(keys:ESCAPE)
                Exit()
            end
        end
    end
    */
    action SetScreenResolution(ScreenResolution resolution, boolean adjustCameras)
        if applicationType not= DESKTOP_APPLICATION
            if SelectApplicationTypeNative() = DESKTOP_APPLICATION
                desktopConfig:defaultResolution = resolution
            end
            return now
        end

        GameStateManager manager
        DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
        display:SetScreenResolution(resolution)

        if adjustCameras
            Camera cam2D = GetCamera2D()
            Camera cam3D = GetCamera3D()

            cam3D:SetWidth(resolution:GetWidth())
            cam3D:SetHeight(resolution:GetHeight())

            number xAdjust = (resolution:GetWidth() - cam2D:GetWidth()) / 2
            number yAdjust = (resolution:GetHeight() - cam2D:GetHeight()) / 2

            cam2D:Move(xAdjust, yAdjust, 0)
            cam2D:SetWidth(resolution:GetWidth())
            cam2D:SetHeight(resolution:GetHeight())

            cam2D:Update()
            cam3D:Update()
        end
    end

    /*
    This action will return an Array of ScreenResolution objects that describe
    available screen resolutions for this desktop platform. If this action is
    called on a non-desktop platform, the returned array will be undefined.

    Attribute: Returns An array of ScreenResolutions that can be used by the desktop display.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.ScreenResolution
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Array<ScreenResolution> array = GetAvailableResolutions()
            output "The following resolutions are supported by the monitor:"

            integer counter = 0
            repeat while counter < array:GetSize()
                ScreenResolution resolution = array:Get(counter)

                output ""
                output "Resolution #" + counter
                output "Dimensions: " + resolution:GetWidth() + " x " + resolution:GetHeight()
                output "Refresh Rate: " + resolution:GetFrequency()
                output "Bits per Pixel: " + resolution:GetBitsPerPixel()
                output "Supports Fullscreen: " + resolution:IsFullscreen()

                counter = counter + 1
            end
        end
    end
    */
    action GetAvailableResolutions returns Array<ScreenResolution>
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            return display:GetAvailableResolutions()
        elseif SelectApplicationTypeNative() = DESKTOP_APPLICATION
            DesktopDisplay display
            return display:GetAvailableResolutions()
        end
        return undefined
    end

    /*
    This action will return a ScreenResolution object that describes the screen
    resolution currently in use by the desktop (independent of the resolution
    used by the game). This is only effective on desktop platforms - using this
    action on non-desktop platforms will return undefined.

    Attribute: Returns A ScreenResoluton object describing the desktop's resolution.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.ScreenResolution

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            ScreenResolution resolution = GetDesktopResolution()
            output "The dimensions of the desktop's resolution is " + resolution:GetWidth() + " x " + resolution:GetHeight()
        end
    end
    */
    action GetDesktopResolution returns ScreenResolution
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            return display:GetDesktopResolution()
        elseif SelectApplicationTypeNative() = DESKTOP_APPLICATION
            DesktopDisplay display
            return display:GetDesktopResolution()
        end
        return undefined
    end
    
    /*
    UseDesktopResolution will set the game to use the same display settings as
    the desktop's current screen resolution (independent of the game). This is
    only effective when used on desktop platforms - on other platforms, this
    will do nothing. Using this action will also adjust the size of the cameras 
    on the default 2D and 3D layers to match the new screen size. To change the
    screen size without changing the cameras, use 
    SetScreenResolution(ScreenResolution, false).

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.InputMonitor
    use Libraries.Interface.Events.KeyboardEvent

    class Main is Game

        InputMonitor monitor
        KeyboardEvent keys

        action Main
            StartGame()
        end

        action CreateGame
            UseDesktopResolution()
        end

        action Update(number seconds)
            // Using the desktop resolution will typically make the game go fullscreen.
            // To exit the game, the user can press the ESCAPE key.
            if monitor:IsKeyPressed(keys:ESCAPE)
                Exit()
            end
        end
    end
    */
    action UseDesktopResolution
        UseDesktopResolution(true)
    end

    /*
    UseDesktopResolution will set the game to use the same display settings as
    the desktop's current screen resolution (independent of the game). This is
    only effective when used on desktop platforms - on other platforms, this
    will do nothing. If the boolean parameter is set to true, then this action 
    will also adjust the size of the cameras on the default 2D and 3D layers to 
    match the new screen size. If the parameter is false, then the cameras will 
    not be changed.

    Attribute: Parameter adjustCameras True to adjust the default cameras to the new dimensions, false to keep the cameras the same.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.InputMonitor
    use Libraries.Interface.Events.KeyboardEvent
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        InputMonitor monitor
        KeyboardEvent keys

        action Main
            StartGame()
        end

        action CreateGame
            Drawable leftSquare
            leftSquare:LoadFilledRectangle(100, 100)
            leftSquare:SetPosition(0, 250)
            Add(leftSquare)

            Drawable rightSquare
            rightSquare:LoadFilledRectangle(100, 100)
            rightSquare:SetPosition(700, 250)
            Add(rightSquare)
        end

        action Update(number seconds)
            // Pressing the spacebar will set the game to use the desktop's resolution.
            // If the boolean is false, the cameras will not be adjusted to the new screen size,
            // making them appear to be zoomed in on the original area.
            // If the boolean is true (or omitted), the cameras will be adjusted to view the
            // new size of the screen. Drawables will remain at their original size and position.
            if monitor:IsKeyPressed(keys:SPACE)
                UseDesktopResolution(false)
            end
            // Using the desktop resolution will typically make the game go fullscreen.
            // To exit the game, the user can press the ESCAPE key.
            if monitor:IsKeyPressed(keys:ESCAPE)
                Exit()
            end
        end
    end
    */
    action UseDesktopResolution(boolean adjustCameras)
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            SetScreenResolution(display:GetDesktopResolution(), adjustCameras)
        elseif SelectApplicationTypeNative() = DESKTOP_APPLICATION
            DesktopDisplay display
            desktopConfig:defaultResolution = display:GetDesktopResolution()
        end
    end

    /*
    This action will return the current ScreenResolution being used by the game
    engine. This is only effective on desktop platforms - on non-desktop
    platforms, this will return undefined instead.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.ScreenResolution

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            ScreenResolution resolution = GetScreenResolution()
            output "The default resolution's dimensions are " + resolution:GetWidth() + " x " + resolution:GetHeight()
        end
    end
    */
    action GetScreenResolution returns ScreenResolution
        if applicationType = DESKTOP_APPLICATION
            GameStateManager manager
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            return display:GetScreenResolution()
        elseif SelectApplicationTypeNative() = DESKTOP_APPLICATION
            DesktopDisplay display
            display:SetConfiguration(desktopConfig)
            return display:GetScreenResolution()
        end
        return undefined
    end

    /*
    The SetWebContainerID action determines which container to use on a webpage.
    When the game runs, it will be displayed in the designated container. If no
    container ID is given, the engine will attempt to find a container with the
    default ID, "QuorumUIContainer". If the engine can't find a container with
    the set ID, it will not run. This action has no effect if called inside a
    game that isn't being run online.

    Attribute: Parameter id The ID of the canvas to display the game in.
    
    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.WebConfiguration

    class Main is Game

        action Main
            SetWebContainerID("myContainer")
            StartGame()
        end
    end
    */
    action SetWebContainerID(text id)
        WebConfiguration config = GetWebConfiguration()
        config:containerID = id
    end

    /*
    The SetSkybox action will set the currently active Layer3D to use the given
    Skybox. 

    Attribute: Parameter skybox The Skybox to use on the current Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:Load("skybox/right.jpg", "skybox/left.jpg", "skybox/top.jpg", "skybox/bottom.jpg", "skybox/front.jpg", "skybox/back.jpg")
            SetSkybox(skybox)
        end

    end
    */
    action SetSkybox(Skybox skybox)
        GetCurrentLayer3D():SetSkybox(skybox)
    end

    /*
    The GetSkybox action will return the Skybox in use by the currently active
    Layer3D. By default, a Layer3D does not start with a Skybox, so using this
    on a Layer3D that hasn't had a Skybox assigned to it will return undefined.

    Attribute: Returns The Skybox in use by the current Layer3D.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:Load("skybox/right.jpg", "skybox/left.jpg", "skybox/top.jpg", "skybox/bottom.jpg", "skybox/front.jpg", "skybox/back.jpg")
            SetSkybox(skybox)

            // We can get the Skybox back from the layer using GetSkybox().
            Skybox currentSkybox = GetSkybox()
        end

    end
    */
    action GetSkybox returns Skybox
        return GetCurrentLayer3D():GetSkybox()
    end

    action SetSimulationThreshold2D(number threshold)
        GetCurrentLayer2D():SetSimulationThreshold(threshold)
    end

    action GetSimulationThreshold2D returns number
        return GetCurrentLayer2D():GetSimulationThreshold()
    end

    /*
    This action asks the operating system to give the main application window
    the focus. This only works on desktop platforms - on other platforms, this
    call is ignored.
    */
    action FocusWindow
        if manager:GetGameDisplay() is DesktopDisplay
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            display:FocusWindow()
        end
    end

    /*
    This action determines whether or not the main application window has the
    focus on desktop platforms. On non-desktop platforms, this always returns
    false.
    */
    action IsWindowFocused returns boolean
        if manager:GetGameDisplay() is DesktopDisplay
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            return display:IsWindowFocused()
        end
        return false
    end

    /*
    This action sets the focus on the given item. This will immediately notify
    all focus listeners on the previous focus that the Item has lost focus, and
    all focus listeners on the new focus that the Item has gained focus.

    Attribute: Parameter item The Item to gain focus.
    */
    action SetFocus(Item item)
        focusManager:SetFocus(item)
    end

    /*
    This action returns the current Item that is focused.

    Attribute: Returns The currently focused Item.
    */
    action GetFocus returns Item
        return focusManager:GetFocus()
    end

    /*
    This action sets the FocusManager to be used for the Game. The FocusManager
    is responsible for moving focus between Items, which is essential for GUIs
    to function correctly.
    */
    action SetFocusManager(FocusManager focus)
        focusManager:SetFocus(undefined)
        if focusManager not= undefined
            RemoveKeyboardListener(focusManager)
        end
        focusManager = focus
        AddKeyboardListener(focus)
    end

    /*
    This action returns the FocusManager to be used for the Game. 
    The FocusManager is responsible for moving focus between Items, which is
    essential for GUIs to function correctly.
    */
    action GetFocusManager returns FocusManager
        return focusManager
    end

    /*
    This action sets the FontManager to be used for the Game. The FontManager is
    responsible for loading and storing font information.
    */
    action SetFontManager(FontManager fontManager)
        manager:SetFontManager(fontManager)
    end

    /*
    This action returns the FontManager in use by the Game. The FontManager is
    responsible for loading and storing font information.
    */
    action GetFontManager returns FontManager
        return manager:GetFontManager()
    end

    /*
    This action adds a FocusListener to the Game. Whenever the focus changes,
    the FocusListener will be informed via a FocusEvent.

    Attribute: Parameter listener The FocusListener to add to the Game.
    */
    action AddFocusListener(FocusListener listener)
        focusManager:Add(listener)
    end

    /*
    This action removes a FocusListener from the Game. The given FocusListener
    will no longer be informed of FocusEvents when the focus changes.

    Attribute: Parameter listener The FocusListener to remove from the Game.
    */
    action RemoveFocusListener(FocusListener listener)
        focusManager:Remove(listener)
    end

    /*
    This action adds a SelectionListener to the Game. Whenever a Selection is
    changed, the SelectionListener will be informed via a SelectionEvent.

    Attribute: Parameter listener The SelectionListener to add to the Game.
    */
    action AddSelectionListener(SelectionListener listener)
        gameInput:AddSelectionListener(listener)
    end

    /*
    This action removes a SelectionListener from the Game. The SelectionListener
    will no longer be informed when Selections change.

    Attribute: Parameter listener The SelectionListener to remove from the Game.
    */
    action RemoveSelectionListener(SelectionListener listener)
        gameInput:RemoveSelectionListener(listener)
    end

    /*
    This action adds a TextChangeListener to the Game. When text is changed
    (such as in a TextBox) the TextChangeListener will be informed via a
    TextChangeEvent.

    Attribute: Parameter listener The TextChangeListener to add to the Game.
    */
    action AddTextChangeListener(TextChangeListener listener)
        gameInput:AddTextChangeListener(listener)
    end

    /*
    This action removes a TextChangeListener from the Game. It will no longer 
    receive TextChangeEvents.

    Attribute: Parameter listener The TextChangeListener to remove from the Game.
    */
    action RemoveTextChangeListener(TextChangeListener listener)
        gameInput:RemoveTextChangeListener(listener)
    end

    /*
    This action adds a ScreenshotListener to the Game. When a screenshot
    is taken using the Game's Screenshot action, the listener will be 
    informed via a ScreenshotEvent.

    Attribute: Parameter listener The ScreenshotListener to add to the Game.
    */
    action AddScreenshotListener(ScreenshotListener listener)
        gameInput:AddScreenshotListener(listener)
    end

    /*
    This action removes a ScreenshotListener from the Game. It will no longer 
    receive ScreenshotEvents.

    Attribute: Parameter listener The ScreenshotListener to remove from the Game.
    */
    action RemoveScreenshotListener(ScreenshotListener listener)
        gameInput:RemoveScreenshotListener(listener)
    end

    /*

    */
    action AddTabChangeListener(TabChangeListener listener)
        gameInput:AddTabChangeListener(listener)
    end

    /*

    */
    action RemoveTabChangeListener(TabChangeListener listener)
        gameInput:RemoveTabChangeListener(listener)
    end

    /*

    */
    action AddMenuChangeListener(MenuChangeListener listener)
        gameInput:AddMenuChangeListener(listener)
    end

    /*

    */
    action RemoveMenuChangeListener(MenuChangeListener listener)
        gameInput:RemoveMenuChangeListener(listener)
    end

    /*

    */
    action AddTreeChangeListener(TreeChangeListener listener)
        gameInput:AddTreeChangeListener(listener)
    end

    /*

    */
    action RemoveTreeChangeListener(TreeChangeListener listener)
        gameInput:RemoveTreeChangeListener(listener)
    end

    /*

    */
    action AddControlActivationListener(ControlActivationListener listener)
        gameInput:AddControlActivationListener(listener)
    end

    /*

    */
    action RemoveControlActivationListener(ControlActivationListener listener)
        gameInput:RemoveControlActivationListener(listener)
    end

    /*

    */
    action AddWindowFocusListener(WindowFocusListener listener)
        gameInput:AddWindowFocusListener(listener)
    end

    /*

    */
    action RemoveWindowFocusListener(WindowFocusListener listener)
        gameInput:RemoveWindowFocusListener(listener)
    end

    /*

    */
    action GetDefaultInputTable returns InputTable
        return gameInput:GetDefaultInputTable()
    end

    /*

    */
    action SetDefaultInputTable(InputTable table)
        gameInput:SetDefaultInputTable(table)
    end

    /*
    This action adds an InputTable to the Game. If at any point the
    currently focused Item has an input group that matches the
    identifier of the table, the table will be used to trigger Behaviors.
    */
    action AddInputTable(InputTable table)
        gameInput:AddInputTable(table)
    end

    /*
    This action retrieves an InputTable with the matching identifier from the
    Game (if there is one). If there is no InputTable with this identifier,
    the action will return undefined.
    */
    action GetInputTable(text key) returns InputTable
        return gameInput:GetInputTable(key)
    end

    /*
    This action removes the InputTable with the matching identifier from the
    Game (if there is one). If the InputTable is found, it will be returned
    - otherwise, the action returns undefined.
    */
    action RemoveInputTable(text key) returns InputTable
        return gameInput:RemoveInputTable(key)
    end

    /*

    */
    action SetAccessibility(Accessibility accessibilityManager)
        accessibility = accessibilityManager
    end

    /*

    */
    action GetAccessibility returns Accessibility
        return accessibility
    end

    /*
    The SetInterfaceScale action sets the scale of the user interface. Larger
    scaling values make each interface component larger. When the interface is
    scaled in this way, components that can be re-rendered at a higher
    resolution (such as fonts) will do so.

    Attribute: Parameter scale The new interface rendering scale to use.
    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Layouts.FlowLayout
    use Libraries.Interface.Controls.Button

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            FlowLayout layout
            SetLayout(layout)

            Button button1
            button1:SetName("My Button")
            Add(button1)

            SetInterfaceScale(2.0)
        end
    end
    */
    action SetInterfaceScale(number scale)
        integer counter = 0
        repeat while counter < layers:GetSize()
            Layer layer = layers:Get(counter)
            if layer is Layer2D
                Layer2D layer2D = cast(Layer2D, layer)
                layer2D:SetInterfaceScale(scale)
            end
            counter = counter + 1
        end
    end

    /*
    The GetInterfaceScale action returns the scale of the user interface. Larger
    scaling values make each interface component larger. When the interface is
    scaled in this way, components that can be re-rendered at a higher
    resolution (such as fonts) will do so. Note that this represents the
    standard scale in use by the default 2D layer, and it will not necessarily
    reflect the scale of every single component. 

    Attribute: Returns The current interface rendering scale.
    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Layouts.FlowLayout
    use Libraries.Interface.Controls.Button

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            FlowLayout layout
            SetLayout(layout)

            Button button1
            button1:SetName("My Button")
            Add(button1)

            output "The default interface scale is " + GetInterfaceScale()
        end
    end
    */
    action GetInterfaceScale returns number
        return currentLayer2D:GetInterfaceScale()
    end

    /*
    The SetLayout action is used to apply a layout to all Controls on the
    default Layer2D.

    Attribute: Parameter layout The Layout to use on the default Layer2D.
    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Layouts.FlowLayout
    use Libraries.Interface.Controls.Button

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            FlowLayout layout
            SetLayout(layout)

            Button button1
            button1:SetName("My Button")
            Add(button1)
        end
    end
    */
    action SetLayout(Layout layout)
        currentLayer2D:SetLayout(layout)
    end

    /*
    The GetLayout action returns the layout that has been applied to the default
    Layer2D.

    Attribute: Parameter layout The Layout to use on the default Layer2D.
    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Layouts.Layout
    use Libraries.Interface.Layouts.FlowLayout
    use Libraries.Interface.Controls.Button

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            FlowLayout layout
            SetLayout(layout)

            Button button1
            button1:SetName("My Button")
            Add(button1)

            Layout currentLayout = GetLayout()
        end
    end
    */
    action GetLayout returns Layout
        return currentLayer2D:GetLayout()
    end

    /*
    This action returns the pool of DialogLayers usable by the Game. This should
    never be called manually -- instead, when using Dialogs, use the Show()
    and Hide() calls to display or close the Dialog. This action is used
    internally by the Game engine.
    */
    action GetDialogLayerPool returns DialogLayerPool
        return dialogLayerPool
    end

    /*
    This action sets the program's icon, which appears on the taskbar and on
    the window frame. This only works on Windows platforms -- otherwise, this
    action does nothing.

    Attribute: Parameter file The image file to use for the icon.

    Attribute: Example
    use Libraries.Game.Game
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            File file
            file:SetPath("Icon.png")
            SetApplicationIcon(file)
        end
    end
    */
    action SetApplicationIcon(File file)
        if manager:GetGameDisplay() is DesktopDisplay
            DesktopDisplay display = cast(DesktopDisplay, manager:GetGameDisplay())
            display:SetWindowIcon(file)
        end
    end

    /*
    This action sets the manager used to save and load scenes in the Game.
    */
    action SetSceneManager(SceneManager scene)
        sceneManager = scene
    end

    /*
    This action returns the manager used to save and load scenes in the Game.
    */
    action GetSceneManager returns SceneManager
        return sceneManager
    end

    /*
        This loads a scene file into the game. 

        Attribute: Parameter file the file to be loaded

        Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Scenes.Scene
        use Libraries.System.File
        
        class Main is Game
            action Main
                StartGame()
            end
        
            action CreateGame
                File file
                file:SetPath("Scenes/Scene.qs")
                LoadScene(file)
            end
        
            action Update(number seconds)
            end
        end
    */
    action LoadScene(File file)
        Scene scene
        scene:Load(file)
        LoadScene(scene)
    end

    /*
        This loads a scene file into the game. This is a helper action
        for loading a scene.

        Attribute: Parameter the relative path to the file being loaded

        Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Scenes.Scene
        use Libraries.System.File
        
        class Main is Game
            action Main
                StartGame()
            end
        
            action CreateGame
                LoadScene("Scenes/Scene.qs")
            end
        
            action Update(number seconds)
            end
        end
    */
    action LoadScene(text path)
        Scene scene

        File file
        file:SetPath(path)
        scene:Load(file)
        LoadScene(scene)
    end

    /*
        This loads a scene file into the game. 

        Attribute: Parameter file the file to be loaded

        Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Scenes.Scene
        use Libraries.System.File
        
        class Main is Game
            action Main
                StartGame()
            end
        
            action CreateGame
                Scene scene
                File file
                file:SetPath("Scenes/Scene.qs")
                scene:Load(file)
                LoadScene(scene)
            end
        
            action Update(number seconds)
            end
        end
    */
    action LoadScene(Scene scene)
        sceneManager:Load(scene)
    end

    /*
        This action saves all of the items currently in the game to a 
        Scene object, which can then be saved.

        Attribute: Returns the Scene object.

        Attribute: Example 
        use Libraries.Game.Game
        use Libraries.Game.Scenes.Scene
        use Libraries.System.File
        
        class Main is Game
            action Main
                StartGame()
            end
        
            action CreateGame
                LoadScene("Scenes/Scene.qs")

                //returns undefined if the item is not found
                Item2D player = FindItem2DByName("1: Girl")
            end
        
            action Update(number seconds)
            end
        end
    */
    action SaveScene returns Scene
        return sceneManager:Save(me)
    end

    /*
        This action saves everything currently in the game to a 
        Scene file, which it returns, and additionally saves this scene 
        to disk.

        Attribute: Parameter file the file to save the scene to

        Attribute: Returns a scene file
    */
    action SaveScene(File file) returns Scene
        Scene scene = SaveScene()
        scene:Save(file)
        return scene
    end

    /*
        This action finds the first Item2D that has been added to the Game with the given 
        name and returns it. If no Item2D with the given name can be found, this action returns undefined instead. 
    

        Attribute: Parameter name The name of the Item to be found.
        Attribute: Returns The first Item2D added to the Game which has the given name, 
            or undefined if no such item can be found.

        Attribute: Example

        
    */
    action FindItem2DByName(text name) returns Item2D
        integer counter = 0
        repeat while counter < layers:GetSize()
            if layers:Get(counter) is Layer2D
                Layer2D layer = cast(Layer2D, layers:Get(counter))
                Iterator<Item2D> iterator = layer:GetIterator()
                repeat while iterator:HasNext()
                    Item2D item = iterator:Next()
                    if item:GetName() = name
                        return item
                    end
                end
            end
            counter = counter + 1
        end

        return undefined
    end

    /*
    This action finds the first Item3D that has been added to the Game with the given name and returns it.
    If no Item3D with the given name can be found, this action returns undefined instead. 

    Attribute: Parameter name The name of the Item to be found.
    Attribute: Returns The first Item3D added to the Game which has the given name, or undefined if no such item can be found
    */
    action FindItem3DByName(text name) returns Item3D
        integer counter = 0
        repeat while counter < layers:GetSize()
            if layers:Get(counter) is Layer3D
                Layer3D layer = cast(Layer3D, layers:Get(counter))
                Iterator<Item3D> iterator = layer:GetIterator()
                repeat while iterator:HasNext()
                    Item3D item = iterator:Next()
                    if item:GetName() = name
                        return item
                    end
                end
            end
            counter = counter + 1
        end

        return undefined
    end

    action GetFirstLetterNavigationTime returns number
        return firstLetterNavigationTime
    end

    action SetFirstLetterNavigationTime(number firstLetterNavigationTime)
        me:firstLetterNavigationTime = firstLetterNavigationTime
    end

    /*
    This action sets the InterfaceOptions being used by the game, providing default colors and properties
    for Controls. This affects all Controls currently in the game or that are added later.

    Attribute: Parameter options The new InterfaceOptions to use for the Game.

    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Interface.Options.DarkModeOptions
    
    class Main is Game
    
        action Main
            StartGame()
        end
    
        action CreateGame
            // DarkModeOptions is one kind of InterfaceOptions we could use for our game.
            // It will use darker colors to draw interface elements, like Buttons, by default.
            DarkModeOptions options
            SetInterfaceOptions(options)
        end
    end
    */
    action SetInterfaceOptions(InterfaceOptions options)
        interfaceOptions = options
        integer counter = 0
        repeat while counter < layers:GetSize()
            Layer layer = layers:Get(counter)
            if layer is Layer2D
                Layer2D layer2D = cast(Layer2D, layer)
                layer2D:ReloadControlGraphics()
            end
            counter = counter + 1
        end
    end

    /*
    This action returns the InterfaceOptions currently being used by the game. The InterfaceOptions
    provide default colors and properties for Controls in the game.

    Attribute: Returns The current InterfaceOptions in use by the game.

    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Interface.Options.InterfaceOptions
    
    class Main is Game
    
        Color color
    
        action Main
            StartGame()
        end
    
        action CreateGame
            InterfaceOptions options = GetInterfaceOptions()
    
            // Once we have the options, we can modify them to adjust how our Controls appear by default.
            options:SetButtonBackgroundColor(color:Pink())
        end
    end
    */
    action GetInterfaceOptions returns InterfaceOptions
        return interfaceOptions
    end

    /*
    This action instructs the Game to take a screenshot after the next frame of animation has been drawn.
    When the screenshot is taken, it will be stored in a PixelMap and sent to all ScreenshotListeners that
    have been registered in the Game. This action takes a screenshot of the entire window. You can use the
    other Screenshot definitions to capture only part of the window, or to provide a direct callback to
    handle the screenshot before the registered listeners.

    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.PixelMap
    use Libraries.Interface.Events.ScreenshotListener
    use Libraries.Interface.Events.ScreenshotEvent
    use Libraries.Game.GameStateManager
    use Libraries.Game.Application
    use Libraries.Game.WebApplication
    
    class Main is Game, ScreenshotListener
    
        action Main
            StartGame()
        end
    
        action CreateGame
            // Register this class to receive screenshot events.
            AddScreenshotListener(me)
    
            // Add a pattern to the screen. The actual pattern drawn here isn't important, it's just something to appear in our screenshot.
            integer i = 0
            Color color
            repeat while i < 10
                Drawable drawable
                drawable:LoadFilledCircle(50, color:CustomColor(1.0 - i / 10.0, 0.5, 1 / 1.0, 1.0))
                drawable:SetPosition(100 * (i mod 2), 100 * (i / 2))
                Add(drawable)
                i = i + 1
            end
    
            // Tell the Game to screenshot the next frame of animation that's drawn.
            Screenshot()
        end
    
        // This gets called once the screenshot is taken.
        action OnScreenshot(ScreenshotEvent event)
            PixelMap screenshot = event:GetScreenshot()
    
            // Get the Application, make sure we're on the web, then save our screenshot to the Downloads folder.
            GameStateManager manager
            Application app = manager:GetApplication()
            if app is WebApplication
                WebApplication webApp = cast(WebApplication, app)
                webApp:SaveImageToDownloads(screenshot, "MyScreenshot")
            end
        end
    end
    */
    action Screenshot
        Screenshot(0, 0, 0, 0, undefined)
    end

    /*
    This action instructs the Game to take a screenshot after the next frame of animation has been drawn.
    When the screenshot is taken, it will be stored in a PixelMap and sent to all ScreenshotListeners that
    have been registered in the Game. This action takes a screenshot of the window within the given
    coordinates. You can use the other Screenshot definitions to automatically capture the whole window, 
    or to provide a direct callback to handle the screenshot before the registered listeners.

    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.PixelMap
    use Libraries.Interface.Events.ScreenshotListener
    use Libraries.Interface.Events.ScreenshotEvent
    use Libraries.Game.GameStateManager
    use Libraries.Game.Application
    use Libraries.Game.WebApplication
    
    class Main is Game, ScreenshotListener
    
        action Main
            StartGame()
        end
    
        action CreateGame
            // Register this class to receive screenshot events.
            AddScreenshotListener(me)
    
            // Add a pattern to the screen. The actual pattern drawn here isn't important, it's just something to appear in our screenshot.
            integer i = 0
            Color color
            repeat while i < 10
                Drawable drawable
                drawable:LoadFilledCircle(50, color:CustomColor(1.0 - i / 10.0, 0.5, 1 / 1.0, 1.0))
                drawable:SetPosition(100 * (i mod 2), 100 * (i / 2))
                Add(drawable)
                i = i + 1
            end
    
            // Tell the Game to screenshot the next frame of animation that's drawn.
            // With these parameters, we'll get just a section of the pattern we've drawn.
            Screenshot(50, 50, 150, 300)
        end
    
        // This gets called once the screenshot is taken.
        action OnScreenshot(ScreenshotEvent event)
            PixelMap screenshot = event:GetScreenshot()
    
            // Get the Application, make sure we're on the web, then save our screenshot to the Downloads folder.
            GameStateManager manager
            Application app = manager:GetApplication()
            if app is WebApplication
                WebApplication webApp = cast(WebApplication, app)
                webApp:SaveImageToDownloads(screenshot, "MyScreenshot")
            end
        end
    end
    */
    action Screenshot(integer x, integer y, integer width, integer height)
        Screenshot(x, y, width, height, undefined)
    end

    /*
    This action instructs the Game to take a screenshot after the next frame of animation has been drawn.
    When the screenshot is taken, it will be stored in a PixelMap and sent to all ScreenshotListeners that
    have been registered in the Game. This action takes a screenshot of the entire window, then it informs
    the provided "callback" listener. After the callback has received the event, other ScreenshotListeners
    that have been added to the Game will also be notified.

    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.PixelMap
    use Libraries.Interface.Events.ScreenshotListener
    use Libraries.Interface.Events.ScreenshotEvent
    use Libraries.Game.GameStateManager
    use Libraries.Game.Application
    use Libraries.Game.WebApplication
    
    class Main is Game, ScreenshotListener
    
        action Main
            StartGame()
        end
    
        action CreateGame
            // Add a pattern to the screen. The actual pattern drawn here isn't important, it's just something to appear in our screenshot.
            integer i = 0
            Color color
            repeat while i < 10
                Drawable drawable
                drawable:LoadFilledCircle(50, color:CustomColor(1.0 - i / 10.0, 0.5, 1 / 1.0, 1.0))
                drawable:SetPosition(100 * (i mod 2), 100 * (i / 2))
                Add(drawable)
                i = i + 1
            end
    
            // Tell the Game to screenshot the next frame of animation that's drawn.
            // Instead of registering this class as a listener, we can pass it directly here as a parameter.
            // The listener will be called back when the screenshot is taken.
            Screenshot(me)
        end
    
        // This gets called once the screenshot is taken.
        action OnScreenshot(ScreenshotEvent event)
            PixelMap screenshot = event:GetScreenshot()
    
            // Get the Application, make sure we're on the web, then save our screenshot to the Downloads folder.
            GameStateManager manager
            Application app = manager:GetApplication()
            if app is WebApplication
                WebApplication webApp = cast(WebApplication, app)
                webApp:SaveImageToDownloads(screenshot, "MyScreenshot")
            end
        end
    end
    */
    action Screenshot(ScreenshotListener callback)
        Screenshot(0, 0, 0, 0, callback)
    end

    /*
    This action instructs the Game to take a screenshot after the next frame of animation has been drawn.
    When the screenshot is taken, it will be stored in a PixelMap and sent to all ScreenshotListeners that
    have been registered in the Game. This action takes a screenshot of the specified area of the window, 
    then it informs the provided "callback" listener. After the callback has received the event, other 
    ScreenshotListeners that have been added to the Game will also be notified.

    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.PixelMap
    use Libraries.Interface.Events.ScreenshotListener
    use Libraries.Interface.Events.ScreenshotEvent
    use Libraries.Game.GameStateManager
    use Libraries.Game.Application
    use Libraries.Game.WebApplication
    
    class Main is Game, ScreenshotListener
    
        action Main
            StartGame()
        end
    
        action CreateGame
            // Add a pattern to the screen. The actual pattern drawn here isn't important, it's just something to appear in our screenshot.
            integer i = 0
            Color color
            repeat while i < 10
                Drawable drawable
                drawable:LoadFilledCircle(50, color:CustomColor(1.0 - i / 10.0, 0.5, 1 / 1.0, 1.0))
                drawable:SetPosition(100 * (i mod 2), 100 * (i / 2))
                Add(drawable)
                i = i + 1
            end
    
            // Tell the Game to screenshot the next frame of animation that's drawn.
            // With these parameters, we'll get just a section of the pattern we've drawn.
            // Instead of registering this class as a listener, we can pass it directly here as a parameter.
            // The listener will be called back when the screenshot is taken.
            Screenshot(50, 50, 150, 300, me)
        end
    
        // This gets called once the screenshot is taken.
        action OnScreenshot(ScreenshotEvent event)
            PixelMap screenshot = event:GetScreenshot()
    
            // Get the Application, make sure we're on the web, then save our screenshot to the Downloads folder.
            GameStateManager manager
            Application app = manager:GetApplication()
            if app is WebApplication
                WebApplication webApp = cast(WebApplication, app)
                webApp:SaveImageToDownloads(screenshot, "MyScreenshot")
            end
        end
    end
    */
    action Screenshot(integer x, integer y, integer width, integer height, ScreenshotListener callback)
        // Set the dimensions of the screenshot. If the values are 0, it'll default to a shot of the whole screen when processed.
        ScreenshotEvent event
        event:SetDimensions(x, y, width, height)

        // Pending screenshots need to be stored in a container in case there's a callback listener attached.
        // It's fine if this is undefined, in that case it'll just go through the listeners attached to the input.
        SortableContainer<ScreenshotEvent, ScreenshotListener> container
        container:Set(event, callback)

        pendingScreenshots:Add(container)
    end

    action GetSharedTextureManager returns SharedTextureManager
        return sharedTextureManager
    end

    action GetShaderManager returns ShaderManager
        return shaderManager
    end

end
