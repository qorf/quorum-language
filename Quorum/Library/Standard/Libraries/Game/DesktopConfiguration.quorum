package Libraries.Game

use Libraries.Game.Graphics.Color
use Libraries.Game.ScreenResolution
use Libraries.Containers.Array
use Libraries.System.Logging.Logger
use Libraries.Game.Graphics.Vulkan.VulkanOptions

/*
This class represents the configuration of the game. It is referenced when
the game is first created to set its initial data.
 */
class DesktopConfiguration is ApplicationConfiguration
  
    /* The initial width of the application screen. */
    public integer width = 800

    /* The initial height of the application screen. */
    public integer height = 600

    /* Initial x coordinate where the window will appear on screen. -1 for center. */
    public integer x = -1

    /* Initial y coordinate where the window will appear on screen. -1 for center. */
    public integer y = -1

    /* If true, the application will use vSync. */
    public boolean vSyncEnabled = false

    /* The title of the application. */
    public text title = "Game"

    /* If true, the window will be resizable. */
    public boolean resizable = false

    /* If true, the textures will automatically be resized when the window is resized. */
    public boolean autoResizeTextures = true

    /*
    Whether or not the window should be maximized when launched.
    This only works if the window isn't fullscreen. By default,
    this value is false.
    */
    public boolean maximized = false

    //This private variable is a way to get around Quorum's 
    //lack of contructors. We basically use a temporary Color as a
    //Constructor object, that then returns a Color singleton for 
    //ApplicationConfiguration to use.
    private Color tempColor

    /* The starting color of the window while the Game is loading. */
    public Color initialBackgroundColor = tempColor:Black()

    /*
    Whether or not the game engine should limit the total frames rendered per
    second. If this is false, the engine will attempt to render as many frames
    as possible, which can potentially waste CPU time, consume more power, and
    adversely affect how screen readers interact with the application. If this
    value is set to true, the engine will try to limit the frames rendered to
    the targetFramesPerSecond value. This value is true by default.
    */
    public boolean limitFramesPerSecond = true

    /* 
    Target framerate when "limitFramesPerSecond" is set to true. The default
    value is 70.
    */
    public integer targetFramesPerSecond = 70

    /*
    If limitFramesPerSecond is true, this value represents the minimum number of
    seconds the engine should wait between frames. Having a minimum delay between
    frames gives screen readers and other accessibility technologies a greater
    opportunity to collect information from the system. If this value is set to
    0, then the engine will only delay as much as necessary to hit the target
    frame rate. The default value is 0.01 seconds.
    */
    public number minimumFrameDelay = 0.01

    /*
    The ScreenResolution to use when the game launches. If left undefined, the
    game will create a window using the configuration's given width and height.
    */
    public ScreenResolution defaultResolution = undefined

    /*
    The maximum number of seconds allowed between each mouse click before the
    click is no longer considered related to the previous click. This is used
    for things such as double-click input.
    */
    public number multipleClickTimer = 0.5

    /*
    The maximum number of seconds allowed between each key press before the
    press is no longer considered related to the previous key press. This is
    used for things like capturing double-taps on keys.
    */
    public number multipleKeyPressTimer = 0.5

    /*
    Whether or not the game should support accessibility devices, such as
    screen readers. This value is true by default. This value must be set
    before starting the game to have any effect -- changing it after will
    do nothing.
    */
    public boolean enableAccessibility = true
    
    /*Whether or not this application should use Vulkan for rendering. If this value is
false, or if the value is true but Vulkan isn't supported on this machine, the
application will use OpenGL for rendering instead. Must be set before starting the game.*/
    public boolean useVulkan = true
    
    /*The VulkanOptions describe various details about how the Vulkan library should be used
to render the game, including the Vulkan API version and whether or not to use validation
layers for debugging.*/
    public VulkanOptions vulkanOptions

end