package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Layouts.VerticalMenuLayout
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.MenuItemLayout
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.MenuItemView
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Containers.Support.Pair
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Font
use Libraries.Game.InputSet
use Libraries.Game.GameStateManager
use Libraries.Game.InputTable
use Libraries.Interface.Behaviors.Controls.MenuItemShortcutBehavior
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Views.ControlShaderView

class MenuItem is Control
    
    /*
    A panel which contains all of the submenu options for this MenuItem, if this
    MenuItem is a menu. The anchor is used to position the panel depending on
    what direction the panel is expected to open in.
    */
    MenuPanelBlueprint panel = undefined
    Control panelAnchor
    Layout panelLayout = undefined
    LayoutProperties panelProperties = undefined

    /*
    An array containing all elements added to the panel. This is redundant to
    the children list of the panel, but keeping it in this form makes it easier
    to retrieve without constant casting.
    */
    Array<MenuItem> menuItems

    MenuItem parentMenu = undefined
    MenuRoot menuRoot = undefined

    public constant integer DEFAULT = 0
    public constant integer LEFT = 1
    public constant integer RIGHT = 2
    public constant integer DOWN = 3
    public constant integer UP = 4

    integer direction = DEFAULT

    // The default appearance of MenuItems which are elements of this menu.
    ControlView submenuView = undefined

    boolean open = false

    Behavior activationBehavior = undefined

    Icon icon
    MnemonicLabel label
    Label shortcutLabel
    Icon arrow

    /*
    Layouts for this MenuItem. Which one is used depends on if this MenuItem is
    a child of another MenuItem.
    */
    FlowLayout rootLayout
    MenuItemLayout menuItemLayout

    text mnemonic = undefined

    on create
        SetInputGroup("MenuItem")
        SetAccessibilityCode(parent:Item:MENU_ITEM)

        MenuPanel panel
        me:panel = panel

        LayoutProperties defaultProperties = GetDefaultLayoutProperties()
        defaultProperties:SetBackgroundColor(undefined)

        panelProperties = panel:GetDefaultLayoutProperties()
        panelAnchor:Add(panel)
        ManualLayout layout
        layout:ApplyToContainer(true)
        panelAnchor:SetLayout(layout)
        panelAnchor:SetName("Panel Anchor")

        LayoutProperties iconProperties = icon:GetDefaultLayoutProperties()
        LayoutProperties labelProperties = label:GetDefaultLayoutProperties()
        LayoutProperties shortcutProperties = shortcutLabel:GetDefaultLayoutProperties()
        LayoutProperties arrowProperties = arrow:GetDefaultLayoutProperties()
        LayoutProperties menuProperties = GetDefaultLayoutProperties()

        Font font = GetDefaultFont()
        if font not= undefined
            integer defaultFontSize = GetDefaultFontSize()
            menuProperties:SetFont(font)
            menuProperties:SetFontSize(defaultFontSize)
        end
        menuProperties:SetVerticalLayoutMode(menuProperties:FIT_FONT)

        menuProperties:SetBorderThickness(1)

        iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
        iconProperties:SetVerticalLayoutMode(iconProperties:STANDARD)
        iconProperties:SetPercentageWidth(1.0)
        iconProperties:SetPercentageHeight(1)
        iconProperties:SetLeftMargin(6)
        iconProperties:SetTopMargin(4)
        iconProperties:SetBottomMargin(4)

        labelProperties:SetVerticalLayoutMode(labelProperties:FIT_CONTENTS)
        labelProperties:SetLeftMargin(6)
        labelProperties:SetRightMargin(6)
        labelProperties:SetBottomMargin(4)

        shortcutProperties:SetVerticalLayoutMode(shortcutProperties:FIT_CONTENTS)
        shortcutProperties:SetLeftMargin(4)
        shortcutProperties:SetRightMargin(6)
        shortcutProperties:SetBottomMargin(4)

        arrowProperties:SetHorizontalLayoutMode(arrowProperties:MAINTAIN_ASPECT_RATIO)
        arrowProperties:SetVerticalLayoutMode(arrowProperties:STANDARD)
        arrowProperties:SetPercentageWidth(1.0)
        arrowProperties:SetPercentageHeight(0.5)
        arrowProperties:SetRightMargin(6)
        arrowProperties:SetTopMargin(4)
        arrowProperties:SetBottomMargin(4)

        label:SetName("Label")
        icon:SetName("Icon")
        shortcutLabel:SetName("Shortcut")
        shortcutLabel:SetText("")
        arrow:SetName("Arrow")
        arrow:Hide()
        
shortcutLabel:SetAccessibilityCode(shortcutLabel:parent:Item:NOT_ACCESSIBLE)
label:SetAccessibilityCode(label:parent:Item:NOT_ACCESSIBLE)

        Add(icon)
        Add(label)
        Add(shortcutLabel)
        Add(arrow)

        SetInterfaceOptionsKey("MenuItem")
    end

    action GetDefaultFontSize returns integer
        return 14
    end

    action SetShortcut(InputSet set)
        text name = set:GetDisplayName()
        GameStateManager manager
        InputTable table = manager:GetGame():GetDefaultInputTable()
        MenuItemShortcutBehavior behave
        behave:SetMenuItem(me)
        table:Add(set, behave)
        SetShortcut(name)
    end

    action Add(MenuItem item)

        MenuItemView menuView = undefined
        boolean noBar = GetMenuRoot() not= undefined and GetMenuRoot():HasBar() = false

        if menuItems:IsEmpty() and (GetParentMenu() not= undefined or noBar)
            arrow:Show()
        end

        item:SetMenuRoot(menuRoot)
        item:SetParentMenu(me)
        panel:Add(item)
        menuItems:Add(item)

        if item:GetMenuDirection() = DEFAULT
            item:SetMenuDirection(DEFAULT)
        end
    end

    action Add(Array<MenuItem> items)
        integer counter = 0
        repeat while counter < items:GetSize()
            Add(items:Get(counter))
            counter = counter + 1
        end
    end

    action RemoveMenuItem(MenuItem item)
        menuItems:Remove(item)
        panel:Remove(item)
    end

    action Empty
        menuItems:Empty()
        panel:Empty()
    end

    action IsEmpty returns boolean
        return menuItems:IsEmpty()
    end

    action SetMenuDirection(integer direction)
        if panelLayout = undefined
            VerticalMenuLayout layout
            panelLayout = layout
        end

        me:direction = direction

        if direction = DEFAULT
            if GetParentMenu() = undefined and (GetMenuRoot()not= undefined and GetMenuRoot():HasBar() = true)
                direction = DOWN
            else
                direction = RIGHT
            end
        end

        LayoutProperties anchorProperties = panelAnchor:GetDefaultLayoutProperties()

        if direction = LEFT
            anchorProperties:SetPercentageX(0)
            anchorProperties:SetPercentageY(1)

            panelProperties:SetPercentageOriginX(1)
            panelProperties:SetPercentageOriginY(1)
            panelProperties:SetPercentageX(0)
            panelProperties:SetPercentageY(1)
        elseif direction = RIGHT
            anchorProperties:SetPercentageX(1)
            anchorProperties:SetPercentageY(1)

            panelProperties:SetPercentageOriginX(0)
            panelProperties:SetPercentageOriginY(1)
            panelProperties:SetPercentageX(1)
            panelProperties:SetPercentageY(1)
        elseif direction = DOWN
            anchorProperties:SetPercentageX(0)
            anchorProperties:SetPercentageY(0)

            panelProperties:SetPercentageOriginX(0)
            panelProperties:SetPercentageOriginY(1)
            panelProperties:SetPercentageY(0)
            panelProperties:SetPercentageX(0)
        elseif direction = UP
            anchorProperties:SetPercentageX(0)
            anchorProperties:SetPercentageY(1)

            panelProperties:SetPercentageOriginX(0)
            panelProperties:SetPercentageOriginY(0)
            panelProperties:SetPercentageX(0)
            panelProperties:SetPercentageY(1)
        end
    end

    action GetMenuDirection returns integer
        return direction
    end

    action Open
        if not open and (not menuItems:IsEmpty())
            if panel:GetInterfaceScale() not= GetInterfaceScale()
                panel:SetInterfaceScale(GetInterfaceScale())
            end

            open = true
            Add(panelAnchor)
            panel:Resize()
            
            MenuRoot bar = GetMenuRoot()
            if bar not= undefined
                MenuChangeEvent event
                event:Set(bar, me, event:OPENED)
                bar:NotifyMenuChangeListeners(event)
            end
        end
    end

    action Close
        if open
            integer counter = 0

            repeat while counter < menuItems:GetSize()
                MenuItem item = menuItems:Get(counter)
                item:Close()
                counter = counter +  1
            end

            open = false
            Remove(panelAnchor)

            MenuRoot bar = GetMenuRoot()
            if bar not= undefined
                MenuChangeEvent event
                event:Set(bar, me, event:CLOSED)
                bar:NotifyMenuChangeListeners(event)
            end
        end
        
        selectionIndex = 0
    end

    action IsOpen returns boolean
        return open
    end

    action SetShortcut(text shortcut)
        shortcutLabel:SetText(shortcut)
    end
    
    action GetShortcut returns text
        return shortcutLabel:GetText()
    end

    action SetAppearance(MenuItemView content)
        content:SetText(GetName())
        content:SetShortcut(GetShortcut())
        if not (menuItems:IsEmpty()) and GetMenuRoot() not= undefined
            content:EnableMenuArrow(true)
            GetMenuRoot():Resize()
        else
            content:EnableMenuArrow(false)
        end

        SetSize(content:GetViewWidth(), content:GetViewHeight())
    end

    action SetMenuAppearance(MenuItemView menuView)

        if menuView = undefined
            return now
        end

        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D i = menuItems:Get(counter)
            
            if i is MenuItem
                MenuItem item = cast(MenuItem, i)
                MenuItemView copy = cast(MenuItemView, menuView:Copy())
                item:SetAppearance(copy)
                item:SetMenuAppearance(menuView)
            end
            counter = counter + 1
        end
    end

    action GetMenuRoot returns MenuRoot
        return menuRoot
    end

    action SetMenuRoot(MenuRoot root)
        menuRoot = root

        integer counter = 0
        repeat while counter < menuItems:GetSize()
            MenuItem child = menuItems:Get(counter)
            child:SetMenuRoot(root)
            counter = counter + 1
        end
    end

    action GetParentMenu returns MenuItem
        return parentMenu
    end

    action SetParentMenu(MenuItem menu)
        parentMenu = menu
    end

    action SetBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action GetActivationBehavior returns Behavior
        return activationBehavior
    end

    action ClickedMouse
        parent:Control:ClickedMouse()

        MenuRoot bar = GetMenuRoot()
        if bar not= undefined
            if bar:IsSelecting()
                Activate()
            else
                Select()
            end
        else
            Activate()
        end
    end

    action BeginMouseOver
        MenuRoot bar = GetMenuRoot()
        if bar not= undefined and bar:IsSelecting()
            if not open
                Open()
            end
            Select()
        end
    end

    action GainedSelection
        parent:Control:GainedSelection()
        LayoutProperties properties = GetDefaultLayoutProperties()
        ColorGroup select = properties:GetSelectionFontColor()

        label:SetColor(select)
        shortcutLabel:SetColor(properties:GetSelectionFontColor())

        MenuRoot menuRoot = GetMenuRoot()
        if menuRoot not= undefined
            menuRoot:SetSelectingState(true)
        end
    end

    action LostSelection
        parent:Control:LostSelection()
        LayoutProperties properties = GetDefaultLayoutProperties()
        ColorGroup select = properties:GetFontColor()
        label:SetColor(select)
        shortcutLabel:SetColor(properties:GetFontColor())

        if open
            Close()
        end
    end

    action Select
        // Don't actually select here! Go to MenuRoot and ask it to select us.
        // We do this to allow the MenuRoot to fully update its information,
        // deselect the previous selection, and prevent infinite loops.
        if menuRoot not= undefined
            menuRoot:Select(GetMenuPath())
        end
    end

    action Deselect
        // Don't actually select here! Go to MenuRoot and ask it to deselect us.
        // We do this to allow the MenuRoot to fully update its information,
        // deselect this, and prevent infinite loops.
        if menuRoot not= undefined
            menuRoot:Deselect()
        end
    end

    action GetMenuItems returns Iterator<MenuItem>
        return menuItems:GetIterator()
    end

    action UpdateSelection(Array<MenuItem> oldPath, Array<MenuItem> newPath)

        MenuItem oldItem = undefined
        MenuItem newItem = undefined

        if not oldPath:IsEmpty()
            oldItem = oldPath:RemoveFromFront()
        end

        if not newPath:IsEmpty()
            newItem = newPath:RemoveFromFront()
        end

        if oldItem = newItem
            if oldItem = undefined
                return now
            else
                if oldItem not= undefined
                    oldItem:UpdateSelection(oldPath, newPath)
                end
            end
        else
            if oldItem not= undefined
                oldItem:RecursiveDeselect(oldPath)
            end
            if newItem not= undefined
                newItem:RecursiveSelect(newPath)
            end
        end
    end

    action RecursiveSelect(Array<MenuItem> path)
        GainedSelection()
        if not path:IsEmpty()
            MenuItem item = path:RemoveFromFront()
            if item not= undefined
                item:RecursiveSelect(path)
            end
        end
    end

    action RecursiveDeselect(Array<MenuItem> path)
        if not path:IsEmpty()
            MenuItem item = path:RemoveFromFront()
            if item not= undefined
                item:RecursiveDeselect(path)
            end
        end
        LostSelection()
    end

    action GetIconWidth returns number
        if icon:IsShowing()
            Font font = GetDefaultLayoutProperties():GetFont()
            if font not= undefined
                number aspectRatio = 1.0
                LayoutProperties iconProperties = icon:GetDefaultLayoutProperties()
                if iconProperties:GetHorizontalLayoutMode() = iconProperties:MAINTAIN_ASPECT_RATIO
                    aspectRatio = iconProperties:GetPercentageWidth()
                end

                return (font:GetLineHeight() * aspectRatio) + iconProperties:GetLeftMargin() + iconProperties:GetRightMargin()
            end
        end
        return 0
    end

    action GetNameWidth returns number
        if label:IsShowing()
            LayoutProperties properties = label:GetDefaultLayoutProperties()
            return label:GetWidth() + properties:GetLeftMargin() + properties:GetRightMargin()
        else
            return 0
        end
    end

    action GetShortcutWidth returns number
        if shortcutLabel:IsShowing() and shortcutLabel:GetText() not= ""
            LayoutProperties properties = label:GetDefaultLayoutProperties()
            return shortcutLabel:GetWidth() + properties:GetLeftMargin() + properties:GetRightMargin()
        else
            return 0
        end
    end

    action GetSubmenuIconWidth returns number
        if arrow:IsShowing()
            Font font = GetDefaultLayoutProperties():GetFont()
            if font not= undefined
                number aspectRatio = 1.0
                LayoutProperties arrowProperties = arrow:GetDefaultLayoutProperties()
                if arrowProperties:GetHorizontalLayoutMode() = arrowProperties:MAINTAIN_ASPECT_RATIO
                    aspectRatio = arrowProperties:GetPercentageWidth()
                end

                return (font:GetLineHeight() * aspectRatio) + arrowProperties:GetLeftMargin() + arrowProperties:GetRightMargin()
            end
        end
        return 0
    end

    action IsMenu returns boolean
        return not menuItems:IsEmpty()
    end

    action GetSize returns integer
        return menuItems:GetSize()
    end

    action MenuSelectionDown
        if GetParentMenu() not= undefined
            GetParentMenu():MenuSelectionDown(me)
        elseif menuItems:GetSize() > 0
            if not open
                Open()
            end
            menuItems:Get(0):Select()
        end
    end

    private action MenuSelectionDown(MenuItem previous)
        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D item = menuItems:Get(counter)
            if item:Equals(previous)

                // Select next item in the list, wrap if needed
                integer index = (counter + 1) mod menuItems:GetSize()
                menuItems:Get(index):Select()

                return now
            end
            counter = counter + 1
        end
    end

    action MenuSelectionUp
        if GetParentMenu() not= undefined
            GetParentMenu():MenuSelectionUp(me)
        elseif menuItems:GetSize() > 0
            if not open
                Open()
            end
            menuItems:Get(0):Select()
        end
    end

    private action MenuSelectionUp(MenuItem previous)
        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D item = menuItems:Get(counter)
            if item:Equals(previous)

                // Select the previous element in the menu, wrap if needed
                integer index = counter - 1
                if index < 0
                    index = menuItems:GetSize() - 1
                end
                menuItems:Get(index):Select()

                return now
            end
            counter = counter + 1
        end
    end

    action GetMenuPath returns Array<MenuItem>
        Array<MenuItem> path
        path:Add(me)
        if parentMenu not= undefined
            Array<MenuItem> a = parentMenu:GetMenuPath(path)
            return a
        end
        return path
    end

    private action GetMenuPath(Array<MenuItem> array) returns Array<MenuItem>
        array:AddToFront(me)
        if parentMenu not= undefined
            return parentMenu:GetMenuPath(array)
        end

        return array
    end

    /*
        Returns whether or not the menu item is selected.

        Attribute: Returns true if the item is selected.
    */
    action IsSelected returns boolean
        if GetMenuRoot() = undefined
            return false
        end
        Array<MenuItem> path = GetMenuRoot():GetSelection():GetPath()
        return path:Has(me)
    end

    action Activate(BehaviorEvent event)
        if IsMenu()
            if open
                if menuRoot not= undefined
                    menuRoot:Close()
                else
                    Close()
                end
            else
                Open()
            end
        end

        if IsMenu() = false and menuRoot not= undefined and menuRoot:IsSelecting()
            menuRoot:SetSelectingState(false)
            menuRoot:RestoreLastFocus()
        end
        parent:Control:Activate(event)
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if GetParentMenu() = undefined and (GetMenuRoot() not= undefined and GetMenuRoot():HasBar())
            if GetLayout() = undefined or GetLayout():Equals(rootLayout) = false
                rootLayout:SetIgnoreHidden(true)
                SetLayout(rootLayout)
            end

            shortcutLabel:Hide()
            arrow:Hide()

            SetMenuDirection(DOWN)

            properties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        else
            if GetLayout() = undefined or GetLayout():Equals(menuItemLayout) = false
                SetLayout(menuItemLayout)
            end

            properties:SetHorizontalLayoutMode(properties:STANDARD)
            properties:SetPercentageWidth(1.0)

            SetMenuDirection(RIGHT)

            if shortcutLabel:GetText() = ""
                shortcutLabel:Hide()
            else
                shortcutLabel:Show()
            end
        end

        panel:SetName(GetName() + " Menu Panel")
        panel:SetBorderThickness(properties:GetBorderThickness())
        panel:SetBorderStyle(properties:ALL - properties:TOP)

        if properties:GetIcon() not= undefined
            TextureRegion region = properties:GetIcon()
            if icon:GetTextureField() not= region:GetTextureField()
                icon:Load(properties:GetIcon())
            end
            if properties:GetIconColor() not= undefined
                icon:SetColor(properties:GetIconColor())
            end
            icon:Show()
        else
            icon:Hide()
        end

        arrow:SetColor(properties:GetFontColor())

        if arrow:IsLoaded() = false
            arrow:LoadFilledTriangle(0, 0, 0, 200, 173, 100)
        end

        arrow:SetColor(properties:GetFontColor():GetBottomLeft())

        text labelText = properties:GetLabelText()
        if labelText = ""
            labelText = GetName()
        end

        Font font = properties:GetFont()
        integer fontSize = cast(integer, properties:GetFontSize() * properties:GetInterfaceScale())
        if font:GetSize() not= fontSize
            font:SetSize(fontSize)
        end

        boolean selected = IsSelected()

        label:SetFont(font)
        label:SetSize(properties:GetFontSize())
        label:SetText(labelText)

        if selected
            label:SetColor(properties:GetSelectionFontColor())
        else
            label:SetColor(properties:GetFontColor())
        end

        shortcutLabel:SetSize(properties:GetFontSize())

        //This is a box with a border on it that is the background of the menu
        if GetView2D() = undefined
            ControlShaderView view
            view:Initialize()
            SetView2D(view)
        end

        parent:Control:LoadGraphics(properties)
    end

    /*
    The Resize action is used to recalculate the size and position of Controls
    that are being controlled by a Layout. Calling Resize on an Item2D won't
    have a direct effect on it, but if the Item's children hierarchy contains
    any Controls, those Controls will be resized.
    */
    action Resize
        if parent:Item2D:isResizing
            return now
        end

        parent:Item2D:Resize()

        // We need to resize the panel anchor to allow it to re-lay itself out
        // in the correct position, because the parent's layout will otherwise
        // override the anchor's ManualLayout.
        panelAnchor:Resize()
    end

    action GetMnemonic returns text
        return mnemonic
    end

    action SetMnemonic(text mnemonic)
        label:SetMnemonic(mnemonic)
        me:mnemonic = mnemonic
    end

end
