package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.ControlActivationListener
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.SelectionListener
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.System.File
use Libraries.Game.InputTable
use Libraries.Game.Game
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.DrawableShape
use Libraries.Interface.Views.DrawableView
use Libraries.Interface.Events.FocusEvent
use Libraries.Containers.Iterator
use Libraries.Containers.Support.EmptyIterator
use Libraries.Interface.Forms.FormConstants

class Control is Item2D

    // The following constants are used for SetHorizontalLayoutMode() and
    // SetVerticalLayoutMode().
    /*
    The STANDARD layout style calculates the dimensions and positions of the
    Control using percentages of the Control's dimensions combined with static
    pixel values. Because this is dependent on the container's size to calculate
    the percentages, this is incompatible with container layouts that use the
    children to determine its own size, such as FIT_CONTENTS.
    */
    public integer STANDARD = 0

    /*
    The FILL layout style will attempt to fill the remaining width or height of
    the container with this Control. Note that this is only effective if the
    container's dimensions are already known independently of this element's
    size -- for example, a FILL layout can't be effectively used if the
    container's layout style is FIT_CONTENTS.
    */
    public integer FILL = 1

    /*
    The FIT_CONTENTS layout style will calculate this Control's dimensions as
    the combined total dimensions of its children elements. Because children
    elements often need to have some concrete information about the parent's
    dimensions, it's recommended to only use this in one of the two directions
    (horizontally or vertically) for the Control. For example, FlowLayouts work
    well with elements with a predetermined STANDARD horizontal layout style and
    using FIT_CONTENTS for the vertical layout style.
    */
    public integer FIT_CONTENTS = 2
    /*
    The FIT_FONT layout style is used to ensure a Control's height can fit the
    Font used in this LayoutProperties, plus padding from the children elements.
    FIT_FONT is only effective for the vertical layout style, and requires that
    a Font is present in this LayoutProperties.
    */
    public integer FIT_FONT = 3

    /*
    The MAINTAIN_ASPECT_RATIO layout style is used to calculate one of the
    dimensions of the Control relative to the other dimension. For example, it
    can be used to ensure that the width of a Control is always 120% of the
    height. This style can only be used to calculate one of the two dimensions
    (width or height) at a time. For example, if the horizontal layout style is
    MAINTAIN_ASPECT_RATIO, the vertical layout style must be different, such as
    using the STANDARD style.
    */
    public integer MAINTAIN_ASPECT_RATIO = 4

    Array<ControlActivationListener> listeners = undefined

    /*
    LayoutProperties describe how this Item are laid out by Layouts. If the
    Item has multiple LayoutProperties objects, the most appropriate one will
    be chosen based on the container's size.
    */
    Array<LayoutProperties> layoutProperties = undefined
    
    /*
    The default LayoutProperties, used by many controls to set their base visual
    information and provide default values.
    */
    LayoutProperties defaultProperties

    /*
    The LayoutProperties that were last used to define the properties of this
    Control. Used to indicate when graphics should be reloaded due to Layout
    changes.
    */
    LayoutProperties currentProperties = undefined

    /*
    A layout which is used to arrange the children of this object.
    */
    Layout layout = undefined

    /*
    Whether or not this Control should automatically be laid out during the
    next Update loop.
    */
    boolean needsLayout = false

    PopupMenu contextMenu = undefined

    /*
    SelectionListeners which are registered with this Control. They'll be
    informed of selection changes in this Control, if the Control has an
    associated selection.
    */
    Array<SelectionListener> selectionListeners = undefined

    // Booleans used to indicate if this Control has been interacted with in a way that needs special rendering by the Control shader.
    boolean renderMouseOver = false
    boolean renderMouseDown = false
    boolean renderSelected = false

    /*
        This action obtains the Input Table from this control, copies it, 
        assigns it a group name, sets the control to use the new input table,
        and then adds it to the global input table hash table. 

        Attribute: Parameter name the name of the group for the new input table.
        Attribute: Returns the input table copy

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.TextBox
        use Libraries.Game.InputTable

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TextBox box
                InputTable copy = box:CopyAndActivateInputTable("New Group")
            end

            action Update(number seconds)
            end
        end
    */
    action CopyAndActivateInputTable(text name) returns InputTable
        InputTable inputTable = GetInputTable():Copy()
        inputTable:SetIdentifier(name)
        SetInputGroup(name)

        GameStateManager manager
        manager:GetGame():AddInputTable(inputTable)
        return inputTable
    end
    /*
        This action is used when a control is clicked by the mouse.
    */
    action ClickedMouse
        renderMouseDown = true
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:ClickedMouse()
        end

        RequestVerticesUpdate()
    end
    /*
        This action is used when a control is released by the mouse.
    */
    action ReleasedMouse
        renderMouseDown = false
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:ReleasedMouse()
        end

        RequestVerticesUpdate()
    end
    /*
        This action is used when a control is moused over by the mouse.
    */
    action BeginMouseOver
        renderMouseOver = true
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:BeginMouseOver()
        end

        RequestVerticesUpdate()
    end
    /*
        This action is used when a control is moused over and it ends.
    */
    action EndMouseOver
        renderMouseOver = false
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:EndMouseOver()
        end

        RequestVerticesUpdate()
    end
    /*
        This action is used when a control gains the selection.
    */
    action GainedSelection
        renderSelected = true
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:GainedSelection()
        end

        RequestVerticesUpdate()
    end
    /*
        This action is used when a control loses the selection.
    */
    action LostSelection
        renderSelected = false
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:LostSelection()
        end

        RequestVerticesUpdate()
    end

    /*
        This action is fired if the item received the focus.
    */
    action GainedFocus(FocusEvent event)
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:GainedFocus()
        end
        RequestVerticesUpdate()
    end

    /*
        This action is fired if the item lost the focus.
    */
    action LostFocus(FocusEvent event)
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:LostFocus()
        end
        RequestVerticesUpdate()
    end

    /*
        Returns true if rendering the mouse over event.
    */
    action IsRenderingMouseOver returns boolean
        return renderMouseOver
    end

    /*
        Returns true if rendering the mouse down event.
    */
    action IsRenderingMouseDown returns boolean
        return renderMouseDown
    end

    /*
        Returns true if rendering the selection event.
    */
    action IsRenderingSelection returns boolean
        return renderSelected
    end

    /*
        Returns true if rendering the focus event.
    */
    action IsRenderingFocus returns boolean
        return IsFocused()
    end

    /*
        This action returns a default behavior for this paricular control. Some
        controls do nothing by default, like a TextBox that responds to different kinds
        of input. Others, however, have default behaviors, like a Button or a MenuItem. 
        If there is no default behavior, this action returns undefined.
    */
    action GetActivationBehavior returns Behavior
        return undefined
    end

    action Activate
        BehaviorEvent event
        event:SetItem(me)
        Activate(event)
    end

    action Activate(BehaviorEvent event)
        if GetActivationBehavior() not= undefined
            if event:GetItem() = undefined or not event:GetItem():Equals(me)
                event = event:Copy()
                event:SetItem(me)
            end
            GetActivationBehavior():Run(event)

            ControlActivationEvent controlEvent
            controlEvent:Set(me, event)
            NotifyControlActivationListeners(controlEvent)
        end
    end

    /*  
    This action adds a different Item2D into this one. This makes a few things happen.
        1. The added item will get this item as its parent.
        2. The added item's x and y coordinates will become relative to this Item.
        3. Most actions on this Item will also affect the added Item.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        parentItem:Add(child)
        
    */
    action Add(Item2D newItem)
        parent:Item2D:Add(newItem)

        if newItem is Control
            Control c = cast(Control, newItem)
            c:SetInterfaceScale(GetInterfaceScale())
            c:RequestLayout()
        end
    end

    /*  
    This action adds a different Item2D into this one, storing the added Item2D
    at a specific index in the internal array.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        parentItem:Add(0, child)
        
    */
    action Add(integer index, Item2D newItem)
        parent:Item2D:Add(index, newItem)

        if newItem is Control
            Control c = cast(Control, newItem)
            c:SetInterfaceScale(GetInterfaceScale())
            c:RequestLayout()
        end
    end
    /*  
    This action removes an Item2D from the internal array.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        parentItem:Add(0, child)
        parentItem:Remove(child)
        
    */
    action Remove(Item2D item) returns boolean
        RequestLayout()
        return parent:Item2D:Remove(item)
    end
    /*  
    This action removes an Item2D at a specifed index from the internal array.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        parentItem:Add(0, child)
        parentItem:Remove(0)
        
    */
    action Remove(integer index) returns Item2D
        RequestLayout()
        return parent:Item2D:Remove(index)
    end

    action AddControlActivationListener(ControlActivationListener listener)
        if listeners = undefined
            Array<ControlActivationListener> array
            listeners = array
        end

        listeners:Add(listener)
    end

    action RemoveControlActivationListener(ControlActivationListener listener)
        if listeners = undefined
            return now
        end

        listeners:Remove(listener)

        if listeners:IsEmpty()
            listeners = undefined
        end
    end

    action NotifyControlActivationListeners(ControlActivationEvent event)
        if listeners not= undefined
            integer counter = 0
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):ControlActivated(event)
                counter = counter + 1
            end
        end

        GameStateManager manager
        manager:GetInput():NotifyControlActivationListeners(event)
    end

    action SetLayout(Layout layout)
        me:layout = layout
    end

    action GetLayout returns Layout
        return layout
    end

    action AddLayoutProperties(LayoutProperties properties)
        if layoutProperties = undefined
            Array<LayoutProperties> array
            layoutProperties = array
        end

        layoutProperties:Add(properties)
        layoutProperties:Sort()
    end

    action RemoveLayoutProperties(LayoutProperties properties)
        if layoutProperties = undefined
            return now
        end

        layoutProperties:Remove(properties)

        if layoutProperties:IsEmpty()
            layoutProperties = undefined
        end
    end

    action GetLayoutProperties returns Iterator<LayoutProperties>
        if layoutProperties not= undefined
            return layoutProperties:GetIterator()
        else
            EmptyIterator<LayoutProperties> empty
            return empty
        end
    end

    /*
    This action returns the best suited LayoutProperties stored by the Control
    for use with the given container width and height. The Control will attempt
    to find the most restricted LayoutProperties that is still valid,
    prioritizing width over height in case of equal values.

    Attribute: Parameter containerWidth The width of the container the LayoutProperties must be legal for.
    Attribute: Parameter containerHeight The height of the container the LayoutProperties must be legal for.
    Attribute: Returns The LayoutProperties contained in the Control that is best suited to the requested container dimensions.
    */
    action GetLayoutProperties(number containerWidth, number containerHeight) returns LayoutProperties
        LayoutProperties properties = undefined
        Array<LayoutProperties> array = layoutProperties

        if array not= undefined
            integer counter = array:GetSize()
    
            /*
            Layouts are sorted by minimum width, or minimum height if minimum
            widths are equal. When we find an invalid layout, it's assumed that
            all following layouts will also be invalid.
            */
            repeat while counter > 0
                counter = counter - 1
                LayoutProperties temp = array:Get(counter)
                if (temp:GetMaximumContainerWidth() >= containerWidth and temp:GetMaximumContainerHeight() >= containerHeight)
                    properties = temp
                end
            end
        end

        if properties = undefined
            properties = GetDefaultLayoutProperties()
        end

        return properties
    end

    /*
    This action returns the default LayoutProperties used for this Control.

    Attribute: Returns The default LayoutProperties of this Control.
    */
    action GetDefaultLayoutProperties returns LayoutProperties
        return defaultProperties
    end

    /*
    This action returns the LayoutProperties that were last used to define the
    Control, and thus describe its current state. Note that if the Control 
    hasn't been laid out yet, this will return undefined.

    Attribute: Returns The last LayoutProperties used to layout this Control, or undefined if it hasn't been laid out yet.
    */
    action GetCurrentLayoutProperties returns LayoutProperties
        return currentProperties
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if currentProperties not= undefined
            currentProperties:SetRenderingFlag(true)
        end

        currentProperties = properties

        if currentProperties not= undefined
            currentProperties:SetRenderingFlag(false)
        end
    end

    /*
    The SetHorizontalLayoutMode is used to determine how the width of a
    Control is calculated. It should be one of the following constants:
    STANDARD, which will calculate the width as a set number of pixels plus a
    percentage of the container's width.
    FILL, which will make the width fill the remaining width of the container.
    FIT_CONTENTS, which will calculate the width to fit the children contents.

    Attribute: Parameter mode A layout mode constant, one of STANDARD, FILL, or FILL_CONTENTS.
    */
    action SetHorizontalLayoutMode(integer mode)
        defaultProperties:SetHorizontalLayoutMode(mode)
    end
    /*
    The GetHorizontalLayoutMode is used to determine how the width of a
    Control is calculated. It should be one of the following constants:
    STANDARD, which will calculate the width as a set number of pixels plus a
    percentage of the container's width.
    FILL, which will make the width fill the remaining width of the container.
    FIT_CONTENTS, which will calculate the width to fit the children contents.

    Attribute: Returns the integer that maps to the layout mode constant, one of STANDARD, FILL, or FILL_CONTENTS.
    */
    action GetHorizontalLayoutMode returns integer
        return defaultProperties:GetHorizontalLayoutMode()
    end

    /*
    The GetVerticalLayoutMode is used to determine how the height of a
    Control is calculated. It should be one of the following constants:
    STANDARD, which will calculate the height as a set number of pixels plus a
    percentage of the container's height.
    FILL, which will make the height fill the remaining height of the container.
    FIT_CONTENTS, which will calculate the height to fit the children contents.
    FIT_FONT, which will fit the height of the Control to the line height of the
    Font set in this LayoutProperties.

    Attribute: Parameter mode A layout mode constant, one of STANDARD, FILL, FILL_CONTENTS, or FIT_FONT.
    */
    action SetVerticalLayoutMode(integer mode)
        defaultProperties:SetVerticalLayoutMode(mode)
    end
    /*
    The SetVerticalLayoutMode is used to determine how the height of a
    Control is calculated. It should be one of the following constants:
    STANDARD, which will calculate the height as a set number of pixels plus a
    percentage of the container's height.
    FILL, which will make the height fill the remaining height of the container.
    FIT_CONTENTS, which will calculate the height to fit the children contents.
    FIT_FONT, which will fit the height of the Control to the line height of the
    Font set in this LayoutProperties.

    Attribute: Returns the integer that maps to the layout mode constant, one of STANDARD, FILL, FILL_CONTENTS, or FIT_FONT.
    */
    action GetVerticalLayoutMode returns integer
        return defaultProperties:GetVerticalLayoutMode()
    end

    /*
    This action sets the x position of the Control relative to the size of its
    container, if the container's Layout supports it.

    Attribute: Parameter x The target x position as a percentage (as a value between 0.0 and 1.0) of the container's width.
    */
    action SetPercentageX(number x)
        defaultProperties:SetPercentageX(x)
    end

    /*
    This action returns the x position of the Control relative to the size of 
    its container, if the container's Layout supports it.

    Attribute: Returns The target x position as a percentage (as a value between 0.0 and 1.0) of the container's width.
    */
    action GetPercentageX returns number
        return defaultProperties:GetPercentageX()
    end

    /*
    This action sets the y position of the Control relative to the size of its
    container, if the container's Layout supports it.

    Attribute: Parameter y The target y position as a percentage (as a value between 0.0 and 1.0) of the container's width.
    */
    action SetPercentageY(number y)
        defaultProperties:SetPercentageY(y)
    end

    /*
    This action returns the y position of the Control relative to the size of 
    its container, if the container's Layout supports it.

    Attribute: Returns The target y position as a percentage (as a value between 0.0 and 1.0) of the container's height.
    */
    action GetPercentageY returns number
        return defaultProperties:GetPercentageY()
    end

    /*
    This action sets the x position of the Control in pixels, if the container's 
    Layout supports it. If the Control has also been set to use a percentage of
    the container's width to set the x position, then the two values will be
    added together.

    Attribute: Parameter x The target x position of this Control in pixels.
    */
    action SetPixelX(number x)
        defaultProperties:SetPixelX(x)
    end

    /*
    This action returns the target x position of the Control in pixels. Note
    that this may not be used by some layouts (such as FlowLayout).

    Attribute: Returns The target x position of this Control in pixels.
    */
    action GetPixelX returns number
        return defaultProperties:GetPixelX()
    end

    /*
    This action sets the y position of the Control in pixels, if the container's 
    Layout supports it. If the Control has also been set to use a percentage of
    the container's height to set the y position, then the two values will be
    added together.

    Attribute: Parameter y The target y position of this Control in pixels.
    */
    action SetPixelY(number y)
        defaultProperties:SetPixelY(y)
    end

    /*
    This action returns the target y position of the Control in pixels. Note
    that this may not be used by some layouts (such as FlowLayout).

    Attribute: Returns The target y position of this Control in pixels.
    */
    action GetPixelY returns number
        return defaultProperties:GetPixelY()
    end
    /*
    This action sets the width of the Control relative to the size of its
    container, if the container's Layout supports it.

    Attribute: Parameter width The target width as a percentage (as a value between 0.0 and 1.0) of the container's width.
    */
    action SetPercentageWidth(number width)
        defaultProperties:SetPercentageWidth(width)
    end
    /*
    This action returns the width of the Control relative to the size of 
    its container, if the container's Layout supports it.

    Attribute: Returns The target width as a percentage (as a value between 0.0 and 1.0) of the container's width.
    */
    action GetPercentageWidth returns number
        return defaultProperties:GetPercentageWidth()
    end
    /*
    This action sets the height of the Control relative to the size of its
    container, if the container's Layout supports it.

    Attribute: Parameter height The target height as a percentage (as a value between 0.0 and 1.0) of the container's height.
    */
    action SetPercentageHeight(number height)
        defaultProperties:SetPercentageHeight(height)
    end
    /*
    This action returns the height of the Control relative to the size of 
    its container, if the container's Layout supports it.

    Attribute: Returns The target height as a percentage (as a value between 0.0 and 1.0) of the container's height.
    */
    action GetPercentageHeight returns number
        return defaultProperties:GetPercentageHeight()
    end
    /*
    This action sets the width of the Control in pixels, if the container's 
    Layout supports it. If the Control has also been set to use a percentage of
    the container's width to set the width, then the two values will be
    added together.

    Attribute: Parameter height The target height of this Control in pixels.
    */
    action SetPixelWidth(number width)
        defaultProperties:SetPixelWidth(width)
    end
    /*
    This action returns the target width of the Control in pixels. Note
    that this may not be used by some layouts (such as FlowLayout).

    Attribute: Returns The target height of this Control in pixels.
    */
    action GetPixelWidth returns number
        return defaultProperties:GetPixelWidth()
    end
    /*
    This action sets the height of the Control in pixels, if the container's 
    Layout supports it. If the Control has also been set to use a percentage of
    the container's height to set the height, then the two values will be
    added together.

    Attribute: Parameter height The target height of this Control in pixels.
    */
    action SetPixelHeight(number height)
        defaultProperties:SetPixelHeight(height)
    end
    /*
    This action returns the target height of the Control in pixels. Note
    that this may not be used by some layouts (such as FlowLayout).

    Attribute: Returns The target height of this Control in pixels.
    */
    action GetPixelHeight returns number
        return defaultProperties:GetPixelHeight()
    end

    /*
    This action returns how many columns this Control should be divided into when
    using a GridLayout. This will have no effect if this Control is not a container
    or if it is using a different layout.
    */
    action GetContainerGridWidth returns integer
        return defaultProperties:GetContainerGridWidth()
    end

    /*
    This action sets how many columns this Control should be divided into when
    using a GridLayout. This will have no effect if this Control is not a container
    or if it is using a different layout.

    If this value is 0 or less, then the GridLayout will use its default grid width
    and ignore this value.
    */
    action SetContainerGridWidth(integer containerGridWidth)
        defaultProperties:SetContainerGridWidth(containerGridWidth)
    end

    /*
    This action returns how many rows this Control should be divided into when
    using a GridLayout. This will have no effect if this Control is not a container
    or if it is using a different layout.
    */
    action GetContainerGridHeight returns integer
        return defaultProperties:GetContainerGridHeight()
    end

    /*
    This action sets how many rows this Control should be divided into when
    using a GridLayout. This will have no effect if this Control is not a container
    or if it is using a different layout.

    If this value is 0 or less, then the GridLayout will use its default grid height
    and ignore this value.
    */
    action SetContainerGridHeight(integer containerGridHeight)
        defaultProperties:SetContainerGridHeight(containerGridHeight)
    end

    /*
    This action returns this Control's cell x-coordinate within a GridLayout. This
    indicates which column this Control is located within. If the Control's parent
    container isn't using a GridLayout, this value is ignored.
    */
    action GetGridX returns integer
        return defaultProperties:GetGridX()
    end

    /*
    This action sets this Control's cell x-coordinate within a GridLayout. This
    indicates which column this Control is located within. If the Control's parent
    container isn't using a GridLayout, this value is ignored.
    */
    action SetGridX(integer gridX)
        defaultProperties:SetGridX(gridX)
    end

    /*
    This action returns this Control's cell y-coordinate within a GridLayout. This
    indicates which row this Control is located within. If the Control's parent
    container isn't using a GridLayout, this value is ignored.
    */
    action GetGridY returns integer
        return defaultProperties:GetGridY()
    end

    /*
    This action sets this Control's cell y-coordinate within a GridLayout. This
    indicates which row this Control is located within. If the Control's parent
    container isn't using a GridLayout, this value is ignored.
    */
    action SetGridY(integer gridY)
        defaultProperties:SetGridY(gridY)
    end

    /*
    This action sets this Control's cell coordinates within a GridLayout. This
    indicates which column and row this Control is located within. If the Control's parent
    container isn't using a GridLayout, these values are ignored.
    */
    action SetGridPosition(integer gridX, integer gridY)
        defaultProperties:SetGridPosition(gridX, gridY)
    end

    /*
    The GetGridWidth action returns how many cells in a row this Control occupies.
    By default, this value is 1. This value is only used for GridLayouts, and is
    ignored by other layouts.
    */
    action GetGridWidth returns integer
        return defaultProperties:GetGridWidth()
    end

    /*
    The SetGridWidth action sets how many cells in a row this Control occupies.
    By default, this value is 1. This value is only used for GridLayouts, and is
    ignored by other layouts.
    */
    action SetGridWidth(integer gridWidth)
        defaultProperties:SetGridWidth(gridWidth)
    end

    /*
    The GetGridHeight action returns how many cells in a column this Control occupies.
    By default, this value is 1. This value is only used for GridLayouts, and is
    ignored by other layouts.
    */
    action GetGridHeight returns integer
        return defaultProperties:GetGridHeight()
    end

    /*
    The SetGridHeight action sets how many cells in a column this Control occupies.
    By default, this value is 1. This value is only used for GridLayouts, and is
    ignored by other layouts.
    */
    action SetGridHeight(integer gridHeight)
        defaultProperties:SetGridHeight(gridHeight)
    end

    /*
    The SetGridSize action sets how many cells wide and tall this Control is within a grid.
    By default, each of these values are 1. These values are only used for GridLayouts, and are
    ignored by other layouts.
    */
    action SetGridSize(integer gridWidth, integer gridHeight)
        defaultProperties:SetGridSize(gridWidth, gridHeight)
    end

    /*
    This action returns how many rows this element should occupy, if the layout supports it.
    This effectively makes the control taller. This is most commonly used in conjunction
    with FormRowLayout (or StackedRowPage which uses that layout).
    */
    action GetLayoutRows returns number
        return defaultProperties:GetLayoutRows()
    end

    /*
    This action sets how many rows this element should occupy, if the layout supports it.
    This effectively makes the control taller. This is most commonly used in conjunction
    with FormRowLayout (or StackedRowPage which uses that layout).
    */
    action SetLayoutRows(number layoutRows)
        defaultProperties:SetLayoutRows(layoutRows)
    end

    /*
    This action sets the x-coordinate of the "origin" of the Control, as a percentage of its width.
    The origin is the point that the Control is positioned by. For example, by default, the origin
    is at 0% x and 0% y, or the bottom-left corner of the Control. Changing the percentage origin x
    and y to 0.5 (50%) would mean the Control should be positioned using its center instead.

    The origin point is used by layouts that allow for specific positioning, such as ManualLayout or
    GridLayout. It is ignored by layouts that have special positioning rules, such as FlowLayout.
    */
    action SetPercentageOriginX(number x)
        defaultProperties:SetPercentageOriginX(x)
    end

    /*
    This action returns the x-coordinate of the "origin" of the Control, as a percentage of its width.
    The origin is the point that the Control is positioned by. For example, by default, the origin
    is at 0% x and 0% y, or the bottom-left corner of the Control. Changing the percentage origin x
    and y to 0.5 (50%) would mean the Control should be positioned using its center instead.

    The origin point is used by layouts that allow for specific positioning, such as ManualLayout or
    GridLayout. It is ignored by layouts that have special positioning rules, such as FlowLayout.
    */
    action GetPercentageOriginX returns number
        return defaultProperties:GetPercentageOriginX()
    end

    /*
    This action sets the y-coordinate of the "origin" of the Control, as a percentage of its width.
    The origin is the point that the Control is positioned by. For example, by default, the origin
    is at 0% x and 0% y, or the bottom-left corner of the Control. Changing the percentage origin x
    and y to 0.5 (50%) would mean the Control should be positioned using its center instead.

    The origin point is used by layouts that allow for specific positioning, such as ManualLayout or
    GridLayout. It is ignored by layouts that have special positioning rules, such as FlowLayout.
    */
    action SetPercentageOriginY(number y)
        defaultProperties:SetPercentageOriginY(y)
    end

    /*
    This action returns the y-coordinate of the "origin" of the Control, as a percentage of its width.
    The origin is the point that the Control is positioned by. For example, by default, the origin
    is at 0% x and 0% y, or the bottom-left corner of the Control. Changing the percentage origin x
    and y to 0.5 (50%) would mean the Control should be positioned using its center instead.

    The origin point is used by layouts that allow for specific positioning, such as ManualLayout or
    GridLayout. It is ignored by layouts that have special positioning rules, such as FlowLayout.
    */
    action GetPercentageOriginY returns number
        return defaultProperties:GetPercentageOriginY()
    end
    /*
    This action sets the left margin size. The left margin is the space outside of the left border.

    Attribute: Parameter padding the amount of left margin.
    */
    action SetLeftMargin(number padding)
        defaultProperties:SetLeftMargin(padding)
    end
    /*
    This action sets the right margin size. The right margin is the space outside of the right border.

    Attribute: Parameter padding the amount of right margin.
    */
    action SetRightMargin(number padding)
        defaultProperties:SetRightMargin(padding)
    end
    /*
    This action sets the bottom margin size. The bottom margin is the space outside of the bottom border.

    Attribute: Parameter padding the amount of bottom margin.
    */
    action SetBottomMargin(number padding)
        defaultProperties:SetBottomMargin(padding)
    end
    /*
    This action sets the top margin size. The top margin is the space outside of the top border.

    Attribute: Parameter padding the amount of top margin.
    */
    action SetTopMargin(number padding)
        defaultProperties:SetTopMargin(padding)
    end
    /*
    This action gets the left margin size. The left margin is the space outside of the left border.

    Attribute: Returns the number amount of left margin.
    */
    action GetLeftMargin returns number
        return defaultProperties:GetLeftMargin()
    end
    /*
    This action gets the right margin size. The right margin is the space outside of the right border.

    Attribute: Returns the number amount of right margin.
    */
    action GetRightMargin returns number
        return defaultProperties:GetRightMargin()
    end
    /*
    This action gets the bottom margin size. The bottom margin is the space outside of the bottom border.

    Attribute: Returns the number amount of bottom margin.
    */
    action GetBottomMargin returns number
        return defaultProperties:GetBottomMargin()
    end
    /*
    This action gets the top margin size. The top margin is the space outside of the top border.

    Attribute: Returns the number amount of top margin.
    */
    action GetTopMargin returns number
        return defaultProperties:GetTopMargin()
    end
    /*
    This action sets the left padding size. The left padding is the space inside of the left border.

    Attribute: Parameter padding the amount of left margin.
    */
    action SetLeftPadding(number padding)
        defaultProperties:SetLeftPadding(padding)
    end
    /*
    This action sets the right padding size. The right padding is the space inside of the right border.

    Attribute: Parameter padding the amount of right margin.
    */
    action SetRightPadding(number padding)
        defaultProperties:SetRightPadding(padding)
    end
    /*
    This action sets the bottom padding size. The bottom padding is the space inside of the bottom border.

    Attribute: Parameter padding the amount of bottom margin.
    */
    action SetBottomPadding(number padding)
        defaultProperties:SetBottomPadding(padding)
    end
    /*
    This action sets the top padding size. The top padding is the space inside of the top border.

    Attribute: Parameter padding the amount of top margin.
    */
    action SetTopPadding(number padding)
        defaultProperties:SetTopPadding(padding)
    end
    /*
    This action gets the left padding size. The left padding is the space inside of the left border.

    Attribute: Returns the number amount of left padding.
    */
    action GetLeftPadding returns number
        return defaultProperties:GetLeftPadding()
    end
    /*
    This action gets the right padding size. The right padding is the space inside of the right border.

    Attribute: Returns the number amount of right padding.
    */
    action GetRightPadding returns number
        return defaultProperties:GetRightPadding()
    end
    /*
    This action gets the bottom padding size. The bottom padding is the space inside of the bottom border.

    Attribute: Returns the number amount of bottom padding.
    */
    action GetBottomPadding returns number
        return defaultProperties:GetBottomPadding()
    end
    /*
    This action gets the top padding size. The top padding is the space inside of the top border.

    Attribute: Returns the number amount of top padding.
    */
    action GetTopPadding returns number
        return defaultProperties:GetTopPadding()
    end

    /*
    This action sets the font size to the system's specified "tiny" size.
    By default, this is font size 10.

    Attribute: Example
    use Libraries.Interface.Forms.Form
    use Libraries.Interface.Forms.Page
    use Libraries.Interface.Controls.Button
    
    Form form
    Page page = form:GetMainPage()
    
    Button button = page:AddButton("Click for Bacon")
    button:SetToTinyFont()
    
    form:Display()
    */
    action SetToTinyFont
        FormConstants constants
        SetFontSize(constants:TINY_FONT_SIZE)
    end

    /*
    This action sets the font size to the system's specified "small" size.
    By default, this is font size 14.

    Attribute: Example
    use Libraries.Interface.Forms.Form
    use Libraries.Interface.Forms.Page
    use Libraries.Interface.Controls.Button
    
    Form form
    Page page = form:GetMainPage()
    
    Button button = page:AddButton("Click for Bacon")
    button:SetToSmallFont()
    
    form:Display()
    */
    action SetToSmallFont
        FormConstants constants
        SetFontSize(constants:SMALL_FONT_SIZE)
    end

    /*
    This action sets the font size to the system's specified "medium" size.
    By default, this is font size 20.

    Attribute: Example
    use Libraries.Interface.Forms.Form
    use Libraries.Interface.Forms.Page
    use Libraries.Interface.Controls.Button
    
    Form form
    Page page = form:GetMainPage()
    
    Button button = page:AddButton("Click for Bacon")
    button:SetToMediumFont()
    
    form:Display()
    */
    action SetToMediumFont
        FormConstants constants
        SetFontSize(constants:MEDIUM_FONT_SIZE)
    end

    /*
    This action sets the font size to the system's specified default size for Forms.
    By default, this is font size 20, the same as the medium font size.

    Attribute: Example
    use Libraries.Interface.Forms.Form
    use Libraries.Interface.Forms.Page
    use Libraries.Interface.Controls.Button
    
    Form form
    Page page = form:GetMainPage()
    
    Button button = page:AddButton("Click for Bacon")
    button:SetToDefaultFontSize()
    
    form:Display()
    */
    action SetToDefaultFontSize
        FormConstants constants
        SetFontSize(constants:DEFAULT_FONT_SIZE)
    end

    /*
    This action sets the font size to the system's specified "large" size for Forms.
    By default, this is font size 32.

    Attribute: Example
    use Libraries.Interface.Forms.Form
    use Libraries.Interface.Forms.Page
    use Libraries.Interface.Controls.Button
    
    Form form
    Page page = form:GetMainPage()
    
    Button button = page:AddButton("Click for Bacon")
    button:SetToLargeFont()
    
    form:Display()
    */
    action SetToLargeFont
        FormConstants constants
        SetFontSize(constants:LARGE_FONT_SIZE)
    end

    /*
    This action sets the font size to the system's specified "huge" size for Forms.
    By default, this is font size 60.

    Attribute: Example
    use Libraries.Interface.Forms.Form
    use Libraries.Interface.Forms.Page
    use Libraries.Interface.Controls.Button
    
    Form form
    Page page = form:GetMainPage()
    
    Button button = page:AddButton("Click for Bacon")
    button:SetToHugeFont()
    
    form:Display()
    */
    action SetToHugeFont
        FormConstants constants
        SetFontSize(constants:HUGE_FONT_SIZE)
    end

    /*
    This action sets the text in this Control's label, if it has one.

    Attribute: Parameter labelText The text to use for this Control's label.
    */
    action SetLabelText(text labelText)
        defaultProperties:SetLabelText(labelText)
    end

    /*
    This action returns the text used for this Control's label, if it has one.

    Attribute: Returns The text of this Control's label.
    */
    action GetLabelText returns text
        return defaultProperties:GetLabelText()
    end

    /*
    This action sets the Icon used by this Control. Different Controls use this
    Icon differently, depending on their purpose.

    Attribute: Parameter icon The Icon to use for this Control.
    */
    action SetIcon(TextureRegion icon)
        defaultProperties:SetIcon(icon)
    end

    /*
    This action gets the Icon (typically an image or texture) used by this Control. Different Controls use this
    Icon differently, depending on their purpose.

    Attribute: returns The Icon to use for this Control.
    */
    action GetIcon returns TextureRegion
        return defaultProperties:GetIcon()
    end

    /*
    This action sets the Font to be used by this Control. How this Font is used
    varies between Controls, and in some cases the Control will ignore it 
    entirely (for example, ScrollPanes), but typically this sets the font that's
    used for the default label on many Controls, such as Buttons. If the Font
    is undefined, many Controls will omit their default label.

    Attribute: Parameter font The Font to use for this Control.
    */
    action SetFont(Font font)
        defaultProperties:SetFont(font)
    end

    /*
    This action returns the Font being used by this Control. How this Font is 
    used varies between Controls, and in some cases the Control will ignore it 
    entirely (for example, ScrollPanes), but typically this sets the font that's
    used for the default label on many Controls, such as Buttons. If the Font
    is undefined, many Controls will omit their default label.

    Attribute: Returns The Font being used for this Control.
    */
    action GetFont returns Font
        return defaultProperties:GetFont()
    end

    /*
    This action sets the base Font size to be used by this Control, if the
    Control uses a Font.
    */
    action SetFontSize(integer size)
        defaultProperties:SetFontSize(size)
    end

    /*
    This action returns the base Font size to be used by this Control, if the
    Control uses a Font.
    */
    action GetFontSize returns integer
        return defaultProperties:GetFontSize()
    end

    action SetInterfaceOptionsKey(text key)
        defaultProperties:SetInterfaceOptionsKey(key)
    end

    action GetInterfaceOptionsKey returns text
        return defaultProperties:GetInterfaceOptionsKey()
    end
    /*
        This action sets the border style either, LayoutProperties.TOP, LayoutProperties.BOTTOM,
        LayoutProperties.LEFT, LayoutProperties.RIGHT, and LayoutProperties.ALL.
    */
    action SetBorderStyle(integer style)
        defaultProperties:SetBorderStyle(style)
    end
    /*
        This action gets the border style either, LayoutProperties.TOP, LayoutProperties.BOTTOM,
        LayoutProperties.LEFT, LayoutProperties.RIGHT, and LayoutProperties.ALL.
    */
    action GetBorderStyle returns integer
        return defaultProperties:GetBorderStyle()
    end
    /*
        This action returns true when teh left border is enabled.
    */
    action HasLeftBorder returns boolean
        return defaultProperties:HasLeftBorder()
    end
    /*
        This action returns true when teh right border is enabled.
    */
    action HasRightBorder returns boolean
        return defaultProperties:HasRightBorder()
    end
    /*
        This action returns true when teh bottom border is enabled.
    */
    action HasBottomBorder returns boolean
        return defaultProperties:HasBottomBorder()
    end
    /*
        This action returns true when teh top border is enabled.
    */
    action HasTopBorder returns boolean
        return defaultProperties:HasTopBorder()
    end

    /*
    This action sets how much rounding to apply to the four corners of a rectangular control. 
    The expected values are between 0 and 1, where 0 indicates no rounding, and 1 indicates
    full rounding. (If all four corners are set to have full rounding, the result will appear
    to be a circle.)

    Attribute: Parameter bottomLeft The rounding value to be applied to the bottom left corner (between 0 and 1).
    Attribute: Parameter bottomRight The rounding value to be applied to the bottom right corner (between 0 and 1).
    Attribute: Parameter topLeft The rounding value to be applied to the top left corner (between 0 and 1).
    Attribute: Parameter topRight The rounding value to be applied to the top right corner (between 0 and 1).
    */
    action SetCornerRounding(number bottomLeft, number bottomRight, number topLeft, number topRight)
        defaultProperties:SetCornerRounding(bottomLeft, bottomRight, topLeft, topRight)
    end

    /*
    This action sets how much rounding to apply to the four corners of a rectangular control. 
    This action takes the amount of rounding to apply as a number of pixels. 

    Attribute: Parameter bottomLeft The rounding value to be applied to the bottom left corner, in pixels.
    Attribute: Parameter bottomRight The rounding value to be applied to the bottom right corner, in pixels.
    Attribute: Parameter topLeft The rounding value to be applied to the top left corner, in pixels.
    Attribute: Parameter topRight The rounding value to be applied to the top right corner, in pixels.
    */
    action SetCornerPixelRounding(number bottomLeft, number bottomRight, number topLeft, number topRight)
        defaultProperties:SetCornerPixelRounding(bottomLeft, bottomRight, topLeft, topRight)
    end

    /*
        This action sets the interface scale for the control.

        Attribute: Parameter scale a number between 0 and 1 that scales the control.
    */
    action SetInterfaceScale(number scale)
        if scale not= GetInterfaceScale()
defaultProperties:SetInterfaceScale(scale)
        defaultProperties:SetRenderingFlag(true)
            RequestLayout()
        end

        Array<Item2D> children = GetChildren()
        integer counter = 0
        repeat while counter < children:GetSize()
            if children:Get(counter) is Control
                Control control = cast(Control, children:Get(counter))
                control:SetInterfaceScale(scale)
            end
            counter = counter + 1
        end
    end

    /*
        This action sets the interface scale for the control.

        Attribute: Returns the scale, a number between 0 and 1 that scales the control.
    */
    action GetInterfaceScale returns number
        return defaultProperties:GetInterfaceScale()
    end
    
    /*
        This action defines what the default font is for this control. This allows
        individual controls to customize their default font properties on a per control
        basis.

        Attribute: Example

        use Libraries.Interface.Controls.TextBox

        TextBox box
        text name = box:GetDefaultFontName()
        output name
    */
    action GetDefaultFontName returns text
        return GetDefaultProportionalFontName()
    end
    
action GetDefaultProportionalFontName returns text
text name = undefined
        Font font
        if font:IsFontAvailable("FiraSans-Regular")
name = "FiraSans-Regular"
elseif font:IsFontAvailable("Arial")
                            name = "Arial"
elseif font:IsFontAvailable("Roboto-Black")
            name = "Roboto-Black"
        elseif font:IsFontAvailable("Roboto-Regular")
            name = "Roboto-Regular"
        elseif font:IsFontAvailable("Arial Unicode")
            name = "Arial Unicode"
        elseif font:IsFontAvailable("Helvetica")
            name = "Helvetica"
        elseif font:IsFontAvailable("Georgia")
            name = "Georgia"
        elseif font:IsFontAvailable("Times New Roman")
            name = "Times New Roman"
        else
            Array<File> availableFontFiles = font:GetAvailableFonts()
            if availableFontFiles:GetSize() > 0
                File file = availableFontFiles:Get(0)
                name = file:GetPath()
            end
        end
        return name
        
    end
    
    
action GetDefaultMonospaceFontName returns text
        text name = undefined
        Font font

        if font:IsFontAvailable("FiraMono-Regular")
            name = "FiraMono-Regular"
                elseif font:IsFontAvailable("Courier New Bold")
            name = "Courier New Bold"
elseif font:IsFontAvailable("courbd")
            name = "courbd"
        elseif font:IsFontAvailable("Lato")
            name = "Lato"
        elseif font:IsFontAvailable("Courier")
            name = "Courier"
        elseif font:IsFontAvailable("Courier New")
            name = "Courier New"
        elseif font:IsFontAvailable("cour")
            name = "cour"
        else
            Array<File> availableFontFiles = font:GetAvailableFonts()
            if availableFontFiles:GetSize() > 0
                File file = availableFontFiles:Get(0)
                name = file:GetPath()
            end
        end
        
        return name
    end

    /*
        This action obtains the default font for this control. This allows
        individual controls to customize their default font properties on a per control
        basis. By default, the system asks for the default system font name on a 
        per control basis, then loads that font and returns it. Font loading is
        shared, so loading many fonts of the same type and size is not particularly
        expensive and can be done without much concern for memory requirements.

        Attribute: Example

        use Libraries.Interface.Controls.TextBox
        use Libraries.Game.Graphics.Font

        TextBox box
        text name = box:GetDefaultFont()
        output name
    */
    action GetDefaultFont returns Font
        Font font
        text defaultFontName = GetDefaultFontName()
        if defaultFontName not= undefined
            integer defaultFontSize = GetDefaultFontSize()
            font:SetSize(defaultFontSize)
            font:LoadFont(defaultFontName)
            return font
        end
        return undefined
    end

    /*
        This action defines what the default font size for this control. This allows
        individual controls to customize their default font properties on a per control
        basis.

        Attribute: Example

        use Libraries.Interface.Controls.TextBox

        TextBox box
        integer size = box:GetDefaultFontSize()
        output size
    */
    action GetDefaultFontSize returns integer
        return 14
    end

    /*
    This action requests that this Control should be laid out by its container
    (or the Layer2D if there is no containing Control) during the next Update.
    */
    action RequestLayout
        needsLayout = true

        // If the parent container fits its contents based on us, and we need to
        // be laid out again, then the parent needs to be laid out as well, as  
        // its size may change.
        Item2D parentItem = GetParent()
        if parentItem not= undefined and parentItem is Control
            Control container = cast(Control, parentItem)
            LayoutProperties properties = container:GetDefaultLayoutProperties()
            
            if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS
                or properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                container:RequestLayout()
            end
        end
    end

    /*
    This action requests that this Control (as well as all of its descendents)
    should reload their graphics during the next Update.
    */
    action RequestReloadGraphics
        defaultProperties:SetRenderingFlag(true)

        Array<Item2D> children = GetChildren()
        integer counter = 0
        repeat while counter < children:GetSize()
            if children:Get(counter) is Control
                Control control = cast(Control, children:Get(counter))
                control:RequestReloadGraphics()
            end
            counter = counter + 1
        end
    end

    /*
    This action is used to indicate that the Control no longer needs to be laid
    out. This is called internally by the system as needed, and shouldn't be
    necessary for most users.
    */
    action ResetLayoutFlag
        needsLayout = false
    end

    /*
    This action returns whether or not the Control is in need of laying out by
    its container (or the parent Layer2D, if no container Control exists).
    */
    action NeedsLayout returns boolean
        return needsLayout
    end

    /*
        Update all behaviors elements.
    */
    action UpdateAll(number seconds)
        Update(seconds)
        UpdateBehaviors(seconds)

        integer counter = 0
        boolean haveResized = false

        repeat GetItemCount() times
            Item item = GetChildAsItem(counter)
            if item is Control and haveResized = false
                Control control = cast(Control, item)
                if control:NeedsLayout()
                    Resize()
                    haveResized = true
                end
            end

            item:UpdateAll(seconds)
            counter = counter + 1
        end
    end

    /*
    The SetPopupMenu action attaches a PopupMenu to this Control, which can
    be opened by interacting with it (most commonly by right-clicking on the
    Control).
    */
    action SetPopupMenu(PopupMenu menu)
        contextMenu = menu
    end

    /*
    The GetContextMenu action returns this Control's context menu, if it has
    one. A context menu is a PopupMenu which appears when a user wants additonal
    context about this Control (most commonly by right-clicking on the Control).
    */
    action GetPopupMenu returns PopupMenu
        return contextMenu
    end

    /*
        This action adds the given SelectionListeners to the
        Control.
    
        Attribute: Parameter listener the selectionListener to add to the control.
    */
    action AddSelectionListener(SelectionListener listener)
        if selectionListeners = undefined
            Array<SelectionListener> array
            selectionListeners = array
        end

        selectionListeners:Add(listener)
    end

    /*
        This action removes the given SelectionListeners from the
        Control.
    
        Attribute: Parameter listener the selectionListener to remove from the control.
        Attribute: Returns true if the selectionListener is removed.
    */
    action RemoveSelectionListener(SelectionListener listener) returns boolean
        if selectionListeners = undefined
            return false
        end

        boolean result = selectionListeners:Remove(listener)

        if selectionListeners:IsEmpty()
            selectionListeners = undefined
        end

        return result
    end

    /*
        This action empties or removes all SelectionListeners which have been added to the
        Control of the given SelectionEvent.
    */
    action EmptySelectionListeners
        if selectionListeners = undefined
            return now
        end

        selectionListeners:Empty()
    end

    /*
    This action return an iterator of all SelectionListeners which have been added to the
    Control of the given SelectionEvent.

    Attribute: Returns All SelectionListeners registered with the Control.
    */
    action GetSelectionListeners returns Iterator<SelectionListener>
        if selectionListeners not= undefined
            return selectionListeners:GetIterator()
        else
            EmptyIterator<SelectionListener> empty
            return empty
        end
    end

    /*
    This action will notify all SelectionListeners which have been added to the
    Control of the given SelectionEvent.

    Attribute: Parameter event The SelectionEvent to send to all SelectionListeners registered with the Control.
    */
    action NotifySelectionListeners(SelectionEvent event)
        if selectionListeners = undefined
            return now
        end

        integer counter = 0
        repeat while counter < selectionListeners:GetSize()
            selectionListeners:Get(counter):SelectionChanged(event)
            counter = counter + 1
        end
    end

    /*
    This action selects an item in the Control using first letter navigation,
    if the Control supports it. If the Control doesn't support first letter
    navigation, this will do nothing.
    */
    action SelectByFirstLetters(text firstLetter)
        // In the default Control class, this function does nothing.
    end
    /*
    This action sets the color and property in the Control.
    Attribute: Parameter value the color.
    */
    action SetColorProperty(text property, ColorGroup value)
        defaultProperties:SetColorProperty(property, value)
    end
    /*
    This action gets the color of a given property in the Control.
    Attribute: Parameter value the color.
    */
    action GetColorProperty(text property) returns ColorGroup
        return defaultProperties:GetColorProperty(property)
    end
    /*
        This action sets a generic property with a specified name and number value.
        
        Attribute: Parameter property the property name.
        Attribute: Parameter value the number value for the generic property.
    */
    action SetNumberProperty(text property, number value)
        defaultProperties:SetNumberProperty(property, value)
    end
    /*
        This action gets a generic property with a specified name from the control.
        
        Attribute: Parameter property the property name.
        Attribute: Returns the number value of the property.
    */
    action GetNumberProperty(text property) returns number
        return defaultProperties:GetNumberProperty(property)
    end
    /*
        This action gets whether the color property override is activated.

        Attribute: Returns true if the color property is overridden.
    */
    action HasColorPropertyOverride(text property) returns boolean
        return defaultProperties:HasColorPropertyOverride(property)
    end
    /*
        This action gets whether the number property override is activated.

        Attribute: Returns true if the number property is overridden.
    */
    action HasNumberPropertyOverride(text property) returns boolean
        return defaultProperties:HasNumberPropertyOverride(property)
    end
    /*
    This action sets the background color in the Control.
    Attribute: Parameter value the background color.
    */
    action SetBackgroundColor(ColorGroup value)
        defaultProperties:SetBackgroundColor(value)
    end
    /*
    This action gets the color of the Control background color.
    Attribute: Returns the background the color.
    */
    action GetBackgroundColor returns ColorGroup
        return defaultProperties:GetBackgroundColor()
    end
    /*
    This action sets the foreground color in the Control.
    Attribute: Parameter value the foreground color.
    */
    action SetForegroundColor(ColorGroup value)
        defaultProperties:SetForegroundColor(value)
    end
    /*
    This action gets the color of the Control foreground color.
    Attribute: Returns the foreground color.
    */
    action GetForegroundColor returns ColorGroup
        return defaultProperties:GetForegroundColor()
    end
    /*
    This action sets the foreground selection color in the Control.
    Attribute: Parameter value the foreground selection color.
    */
    action SetForegroundSelectionColor(ColorGroup value)
        defaultProperties:SetForegroundSelectionColor(value)
    end
    /*
    This action gets the color of the Control foreground selection color.
    Attribute: Returns the foreground selection color.
    */
    action GetForegroundSelectionColor returns ColorGroup
        return defaultProperties:GetForegroundSelectionColor()
    end
    /*
    This action sets the font color of the font contained in the Control.
    */
    action SetFontColor(ColorGroup value)
        defaultProperties:SetFontColor(value)
    end
    /*
    This action gets the current the font color of the font contained in the Control.
    */
    action GetFontColor returns ColorGroup
        return defaultProperties:GetFontColor()
    end
    /*  
        This action sets the font outline color value.

        Attribute: Parameter value the font outline color value.
    */
    action SetFontOutlineColor(ColorGroup value)
        defaultProperties:SetFontOutlineColor(value)
    end
    /*  
        This action gets the font outline color value.

        Attribute: Returns the font outline color value.
    */
    action GetFontOutlineColor returns ColorGroup
        return defaultProperties:GetFontOutlineColor()
    end
    /*  
        This action sets the border color of the control.

        Attribute: Parameter value the border color.
    */
    action SetBorderColor(ColorGroup value)
        defaultProperties:SetBorderColor(value)
    end
    /*  
        This action gets the border color of the control.

        Attribute: Returns the controls border color.
    */
    action GetBorderColor returns ColorGroup
        return defaultProperties:GetBorderColor()
    end
    /*  
        This action sets the focus color.

        Attribute: Parameter value the focus color.
    */
    action SetFocusColor(ColorGroup value)
        defaultProperties:SetFocusColor(value)
    end
    /*  
        This action sets the focus color.

        Attribute: Returns the focus color.
    */
    action GetFocusColor returns ColorGroup
        return defaultProperties:GetFocusColor()
    end
    /*  
        This action sets focus font color.

        Attribute: Parameter value the focus font color.
    */
    action SetFocusFontColor(ColorGroup value)
        defaultProperties:SetFocusFontColor(value)
    end
    /*  
        This action gets focus font color.

        Attribute: Returns the focus font color.
    */
    action GetFocusFontColor returns ColorGroup
        return defaultProperties:GetFocusFontColor()
    end
    /*  
        This action sets the focus border color.

        Attribute: Parameter value the focus border color.
    */
    action SetFocusBorderColor(ColorGroup value)
        defaultProperties:SetFocusBorderColor(value)
    end
    /*  
        This action gets the focus border color.

        Attribute: Returns the focus border color.
    */
    action GetFocusBorderColor returns ColorGroup
        return defaultProperties:GetFocusBorderColor()
    end
    /*  
        This action sets the mouse over color.

        Attribute: Parameter value the mouse over color.
    */
    action SetMouseOverColor(ColorGroup value)
        defaultProperties:SetMouseOverColor(value)
    end
    /*  
        This action gets the mouse over color.

        Attribute: Returns the mouse over color.
    */
    action GetMouseOverColor returns ColorGroup
        return defaultProperties:GetMouseOverColor()
    end
    /*  
        This action sets the mouse over font color.

        Attribute: Parameter value the mouse over font color value.
    */
    action SetMouseOverFontColor(ColorGroup value)
        defaultProperties:SetMouseOverFontColor(value)
    end
    /*  
        This action gets the mouse over font color.

        Attribute: Returns the mouse over font color value.
    */
    action GetMouseOverFontColor returns ColorGroup
        return defaultProperties:GetMouseOverFontColor()
    end
    /*  
        This action sets the mouse down color.

        Attribute: Parameter value the mouse down color.
    */
    action SetMouseDownColor(ColorGroup value)
        defaultProperties:SetMouseDownColor(value)
    end
    /*  
        This action gets the mouse down font color.

        Attribute: Returns the mouse over font color value.
    */
    action GetMouseDownColor returns ColorGroup
        return defaultProperties:GetMouseDownColor()
    end
    /*  
        This action sets the mouse down font color.

        Attribute: Parameter value the mouse down font color.
    */
    action SetMouseDownFontColor(ColorGroup value)
        defaultProperties:SetMouseDownFontColor(value)
    end
    /*  
        This action gets the mouse down font color.

        Attribute: Returns the mouse down font color.
    */
    action GetMouseDownFontColor returns ColorGroup
        return defaultProperties:GetMouseDownFontColor()
    end
    /*  
        This action sets the selection color on the control.

        Attribute: Parameter value the selection color.
    */
    action SetSelectionColor(ColorGroup value)
        defaultProperties:SetSelectionColor(value)
    end
    /*  
        This action gets the selection color from the control.

        Attribute: Returns the selection color.
    */
    action GetSelectionColor returns ColorGroup
        return defaultProperties:GetSelectionColor()
    end
    /*  
        This action sets the selection border color.

        Attribute: Parameter value the selection border color.
    */
    action SetSelectionBorderColor(ColorGroup value)
        defaultProperties:SetSelectionBorderColor(value)
    end
    /*  
        This action gets the selection border color.

        Attribute: Returns the selection border color.
    */
    action GetSelectionBorderColor returns ColorGroup
        return defaultProperties:GetSelectionBorderColor()
    end
    /*  
        This action sets the unfocused selection color on the control.

        Attribute: Parameter value the unfocused selection color.
    */
    action SetUnfocusedSelectionColor(ColorGroup value)
        defaultProperties:SetUnfocusedSelectionColor(value)
    end
    /*  
        This action gets the unfocused selection color on the control.

        Attribute: Returns the unfocused selection color.
    */
    action GetUnfocusedSelectionColor returns ColorGroup
        return defaultProperties:GetUnfocusedSelectionColor()
    end
    /*  
        This action sets the unfocused selection border color.

        Attribute: Parameter value the unfocused selection border color.
    */
    action SetUnfocusedSelectionBorderColor(ColorGroup value)
        defaultProperties:SetUnfocusedSelectionBorderColor(value)
    end
    /*  
        This action gets the unfocused selection border color on the control.

        Attribute: Returns the unfocused selection border color.
    */
    action GetUnfocusedSelectionBorderColor returns ColorGroup
        return defaultProperties:GetUnfocusedSelectionBorderColor()
    end
    /*  
        This action sets the selection font color on the control.

        Attribute: Parameter value the selection font color.
    */
    action SetSelectionFontColor(ColorGroup value)
        defaultProperties:SetSelectionFontColor(value)
    end
    /*  
        This action gets the selection font color on the control.

        Attribute: Returns the selection font color.
    */
    action GetSelectionFontColor returns ColorGroup
        return defaultProperties:GetSelectionFontColor()
    end
    /*  
        This action sets the unfocused selection font color on the control.

        Attribute: Parameter value the unfocused selection font color.
    */
    action SetUnfocusedSelectionFontColor(ColorGroup value)
        defaultProperties:SetUnfocusedSelectionFontColor(value)
    end
    /*  
        This action gets the unfocused selection font color on the control.

        Attribute: Returns the unfocused selection font color.
    */
    action GetUnfocusedSelectionFontColor returns ColorGroup
        return defaultProperties:GetUnfocusedSelectionFontColor()
    end
    /*  
        This action sets the glow color on the control.

        Attribute: Parameter value the glow color.
    */
    action SetGlowColor(ColorGroup value)
        defaultProperties:SetGlowColor(value)
    end
    /*  
        This action gets the glow color from the control.

        Attribute: Returns the glow color.
    */
    action GetGlowColor returns ColorGroup
        return defaultProperties:GetGlowColor()
    end
    /*  
        This action sets the mouse over glow color.

        Attribute: Parameter value the mouse over glow color.
    */
    action SetMouseOverGlowColor(ColorGroup value)
        defaultProperties:SetMouseOverGlowColor(value)
    end
    /*  
        This action gets the mouse over glow color.

        Attribute: Returns the mouse over glow color.
    */
    action GetMouseOverGlowColor returns ColorGroup
        return defaultProperties:GetMouseOverGlowColor()
    end
    /*  
        This action sets the mouse down glow color.

        Attribute: Parameter value the mouse down glow color.
    */
    action SetMouseDownGlowColor(ColorGroup value)
        defaultProperties:SetMouseDownGlowColor(value)
    end
    /*  
        This action gets the mouse down glow color.

        Attribute: Returns the mouse down glow color.
    */
    action GetMouseDownGlowColor returns ColorGroup
        return defaultProperties:GetMouseDownGlowColor()
    end
    /*  
        This action sets the Icon color on the control.

        Attribute: Parameter value the icon color.
    */
    action SetIconColor(ColorGroup value)
        defaultProperties:SetIconColor(value)
    end
    /*  
        This action gets the Icon color from the control.

        Attribute: Returns the icon color.
    */
    action GetIconColor returns ColorGroup
        return defaultProperties:GetIconColor()
    end
    /*  
        This action sets the accent color on the control.

        Attribute: Parameter value the accent control.
    */
    action SetAccentColor(ColorGroup value)
        defaultProperties:SetAccentColor(value)
    end
    /*  
        This action gets the accent color from the control.

        Attribute: Returns the accent control.
    */
    action GetAccentColor returns ColorGroup
        return defaultProperties:GetAccentColor()
    end
    /*  
        This action sets the shaddow color on the control.

        Attribute: Parameter value the shaddow color.
    */
    action SetShadowColor(ColorGroup value)
        defaultProperties:SetShadowColor(value)
    end
    /*  
        This action gets the shaddow color from the control.

        Attribute: Returns the shaddow color.
    */
    action GetShadowColor returns ColorGroup
        return defaultProperties:GetShadowColor()
    end
    /*  
        This action sets the border thickness on the control.

        Attribute: Parameter value the border thickness.
    */
    action SetBorderThickness(number value)
        defaultProperties:SetBorderThickness(value)
    end
    /*  
        This action gets the border thickness on the control.

        Attribute: Returns the border thickness.
    */
    action GetBorderThickness returns number
        return defaultProperties:GetBorderThickness()
    end
    /*  
        This action returns true when the border thickness on the control has been set.

        Attribute: Returns true when the border has thickness on the control.
    */
    action HasBorderThickness returns boolean
        return defaultProperties:HasBorderThickness()
    end
    /*  
        This action sets the font outline thickness value.

        Attribute: Parameter value the font outline thickness value.
    */
    action SetFontOutlineThickness(number value)
        defaultProperties:SetFontOutlineThickness(value)
    end
    /*  
        This action returns the font outline thickness value.

        Attribute: Returns the font outline thickness value.
    */
    action GetFontOutlineThickness returns number
        return defaultProperties:GetFontOutlineThickness()
    end
    /*  
        This action returns the current status of the font outline thickness.

        Attribute: Returns true if the control has a font outline thickness set.
    */
    action HasFontOutlineThickness returns boolean
        return defaultProperties:HasFontOutlineThickness()
    end
    /*  
        This action sets the top left rounding value.

        Attribute: Parameter value the  top left rounding value.
    */
    action SetTopLeftRounding(number value)
        defaultProperties:SetTopLeftRounding(value)
    end
    /*  
        This action returns the top left rounding value.

        Attribute: Returns the top left rounding value.
    */
    action GetTopLeftRounding returns number
        return defaultProperties:GetTopLeftRounding()
    end
    /*  
        This action returns the current status of the top left rounding value.

        Attribute: Returns true if the control has a top left rounding value.
    */
    action HasTopLeftRounding returns boolean
        return defaultProperties:HasTopLeftRounding()
    end
    /*  
        This action sets the top right rounding value.

        Attribute: Parameter value the  top right rounding value.
    */
    action SetTopRightRounding(number value)
        defaultProperties:SetTopRightRounding(value)
    end
    /*  
        This action returns the top right rounding value.

        Attribute: Returns the top right rounding value.
    */
    action GetTopRightRounding returns number
        return defaultProperties:GetTopRightRounding()
    end
    /*  
        This action returns the current status of the top right rounding value.

        Attribute: Returns true if the control has a top right rounding value.
    */
    action HasTopRightRounding returns boolean
        return defaultProperties:HasTopRightRounding()
    end
    /*  
        This action sets the bottom left rounding value.

        Attribute: Parameter value the  bottom left rounding value.
    */
    action SetBottomLeftRounding(number value)
        defaultProperties:SetBottomLeftRounding(value)
    end
    /*  
        This action returns the bottom left rounding value.

        Attribute: Returns the bottom left rounding value.
    */
    action GetBottomLeftRounding returns number
        return defaultProperties:GetBottomLeftRounding()
    end
    /*  
        This action returns the current status of the bottom left rounding value.

        Attribute: Returns true if the control has a bottom left rounding value.
    */
    action HasBottomLeftRounding returns boolean
        return defaultProperties:HasBottomLeftRounding()
    end
    /*  
        This action sets the bottom right rounding value.

        Attribute: Parameter value the  bottom right rounding value.
    */
    action SetBottomRightRounding(number value)
        defaultProperties:SetBottomRightRounding(value)
    end
    /*  
        This action returns the bottom right rounding value.

        Attribute: Returns the bottom right rounding value.
    */
    action GetBottomRightRounding returns number
        return defaultProperties:GetBottomRightRounding()
    end
    /*  
        This action returns the current status of the bottom right rounding value.

        Attribute: Returns true if the control has a bottom right rounding value.
    */
    action HasBottomRightRounding returns boolean
        return defaultProperties:HasBottomRightRounding()
    end
    /*  
        This action sets the top left pixel rounding value.

        Attribute: Parameter value the top left pixel rounding value.
    */
    action SetTopLeftPixelRounding(number value)
        defaultProperties:SetTopLeftPixelRounding(value)
    end
    /*  
        This action returns the top left pixel rounding value.

        Attribute: Returns the top left pixel rounding value.
    */
    action GetTopLeftPixelRounding returns number
        return defaultProperties:GetTopLeftPixelRounding()
    end
    /*  
        This action returns the current status of the top left pixel rounding value.

        Attribute: Returns true if the control has a top left pixel rounding value.
    */
    action HasTopLeftPixelRounding returns boolean
        return defaultProperties:HasTopLeftPixelRounding()
    end
    /*  
        This action sets the top right pixel rounding value.

        Attribute: Parameter value the  top right pixel rounding value.
    */
    action SetTopRightPixelRounding(number value)
        defaultProperties:SetTopRightPixelRounding(value)
    end
    /*  
        This action returns the top right pixel rounding value.

        Attribute: Returns the top right pixel rounding value.
    */
    action GetTopRightPixelRounding returns number
        return defaultProperties:GetTopRightPixelRounding()
    end
    /*  
        This action returns the current status of the top right pixel rounding value.

        Attribute: Returns true if the control has a top right pixel rounding value.
    */
    action HasTopRightPixelRounding returns boolean
        return defaultProperties:HasTopRightPixelRounding()
    end
    /*  
        This action sets the bottom left pixel rounding value.

        Attribute: Parameter value the  bottom left pixel rounding value.
    */
    action SetBottomLeftPixelRounding(number value)
        defaultProperties:SetBottomLeftPixelRounding(value)
    end
    /*  
        This action returns the bottom left pixel rounding value.

        Attribute: Returns the bottom left pixel rounding value.
    */
    action GetBottomLeftPixelRounding returns number
        return defaultProperties:GetBottomLeftPixelRounding()
    end
    /*  
        This action returns the current status of the bottom left pixel rounding value.

        Attribute: Returns true if the control has a bottom left pixel rounding value.
    */
    action HasBottomLeftPixelRounding returns boolean
        return defaultProperties:HasBottomLeftPixelRounding()
    end
    /*  
        This action sets the bottom right pixel rounding value.

        Attribute: Parameter value the  bottom right pixel rounding value.
    */
    action SetBottomRightPixelRounding(number value)
        defaultProperties:SetBottomRightPixelRounding(value)
    end
    /*  
        This action returns the bottom right pixel rounding value.

        Attribute: Returns the bottom right pixel rounding value.
    */
    action GetBottomRightPixelRounding returns number
        return defaultProperties:GetBottomRightPixelRounding()
    end
    /*  
        This action returns the current status of the bottom right pixel rounding value.

        Attribute: Returns true if the control has a bottom right pixel rounding value.
    */
    action HasBottomRightPixelRounding returns boolean
        return defaultProperties:HasBottomRightPixelRounding()
    end
    /*  
        This action sets the shadow X value.

        Attribute: Parameter value the shadow X value.
    */
    action SetShadowX(number value)
        defaultProperties:SetShadowX(value)
    end
    /*  
        This action returns the shadow X value.

        Attribute: Returns the shadow X value.
    */
    action GetShadowX returns number
        return defaultProperties:GetShadowX()
    end
    /*  
        This action returns the current status of the shadow X value.

        Attribute: Returns true if the control has a shadow X value.
    */
    action HasShadowX returns boolean
        return defaultProperties:HasShadowX()
    end
    /*  
        This action sets the shadow Y value.

        Attribute: Parameter value the shadow Y value.
    */
    action SetShadowY(number value)
        defaultProperties:SetShadowY(value)
    end
    /*  
        This action returns the shadow Y value.

        Attribute: Returns the shadow Y value.
    */
    action GetShadowY returns number
        return defaultProperties:GetShadowY()
    end
    /*  
        This action returns the current status of the shadow Y value.

        Attribute: Returns true if the control has a shadow Y value.
    */
    action HasShadowY returns boolean
        return defaultProperties:HasShadowY()
    end
    /*  
        This action sets the shadow width percent. A value between 0 and 1.

        Attribute: Parameter value the shadow width.
    */
    action SetShadowWidth(number value)
        defaultProperties:SetShadowWidth(value)
    end
    /*  
        This action returns the shadow width property.

        Attribute: Returns the shadow width number.
    */
    action GetShadowWidth returns number
        return defaultProperties:GetShadowWidth()
    end
    /*  
        This action returns the current status of the shadow width.

        Attribute: Returns true if the control has a shadow width.
    */
    action HasShadowWidth returns boolean
        return defaultProperties:HasShadowWidth()
    end
    /*  
        This action sets the shadow height percent. A value between 0 and 1.

        Attribute: Parameter value the shadow height.
    */
    action SetShadowHeight(number value)
        defaultProperties:SetShadowHeight(value)
    end
    /*  
        This action returns the shadow height property.

        Attribute: Returns the shadow height number.
    */
    action GetShadowHeight returns number
        return defaultProperties:GetShadowHeight()
    end
    /*  
        This action returns the current status of the shadow height.

        Attribute: Returns true if the control has a shadow height.
    */
    action HasShadowHeight returns boolean
        return defaultProperties:HasShadowHeight()
    end
    /*  
        This action sets the shadow edge fade percent. A value between 0 and 1.

        Attribute: Parameter value the shadow edge fade percent.
    */
    action SetShadowEdgeFade(number value)
        defaultProperties:SetShadowEdgeFade(value)
    end
    /*  
        This action returns the shadow edge fade property.

        Attribute: Returns the shadow edge fade number.
    */
    action GetShadowEdgeFade returns number
        return defaultProperties:GetShadowEdgeFade()
    end
    /*  
        This action returns the current status of the shadow edge fade.

        Attribute: Returns true if the control has a shadow edge fade.
    */
    action HasShadowEdgeFade returns boolean
        return defaultProperties:HasShadowEdgeFade()
    end

end
