package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Font
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Language.Debug.BreakpointManager
use Libraries.Language.Debug.BreakpointListener
use Libraries.System.File
use Libraries.Language.Debug.BreakpointEvent
use Libraries.Language.Debug.Breakpoint
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Controls.Blocks.CodeEditor

class CodeEditorLineNumberGutter is LineNumberGutter, BreakpointListener
    
    action UpdateVisuals(integer startLine)
        Empty()
        parent:LineNumberGutter:previousStartLine = startLine

        ScrollableLineControl control = GetControl()
        integer fontSize = control:GetFontSize()
        if GetDefaultLayoutProperties():HasNumberPropertyOverride("fontSize")
            fontSize = GetFontSize()
        end

        Font font = SelectFont()

        LayoutProperties properties = GetCurrentLayoutProperties()
        if properties = undefined
            properties = GetDefaultLayoutProperties()
        end

        text linesInText = "" + control:GetLineCount()
        integer glyphsRequired = linesInText:GetSize()
        /*
        We assume the space required for the "0" glyph is a good predictor of
        the space used for each glyph in the font. For monospaced fonts this
        will be accurate and the choice of glyph is arbitrary. For other fonts,
        this is only an approximation, which may require some extra space via
        padding in order to look correct.
        */
        number leftMargin = properties:GetLeftMargin() * GetInterfaceScale()
        number rightMargin = properties:GetRightMargin() * GetInterfaceScale()
        number width = font:GetGlyph("0"):horizontalAdvance * glyphsRequired + leftMargin + rightMargin
        integer totalLines = control:GetLineCount()

        // If the horizontal scroll bar is visible, the rendering area will be slightly shorter than the gutter is.
        // We have to compensate for it if it's there.
        number barOffset = 0
        if control:IsShowingHorizontalBar()
            barOffset = control:GetBarThickness() * control:GetInterfaceScale()
        end

        CodeEditor editor = cast(CodeEditor, control)
        Block block = editor:GetBlockAtNavigationIndex(startLine)
        if block not= undefined and block:IsNavigable() = false
            block = block:GetNextNavigableBlock()
        end
        
        File file = parent:LineNumberGutter:file
        BreakpointManager breakpoints = parent:LineNumberGutter:breakpoints

        integer counter = 0
        integer blockSubLine = 0
        integer blockStartLine = 0
        integer currentLine = startLine
        boolean last = false
        
        if block = undefined
            last = true
        else
            blockStartLine = block:GetStartLine()
        end
        
        repeat while currentLine < totalLines and last = false
            number y = control:GetLineY(currentLine) + barOffset
            number height = control:GetLineHeight(currentLine)

            if y < 0
                last = true
            end

            Label label = GetLabel(counter)

            if font not= undefined
                label:SetFont(font)
            end

            Color color
            
            label:SetSize(fontSize)
            label:SetText("" + (blockStartLine + blockSubLine + 1))
            label:SetPosition(width - label:GetWidth() - rightMargin, y + height / 2.0 - label:GetHeight() / 2.0)
            label:SetColor(GetFontColor())

            //this is a bit wasteful of memory, but might be ok.
            boolean fillBackground = false
            Drawable background = GetBackground(counter)
            if file not= undefined and breakpoints not= undefined
                integer myWidth = cast(integer, width - rightMargin - leftMargin)
                integer myHeight = cast(integer, height)
                integer descent = font:GetMaximumDescent()
                background:SetSize(myWidth, myHeight)
                
                background:SetPosition(width - background:GetWidth() - rightMargin, y + myHeight)

                integer textLine = editor:GetLineFromNavigationIndex(currentLine)
                Breakpoint point = breakpoints:GetBreakpoint(file:GetAbsolutePath(), textLine - 1)
                if (point not= undefined) or (textLine - 1 = parent:LineNumberGutter:debuggerLine and parent:LineNumberGutter:debuggerLine not= -1)
                    if textLine - 1 = parent:LineNumberGutter:debuggerLine
                        background:SetColor(GetSelectionColor())
                    elseif point not= undefined and point:GetLine() = textLine - 1
                        background:SetColor(GetAccentColor())
                    end
                    fillBackground = true
                end
            end

            if fillBackground
                Add(background)
            end
            Add(label)

            currentLine = currentLine + 1
            counter = counter + 1
            
            if currentLine > block:GetNavigationEndIndex()
                block = block:GetNextNavigableBlock()
                blockSubLine = 0
                if block = undefined
                    last = true
                else
                    blockStartLine = block:GetStartLine()
                end
            else
                blockSubLine = blockSubLine + 1
            end
        end
    end

end