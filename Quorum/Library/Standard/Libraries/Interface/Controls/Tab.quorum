package Libraries.Interface.Controls

use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Label
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Font
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.LabelBoxToggleView
use Libraries.Interface.Behaviors.Controls.TabCloseBehavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Interface.Views.ControlShaderView
use Libraries.Game.GameStateManager

class Tab is Button
    TabPane container = undefined
    TabBar bar = undefined

    // The Item that is displayed in the TabPane when the Tab is activated.
    Item2D relatedItem = undefined

    // The Item that should receive focus when the Tab is activated. If left
    // undefined, the relatedItem is focused instead, if possible.
    Item2D focusTarget = undefined

    private boolean toggled = false
    LayoutProperties defaultProperties = undefined
    LayoutProperties iconLayoutProperties = undefined
    LayoutProperties labelLayoutProperties = undefined
    LayoutProperties buttonLayoutProperties = undefined

    Icon icon
    Label label
    Button closeButton

    // The last colors used to generate the "X" texture for the default close button.
    Color closeForeground = undefined
    Color closeAccent = undefined

    GameStateManager manager
    // Values used to track if the Tab or an item related to it is focused.
    boolean renderFocus = false
    Item lastKnownFocus = undefined

    on create
label:SetAccessibilityCode(label:parent:Item:NOT_ACCESSIBLE)
        
        SetInterfaceOptionsKey("Tab")

        iconLayoutProperties = icon:GetDefaultLayoutProperties()
        iconLayoutProperties:SetHorizontalLayoutMode(iconLayoutProperties:MAINTAIN_ASPECT_RATIO)
        iconLayoutProperties:SetVerticalLayoutMode(iconLayoutProperties:STANDARD)
        iconLayoutProperties:SetPercentageWidth(1.0)
        iconLayoutProperties:SetPercentageHeight(1.0)
        iconLayoutProperties:SetTopMargin(4)
        iconLayoutProperties:SetBottomMargin(4)
        iconLayoutProperties:SetLeftMargin(4)
        
        defaultProperties = GetDefaultLayoutProperties()
        defaultProperties:SetHorizontalLayoutMode(defaultProperties:FIT_CONTENTS)
        defaultProperties:SetVerticalLayoutMode(defaultProperties:FIT_FONT)

        Font font = GetDefaultFont()
        if font not= undefined
            integer defaultFontSize = GetDefaultFontSize()
            defaultProperties:SetFont(font)
            defaultProperties:SetFontSize(defaultFontSize)
        end  

        labelLayoutProperties = label:GetDefaultLayoutProperties()
        buttonLayoutProperties = closeButton:GetDefaultLayoutProperties()

        SetAccessibilityCode(parent:Item:TAB)
        closeButton:SetName("Close")
        closeButton:SetFont(undefined)

        TabCloseBehavior behavior
        behavior:SetTab(me)
        closeButton:SetBehavior(behavior)

        labelLayoutProperties:SetHorizontalLayoutMode(labelLayoutProperties:FIT_CONTENTS)
        labelLayoutProperties:SetLeftMargin(7)
        labelLayoutProperties:SetRightMargin(7)

        buttonLayoutProperties:SetHorizontalLayoutMode(buttonLayoutProperties:MAINTAIN_ASPECT_RATIO)
        buttonLayoutProperties:SetVerticalLayoutMode(buttonLayoutProperties:STANDARD)
        buttonLayoutProperties:SetPercentageWidth(1.0)
        buttonLayoutProperties:SetPercentageHeight(1.0)
        buttonLayoutProperties:SetTopMargin(4)
        buttonLayoutProperties:SetBottomMargin(4)
        buttonLayoutProperties:SetRightMargin(4)

        icon:Hide()

        Add(icon)
        Add(label)
        Add(closeButton)
    end

    /*
        This action gets the containing tab pane for this tab.
    */
    action GetTabPane returns TabPane
        return container
    end

    /*
        This action sets the containing tab pane for this tab.
    */
    action SetTabPane(TabPane pane)
        me:container = pane
    end

    action GetTabBar returns TabBar
        return bar
    end

    action SetTabBar(TabBar bar)
        me:bar = bar
    end

    action IsAccessibleParent returns boolean
        return true
    end

    action GetDefaultFontSize returns integer
        return 14
    end

    action SetRelatedItem(Item2D item)
        relatedItem = item
    end

    action GetRelatedItem returns Item2D
        return relatedItem
    end

    action SetIcon(Icon newIcon)
        parent:Control:SetIcon(newIcon)
        if newIcon = undefined
            icon:Hide()
        else
            icon:Load(newIcon)
            number aspectRatio = icon:GetWidth() / cast(number, icon:GetHeight())
            iconLayoutProperties:SetPercentageWidth(aspectRatio)
            icon:Show()
        end
    end

    action SetName(text name)
        label:SetText(name)
        icon:SetName(name + " Icon")
        parent:Item2D:SetName(name)
    end

    action DisplayName(boolean display)
        displayLabel = display
        if display
            label:Show()
        else
            label:Hide()
        end
    end

    action DisplayCloseButton(boolean display)
        displayClose = display
        if display
            closeButton:Show()
        else
            closeButton:Hide()
        end
    end

    action IsDisplayingCloseButton returns boolean
        return closeButton:IsShowing()
    end
    
    action GetCloseButton returns Button
        return closeButton
    end

    action SetToggleState(boolean toggleState)
        if toggled = toggleState
            return now
        end

        if toggleState = true and bar not= undefined
            bar:DeselectAll()
        end

        toggled = toggleState
        if GetView2D() is LabelBoxToggleView
            LabelBoxToggleView content = cast(LabelBoxToggleView, GetView2D())
            content:SetToggleState(toggleState)
        end
        if toggleState = true
            OnToggleOn()
        else
            OnToggleOff()
        end

        SetLabelRenderColor()
    end

    private action SetLabelRenderColor
        if label = undefined
            return now
        end

        if IsRenderingSelection()
            if IsRenderingFocus()
                label:SetColor(GetSelectionFontColor())
            else
                label:SetColor(GetUnfocusedSelectionFontColor())
            end
        else
            label:SetColor(GetFontColor())
        end
    end

    action IsRenderingSelection returns boolean
        return toggled
    end

    action IsRenderingFocus returns boolean
        if manager:GetFocus() not= lastKnownFocus
            renderFocus = CalculateRenderFocus()
            SetLabelRenderColor()
        end

        return renderFocus
    end

    private action CalculateRenderFocus returns boolean
        lastKnownFocus = manager:GetFocus()

        if lastKnownFocus is Item2D
            Item2D focus = cast(Item2D, lastKnownFocus)
            repeat while focus not= undefined
                if focus:Equals(me) or focus = relatedItem or focus = focusTarget
                    return true
                end
                focus = focus:GetParent()
            end
        else
            return false
        end

        return false
    end

    action IsActivated returns boolean
        return toggled
    end

    action OnToggleOn
        if bar not= undefined
            TabPane pane = bar:GetTabPane()
            if pane not= undefined
                pane:UpdateSelection(me)
            end

            bar:FitTab(me)
        end
    end

    action OnToggleOff
        if bar not= undefined
            TabPane pane = bar:GetTabPane()
            if pane not= undefined
                pane:UpdateSelection(undefined)
            end
        end
    end

    /*
    The OnClose action is called when this Tab is closed (or in other words,
    when the Tab is removed from a TabPane or TabBar). By default, this action
    does nothing, but classes inheriting from Tab can override this action to
    perform clean up before closing the Tab.
    */
    action OnClose
    end

    action Dispose
        container = undefined
        bar = undefined

        // The Item that is displayed in the TabPane when the Tab is activated.
        relatedItem = undefined

        // The Item that should receive focus when the Tab is activated. If left
        // undefined, the relatedItem is focused instead, if possible.
        focusTarget = undefined

        defaultProperties = undefined
        iconLayoutProperties = undefined
        labelLayoutProperties = undefined
        buttonLayoutProperties = undefined

        icon = undefined
        label = undefined
        closeButton = undefined

        Empty()
    end

    action Activate(BehaviorEvent event)
        if IsActivated()
            if relatedItem not= undefined
                if focusTarget not= undefined
                    focusTarget:Focus()
                else
                    Item2D target = GetFirstFocusableChild(relatedItem)
                    target:Focus()
                end
            else
                if bar not= undefined
                    TabPane pane = bar:GetTabPane()
                    if pane not= undefined
                        Focus()
                    end
                end
            end
        else
            SetToggleState(true)
            Activate()
        end
    end
    
// Recursively depth-first searches an item's child hierarchy looking for a focusable Item. Will return the parameter if it's focusable.
    private action GetFirstFocusableChild(Item2D item) returns Item2D
        if item:IsFocusable()
            return item
        end
        
        Array<Item2D> children = item:GetChildren()
        integer i = 0
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            Item2D target = GetFirstFocusableChild(child)
            if target not= undefined
                return target
            end
            i = i + 1
        end
        
        return undefined
    end

    /*
    For internal use only.
    */
    action GetLabel returns Label
        return label
    end
    
/*
    For internal use only.
    */
    action GetTabIcon returns Icon
        return icon
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if properties = undefined
            return now
        end

        TextureRegion region = properties:GetIcon()
        if region = undefined
            if icon:IsShowing()
                icon:Hide()
            end
        else
            if icon:IsShowing() = false
                icon:Load(region)
                number aspectRatio = icon:GetWidth() / cast(number, icon:GetHeight())
                iconLayoutProperties:SetPercentageWidth(aspectRatio)
                icon:Show()
            end
            ColorGroup iconColor = properties:GetIconColor()
            if iconColor = undefined
                Color color
                iconColor = color:White()
            end

            icon:SetColor(iconColor)
        end

        Font font = properties:GetFont()
        if font not= undefined
            label:SetFont(font)
            label:SetSize(properties:GetFontSize())
        else
            label:Hide()
        end

        View2D view = properties:GetView2D()
        if view = undefined
            if GetView2D() = undefined
                ControlShaderView content
                content:Initialize()
                view = content
            else
                view = GetView2D()
            end
        end

        SetView2D(view)

        Color foreground = GetForegroundColor():GetBottomLeft()
        Color accent = GetAccentColor():GetBottomLeft()
        // Only regenerate the close texture if needed due to color changes
        if closeForeground = undefined or closeAccent = undefined
                or foreground:GetRed() not= closeForeground:GetRed() or foreground:GetGreen() not= closeForeground:GetGreen() or foreground:GetGreen() not= closeForeground:GetGreen() or foreground:GetAlpha() not= closeForeground:GetAlpha()
                or accent:GetRed() not= closeAccent:GetRed() or accent:GetGreen() not= closeAccent:GetGreen() or accent:GetGreen() not= closeAccent:GetGreen() or accent:GetAlpha() not= closeAccent:GetAlpha()

            closeForeground = foreground
            closeAccent = accent
            Icon closeIcon
            Texture theX = GenerateX(100, 25, 10, closeForeground, closeAccent)
            closeIcon:Load(theX)
            closeButton:SetIcon(closeIcon)
        end
        
        SetLabelRenderColor()

        parent:Control:LoadGraphics(properties)
    end

    private action GenerateX(integer size, integer buffer, integer width, Color background, Color accent) returns Texture
        PixelMap map
        Format format
        format:SetValue(format:RGBA8888)
        map:CreatePixelMap(size, size, format)
        
        map:FillCircle(size / 2, size / 2, cast(integer, size * 0.43), background)
        integer x = buffer
        integer y = buffer
        repeat while x < size - buffer
            map:SetPixel(x, y, accent)
            map:SetPixel(x, size - y - 1, accent)

            integer theWidth = 1
            repeat while theWidth < width
                if y + theWidth < size - buffer
                    map:SetPixel(x, y + theWidth, accent)
                end

                if x + theWidth < size - buffer
                    map:SetPixel(x + theWidth, y, accent)
                end
                theWidth = theWidth + 1
            end

            theWidth = 1
            repeat while theWidth < width
                if x + theWidth < size - buffer
                    map:SetPixel(x + theWidth, size - y - 1, accent)
                end

                if size  - buffer- y - theWidth - 1 >= 0
                    map:SetPixel(x, size - y - theWidth - 1, accent)
                end
                theWidth = theWidth + 1
            end

            x = x + 1
            y = y + 1
        end

        Texture texture
        texture:LoadFromPixelMap(map)
        return texture
    end

    action SetFocusTarget(Item2D target)
        focusTarget = target
    end

    action GetFocusTarget returns Item2D
        return focusTarget
    end
    
end
