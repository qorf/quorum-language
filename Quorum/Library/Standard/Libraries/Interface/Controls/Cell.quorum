package Libraries.Interface.Controls
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.View2D
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Views.ControlShaderView

class Cell is Control
    text value = ""
    constant integer DEFAULT_PADDING = 6
    Label label

    // The Behavior to use when the Cell is activated (e.g. by double click).
    // If this is undefined, the Cell will attempt to use a Behavior defined by
    // the Spreadsheet instead.
    Behavior activationBehavior = undefined

    on create
        label:SetAccessibilityCode(label:parent:Item:NOT_ACCESSIBLE)
        
        ManualLayout layout
        layout:SetIgnoreInterfaceScale(true)
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetInterfaceOptionsKey("Cell")
        properties:SetHorizontalLayoutMode(properties:STANDARD)
        properties:SetVerticalLayoutMode(properties:STANDARD)

        properties:SetPercentageWidth(1)
        properties:SetBorderThickness(1)

        Font font = GetDefaultFont()
        if font not= undefined
            integer defaultFontSize = GetDefaultFontSize()
            properties:SetFont(font)
            properties:SetFontSize(defaultFontSize)
        end

        SetInputGroup("SpreadsheetCell")
        SetClipping(true)
        label:SetPositionOnBaseLine(false)
        Add(label)
        SetAccessibilityCode(parent:Item:CELL)
        SetName("Cell")
    end

    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)

        if GetView2D() = undefined
            ControlShaderView view
            view:Initialize()
            SetView2D(view)
        end

        View2D view = GetView2D()
        ColorGroup backgroundColor = undefined
        ColorGroup textColor = undefined
        Spreadsheet sheet = GetSpreadsheet()
        LayoutProperties sheetProperties = undefined

        if sheet not= undefined
            sheetProperties = sheet:GetDefaultLayoutProperties()
        end

        if properties not= undefined and properties:GetFontColor() not= undefined
            textColor = properties:GetFontColor()
        elseif sheetProperties not= undefined and sheetProperties:GetFontColor() not= undefined
            textColor = sheetProperties:GetFontColor()
        else
            Color color
            textColor = color:Black()
        end

        label:SetColor(textColor)
        label:SetLeftMargin(DEFAULT_PADDING)
        label:SetFont(properties:GetFont())
        label:SetFontSize(properties:GetFontSize())
        label:SetInterfaceScale(properties:GetInterfaceScale())
    end

    action SetText(text value)
        me:value = value
        label:SetText(value)
    end

    action GetText returns text
        return value
    end

    action GainedSelection
        parent:Control:GainedSelection()
        Spreadsheet sheet = GetSpreadsheet()
        LayoutProperties sheetProperties = undefined
        LayoutProperties properties = GetDefaultLayoutProperties()

        if sheet not= undefined
            sheetProperties = sheet:GetDefaultLayoutProperties()
        end

        ColorGroup backgroundColor = undefined
        ColorGroup textColor = undefined

        if properties not= undefined and properties:GetSelectionColor() not= undefined
            backgroundColor = properties:GetSelectionColor()
        elseif sheetProperties not= undefined and sheetProperties:GetSelectionColor() not= undefined
            backgroundColor = sheetProperties:GetSelectionColor()
        else
            Color color
            backgroundColor = color:Blue()
        end

        if properties not= undefined and properties:GetSelectionFontColor() not= undefined
            textColor = properties:GetSelectionFontColor()
        elseif sheetProperties not= undefined and sheetProperties:GetSelectionFontColor() not= undefined
            textColor = sheetProperties:GetSelectionFontColor()
        else
            Color color
            textColor = color:White()
        end

        if GetView2D() is LabelBoxView
            LabelBoxView view = cast(LabelBoxView, GetView2D())
            view:SetBackgroundColor(backgroundColor)
        end

        label:SetColor(textColor)
    end

    action LostSelection
        parent:Control:LostSelection()
        Spreadsheet sheet = GetSpreadsheet()
        LayoutProperties sheetProperties = undefined
        LayoutProperties properties = GetDefaultLayoutProperties()

        if sheet not= undefined
            sheetProperties = sheet:GetDefaultLayoutProperties()
        end

        ColorGroup backgroundColor = undefined
        ColorGroup textColor = undefined

        if properties not= undefined and properties:GetBackgroundColor() not= undefined
            backgroundColor = properties:GetBackgroundColor()
        elseif sheetProperties not= undefined and sheetProperties:GetBackgroundColor() not= undefined
            backgroundColor = sheetProperties:GetBackgroundColor()
        else
            Color color
            backgroundColor = color:White()
        end

        if properties not= undefined and properties:GetFontColor() not= undefined
            textColor = properties:GetFontColor()
        elseif sheetProperties not= undefined and sheetProperties:GetFontColor() not= undefined
            textColor = sheetProperties:GetFontColor()
        else
            Color color
            textColor = color:Black()
        end

        if GetView2D() is LabelBoxView
            LabelBoxView view = cast(LabelBoxView, GetView2D())
            view:SetBackgroundColor(backgroundColor)
        end

        label:SetColor(textColor)
    end

    action ClickedMouse
        parent:Control:ClickedMouse()
        Select()
    end

    action Select
        // Don't actually select here! Go to the Spreadsheet and ask it to 
        // select us. We do this to allow the Spreadsheet to update the
        // selection and deselect the old selection.
        Spreadsheet sheet = GetSpreadsheet()
        if sheet not= undefined
            sheet:Select(me)
        end
    end

    action Deselect
        // Don't actually select here! Go to the Spreadsheet and ask it to 
        // select us. We do this to allow the Spreadsheet to update the
        // selection and deselect the old selection.
        Spreadsheet sheet = GetSpreadsheet()
        if sheet not= undefined
            sheet:Deselect()
        end
    end

    action GetColumn returns Column
        Item2D item = GetParent()
        repeat while (item is Column = false) and (item not= undefined)
            item = item:GetParent()
        end
        return cast(Column, item)
    end

    action GetSpreadsheet returns Spreadsheet
        Column column = GetColumn()
        if column not= undefined
            return column:GetSpreadsheet()
        else
            return undefined
        end
    end

    action GetActivationBehavior returns Behavior
        return activationBehavior
    end

    action SetActivationBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action GetLabel returns Label
        return label
    end

    action Activate(BehaviorEvent event)
        if GetActivationBehavior() not= undefined
            parent:Control:Activate(event)
        else
            Spreadsheet sheet = GetSpreadsheet()
            if sheet = undefined or sheet:GetCellActivationBehavior() = undefined
                return now
            end

            Behavior behavior = sheet:GetCellActivationBehavior()

            if not event:GetItem():Equals(me)
                event = event:Copy()
                event:SetItem(me)
            end
            behavior:Run(event)

            ControlActivationEvent controlEvent
            controlEvent:Set(me, event)
            NotifyControlActivationListeners(controlEvent)
        end
    end
end
