package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Layouts.TreeLayout
use Libraries.Interface.Layouts.TreeItemLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Controls.ToggleButton
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.TextureRegion
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.TreeItemContent
use Libraries.Interface.Controls.DefaultTreeItemContent

class TreeItem is Control

    TreePanel panel
    TreeItemContent contents = undefined
    TreeItem parentTreeItem = undefined
    Tree parentTree = undefined
    Array<TreeItem> treeItems
    boolean open = false

    LayoutProperties panelProperties

    Behavior activationBehavior = undefined

    on create
        SetInputGroup("TreeItem")
        SetInterfaceOptionsKey("TreeItem")

        LayoutProperties treeItemProperties = GetDefaultLayoutProperties()
        treeItemProperties:SetHorizontalLayoutMode(treeItemProperties:FIT_CONTENTS)
        treeItemProperties:SetVerticalLayoutMode(treeItemProperties:FIT_CONTENTS)

        TreeItemLayout treeItemLayout
        SetLayout(treeItemLayout)

        panelProperties = panel:GetDefaultLayoutProperties()

        SetAccessibilityCode(parent:Item:TREE_ITEM)
    end

    action SetInterfaceOptionsKey(text key)
        parent:Control:SetInterfaceOptionsKey(key)
        if contents not= undefined
            contents:SetInterfaceOptionsKey(key)
        end
    end

    action GetDefaultFontSize returns integer
        return 14
    end
    
    private action HideExpandButton
        if contents not= undefined
            contents:HideExpandButton()
        end
    end

    private action ShowExpandButton
        if contents not= undefined
            contents:ShowExpandButton()
        end
    end

    private action SetContentExpandState(boolean expand)
        if contents not= undefined
            contents:SetExpandState(expand)
        end
    end

    action SetName(text name)
        parent:Item:SetName(name)
        if contents not= undefined
            contents:UpdateText(name)
        end
    end

    action Add(TreeItem item)
        if panel:GetChildren():IsEmpty()
            ShowExpandButton()
        end

        panel:Add(item)
        treeItems:Add(item)
        item:SetTree(GetTree())
        item:SetParentTreeItem(me)
    end

    action Add(integer location, TreeItem item)
        if panel:GetChildren():IsEmpty()
            ShowExpandButton()
        end

        panel:Add(location, item)
        treeItems:Add(location, item)
        item:SetTree(GetTree())
        item:SetParentTreeItem(me)
    end

    action Add(Array<TreeItem> items)
        integer counter = 0
        repeat while counter < items:GetSize()
            Add(items:Get(counter))
            counter = counter + 1
        end
    end

    action Remove(TreeItem item)
        if item:IsSelected()
            if item:IsOpen()
                item:Close()
            end

            item:SelectionDown()
        end

        panel:Remove(item)

        if panel:GetChildren():IsEmpty()
            if IsOpen()
                Close()
            end

            HideExpandButton()
        end

        treeItems:Remove(item)
        item:SetTree(undefined)
        item:SetParentTreeItem(undefined)
    end

    action Open
        if not open
            if panel:GetInterfaceScale() not= GetInterfaceScale()
                panel:SetInterfaceScale(GetInterfaceScale())
            end
            parent:Item2D:Add(panel)
            open = true
            
            SetContentExpandState(true)

            Tree tree = GetTree()
            if tree not= undefined
                tree:RequestLayout()
                TreeChangeEvent event
                event:Set(tree, me, event:OPENED)
                tree:NotifyTreeChangeListeners(event)
            end
        end
    end

    action Close
        if open
            parent:Item2D:Remove(panel)
            open = false

            SetContentExpandState(false)

            Tree tree = GetTree()
            if tree not= undefined
                tree:RequestLayout()
                TreeChangeEvent event
                event:Set(tree, me, event:CLOSED)
                tree:NotifyTreeChangeListeners(event)
            end
        end
    end

    action IsOpen returns boolean
        return open
    end

    private action SetParentTreeItem(TreeItem parentItem)
        parentTreeItem = parentItem
    end

    action GetParentTreeItem returns TreeItem
        return parentTreeItem
    end

    private action GetPanelLayout returns TreeLayout
        return cast(TreeLayout, panel:GetLayout())
    end

    action SetTree(Tree tree)
        parentTree = tree

        integer counter = 0
        repeat while counter < treeItems:GetSize()
            treeItems:Get(counter):SetTree(parentTree)
            counter = counter + 1
        end
    end

    action GetTree returns Tree
        return parentTree
    end

    private action GetTreeItem(Array<TreeItem> path) returns TreeItem
        if path:IsEmpty()
            return undefined
        end

        return path:GetFromEnd()
    end

    action GetTreeItems returns Iterator<TreeItem>
        return treeItems:GetIterator()
    end

    action SetTreeItemContent(TreeItemContent content)
        if contents not= undefined
            parent:Item2D:Remove(contents)
        end

        contents = content
        content:SetInterfaceOptionsKey(GetInterfaceOptionsKey())
        content:SetTreeItem(me)
        parent:Item2D:Add(0, contents)
    end

    action GetTreeItemContent returns TreeItemContent
        return contents
    end

    action UpdateSelection(Array<TreeItem> oldPath, Array<TreeItem> newPath)

        TreeItem oldItem = undefined
        TreeItem newItem = undefined

        if not oldPath:IsEmpty()
            oldItem = oldPath:RemoveFromFront()
        end

        if not newPath:IsEmpty()
            newItem = newPath:RemoveFromFront()
        end

        if oldItem = newItem
            if oldItem = undefined
                return now
            else
                oldItem:UpdateSelection(oldPath, newPath)
            end
        else
            if oldItem not= undefined
                oldItem:RecursiveDeselect(oldPath)
            else
                LostSelection()
            end
            if newItem not= undefined
                newItem:RecursiveSelect(newPath)
            else
                GainedSelection()
            end
        end
    end

    action RecursiveSelect(Array<TreeItem> path)
        if not path:IsEmpty()
            TreeItem item = path:RemoveFromFront()
            if item not= undefined
                item:RecursiveSelect(path)
            end
        else
            GainedSelection()
        end
    end

    action RecursiveDeselect(Array<TreeItem> path)
        if not path:IsEmpty()
            TreeItem item = path:RemoveFromFront()
            if item not= undefined
                item:RecursiveDeselect(path)
            end
        end
        LostSelection()
    end

    action GetTreeHeight returns number
        if open
            number height = GetHeight()

            TreeLayout treeLayout = GetPanelLayout()
            number padding = treeLayout:GetPadding()

            integer counter = 0
            Array<Item2D> children = panel:GetChildren()
            repeat while counter < children:GetSize()
                Item2D child = children:Get(counter)

                if child is TreeItem
                    TreeItem item = cast(TreeItem, child)
                    height = height + item:GetTreeHeight()
                else
                    height = height + child:GetHeight()
                end

                counter = counter + 1
            end

            height = height + children:GetSize() * padding

            return height
        else
            return GetHeight()
        end
    end

    action GetTreeWidth returns number
        if open
            number width = GetWidth()
            number rootX = 0
            if parentTree not= undefined
                rootX = parentTree:GetGlobalX()
            end
            
            integer counter = 0
            
            repeat while counter < treeItems:GetSize()
                TreeItem item = treeItems:Get(counter)

                number childWidth = item:GetTreeWidth()
                number x = item:GetGlobalX() - rootX

                if x + childWidth > width
                    width = x + childWidth
                end

                counter = counter + 1
            end

            return width
        else
            return GetWidth()
        end
    end

    action SetBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action GetActivationBehavior returns Behavior
        return activationBehavior
    end

    action OnDoubleClick(BehaviorEvent event)
        if not panel:GetChildren():IsEmpty()
            if open
                Close()
            else
                Open()
            end
        end

        Activate()
    end

    action ClickedMouse
        parent:Control:ClickedMouse()
        Select()
    end

    action GainedSelection
        parent:Control:GainedSelection()
        if contents not= undefined
            contents:GainedSelection()
        end
    end

    action LostSelection
        parent:Control:LostSelection()
        if contents not= undefined
            contents:LostSelection()
        end
    end

    action UnfocusedSelection
        if contents not= undefined
            contents:UnfocusedSelection()
        end
    end

    action Select
        // Don't actually select here! Go to Tree and ask it to select us.
        // We do this to allow the Tree to fully update its information,
        // deselect the previous selection, and prevent infinite loops.
        if parentTree not= undefined
            parentTree:Select(GetTreePath())
        end
    end

    action Deselect
        // Don't actually select here! Go to Tree and ask it to deselect us.
        // We do this to allow the Tree to fully update its information,
        // deselect this, and prevent infinite loops.
        if parentTree not= undefined
            parentTree:Deselect()
        end
    end

    action IsSubtree returns boolean
        return not treeItems:IsEmpty()
    end

    action GetTreePath returns Array<TreeItem>
        Array<TreeItem> path
        path:Add(me)
        if parentTreeItem not= undefined
            Array<TreeItem> a = parentTreeItem:GetTreePath(path)
            return a
        end
        return path
    end

    private action GetTreePath(Array<TreeItem> array) returns Array<TreeItem>
        array:AddToFront(me)
        if parentTreeItem not= undefined
            return parentTreeItem:GetTreePath(array)
        end

        return array
    end

    action SelectionDown
        if IsSubtree() and IsOpen()
            treeItems:Get(0):Select()
        elseif parentTreeItem not= undefined
            parentTreeItem:SelectionDown(GetName())
        elseif parentTree not= undefined
            parentTree:SelectionSkipForward()
        end
    end

    private action SelectionDown(text name)
        if IsSubtree() and IsOpen()
            integer counter = 0
            repeat while counter < treeItems:GetSize()
                if treeItems:Get(counter):GetName() = name
                    integer select = counter + 1

                    // If the last element was selected, go to the next subtree.
                    if select >= treeItems:GetSize()
                        if parentTreeItem not= undefined
                            parentTreeItem:SelectionDown(GetName())
                        elseif parentTree not= undefined
                            parentTree:SelectionSkipForward()
                        end
                        return now
                    end

                    treeItems:Get(select):Select()
                    return now
                end
                counter = counter + 1
            end
        elseif parentTreeItem not= undefined
            parentTreeItem:SelectionDown(GetName())
        elseif parentTree not= undefined
            parentTree:SelectionSkipForward()
        end
    end

    action SelectionUp
        if parentTreeItem not= undefined
            parentTreeItem:SelectionUp(GetName())
        elseif parentTree not= undefined
            parentTree:SelectionSkipBackward()
        end
    end

    private action SelectionUp(text name)
        if IsSubtree() and IsOpen()
            integer counter = 0
            repeat while counter < treeItems:GetSize()
                if treeItems:Get(counter):GetName() = name
                    integer select = counter - 1
                    // If this was the first element, select the subtree containing it.
                    if select < 0
                        Select()
                        return now
                    end

                    treeItems:Get(select):SelectLastElement()
                    return now
                end
                counter = counter + 1
            end
        elseif parentTreeItem not= undefined
            parentTreeItem:SelectionUp(GetName())
        elseif parentTree not= undefined
            parentTree:SelectionSkipBackward()
        end
    end

    action SelectLastElement
        if IsSubtree() and IsOpen()
            treeItems:Get(treeItems:GetSize() - 1):SelectLastElement()
        else
            Select()
        end
    end

    action GetSize returns integer
        return treeItems:GetSize()
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if contents = undefined
            DefaultTreeItemContent defaultContents
            SetTreeItemContent(defaultContents)
            defaultContents:SetFontSize(properties:GetFontSize())
            defaultContents:SetInterfaceScale(properties:GetInterfaceScale())
        else
            contents:GetDefaultLayoutProperties():SetRenderingFlag(true)
        end

        TreeLayout panelLayout = GetPanelLayout()
        // Hardcoded value sufficient for basic cases. Should be replaced with
        // something more responsive to design in the future.
        panelLayout:SetPadding(2)
        integer height = 12
        Font font = properties:GetFont()
        if font not= undefined
            height = font:GetLineHeight()
        end
        panelProperties:SetPixelX(height/2 * 3)

        if IsSelected()
            // If this is selected, we need the visuals to reflect that.
            GainedSelection()
        end

        parent:Control:LoadGraphics(properties)
    end

    /*
        Returns whether or not the TreeItem is selected.

        Attribute: Returns true if the item is selected.
    */
    action IsSelected returns boolean
        if GetTree() = undefined
            return false
        end
        Array<TreeItem> path = GetTree():GetSelection():GetPath()
        if path:IsEmpty()
            return false
        end

        return path:GetFromEnd() = me
    end

    action IsAccessibleParent returns boolean
        return true
    end
end
