package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.EditRegion
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Controls.Layouts.SingleLineBlockLayout
use Libraries.Interface.Events.TextInputEvent
use Libraries.Interface.Events.FocusEvent
use Libraries.Language.Compile.Parsing.QuorumParser
use Libraries.Language.Compile.Context.StartContext
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.Parsing.QuorumLexer
use Libraries.Language.Compile.Blocks.ParserToBlockListener
use Libraries.Language.Compile.Context.StatementContext
use Libraries.Language.Compile.Context.ClassStatementsContext
use Libraries.Interface.Controls.Blocks.FreeformBlockListener
use Libraries.Language.Compile.Context.OutputContext
use Libraries.Language.Compile.Context.ParseContext
use Libraries.Language.Compile.Location
use Libraries.Game.Graphics.Color
use Libraries.Interface.Views.BlockErrorShaderView
use Libraries.Interface.Views.SingleLineBlockView
use Libraries.Interface.Controls.Blocks.EditBox
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Language.Compile.Parsing.Token
use Libraries.Language.Compile.Parsing.TokenIterator
use Libraries.Language.Compile.Parsing.QuorumLexerConstants
use Libraries.Language.Compile.Context.PackageContext
use Libraries.Language.Compile.Context.UseContext
use Libraries.Language.Compile.Context.DetectStatementContext
use Libraries.Language.Compile.Context.ActionContext
use Libraries.Language.Compile.Context.FullClassDeclarationContext
use Libraries.Interface.Undo.BlockEditManager
use Libraries.System.Logging.SharedLogger

class FreeformBlock is SingleLineBlock
    FreeformBlockListener blockListener
    EditBox editRegion = undefined
    boolean addedCode = false

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:FREEFORM_KEY)

        SingleLineBlockLayout layout
        SetLayout(layout)

        SetName("Freeform Block")
    end
    
    action GetBlockName returns text
        return "Blank"
    end
    
    action GetBlockDescription returns text
        return "The blank block converts code you type into blocks. These placeholders represent currently empty lines."
    end
    
    action IsFastEditable returns boolean
        return true
    end

    action SetupElements
        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)

        EditBox edit
        editRegion = edit
        Add(editRegion) 

        editRegion:Setup("Free Text", 0, GetEndIndex() - GetStartIndex())
    end

    action UpdateName(integer line)
        SetName(editRegion:GetText())
    end

    action ReceivedTextInput(TextInputEvent event)
        editRegion:Focus()
        editRegion:SetCaretPosition(0)
        editRegion:Insert(event:GetText())
    end

    action GetEditBox returns EditBox
        return editRegion
    end

    action LostSelection
        ParseToBlock()
        parent:Block:LostSelection()
    end

    action GetName returns text
        if editRegion not= undefined and editRegion:GetSize() = 0
            return "Blank"
        else
            return parent:SingleLineBlock:GetName()
        end
    end

    action LexerForText(text code, CompilerErrorManager manager) returns QuorumLexer
        QuorumLexer lexer
        lexer:SetCompilerErrorManager(manager)
        lexer:Read(code)
        return lexer
    end

    action ParseExpression(text expression) returns ParseContext
        CompilerErrorManager manager
        QuorumLexer lexer = LexerForText(expression, manager)
        QuorumParser parser
        parser:SetCompilerErrorManager(manager)
        parser:SetLexer(lexer)
        return parser:Expression()
    end

    private action AllTokensOnSingleLine returns boolean
        CodeEditor editor = cast(CodeEditor, GetBlockEnvironment())
        if editor not= undefined
            text code = editor:GetText()
            CompilerErrorManager manager
            QuorumLexer lexer = LexerForText(code, manager)
            if manager:IsCompilationErrorFree()
                TokenIterator<Token> tokenIterator = lexer:GetIterator()
                Token current = undefined
                integer currentLine = -1
                if tokenIterator:HasNext()
                    current = tokenIterator:Next()
                    currentLine = current:startLine
                    if currentLine not= current:endLine
                        return false
                    end
                    if tokenIterator:HasNext()
                        current = tokenIterator:Next()
                    else
                        return true
                    end
                end
                repeat while current not= undefined
                    integer nextLine = current:startLine
                    if currentLine not= nextLine or nextLine not= current:endLine
                        return false
                    end
                    current = tokenIterator:Next()
                end
                return false
            else
                return false
            end
        end
        return false
    end

    private action StartUndo()
        if addedCode
            return now
        end
        addedCode = true
        CodeEditor editor = cast(CodeEditor, GetBlockEnvironment())
        BlockEditManager editManager = editor:GetBlockEditManager()
        editManager:SetSpecialAction(true)
    end

    private action EndUndo()
        if addedCode
            CodeEditor editor = cast(CodeEditor, GetBlockEnvironment())
            BlockEditManager editManager = editor:GetBlockEditManager()
            editManager:SetSpecialAction(false)
        end
    end

    private action SetErrorVisual()
        EndUndo()
        BlockErrorShaderView view
        view:Initialize()
        SetView2D(view)
    end

    /*
    This action attempts to parse the content of the FreeformBlock and convert it into a suitable block.
    If a suitable block is found, it will replace this FreeformBlock in the editor.
    */
    action ParseToBlock
        check
            // Don't try to parse this if it's not in the CodeEditor anymore.
            if not IsInEditorTree()
                return now
            end
    
            text code = editRegion:GetText()
            text newLine = editRegion:GetDefaultLineSeparator()
            text dq = code:GetDoubleQuote()
            if code = undefined or code = "" or GetParentBlock() = undefined
                return now
            end
    
            CodeEditor editor = cast(CodeEditor, GetBlockEnvironment())
    
            if editor = undefined
                return now
            end
    
            boolean failState = editor:GetFailState()
            /*
            First check special cases where the user has typed a short-cut.
            If so, insert extra code to make it valid before we parse it.
            */
            CompilerErrorManager errorManager
            QuorumLexer shortcutLexer = LexerForText(code, errorManager)
            
            // If there's an error, set the block to reflect it, then bail.
            if not errorManager:IsCompilationErrorFree()
                // TO-DO: Set error state visuals
                SetErrorVisual()
                return now
            end
            TokenIterator<Token> tokenIterator
            tokenIterator:SetLexer(shortcutLexer)
            Token current
            QuorumLexerConstants constants
            isPackageStatement = false
            isUseStatement = false
            isClassStatement = false
            isActionStatement = false
            isEmpty = false
    
        
            // since we ignore white space the shortcuts will overwrite the text to guarantee spacing
            if tokenIterator:HasNext()
                current = tokenIterator:Next()
            else
                isEmpty = true
            end
        // output
            if isEmpty and not failState
                text trimmedText = code:Trim()
                if trimmedText:StartsWith("/*") and not trimmedText:EndsWith("*/")
                    StartUndo()
                    editRegion:SetCaretPosition(editRegion:GetSize())
                    editRegion:Insert("*/")
                    code = editRegion:GetText()
                end
            end
            if current:category = constants:OUTPUT and not tokenIterator:HasNext()
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("output " + dq + dq)
                code = editRegion:GetText()
        //  input
            elseif current:category = constants:INPUT and not tokenIterator:HasNext()
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("text myInput = input()")
                code = editRegion:GetText()
        //  integer
            elseif current:category = constants:INTEGER_KEYWORD and not tokenIterator:HasNext()
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("integer " + "myInteger" + " = 0")
                code = editRegion:GetText()
        //  number
            elseif current:category = constants:NUMBER_KEYWORD and not tokenIterator:HasNext()
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("number " + "myNumber" + " = 0.0")
                code = editRegion:GetText()
        //  boolean
            elseif current:category = constants:BOOLEAN_KEYWORD and not tokenIterator:HasNext()
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("boolean " + "myBoolean" + " = false")
                code = editRegion:GetText()
        //  text
            elseif current:category = constants:TEXT and not tokenIterator:HasNext()
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("text " + "myText" + " = "+dq+dq)
                code = editRegion:GetText()
        //  say
            elseif current:category = constants:SAY and not tokenIterator:HasNext()
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("say " + dq + dq)
                code = editRegion:GetText()
        //  return (now for void or with a field if it does)
            elseif current:category = constants:RETURN and not tokenIterator:HasNext()
                editRegion:SetCaretPosition(editRegion:GetSize())
                Block parentBlock = GetParentBlock()
                repeat until parentBlock is ActionBlock or parentBlock = undefined
                    parentBlock = parentBlock:GetParentBlock()
                end
                if parentBlock not= undefined
                    ActionBlock parentAction = cast(ActionBlock, parentBlock)
                    StartUndo()
                    if parentAction:HasReturn()
                        editRegion:SetText("return undefined")
                    else
                        editRegion:SetText("return now")
                        code = editRegion:GetText()
                    end
                end
        // if
        // if (condition)
            elseif current:category = constants:IF
                if not tokenIterator:HasNext()
                    StartUndo()
                    editRegion:SetCaretPosition(editRegion:GetSize())
                    text value = "if true"
                    code = value
                    text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                    editRegion:SetText(value)
                    if failState and AllTokensOnSingleLine()
                        code = value + endText
                    elseif not failState
                        code = value + endText
                    end
                    editRegion:SetText(code)
                else
                    // check for an expression
                    current = tokenIterator:Next()
                    expression = code:GetSubtext(current:startIndex)
                    ParseContext ifExpression = ParseExpression(expression)
                    if ifExpression not= undefined
                        // if an expression was successfully parsed then add an end if needed
                        repeat until not tokenIterator:HasNext()
                            current = tokenIterator:Next()
                        end
                        if current:category not= constants:END
                            StartUndo()
                            text value = "if " + expression
                            code = value
                            text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                            editRegion:SetText(value)
                            if failState and AllTokensOnSingleLine()
                                code = value + endText
                            elseif not failState
                                code = value + endText
                            end
                            editRegion:SetText(code)
                        end
                    else
                        SetErrorVisual()
                        return now
                    end
                end
        //  elseif
        //  elseif (condition)
            elseif current:category = constants:ELSE_IF and not failState
                text expression = ""
                
                Block grandparent = GetParentBlock():GetParentBlock()
                if grandparent not= undefined and grandparent is IfBlock
                    IfBlock ifParent = cast(IfBlock, grandparent)
                    if not tokenIterator:HasNext()
                        StartUndo()
                        editRegion:SetCaretPosition(editRegion:GetSize())
                        editRegion:SetText("elseif false")
                        expression = "false"
                    else
                        current = tokenIterator:Next()
                        expression = code:GetSubtext(current:startIndex)
                        ParseContext elseifExpression = ParseExpression(expression)
                        if elseifExpression = undefined
                            SetErrorVisual()
                            return now
                        end
                    end
                    
                    if ifParent:AddElseifLineFromFreeform(me, expression) = undefined
                        SetErrorVisual()
                    end
                    return now
                else
                    // TO-DO: Set error state visuals
                    SetErrorVisual()
                    return now
                end
        //  else
            elseif current:category = constants:ELSE and not tokenIterator:HasNext() and not failState
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("else")
                Block grandparent = GetParentBlock():GetParentBlock()
                if grandparent not= undefined and grandparent is IfBlock
                    IfBlock ifParent = cast(IfBlock, grandparent)
                    if ifParent:AddElseLineFromFreeform(me) = undefined
                        SetErrorVisual()
                    end
                    return now
                else
                    // TO-DO: Set error state visuals
                    SetErrorVisual()
                    return now
                end
        //  repeat - by default it's times
        //  repeat while
        //  repeat while (some expression) 
        //  repeat until
        //  repeat until (some expression)
            elseif current:category = constants:REPEAT
                text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                if not tokenIterator:HasNext()
                    StartUndo()
                    editRegion:SetCaretPosition(editRegion:GetSize())
                    text value = "repeat 1 times"
                    code = value
                    editRegion:SetText(value)
                    if failState and AllTokensOnSingleLine()
                        code = value + endText
                    elseif not failState
                        code = value + endText
                    end
                    editRegion:SetText(code)
                else
                    current = tokenIterator:Next()
                    boolean hasExpression = true
                    boolean whileType = false
                    boolean untilType = false
                    if current:category = constants:WHILE
                        whileType = true
                        if not tokenIterator:HasNext()
                            StartUndo()
                            editRegion:SetCaretPosition(editRegion:GetSize())
                            text value = "repeat while false"
                            code = value
                            editRegion:SetText(value)
                            if failState and AllTokensOnSingleLine()
                                code = value + endText
                            elseif not failState
                                code = value + endText
                            end
                            editRegion:SetText(code)
                            hasExpression = false
                        end
                        current = tokenIterator:Next()
                    elseif current:category = constants:UNTIL
                        untilType = true
                        if not tokenIterator:HasNext()
                            StartUndo() 
                            editRegion:SetCaretPosition(editRegion:GetSize())
                            text value = "repeat until true"
                            code = value
                            editRegion:SetText(value)
                            if failState and AllTokensOnSingleLine()
                                code = value + endText
                            elseif not failState
                                code = value + endText
                            end
                            editRegion:SetText(code)
                            hasExpression = false
                        end
                        current = tokenIterator:Next()
                    end
                    // there is an expression here
                    if hasExpression
                        expression = code:GetSubtext(current:startIndex)
                        ParseContext repeatExpression = ParseExpression(expression)
                        if repeatExpression not= undefined
                            // if an expression was successfully parsed then add an end if needed
                            repeat until not tokenIterator:HasNext()
                                current = tokenIterator:Next()
                            end
                            if current:category not= constants:END
                                if whileType
                                    code = "repeat while " + expression 
                                elseif untilType
                                    code = "repeat until " + expression
                                else
                                    if current:category = constants:TIMES
                                        code = "repeat " + expression
                                    else
                                        code = "repeat " + expression + " times"
                                    end
                                StartUndo()
                                end
                                editRegion:SetText(code)
                                if failState and AllTokensOnSingleLine()
                                    code = code + endText
                                elseif not failState
                                    code = code + endText
                                end
                                editRegion:SetText(code)
                            end
                        else
                            SetErrorVisual()
                            return now
                        end
                    end
                end
        //  check
            elseif current:category = constants:CHECK and not failState
                StartUndo()
                editRegion:SetCaretPosition(editRegion:GetSize())
                text value ="check" + newLine + editor:GetIndentationText(GetScopeDepth()) + "detect error" + newLine +  editor:GetIndentationText(GetScopeDepth()) + "end"
                editRegion:SetText(value)
                code = editRegion:GetText()
        //  detect
            elseif current:category = constants:DETECT and not failState
                StartUndo()
                Block grandparent = GetParentBlock():GetParentBlock()
                if grandparent not= undefined and grandparent is CheckBlock
                    if not tokenIterator:HasNext()
                        code = "detect error"
                        editRegion:SetText(code)
                    else
                        code = editRegion:GetText()
                    end
                    QuorumLexer detectLexer = LexerForText(code, errorManager)
                    QuorumParser parser
                    parser:SetCompilerErrorManager(errorManager)
                    parser:SetLexer(detectLexer)
    
                    DetectStatementContext context = parser:DetectStatement()
                    if context not= undefined
                        CheckBlock parentCheck = cast(CheckBlock, grandparent)
                        if parentCheck:AddDetectLineFromFreeform(me, context) not= undefined
                            return now
                        end
                    end
                    SetErrorVisual()
                    return now
                else
                    SetErrorVisual()
                    return now
                end
        //  always
            elseif current:category = constants:ALWAYS and not failState
                StartUndo()
                Block grandparent = GetParentBlock():GetParentBlock()
                if grandparent not= undefined and grandparent is CheckBlock
                    if tokenIterator:HasNext()
                        SetErrorVisual()
                        return now
                    end
                    editRegion:SetText("always")
                    CheckBlock parentCheck = cast(CheckBlock, grandparent)
                    if parentCheck:AddAlwaysLineFromFreeform(me) = undefined
                        SetErrorVisual()
                    end
                    return now
                else
                    SetErrorVisual()
                    return now
                end
        //  action
            elseif current:category = constants:ACTION
                if tokenIterator:HasNext()
                    // if there is more than just the action look for a valid action header
                    ActionContext context
                    QuorumLexer actionLexer = LexerForText(code, errorManager)
                    QuorumParser parser
                    parser:SetCompilerErrorManager(errorManager)
                    parser:SetLexer(actionLexer)
                    context = parser:ActionShared()
                    if context = undefined
                        SetErrorVisual()
                        return now
                    end
                    repeat until not tokenIterator:HasNext()
                        current = tokenIterator:Next()
                    end
                    if current:category not= constants:END
                        StartUndo()
                        code = editRegion:GetText()
                        text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                        if failState and AllTokensOnSingleLine()
                            code = code + endText
                        elseif not failState
                            code = code + endText
                        end
                        editRegion:SetText(code)
                    end
                else
                    StartUndo()
                    code = "action MyAction"
                    text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                    editRegion:SetText(code)
                    if failState and AllTokensOnSingleLine()
                        code = code + endText
                    elseif not failState
                        code = code + endText
                    end
                    editRegion:SetText(code)
                end
                isActionStatement = true
        //  blueprint
            elseif current:category = constants:BLUEPRINT and not tokenIterator:HasNext()
                StartUndo()
                code = "blueprint action MyBlueprint"
                editRegion:SetText(code)
        //  system
            elseif current:category = constants:NATIVE and not tokenIterator:HasNext()
                StartUndo()
                code = "system action NativeAction"
                editRegion:SetText(code)
        //  class
            elseif current:category = constants:CLASS
                if not tokenIterator:HasNext()
                    StartUndo()
                    code = "class MyClass"
                    text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                    editRegion:SetText(code)
                    if failState and AllTokensOnSingleLine()
                        code = code + endText
                    elseif not failState
                        code = code + endText
                    end
                    editRegion:SetText(code)
                else 
                    repeat until not tokenIterator:HasNext()
                        current = tokenIterator:Next()
                    end
                    if current:category not= constants:END
                        StartUndo()
                        code = editRegion:GetText()
                        text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                        if failState and AllTokensOnSingleLine()
                            code = code + endText
                        elseif not failState
                            code = code + endText
                        end
                        editRegion:SetText(code)
                    end
                end
                isClassStatement = true
        //  shared
            elseif current:category = constants:STATIC and not failState
                if not tokenIterator:HasNext()
                    StartUndo()
                    code = "shared class MySharedClass"
                    text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                    editRegion:SetText(code)
                    if failState and AllTokensOnSingleLine()
                        code = code + endText
                    elseif not failState
                        code = code + endText
                    end
                    editRegion:SetText(code)
                end
                isClassStatement = true
        //  on create
            elseif current:category = constants:ON
                boolean hasCreate = false
                if not tokenIterator:HasNext()
                    StartUndo()
                    editRegion:SetCaretPosition(editRegion:GetSize())
                    text value = "on create"
                    code = value
                    hasCreate = true
                else
                    current = tokenIterator:Next()
                    hasCreate = (current:category = constants:CREATE)
                end
    
                if not tokenIterator:HasNext() and hasCreate
                    StartUndo()
                    text value = "on create"
                    text endText = newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                    editRegion:SetText(value)
                    if failState and AllTokensOnSingleLine()
                        code = value + endText
                    elseif not failState
                        code = value + endText
                    end
                    editRegion:SetText(code)
                end
        // other
            elseif current:category = constants:PACKAGE_NAME
                isPackageStatement = true
            elseif current:category = constants:USE
                isUseStatement = true
            end
    
            if editor:GetFailState()
                editor:SetCode(editor:GetCode())
                return now
            end
            /*
            Read the code, and if it's valid, try to parse it.
            */
            CompilerErrorManager manager
            QuorumLexer lexer
            lexer:SetCompilerErrorManager(manager)
            lexer:Read(code)
            
            // If there's an error, set the block to reflect it, then bail.
            if not manager:IsCompilationErrorFree()
                // TO-DO: Set error state visuals
                SetErrorVisual()
                return now
            end
    
            QuorumParser parser
            parser:SetCompilerErrorManager(manager)
            parser:SetLexer(lexer)
    
            // Set the initial information for the listener. This gives it offset info it needs to calculate correct values.
            blockListener:SetSourceBlock(me)
    
            /*
            If the freeform block is attached to a class, we need to parse a class statement,
            which might be a full on action declaration.
            We can check for this by testing if our grandparent is a class block (which can only
            hold if our direct parent is one of the block parts of the class block).
            */
            if GetParentBlock() is MultipleLineBlockPart and GetParentBlock():GetParentBlock() is ClassBlock
                ClassStatementsContext statement = parser:ClassStatement()
    
                if statement not= undefined
                    if parser:HasNext()
                        SetErrorVisual()
                        return now
                    end
                    blockListener:EnterClassStatements(statement)
                end
                if blockListener:GetBlock() = undefined
                    blockListener:SetQuorumLexer(lexer)
                    blockListener:FillComment()
                end
            elseif isPackageStatement
                PackageContext context = parser:Package()
                if context not= undefined
                    if parser:HasNext()
                        SetErrorVisual()
                        return now
                    end
                    blockListener:EnterPackageRule(context)
                end
            elseif isUseStatement
                UseContext context = parser:Use()
                if context not= undefined
                    if parser:HasNext()
                        SetErrorVisual()
                        return now
                    end
                    blockListener:EnterUse(context)
                end
            elseif isClassStatement
                FullClassDeclarationContext context = parser:FullClass()
                if context not= undefined
                    if parser:HasNext()
                        SetErrorVisual()
                        return now
                    end
                    context:Traverse(blockListener)
                end
            elseif isActionStatement
                ParseContext context = parser:ActionDeclaration()
if context is ActionContext
                    if parser:HasNext()
                        SetErrorVisual()
                        return now
                    end
                    ActionContext actionContext = cast(ActionContext, context)
                    blockListener:EnterAction(actionContext)
                    blockListener:EnterActionHeader(actionContext)
                    blockListener:ExitActionHeader(actionContext)
                    blockListener:ExitAction(actionContext)
                end
            else
                // If we're not in a class, parse for a standard statement. 
                // If you KNOW you are inside of an action, you use this
                StatementContext statement = parser:Statement()
    
                if statement not= undefined
                    if parser:HasNext()
                        SetErrorVisual()
                        return now
                    end
                    blockListener:EnterStatement(statement)
                end
                if blockListener:GetBlock() = undefined
                    blockListener:SetQuorumLexer(lexer)
                    blockListener:FillComment()
                end
            end
    
            // Once again, if there's an error, set the block to reflect it, then bail.
            if not manager:IsCompilationErrorFree() and not (blockListener:GetBlock() is CommentBlock and isEmpty)
                // TO-DO: Set error state visuals
                SetErrorVisual()
                return now
            end
            EndUndo()
            // Once we've parsed, the listener will give us a block (if there's a valid option). It's stored here.
            Block result = blockListener:GetBlock()
    
            // If we have a valid block, replace this Freeform block with the new one.
            if result not= undefined
                editor:Replace(me, result)
            end
        detect e
            SharedLogger logger
            text value = e:GetStackTraceMessage()
            logger:Log(value)
        end
    end

    action GetTextBox returns EditBox
        return editRegion
    end

end