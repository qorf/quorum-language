package Libraries.Interface.Controls.Blocks

use Libraries.Language.Compile.QuorumSourceListener
use Libraries.Language.Compile.Context.all
use Libraries.Interface.Controls.Blocks.all
use Libraries.Language.Compile.Location
use Libraries.Language.Compile.Parsing.Token
use Libraries.Language.Compile.Parsing.QuorumLexer

class FreeformBlockListener is QuorumSourceListener

    /*
    When parsing multiple line blocks, the parts of the multi-line block require parent
    indexing information to be correct. The dummy root is used to provide this information
    during construction, and the correct parent is swapped in later.
    */
    FreeformDummyRootBlock dummyRoot
    
    // Offsets used to adjust location and token indices to match the global text, since we parse only smaller subsections with this class.
    integer indexOffset = -1
    integer lineOffset = -1
    integer scopeDepth = -1
    
    // The resulting block produced by a parse.
    Block block = undefined

    // used to find comments
    integer recentToken = -1
    QuorumLexer lexer = undefined

    action SetSourceBlock(FreeformBlock sourceBlock)
        dummyRoot:EmptyChildBlocks()
        dummyRoot:SetBlockEnvironment(sourceBlock:GetBlockEnvironment())

        Block parentBlock = sourceBlock:GetParentBlock()
        dummyRoot:SetLocalStartIndex(parentBlock:GetStartIndex())
        dummyRoot:SetLocalEndIndex(parentBlock:GetEndIndex())
        dummyRoot:SetLocalStartLine(parentBlock:GetStartLine())
        dummyRoot:SetLocalEndLine(parentBlock:GetEndLine())

        indexOffset = sourceBlock:GetStartIndex()
        lineOffset = sourceBlock:GetStartLine()
        scopeDepth = sourceBlock:GetScopeDepth()

        block = undefined
    end

    action EnterDocumentation(DocumentationContext context) end
    action ExitDocumentation(DocumentationContext context) end

    action FillComment()
        i = recentToken + 1
        repeat while i < lexer:GetSize()
            Token next = lexer:GetToken(i)
            boolean isComment = next:IsCommentChannel()
            if isComment
                OffsetToken(next)
                CommentBlock comment
                comment:SetIsMultiLineComment(next:IsMultiLineComment())
                comment:SetToken(next)
                comment:SetScopeDepth(scopeDepth)
                comment:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
                block = comment
                return now
            end
            i = i + 1
        end

        recentToken = lexer:GetSize()
    end

    action EnterNoActionsNoClass(NoActionsNoClassContext context) end
    action ExitNoActionsNoClass(NoActionsNoClassContext context) end

    action EnterActionsNoClass(ActionsNoClassContext context)
 end
    action ExitActionsNoClass(ActionsNoClassContext context)
 end
    
    action EnterNumber(NumberContext context) end
    action ExitNumber(NumberContext context) end

    action EnterParenthesisExpression(ParenthesisContext context) end
    action ExitParenthesisExpression(ParenthesisContext context) end

    action EnterCast(CastContext context) end
    action ExitCast(CastContext context) end

    action EnterSayStatement(SayContext context)
        ParseContext expression = context:expression
        if expression not= undefined
            /*
            TO-DO: The "expression" location is initialized as 0 if the statement is
            of the format: output IDENTIFIER
            This causes the OutputBlock to fail to get the right indices for where the expression text should be
            */

            // Offset location indices for this context to match the overall text.
            OffsetLocation(context:GetLocation())
            OffsetLocation(context:expression:GetLocation())

            SayBlock result
            result:SetScopeDepth(scopeDepth)
            result:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
            result:SetSayContext(context)
            block = result
        end
    end
    action ExitSayStatement(SayContext context) end

    action EnterCheckStatement(CheckContext context)
        // Correct the locations for the IfContext and its related components.
        OffsetLocation(context:GetLocation())

        CheckBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        dummyRoot:Add(cast(Block, block))

        me:block = block
        block:AddStartLine()
    end
    action ExitCheckStatement(CheckContext context)
        // The current block must be one of the parts of an if block. Get the if block from the part.
        CheckBlock checkBlock = cast(CheckBlock, block)
        
        // Add the last line of the if block.
        checkBlock:AddEndLine()

        // Now that all parts have been added, call Setup on the block.
        checkBlock:Setup()
    end

    action EnterParentFieldAccess(ParentFieldAccessContext context) end
    action ExitParentFieldAccess(ParentFieldAccessContext context) end

    action EnterFullClassDeclaration(FullClassDeclarationContext ctx)
        OffsetLocation(ctx:GetLocation())
        OffsetLocation(ctx:classNameLocation)
        if ctx:generic not= undefined
            OffsetLocation(ctx:generic:GetLocation())
        end
        if ctx:inherit not= undefined
            OffsetLocation(ctx:inherit:GetLocation())
            integer i = 0
            repeat while i <ctx:inherit:statements:GetSize()
                OffsetLocation(ctx:inherit:statements:Get(i):GetLocation())
                i = i + 1
            end
        end
        // FOR NOW we're not offseting the class statements because we assume we're making an empty class
        ClassBlock block
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetFullClass(ctx)
        
        dummyRoot:Add(cast(Block, block))
        me:block = block
        MultipleLineBlockPart startLine = block:AddStartLine()
    end
    action ExitFullClassDeclaration(FullClassDeclarationContext ctx)
        ClassBlock classBlock = cast(ClassBlock, block)
        classBlock:AddEndLine()
        classBlock:Setup()
    end

    action EnterNoClassDeclaration(NoClassDeclarationContext ctx) end
    action ExitNoClassDeclaration(NoClassDeclarationContext ctx)  end

    action EnterFormalParameter(FormalParameterContext context) end
    action ExitFormalParameter(FormalParameterContext context) end

    action EnterStatement(StatementContext context) 
        ParseContext pc = context:statement
        if pc not= undefined
            pc:Traverse(me)
        end
    end

    action ExitStatement(StatementContext context) end

    action EnterMe(MeContext context) end
    action ExitMe(MeContext context) end

    action EnterActionExpressionList(ActionExpressionListContext context) end
    action ExitActionExpressionList(ActionExpressionListContext context) end

    action EnterStart(StartContext context) end
    action ExitStart(StartContext context) end

    action EnterText(TextContext context) end
    action ExitText(TextContext context) end

    action EnterOr(AndOrContext context) end
    action ExitOr(AndOrContext context) end

    action EnterOutputStatement(OutputContext context) 
        ParseContext expression = context:expression
        if expression not= undefined
            /*
            TO-DO: The "expression" location is initialized as 0 if the statement is
            of the format: output IDENTIFIER
            This causes the OutputBlock to fail to get the right indices for where the expression text should be
            */

            // Offset location indices for this context to match the overall text.
            OffsetLocation(context:GetLocation())
            OffsetLocation(context:expression:GetLocation())

            OutputBlock result
            result:SetScopeDepth(scopeDepth)
            result:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
            result:SetOutputContext(context)
            block = result
        end
    end

    action ExitOutputStatement(OutputContext context) end

    action EnterSystemAction(ActionContext context) end
    action ExitSystemAction(ActionContext context) end

    action EnterConstructor(ConstructorContext context)
        OffsetLocation(context:GetLocation())
        ConstructorBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)
        
        dummyRoot:Add(cast(Block, block))
        me:block = block
        MultipleLineBlockPart startLine = block:AddStartLine()
        scopeDepth = scopeDepth + 1
    end
    action ExitConstructor(ConstructorContext context)
        ConstructorBlock block = cast(ConstructorBlock, me:block)
        block:AddEndLine()
        block:Setup()
        scopeDepth = scopeDepth - 1
    end

    action EnterBlueprintAction(ActionContext context) end
    action ExitBlueprintAction(ActionContext context) end

    action EnterActionHeader(ActionContext context)
        OffsetLocation(context:GetLocation())
        OffsetLocation(context:actionNameLocation)
        integer i = 0
        if context:parameterContexts not= undefined
            repeat while i < context:parameterContexts:GetSize()
                OffsetLocation(context:parameterContexts:Get(i):GetLocation())
                i = i + 1
            end
        end
        if context:leftParen not= undefined and context:rightParen not= undefined
            OffsetToken(context:leftParen)
            OffsetToken(context:rightParen)
        end
        if context:returnsStatement not= undefined
            OffsetLocation(context:returnsStatement:GetLocation())
        end
        if context:returnLocation not= undefined 
            OffsetLocation(context:returnLocation)
        end
        ActionBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetActionContext(context)

        dummyRoot:Add(cast(Block, block))
        me:block = block

        MultipleLineBlockPart startLine = block:AddStartLine()

        // system and blueprint actions are single line blocks
        if not context:isSystem and not context:isBlueprint
            scopeDepth = scopeDepth + 1
        else
            // Don't change the current block, as this is essentially a single line block. Set up the block immediately.
            block:Setup()
        end
    end
    action ExitActionHeader(ActionContext context)
 end

    action EnterAction(ActionContext context)
 end
    action ExitAction(ActionContext context)
        if not context:isSystem and not context:isBlueprint
            // The current block must be one of the parts of an action block. Get the action block from the part.
            ActionBlock actionBlock = cast(ActionBlock, me:block)
            
            // Add the last line of the action block.
            actionBlock:AddEndLine()
    
            // Now that all parts have been added, call Setup on the block.
            actionBlock:Setup()
    
            scopeDepth = scopeDepth - 1
        end
    end

    action EnterGenericStatement(GenericContext context) end
    action ExitGenericStatement(GenericContext context) end

    action EnterAnd(AndOrContext context) end
    action ExitAnd(AndOrContext context) end

    action EnterUndefined(UndefinedContext context) end
    action ExitUndefined(UndefinedContext context) end

    action EnterIs(IsContext context) end
    action ExitIs(IsContext context) end

    action EnterIfStatement(IfContext context)
        // Correct the locations for the IfContext and its related components.
        OffsetLocation(context:GetLocation())
        OffsetLocation(context:ifExpression:GetLocation())
        if context:elseLocation not= undefined
            OffsetLocation(context:elseLocation)
        end
        integer i = 0
        repeat while i < context:elseIfExpressions:GetSize()
            OffsetLocation(context:elseIfExpressions:Get(i):GetLocation())
            OffsetToken(context:elseIfTokens:Get(i))
            i = i + 1
        end

        IfBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        dummyRoot:Add(cast(Block, block))

        me:block = block
        block:AddStartLine()
    end

    action ExitIfStatement(IfContext context)
        // The current block must be one of the parts of an if block. Get the if block from the part.
        IfBlock ifBlock = cast(IfBlock, block)
        
        // Add the last line of the if block.
        ifBlock:AddEndLine()

        // Now that all parts have been added, call Setup on the block.
        ifBlock:Setup()
    end

    action EnterElseIfStatement(IfContext context)
        // The current block must be one of the parts of an if block. Get the if block from the part.
        IfBlock ifBlock = cast(IfBlock, block)

        MultipleLineBlockPart newPart = ifBlock:AddElseifLine(ifBlock:GetChildCount() - 1)
    end

    action ExitElseIfStatement(IfContext context)
    end

    action EnterElseStatement(IfContext context) 
        // The current block must be one of the parts of an if block. Get the if block from the part.
        IfBlock ifBlock = cast(IfBlock, block)

        MultipleLineBlockPart newPart = ifBlock:AddElseLine()
    end

    action ExitElseStatement(IfContext context) 
    end

    action EnterAccessModifier(AccessModifierContext context) end
    action ExitAccessModifier(AccessModifierContext context) end

    action EnterBlock(BlockContext context) end
    action ExitBlock(BlockContext context) end

    action EnterClassStatements(ClassStatementsContext context) 
        ParseContext pc = context:statement
        if pc not= undefined
            pc:Traverse(me)
        end
    end
    action ExitClassStatements(ClassStatementsContext context) end

    action EnterQualifiedName(QualifiedNameContext context) end
    action ExitQualifiedName(QualifiedNameContext context) end

    action EnterLoopStatement(LoopContext context)
        OffsetLocation(context:GetLocation())
        OffsetLocation(context:expression:GetLocation())
        OffsetToken(context:timesToken)

        RepeatBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        dummyRoot:Add(cast(Block, block))

        me:block = block
        block:AddStartLine()
        scopeDepth = scopeDepth + 1
    end
    action ExitLoopStatement(LoopContext context)
        RepeatBlock repeatBlock = cast(RepeatBlock, block)
        repeatBlock:AddEndLine()
        repeatBlock:Setup()
        scopeDepth = scopeDepth - 1
    end

    action EnterAssignmentDeclaration(AssignmentDeclaractionContext context) end
    action ExitAssignmentDeclaration(AssignmentDeclaractionContext context) end

    action EnterInheritStatements(InheritStatementsContext context) end
    action ExitInheritStatements(InheritStatementsContext context) end

    action EnterInheritStatement(InheritStatementContext context) end
    action ExitInheritStatement(InheritStatementContext context) end

    action EnterDetectStatement(DetectStatementContext context)
        OffsetLocation(context:GetLocation())
        OffsetLocation(context:nameLocation)
        if context:qualifiedNameContexts not= undefined
            integer i = 0
            repeat while i < context:qualifiedNameContexts:GetSize()
                OffsetLocation(context:qualifiedNameContexts:Get(i):GetLocation())
                i = i + 1
            end
        end
        CheckBlock checkBlock = cast(CheckBlock, block)

        MultipleLineBlockPart newPart = checkBlock:AddDetectLine(context)
    end
    action ExitDetectStatement(DetectStatementContext context) end

    action EnterAlwaysStatement(AlwaysStatementContext context)
        OffsetLocation(context:GetLocation())
        CheckBlock checkBlock = cast(CheckBlock, block)

        MultipleLineBlockPart newPart = checkBlock:AddAlwaysLine(context)
    end
    action ExitAlwaysStatement(AlwaysStatementContext context) end

    action EnterAddition(AdditionContext addition) end
    action ExitAddition(AdditionContext addition) end

    action EnterReturnStatement(ReturnContext context) 
        OffsetLocation(context:GetLocation())
        if context:expression not= undefined
            OffsetLocation(context:expression:GetLocation())
        end
        ReturnBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)
        
        me:block = block
    end
    action ExitReturnStatement(ReturnContext context) end

    action EnterInput(InputContext context) end
    action ExitInput(InputContext context) end

    action EnterInputNoParameters(InputContext context) end
    action ExitInputNoParameters(InputContext context) end

    action EnterMultiplication(MultiplicationContext context) end
    action ExitMultiplication(MultiplicationContext context) end

    action EnterMinus(UnaryMinusContext context) end
    action ExitMinus(UnaryMinusContext context) end

    action EnterBoolean(BooleanContext context) end
    action ExitBoolean(BooleanContext context) end

    action EnterAlertStatement(AlertContext context)
        OffsetLocation(context:GetLocation())
        OffsetLocation(context:expression:GetLocation())

        AlertBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block

    end
    action ExitAlertStatement(AlertContext context) end

    action EnterUse(UseContext context) 
        OffsetLocation(context:GetLocation())
        if context:nameContext not= undefined
            OffsetLocation(context:nameContext:GetLocation())
        end
        UseBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitUse(UseContext context) end

    action EnterNot(NotContext context) end
    action ExitNot(NotContext context) end

    action EnterGenericDeclaration(GenericDeclarationContext context) end
    action ExitGenericDeclaration(GenericDeclarationContext context) end

    action EnterClassType(ClassTypeContext context) end
    action ExitClassType(ClassTypeContext context) end

    action EnterEquals(EqualsContext context) end
    action ExitEquals(EqualsContext context) end

    action EnterInequality(InequalityContext context) end
    action ExitInequality(InequalityContext context) end

    action EnterInteger(IntegerContext int) end
    action ExitInteger(IntegerContext int) end

    action EnterPackageRule(PackageContext context)
        OffsetLocation(context:GetLocation())
        if context:nameContext not= undefined
            OffsetLocation(context:nameContext:GetLocation())
        end

        PackageBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitPackageRule(PackageContext context) end

    action EnterNormalAssignment(NormalAssignmentContext context)

        OffsetLocation(context:GetLocation())
        OffsetLocation(context:typeLocation)
        OffsetLocation(context:variableLocation)
        OffsetLocation(context:declaration:GetLocation())
        if context:expression not= undefined
            OffsetLocation(context:expression:GetLocation())
        end
        AssignmentBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitNormalAssignment(NormalAssignmentContext context) end

    action EnterParentAssignment(ParentAssignmentContext context)
        OffsetLocation(context:GetLocation())
        OffsetLocation(context:variableLocation)
        OffsetLocation(context:expression:GetLocation())

        AssignmentBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitParentAssignment(ParentAssignmentContext context) end

    action EnterObjectAssignment(ObjectAssignmentContext context)

        OffsetLocation(context:GetLocation())
        OffsetLocation(context:variableLocation)
        OffsetLocation(context:typeLocation)
        OffsetLocation(context:expression:GetLocation())

        AssignmentBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitObjectAssignment(ObjectAssignmentContext context) end

    action EnterNoTypeAssignment(NoTypeAssignmentContext context)
        OffsetLocation(context:GetLocation())
        OffsetLocation(context:variableLocation)
        OffsetLocation(context:expression:GetLocation())

        AssignmentBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitNoTypeAssignment(NoTypeAssignmentContext context) end

    action EnterMeVariableAccess(MeVariableAccessContext context) end
    action ExitMeVariableAccess(MeVariableAccessContext context) end

    action EnterVariableSoloFunctionCall(VariableFunctionCallContext context)
        OffsetLocation(context:GetLocation())

        ActionCallBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitVariableSoloFunctionCall(VariableFunctionCallContext context) end

    action EnterParentVariableSoloFunctionCall(ParentVariableFunctionCallContext context)
        OffsetLocation(context:GetLocation())

        ActionCallBlock block
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(dummyRoot:GetBlockEnvironment())
        block:SetContext(context)

        me:block = block
    end
    action ExitParentVariableSoloFunctionCall(ParentVariableFunctionCallContext context) end

    action EnterInitialParentActionCall(ActionCallContext ctx) end
    action ExitInitialParentActionCall(ActionCallContext ctx) end

    action EnterVariableFunctionCall(VariableFunctionCallContext context) end
    action ExitVariableFunctionCall(VariableFunctionCallContext context) end

    action EnterParentVariableFunctionCall(ParentVariableFunctionCallContext context) end
    action ExitParentVariableFunctionCall(ParentVariableFunctionCallContext context) end

    action EnterActionCall(ActionCallContext ctx) end
    action ExitActionCall(ActionCallContext ctx) end

    private action OffsetLocation(Location location)
        if location not= undefined
            location:SetIndex(location:GetIndex() + indexOffset)
            location:SetIndexEnd(location:GetIndexEnd() + indexOffset)
            location:SetLineNumber(location:GetLineNumber() + lineOffset)
            location:SetLineNumberEnd(location:GetLineNumberEnd() + lineOffset)
        end
    end

    private action OffsetToken(Token token)
        if token not= undefined
            token:startIndex = token:startIndex + indexOffset
            token:endIndex = token:endIndex + indexOffset
            token:startLine = token:startLine + lineOffset
            token:endLine = token:endLine + lineOffset
        end
    end

    action GetBlock returns Block
        return block
    end

    action GetQuorumLexer returns QuorumLexer
        return lexer
    end

    action SetQuorumLexer(QuorumLexer lexer)
        me:lexer = lexer
    end

end