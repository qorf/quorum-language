package Libraries.Interface.Controls.Blocks.Palette

use Libraries.Data.Formats.MarkupListener
use Libraries.Data.Formats.Element
use Libraries.Containers.Stack
use Libraries.Interface.Controls.Blocks.Palette.BlockPalettePage
use Libraries.Containers.Array
use Libraries.Interface.Controls.Blocks.Palette.BlockPalette
use Libraries.Data.Formats.AttributesImplementation
use Libraries.Interface.Forms.Banner
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Label

class BlockPaletteMarkupListener is MarkupListener
    
    Stack<Element> elementStack 
    Element currentElement
    
    boolean doneReading = false
    
    BlockPalette palette = undefined
    BlockPalettePage currentPage = undefined
    Array<BlockPalettePage> customPages
    text bannerTitle = ""
    text bannerSubtitle = ""
    text selectedPage = ""
    boolean showBasic = true
boolean showControl = true
boolean showAction = true
    
    text iconFontPath = ""
    text iconFontName = ""
    
    boolean readingIcon = false
    text iconCharacter = ""
    integer iconUnicode = 0
    text iconFilePath = ""
    boolean iconHasColor = false
    number iconRed = 0
    number iconGreen = 0
    number iconBlue = 0
    number iconAlpha = 1
    
    //Information for icons related to the default categories available in the BlockPalette.
    boolean hasBasicIcon = false
text basicIconCharacter = ""
    integer basicIconUnicode = 0
    text basicIconFilePath = ""
    Color basicIconColor = undefined
    
    boolean hasControlIcon = false
text controlIconCharacter = ""
    integer controlIconUnicode = 0
    text controlIconFilePath = ""
    Color controlIconColor = undefined
    
    boolean hasActionIcon = false
text actionIconCharacter = ""
    integer actionIconUnicode = 0
    text actionIconFilePath = ""
    Color actionIconColor = undefined
    
    boolean hasSuggestionIcon = false
text suggestionIconCharacter = ""
    integer suggestionIconUnicode = 0
    text suggestionIconFilePath = ""
    Color suggestionIconColor = undefined
    
    on create
        Setup()
    end
    
    action Setup
        doneReading = false
        elementStack:Empty()
        currentElement = undefined
        bannerTitle = ""
        bannerSubtitle = ""
        customPages:Empty()
        currentPage = undefined
        
iconFontPath = ""
    iconFontName = ""
    
    readingIcon = false
    iconCharacter = ""
    iconUnicode = 0
    iconFilePath = ""
    iconHasColor = false
    iconRed = 0
    iconGreen = 0
    iconBlue = 0
    iconAlpha = 1
    end
    
action StartElement(Element element)
        elementStack:Push(element)
        elementName = element:GetName()
        currentElement = element
        if elementName = "palette"
if elementStack:GetSize() not= 1
                alert("palette tag is not the first element")
            end
AttributesImplementation attributes = element:GetAttributes()
        integer i = 0
        repeat attributes:GetSize() times
            if attributes:GetName(i) = "selectedPage"
                    selectedPage = attributes:GetValue(i)
                end
if attributes:GetName(i) = "showBasic"
                    if attributes:GetValue(i):Trim() = "false" 
                        showBasic = false
                    end
                end
if attributes:GetName(i) = "showControl"
if attributes:GetValue(i):Trim() = "false" 
                        showControl = false
                    end
                end
if attributes:GetName(i) = "showAction"
if attributes:GetValue(i):Trim() = "false" 
                        showAction = false
                    end
                end
                if attributes:GetName(i) = "iconFontPath"
                    iconFontPath = attributes:GetValue(i):Trim()
                end
                if attributes:GetName(i) = "iconFontName"
                    iconFontName = attributes:GetValue(i):Trim()
                end
            i = i + 1
        end
        elseif elementName = "page"
BlockPalettePage page
            page:SetPalette(me:palette)
            currentPage = page
AttributesImplementation attributes = element:GetAttributes()
        integer i = 0
        repeat attributes:GetSize() times
            if attributes:GetName(i) = "name"
                    currentPage:SetName(attributes:GetValue(i))
                end
            i = i + 1
        end
elseif elementName = "banner"
bannerTitle = ""
            bannerSubtitle = ""
        elseif elementName = "icon"
            if currentPage = undefined
                // Bad file
                doneReading = true
            else
readingIcon = true
            end
        elseif elementName = "basicIcon"
            hasBasicIcon = true
            readingIcon = true
        elseif elementName = "controlIcon"
            hasControlIcon = true
            readingIcon = true
        elseif elementName = "actionIcon"
            hasActionIcon = true
            readingIcon = true
        elseif elementName = "suggestionIcon"
            hasSuggestionIcon = true
            readingIcon = true
        end
    end
    
    action Value(text value)
        if doneReading
            return now
        end
        Element current = elementStack:Peek()
        text name = current:GetName()
        value = value:Trim()
        
        if name = "title"
            bannerTitle = value
            elseif name = "subtitle"
            bannerSubtitle = value
            elseif name = "header"
            integer fontSize = currentPage:HEADER_SIZE
Label label = currentPage:AddLabel(value)
label:SetFontSize(fontSize)
            label:SetLeftAlignment()
            elseif name = "subheading"
            integer fontSize = currentPage:HEADER2_SIZE
            Label label = currentPage:AddLabel(value)
label:SetFontSize(fontSize)
            label:SetLeftAlignment()
elseif name = "text"
            integer fontSize = currentPage:LABEL_SIZE
currentPage:AddLabel(value):SetFontSize(fontSize)
elseif name = "block"
            currentPage:AddBlockPaletteItem(value)
            // parse then add block palette item
        elseif name = "character" and readingIcon
            iconCharacter = value
        elseif name = "unicode" and readingIcon
            check
                iconUnicode = cast(integer, value)
            detect error
                // Bad file
                doneReading = true
            end
        elseif name = "filePath" and readingIcon
            iconFilePath = value
        elseif name = "red" and readingIcon
            check
                iconRed = cast(number, value)
            detect error
// Bad file
                doneReading = true
            end
elseif name = "green" and readingIcon
            check
                iconGreen = cast(number, value)
            detect error
// Bad file
                doneReading = true
            end
elseif name = "blue" and readingIcon
            check
                iconBlue = cast(number, value)
            detect error
// Bad file
                doneReading = true
            end
elseif name = "alpha" and readingIcon
            check
                iconAlpha = cast(number, value)
            detect error
// Bad file
                doneReading = true
            end
        else
            // Bad file
            doneReading = true
        end
    end
    
    action EndElement(Element element)
        Element topOfStack = elementStack:Pop()
        if topOfStack:GetName()= "palette"
            doneReading = true
        elseif topOfStack:GetName()= "page"
            customPages:AddToEnd(currentPage)
            currentPage = undefined
elseif topOfStack:GetName()= "banner"
            Banner banner = currentPage:AddBanner(bannerTitle, bannerTitle, bannerSubtitle)
            if bannerSubtitle not= ""
                banner:GetLabel():SetFontSize(currentPage:LABEL_SIZE)
            end
        elseif topOfStack:GetName() = "icon"
            readingIcon = false
            if iconUnicode not= 0
                currentPage:SetIconUnicode(iconUnicode)
            elseif iconCharacter not= ""
                currentPage:SetIconUnicode(iconCharacter:GetUnicodeInteger(0))
            end
            if iconFilePath not= ""
                currentPage:SetIconFilePath(iconFilePath)
            end
            if iconHasColor
                Color color
                color:SetColor(iconRed, iconGreen, iconBlue, iconAlpha)
                currentPage:SetIconColor(color)
            end
    iconCharacter = ""
    iconUnicode = 0
    iconFilePath = ""
    hasColor = false
    iconRed = 0
    iconGreen = 0
    iconBlue = 0
    iconAlpha = 1
        elseif topOfStack:GetName() = "basicIcon"
            readingIcon = false
            basicIconUnicode = iconUnicode
            basicIconCharacter = iconCharacter
            basicIconFilePath = iconFilePath
            if iconHasColor
                Color color
                color:SetColor(iconRed, iconGreen, iconBlue, iconAlpha)
                basicIconColor = color
            end
iconCharacter = ""
    iconUnicode = 0
    iconFilePath = ""
    hasColor = false
    iconRed = 0
    iconGreen = 0
    iconBlue = 0
    iconAlpha = 1
elseif topOfStack:GetName() = "controlIcon"
readingIcon = false
            controlIconUnicode = iconUnicode
            controlIconCharacter = iconCharacter
            controlIconFilePath = iconFilePath
            if iconHasColor
                Color color
                color:SetColor(iconRed, iconGreen, iconBlue, iconAlpha)
                controlIconColor = color
            end
iconCharacter = ""
    iconUnicode = 0
    iconFilePath = ""
    hasColor = false
    iconRed = 0
    iconGreen = 0
    iconBlue = 0
    iconAlpha = 1
elseif topOfStack:GetName() = "actionIcon"
readingIcon = false
            actionIconUnicode = iconUnicode
            actionIconCharacter = iconCharacter
            actionIconFilePath = iconFilePath
            if iconHasColor
                Color color
                color:SetColor(iconRed, iconGreen, iconBlue, iconAlpha)
                actionIconColor = color
            end
iconCharacter = ""
    iconUnicode = 0
    iconFilePath = ""
    hasColor = false
    iconRed = 0
    iconGreen = 0
    iconBlue = 0
    iconAlpha = 1
elseif topOfStack:GetName() = "suggestionIcon"
readingIcon = false
            actionIconUnicode = iconUnicode
            actionIconCharacter = iconCharacter
            actionIconFilePath = iconFilePath
            if iconHasColor
                Color color
                color:SetColor(iconRed, iconGreen, iconBlue, iconAlpha)
                actionIconColor = color
            end
iconCharacter = ""
    iconUnicode = 0
    iconFilePath = ""
    hasColor = false
    iconRed = 0
    iconGreen = 0
    iconBlue = 0
    iconAlpha = 1
        end
    end

    action SetPalette(BlockPalette palette)
        me:palette = palette
    end

    action GetPalette returns BlockPalette
        return palette
    end

    action GetCustomPages returns Array<BlockPalettePage>
        return customPages
    end
    
    action GetSelectedPage returns text
        return selectedPage
    end

    action GetShowBasic returns boolean
        return showBasic
    end

    action GetShowControl returns boolean
        return showControl
    end

    action GetShowAction returns boolean
        return showAction
    end

    action GetIconFontPath returns text
        return iconFontPath
    end

    action GetIconFontName returns text
        return iconFontName
    end
    
    action HasBasicIcon returns boolean
        return hasBasicIcon
    end
    
    action HasControlIcon returns boolean
        return hasControlIcon
    end
    
    action HasActionIcon returns boolean
        return hasActionIcon
    end
    
    action HasSuggestionIcon returns boolean
        return hasSuggestionIcon
    end

    action GetBasicIconCharacter returns text
        return basicIconCharacter
    end

    action GetBasicIconUnicode returns integer
        return basicIconUnicode
    end

    action GetBasicIconFilePath returns text
        return basicIconFilePath
    end

    action GetBasicIconColor returns Color
        return basicIconColor
    end

    action GetControlIconCharacter returns text
        return controlIconCharacter
    end

    action GetControlIconUnicode returns integer
        return controlIconUnicode
    end

    action GetControlIconFilePath returns text
        return controlIconFilePath
    end

    action GetControlIconColor returns Color
        return controlIconColor
    end

    action GetActionIconCharacter returns text
        return actionIconCharacter
    end

    action GetActionIconUnicode returns integer
        return actionIconUnicode
    end

    action GetActionIconFilePath returns text
        return actionIconFilePath
    end

    action GetActionIconColor returns Color
        return actionIconColor
    end

    action GetSuggestionIconCharacter returns text
        return suggestionIconCharacter
    end

    action GetSuggestionIconUnicode returns integer
        return suggestionIconUnicode
    end

    action GetSuggestionIconFilePath returns text
        return suggestionIconFilePath
    end

    action GetSuggestionIconColor returns Color
        return suggestionIconColor
    end

end
