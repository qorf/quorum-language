package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.EditField
use Libraries.Interface.Controls.Blocks.BlockLabel
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Language.Compile.Context.all
use Libraries.Language.Compile.Location
use Libraries.Interface.Controls.Layouts.ScopeBlockLayout
use Libraries.Interface.Controls.Layouts.SingleLineBlockLayout

class PackageBlock is SingleLineBlock

    BlockLabel useLabel = undefined
    PackageContext packageContext = undefined
    EditField nameField = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:PACKAGE_KEY)

        SingleLineBlockLayout layout
        SetLayout(layout)

        SetName("Package Block")
    end

    action UpdateName(integer selectedLine)
        // TO-DO: NYI
        // This should be the entire text read by the screen reader when focused, not just the "output" portion
        SetName("package")
    end

    action SetupElements
        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)

        BlockLabel bl
        me:useLabel = bl
        useLabel:SetFont(editor:GetFont())
        useLabel:SetFontSize(editor:GetFontSize())
        useLabel:SetText("package")
        useLabel:SetRightPadding(spacing)
        Add(useLabel)

        ParseContext name = packageContext:nameContext
        if name = undefined //this is an error. Should we flag it in the user interface?
            return now
        end

        Location location = name:GetLocation()
        

        EditField nameField
        me:nameField = nameField
        Add(nameField)

        nameField:Setup("Name", location:GetIndex() - GetStartIndex(), 1 + location:GetIndexEnd() - GetStartIndex())
        nameField:AddTopLabel("Name")
    end

    action GetPackageContext returns PackageContext
        return packageContext
    end

    action SetContext(PackageContext context)
        me:packageContext = context
        SetContext(cast(ParseContext,context))
    end

end