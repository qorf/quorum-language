package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Interface.Controls.Blocks.EditField
use Libraries.Interface.Controls.Blocks.BlockLabel
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Language.Compile.Context.ActionContext
use Libraries.Interface.Controls.Layouts.SingleLineBlockLayout
use Libraries.Containers.Array
use Libraries.Language.Compile.Context.FormalParameterContext
use Libraries.Language.Compile.Location
use Libraries.Interface.Controls.Layouts.MultipleLineBlockLayout

class ActionBlock is MultipleLineBlock

    BlockLabel accessModifierLabel = undefined
    BlockLabel systemLabel = undefined
    BlockLabel blueprintLabel = undefined

    BlockLabel actionLabel = undefined
    EditField nameField = undefined

    BlockLabel leftParen = undefined
    BlockLabel rightParen = undefined
    EditBox paramField = undefined

    BlockLabel returnsLabel = undefined
    EditField returnField = undefined

    ActionContext actionContext = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:ACTION_KEY)

        MultipleLineBlockLayout layout
        SetLayout(layout)
        SetName("Action Block")
    end
    
    action GetBlockName returns text
        if nameField not= undefined
            return nameField:GetText() + " Action"
        end
        return "Action"
    end
    
    action GetBlockDescription returns text
        text actionDesc = ""
        if paramField not= undefined
            actionDesc = "Parameters: " + paramField:GetText() + actionDesc:GetLineFeed()
        end
        if returnField not= undefined
            actionDesc = actionDesc + "Returns: " + returnField:GetText()
        end
        if actionDesc not= ""
            return actionDesc
        end
        return "This Action Block is used to define actions which are behaviors that a program can take. They are useful for many reasons, including at least that they 1) allow us to reuse code, 2) can sometimes make it easier to separate out functionality in complex software, and they 3) allow us to break up a program's functionaity between different people on a team."
    end

    action IsSystemAction returns boolean
        return actionContext:isSystem
    end

    action IsBlueprintAction returns boolean
        return actionContext:isBlueprint
    end

    action HasReturn returns boolean
        return returnsLabel not= undefined
    end

    private action SetupElements
        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)
    end

    action AddStartLine returns MultipleLineBlockPart
        MultipleLineBlockPart part
        Add(part)

        part:UseEnterScopeStyling()

        // The start line is always the beginning of the multi-block, so it always starts at local index 0.
        part:SetLocalStartIndex(0)

        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        
        integer localEndLine = 0

        if actionContext:access not= undefined
            BlockLabel accessModifierLabel
            me:accessModifierLabel = accessModifierLabel
            accessModifierLabel:SetFont(GetLabelFont())
            accessModifierLabel:SetFontSize(editor:GetFontSize())
            if actionContext:access:isPrivate
                accessModifierLabel:SetText("private")
            else
                accessModifierLabel:SetText("public")
            end
            accessModifierLabel:SetRightPadding(spacing)
            part:Add(accessModifierLabel)
        end

        if IsSystemAction()
            part:UseNeutralScopeStyling()
            BlockLabel systemLabel
            me:systemLabel = systemLabel
            systemLabel:SetFont(GetLabelFont())
            systemLabel:SetFontSize(editor:GetFontSize())
            systemLabel:SetText("system")
            systemLabel:SetRightPadding(spacing)
            part:Add(systemLabel)
        end
        if IsBlueprintAction()
            part:UseNeutralScopeStyling()
            BlockLabel blueprintLabel
            me:blueprintLabel = blueprintLabel
            blueprintLabel:SetFont(GetLabelFont())
            blueprintLabel:SetFontSize(editor:GetFontSize())
            blueprintLabel:SetText("blueprint")
            blueprintLabel:SetRightPadding(spacing)
            part:Add(blueprintLabel)
        end

        BlockLabel actionLabel
        me:actionLabel = actionLabel
        actionLabel:SetFont(GetLabelFont())
        actionLabel:SetFontSize(editor:GetFontSize())
        actionLabel:SetText("action")
        actionLabel:SetRightPadding(spacing)
        part:Add(actionLabel)

        EditField nameField
        me:nameField = nameField
        part:Add(nameField)

        nameField:Setup("Name", actionContext:actionNameLocation:GetIndex() - GetStartIndex(), actionContext:actionNameLocation:GetIndexEnd() + 1 - GetStartIndex())
        nameField:AddBottomLabel("Name")
        
        localEndLine = actionContext:actionNameLocation:GetLineNumberEnd() - actionContext:GetLocation():GetLineNumber()

        // Assume the block ends with the name. This will be replaced with a more appropriate value if needed in the if sections below.
        integer localEnd = nameField:GetEndIndex()

        if actionContext:HasParentheses()
         BlockLabel leftParen
            me:leftParen = leftParen
            leftParen:SetFont(GetLabelFont())
            leftParen:SetFontSize(editor:GetFontSize())
            leftParen:SetText("(")
            part:Add(leftParen)

            EditBox paramField
            me:paramField = paramField
            part:Add(paramField)

            paramField:Setup("Parameters", actionContext:leftParen:endIndex + 1 - GetStartIndex(), actionContext:rightParen:startIndex - GetStartIndex())
            paramField:AddBottomLabel("Parameters")

            BlockLabel rightParen
            me:rightParen = rightParen
            rightParen:SetFont(GetLabelFont())
            rightParen:SetFontSize(editor:GetFontSize())
            rightParen:SetText(")")
            part:Add(rightParen)

            // Place the end of the block one character after the last parameter (to account for the right parenthesis).
            localEnd = paramField:GetEndIndex()+1
            
            localEndLine = actionContext:rightParen:endLine - actionContext:GetLocation():GetLineNumber()
        end

        if actionContext:returnLocation not= undefined
            BlockLabel returnsLabel
            me:returnsLabel = returnsLabel
            returnsLabel:SetFont(GetLabelFont())
            returnsLabel:SetFontSize(editor:GetFontSize())
            returnsLabel:SetText("returns")
            returnsLabel:SetLeftPadding(spacing * 0.5)
            returnsLabel:SetRightPadding(spacing * 0.5)
            part:Add(returnsLabel)

            EditField returnField
            me:returnField = returnField
            Location returnLocation = actionContext:returnsStatement:GetLocation()
            part:Add(returnField)

            returnField:Setup("Returns", returnLocation:GetIndex() - GetStartIndex(), returnLocation:GetIndexEnd() + 1 - GetStartIndex())
            returnField:AddBottomLabel("Type")

            // Place the end of the block at the end of the return.
            localEnd = returnField:GetEndIndex()
            
            
            localEndLine = returnLocation:GetLineNumberEnd() - actionContext:GetLocation():GetLineNumber()
        end

        part:SetLocalEndIndex(localEnd)
        part:SetLocalEndLine(localEndLine)

        return part
    end

    action UpdateName(integer selectedLine)
//        if not IsSystemAction() and not IsBlueprintAction() and selectedLine = endLabel:GetRelativeLineIndex()
//            SetName("end")
//        else
//            SetName("action " + nameField:GetText())
//        end
    end

    action GetActionContext returns ActionContext
        return actionContext
    end

    action SetActionContext(ActionContext actionContext)
        me:actionContext = actionContext
        SetContext(actionContext)
    end

end