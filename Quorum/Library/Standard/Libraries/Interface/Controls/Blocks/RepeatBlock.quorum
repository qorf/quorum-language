package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.EditField
use Libraries.Interface.Controls.Blocks.BlockLabel
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Controls.Layouts.ScopeBlockLayout
use Libraries.Language.Compile.Context.all
use Libraries.Language.Compile.Location
use Libraries.Interface.Controls.Layouts.MultipleLineBlockLayout
use Libraries.Containers.Array

class RepeatBlock is MultipleLineBlock
    BlockLabel repeatLabel = undefined
    EditBox expressionField = undefined
    BlockLabel loopLabel = undefined

    LoopContext loopContext = undefined
    

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:REPEAT_KEY)

        MultipleLineBlockLayout layout
        SetLayout(layout)

        SetName("Repeat Block")
    end

    action SetupElements
        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)
    end

    action AddStartLine returns MultipleLineBlockPart
        MultipleLineBlockPart part
        Add(part)
        part:UseEnterScopeStyling()

        // The start line is always the beginning of the multi-block, so it always starts at local index 0.
        part:SetLocalStartIndex(0)

        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()

        BlockLabel repeatLabel
        me:repeatLabel = repeatLabel
        repeatLabel:SetFont(editor:GetFont())
        repeatLabel:SetFontSize(editor:GetFontSize())
        repeatLabel:SetText("repeat")
        repeatLabel:SetRightPadding(spacing)
        part:Add(repeatLabel)

        if loopContext:isUntil
            BlockLabel loopLabel
            me:loopLabel = loopLabel
            loopLabel:SetFont(editor:GetFont())
            loopLabel:SetFontSize(editor:GetFontSize())
            loopLabel:SetText("until")
            loopLabel:SetRightPadding(spacing)
            part:Add(loopLabel)
        elseif loopContext:isWhile
            BlockLabel loopLabel
            me:loopLabel = loopLabel
            loopLabel:SetFont(editor:GetFont())
            loopLabel:SetFontSize(editor:GetFontSize())
            loopLabel:SetText("while")
            loopLabel:SetRightPadding(spacing)
            part:Add(loopLabel)
        end

        EditBox expressionField
        me:expressionField = expressionField
        part:Add(expressionField)

        Location expressionLoc = loopContext:expression:GetLocation()
        expressionField:Setup("Expression", expressionLoc:GetIndex() - GetStartIndex(), expressionLoc:GetIndexEnd() + 1 - GetStartIndex())
        if loopContext:isTimes
expressionField:AddTopLabel("integer")
        else
expressionField:AddTopLabel("boolean")
        end
        expressionField:SetRightPadding(spacing * 0.5)
        
        integer localEndLine = expressionLoc:GetLineNumberEnd() - loopContext:GetLocation():GetLineNumber()

        integer localEnd = expressionLoc:GetIndexEnd() - GetStartIndex() + 1
        if loopContext:isTimes
            BlockLabel loopLabel
            me:loopLabel = loopLabel
            loopLabel:SetFont(editor:GetFont())
            loopLabel:SetFontSize(editor:GetFontSize())
            loopLabel:SetText("times")
            loopLabel:SetLeftPadding(spacing * 0.5)
            loopLabel:SetRightPadding(spacing * 0.5)
            part:Add(loopLabel)

            localEnd = loopContext:timesToken:endIndex - GetStartIndex() + 1
            localEndLine = loopContext:timesToken:endLine - loopContext:GetLocation():GetLineNumber()
        end

        part:SetLocalEndIndex(localEnd)
        part:SetLocalEndLine(localEndLine)

        return part
    end
    
    action GetBlockName returns text
        return "Repeat " + loopLabel:GetText()
    end
    
    action GetBlockDescription returns text
        text result = "The repeat block is used to run a portion of code multiple times. "
        if loopLabel:GetText() = "times"
            result = result + "We can only repeat a whole number of times so the repeat times block takes an expression that gives a whole number of times to loop."
        elseif loopLabel:GetText() = "until"
result = result + "The repeat until block will continue to run the code within the block as long as the expression is false. Once it is true the loop will stop."
        elseif loopLabel:GetText() = "while"
result = result + "The repeat while block will continue to run the code within the block as long as the expression is true. Once it is false the loop will stop."
        end
        return result
    end

    action UpdateName(integer selectedLine)
//        if selectedLine = endLabel:GetRelativeLineIndex()
//            SetName("end")
//        else
//            //SetName("class " + nameField:GetText())
//        end
    end

    action GetLoopContext returns LoopContext
        return loopContext
    end

    action SetContext(LoopContext context)
        me:loopContext = context
        SetContext(cast(ParseContext, context))
    end

end