package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.EditField
use Libraries.Interface.Controls.Blocks.BlockLabel
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Controls.Layouts.ScopeBlockLayout
use Libraries.Language.Compile.Context.all
use Libraries.Language.Compile.Location
use Libraries.Containers.Array
use Libraries.Interface.Controls.Layouts.MultipleLineBlockLayout

class ClassBlock is MultipleLineBlock

    BlockLabel classLabel = undefined
    EditField nameField = undefined
    BlockLabel sharedLabel = undefined
    NoClassDeclarationContext noClass = undefined
    FullClassDeclarationContext fullClass = undefined

    // inherits
    BlockLabel isLabel = undefined
    EditField inheritField = undefined
    EditField genericField = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:CLASS_KEY)

        MultipleLineBlockLayout layout
        SetLayout(layout)
//        SetCornerRounding(0.05, 0.05, 0.05, 0.05)
        SetName("Class Block")
    end

    private action SetupElements
        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)
    end

    action AddStartLine returns MultipleLineBlockPart
        MultipleLineBlockPart part
        Add(part)

        part:UseEnterScopeStyling()

        // The start line is always the beginning of the multi-block, so it always starts at local index 0.
        part:SetLocalStartIndex(0)

        BlockEnvironment editor = GetBlockEnvironment()
//        CodeEditor editor = GetEditor()

        number spacing = editor:GetDefaultGlyphWidth()
        if fullClass not= undefined
            if fullClass:staticClass
                BlockLabel static
                me:sharedLabel = static
                sharedLabel:SetFont(editor:GetFont())
                sharedLabel:SetFontSize(editor:GetFontSize())
                sharedLabel:SetText("shared")
                sharedLabel:SetRightPadding(spacing)
                part:Add(sharedLabel)
            end
        end
        BlockLabel classLabel
        me:classLabel = classLabel
        classLabel:SetFont(editor:GetFont())
        classLabel:SetFontSize(editor:GetFontSize())
        classLabel:SetText("class")
        classLabel:SetRightPadding(spacing)
        part:Add(classLabel)

        EditField nameField
        me:nameField = nameField
        part:Add(nameField)

        //there's no name, so far now toss in a default
        if noClass not= undefined
            //text value = noClass:GetLocation():GetFile():GetPath()
        elseif fullClass not= undefined
            Location location = fullClass:classNameLocation
            GenericDeclarationContext generics = fullClass:generic
            if generics not= undefined
                Location genericLocation = generics:GetLocation()
                nameField:Setup("Name", location:GetIndex() - GetStartIndex(), genericLocation:GetIndexEnd() + 1 - GetStartIndex())
                nameField:AddBottomLabel("Name")

                // Set the part's end index to match the end of the field.
                part:SetLocalEndIndex(genericLocation:GetIndexEnd() + 1 - GetStartIndex())
            else
                nameField:Setup("Name", location:GetIndex() - GetStartIndex(), location:GetIndexEnd() + 1 - GetStartIndex())
                nameField:AddBottomLabel("Name")

                // Set the part's end index to match the end of the field.
                part:SetLocalEndIndex(location:GetIndexEnd() + 1 - GetStartIndex())
            end

            InheritStatementsContext inherits = fullClass:inherit
            if inherits not= undefined
                AddInherits(part, inherits)
            end

        end

        return part
    end

    action UpdateName(integer selectedLine)
//        if selectedLine = endLabel:GetRelativeLineIndex()
//            SetName("end")
//        else
//            SetName("class " + nameField:GetText())
//        end
    end

    action AddInherits(MultipleLineBlockPart part, InheritStatementsContext inherits)
        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        BlockLabel isLabel
        me:isLabel = isLabel
        isLabel:SetFont(editor:GetFont())
        isLabel:SetFontSize(editor:GetFontSize())
        isLabel:SetText("is")
        isLabel:SetLeftPadding(spacing * 0.5)
        isLabel:SetRightPadding(spacing * 0.5)
        part:Add(isLabel)

        Array<InheritStatementContext> inheritList = inherits:statements

        Location firstInherit = inheritList:Get(0):GetLocation()
        Location lastInherit = inheritList:Get(inheritList:GetSize() - 1):GetLocation()
        EditField inheritsField
        me:inheritField = inheritsField
        part:Add(inheritsField)
        part:SetLocalEndIndex(lastInherit:GetIndexEnd() + 1 - GetStartIndex())
        inheritsField:Setup("Inherits", firstInherit:GetIndex() - GetStartIndex(), lastInherit:GetIndexEnd() + 1 - GetStartIndex())
        inheritsField:AddBottomLabel("Classes")
        inheritsField:SetLeftPadding(0)
        inheritsField:SetRightPadding(spacing * 0.5)
    end

    action GetNoClass returns NoClassDeclarationContext
        return noClass
    end

    action SetNoClass(NoClassDeclarationContext noClass)
        me:noClass = noClass
        SetContext(noClass)
    end

    action GetFullClass returns FullClassDeclarationContext
        return fullClass
    end

    action SetFullClass(FullClassDeclarationContext fullClass)
        me:fullClass = fullClass
        SetContext(fullClass)
    end

end