package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.TextField
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.FocusEvent
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Controls.Blocks.MultipleLineBlockPart
use Libraries.Interface.Selections.TextFieldSelection
use Libraries.Interface.Controls.Blocks.Palette.BlockPaletteItem
use Libraries.Containers.Array
use Libraries.Game.Graphics.Label

class EditField is TextField, EditRegion

    // Used to query for edit-specific properties from the options.
    BlockOptionConstants constants

    boolean initialized = false

    on create
        SetInputGroup("EditField")
        SetAutomaticViewMovement(false)
    end

    action Setup(text name, integer relativeStartIndex, integer relativeEndIndex)
        Block block = GetBlock()
        if block = undefined
            text dq = ""
            dq = dq:GetDoubleQuote()
            alert("I cannot set up the EditRegion named " + dq + name + dq + " because this region hasn't been added to a block yet. Add this to a block before calling Setup.")
        end

        SetName(name)

        BlockEnvironment editor = GetBlockEnvironment()

        SetFont(editor:GetFont())
        SetFontSize(editor:GetFontSize())
        SetIndices(relativeStartIndex, relativeEndIndex)
        UpdateLength()
        SetText(editor:GetCodeBetween(block:GetStartIndex() + relativeStartIndex, block:GetStartIndex() + relativeEndIndex))

        initialized = true
    end
    
    action SetupAsPlaceholder(text name, text code)
        Block block = GetBlock()
        if block = undefined
            text dq = ""
            dq = dq:GetDoubleQuote()
            alert("I cannot set up the EditRegion named " + dq + name + dq + " because this region hasn't been added to a block yet. Add this to a block before calling Setup.")
        end

        parent:EditRegion:placeholder = true
        SetName(name)

        // Change the input group so it stops acting like a text field -- we only want it to visually reflect one
        // Also remove the default self-event listening
        SetInputGroup("")
        RemoveMouseListener(me)
        RemoveMouseMovementListener(me)
        
        BlockEnvironment environment = GetBlockEnvironment()

        SetFont(environment:GetFont())
        SetFontSize(environment:GetFontSize())
        SetText(code)
        UpdateLength()

        initialized = true
    end
    

    action UpdateLength
        number glyphWidth = 10
        number height = 10
        BlockEnvironment editor = GetBlockEnvironment()
        
if editor is BlockPaletteItem
            BlockPaletteItem item = cast(BlockPaletteItem, editor)
            editor = item:GetEditor()
            // Make sure the field is using the correct font if it had to pass through a BlockPaletteItem.
            if editor not= undefined and GetFont() not= editor:GetFont()
SetFont(editor:GetFont())
            SetFontSize(editor:GetFontSize())
            end
        end
        
// If this is in a BlockPaletteItem, we want to grab the editor attached to it, not the item itself.
        // This is because the item and the editor most likely have different fonts, but the one we care about is what's being used in the editor.
        if editor not= undefined
            glyphWidth = editor:GetDefaultGlyphWidth()
            height = editor:GetUnpaddedLineHeight(GetBlock():GetStartLine())
        elseif GetFont() not= undefined
            height = GetFont():GetLineHeight()
        end

        integer characterCount = 0
        if IsPlaceholder() = false
            characterCount = GetEndIndex() - GetStartIndex()
        else
            characterCount = GetText():GetSize()
        end

        number minimumLength = 0
        number length = 0

        Block block = GetBlock()
        
// We need to check if this is the last BlockItem attached to the Block. If it is, we need to consider the block's minimum length.
        Array<Item2D> blockChildren = block:GetChildren()
        integer counter = blockChildren:GetSize()
        repeat while counter > 0
            counter = counter - 1
            Item2D item = blockChildren:Get(counter)
            if item is BlockItem
                if item:Equals(me)
minimumLength = block:GetMinimumWidth() - GetX() - block:GetRightPadding()
                else
                    // If we found a different block item, abort.
                    counter = 0
                end
            end
        end
        
        // Also consider if a minimum length is needed to match up with any top labels associated with this field.
        Array<Label> topLabels = GetTopLabels()
        counter = 0
        if topLabels not= undefined
            repeat while counter < topLabels:GetSize()
                Label label = topLabels:Get(counter)
                if label:IsShowing() and label:GetWidth() > minimumLength
                    minimumLength = label:GetWidth() + GetLeftCharacterPadding()
                end
                counter = counter + 1
            end
        end
        
Array<Label> bottomLabels = GetBottomLabels()
        counter = 0
        if bottomLabels not= undefined
            repeat while counter < bottomLabels:GetSize()
                Label label = bottomLabels:Get(counter)
                if label:IsShowing() and label:GetWidth() > minimumLength
                    minimumLength = label:GetWidth() + GetLeftCharacterPadding()
                end
                counter = counter + 1
            end
        end

        if characterCount <= 1
            length = glyphWidth + GetLeftCharacterPadding() * 2
        else
            length = characterCount * glyphWidth + GetLeftCharacterPadding() * 2
        end
        
        if length < minimumLength
            length = minimumLength
        end

        SetSize(cast(integer, length + 0.5), cast(integer, height + 0.5))
    end

    action GainedFocus(FocusEvent event)
        parent:TextField:GainedFocus(event)
        parent:BlockItem:GainedFocus(event)
        
        if GetBlock() is SingleLineBlock
            SingleLineBlock single = cast(SingleLineBlock, GetBlock())
            if single:HasDetailLabels() and single:AlwaysShowDetailLabels() = false
                single:ShowDetailLabels()
            end
        end
    end

    action ShowCaret
        parent:TextField:ShowCaret()
    end

    action HideCaret
        parent:TextField:HideCaret()
    end

    action LostFocus(FocusEvent event)
        parent:TextField:LostFocus(event)
        parent:BlockItem:LostFocus(event)
        
if GetBlock() is SingleLineBlock
            SingleLineBlock single = cast(SingleLineBlock, GetBlock())
            if single:HasDetailLabels() and single:AlwaysShowDetailLabels() = false
                single:HideDetailLabels()
            end
        end
    end

    private action FitCharacterOnScreen(integer character)
        // This action is overridden to purposely disable the TextField's ability to move the underlying view.
        // We want the EditField to always show the first character, and will resize the field to show more characters as needed.
    end

    private action NotifyTextChangeListeners(TextChangeEvent event)
        if initialized = false
            return now
        end

        // Before we notify the listeners, let the editor know about the change to the indices.
        text added = event:GetAddedText()
        text deleted = event:GetDeletedText()
        integer change = added:GetSize() - deleted:GetSize()

        CodeEditor editor = cast(CodeEditor, GetBlockEnvironment())
        if editor not= undefined
            editor:OnTextChange(event, GetBlock():GetStartIndex() + GetStartIndex())
        end

        /*
        While the field can't normally take new line characters, it becomes possible
        when interacting with special cases generated by Freeform block conversions.
        Manually count the number of new lines added and removed.
        */
        integer newLines = 0
        text lineFeed = ""
        lineFeed = lineFeed:GetLineFeed()
        
        integer i = 0
        repeat while i < added:GetSize()
            if added:GetUnicodeInteger(i) = lineFeed:GetUnicodeInteger(0)
                newLines = newLines + 1
            end
            i = i + 1
        end

        i = 0
        repeat while i < deleted:GetSize()
            if deleted:GetUnicodeInteger(i) = lineFeed:GetUnicodeInteger(0)
                newLines = newLines - 1
            end
            i = i + 1
        end

        // If the number of characters or lines has changed, update the length of the field and resize the block.
        if change not= 0 or newLines not= 0
            Block block = GetBlock()
            block:OffsetIndices(event:GetIndex() + GetStartIndex() + GetBlock():GetStartIndex(), change, newLines, block)
            UpdateLength()
            block:Resize()

            if IsSelected()
                editor:UpdateSelectionCursor()
            end
        end

        parent:TextField:NotifyTextChangeListeners(event)
    end

    action GetSelectedText returns text
        TextFieldSelection selection = GetSelection()
        if selection:IsEmpty()
            return ""
        end
        return GetText(selection:GetStartIndex(), selection:GetEndIndex())
    end
    
    action GetText returns text
        return parent:TextField:GetText()
    end
    
    action GetLeftCharacterPadding returns integer
        return parent:TextField:GetLeftCharacterPadding()
    end
    
end