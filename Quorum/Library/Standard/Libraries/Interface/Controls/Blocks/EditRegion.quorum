package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.TextField
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.FocusEvent
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Controls.Blocks.MultipleLineBlockPart
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label

class EditRegion is BlockItem

    // The start and end indices of an EditRegion are relative to the Block they're attached to.
    integer startIndex = 0
    integer endIndex = 0

    // Used to query for edit-specific properties from the options.
    BlockOptionConstants constants
    
    // This indicates if this EditRegion is being used as part of a placeholder block.
    // Placeholder edit regions don't take text from the code editor and don't accept standard field/text box input.
    boolean placeholder = false
    
    // EditRegions can have associated labels that are displayed above the regions.
    // While the labels are associated with the regions, they aren't added directly. They're added to the parent block instead.
    Array<Label> topLabels = undefined

    on create
        SetCornerPixelRounding(4, 4, 4, 4)
    end

    blueprint action Setup(text name, integer relativeStartIndex, integer relativeEndIndex)
    
    blueprint action SetupAsPlaceholder(text name, text code)

    action GetDefaultFontName returns text
        text name = undefined
        Font font
        
        if font:IsFontAvailable("Courier New Bold")
            name = "Courier New Bold"
        elseif font:IsFontAvailable("courbd")
            name = "courbd"
        elseif font:IsFontAvailable("FiraCode-Retina")
            name = "FiraCode-Retina"
        elseif font:IsFontAvailable("FiraCode-Regular")
            name = "FiraCode-Regular"
        elseif font:IsFontAvailable("Lato")
            name = "Lato"
        elseif font:IsFontAvailable("Courier")
            name = "Courier"
        elseif font:IsFontAvailable("Courier New")
            name = "Courier New"
        elseif font:IsFontAvailable("cour")
            name = "cour"
        elseif font:IsFontAvailable("Roboto-Black")
            name = "Roboto-Black"
        elseif font:IsFontAvailable("Arial")
            name = "Arial"
        elseif font:IsFontAvailable("Arial Unicode")
            font:LoadFont("Arial Unicode")
            SetFont(font)
        elseif font:IsFontAvailable("Helvetica")
            font:LoadFont("Helvetica")
            SetFont(font)
        elseif font:IsFontAvailable("Georgia")
            font:LoadFont("Georgia")
            SetFont(font)
        elseif font:IsFontAvailable("Times New Roman")
            font:LoadFont("Times New Roman")
            SetFont(font)
        else
            Array<File> availableFontFiles = font:GetAvailableFonts()
            if availableFontFiles:GetSize() > 0
                File file = availableFontFiles:Get(0)
                name = file:GetPath()
            end
        end

        return name
    end

    action GetStartIndex returns integer
        return startIndex
    end

    action SetStartIndex(integer startIndex)
        me:startIndex = startIndex
    end

    action SetIndices(integer startIndex, integer endIndex)
        SetStartIndex(startIndex)
        SetEndIndex(endIndex)
    end

    action GetEndIndex returns integer
        return endIndex
    end

    action SetEndIndex(integer endIndex)
        me:endIndex = endIndex
    end

    action GetRelativeLineIndex returns integer
        Block block = GetBlock()
        return GetLineIndex() - block:GetStartLine()
    end

    action GetLineIndex returns integer
        Block block = GetBlock()
        CodeEditor editor = cast(CodeEditor, GetBlockEnvironment())
        return editor:GetLineIndex(block:GetStartIndex() + startIndex)
    end

    blueprint action UpdateLength

    /*
    This action returns the distance from the left edge of this region to the
    right edge of the block, minus the block's right padding.
    In other words, this is the hypothetical distance it would take to make
    the EditRegion "fill" horizontally within the block.

    This can be used by UpdateLength or by block layouts when placing the last
    EditRegion in a block.
    */
    action GetBlockFillLength returns number
        Block block = GetBlock()
        if block not= undefined
            return (block:GetWidth() - GetX() - block:GetRightPadding())
        end

        return 0
    end

    action GetBackgroundColor returns ColorGroup
        if HasColorPropertyOverride("backgroundColor")
            return parent:Control:GetBackgroundColor()
        end

        Block block = GetBlock()
        if block not= undefined
            return block:GetColorProperty(constants:EDIT_BACKGROUND_COLOR)
        else
            return parent:Control:GetColorProperty(constants:EDIT_BACKGROUND_COLOR)
        end
    end

    action GetBorderColor returns ColorGroup
        if HasColorPropertyOverride("borderColor")
            return parent:Control:GetBorderColor()
        end

        Block block = GetBlock()
        if block not= undefined
            return block:GetColorProperty(constants:EDIT_BORDER_COLOR)
        else
            return parent:Control:GetColorProperty(constants:EDIT_BORDER_COLOR)
        end
    end

    action GetFontColor returns ColorGroup
        if HasColorPropertyOverride("fontColor")
            return parent:Control:GetFontColor()
        end

        Block block = GetBlock()
        if block not= undefined
            return block:GetColorProperty(constants:EDIT_FONT_COLOR)
        else
            return parent:Control:GetColorProperty(constants:EDIT_FONT_COLOR)
        end
    end

    action GetBorderThickness returns number
        if HasNumberPropertyOverride("borderThickness")
            return parent:Control:GetBorderThickness()
        end

        Block block = GetBlock()
        if block not= undefined
            return block:GetNumberProperty(constants:EDIT_BORDER_THICKNESS)
        else
            return parent:Control:GetNumberProperty(constants:EDIT_BORDER_THICKNESS)
        end
    end

    action GetBlock returns Block
        Item2D item = GetParent()
        repeat until item is Block or item = undefined
            item = item:GetParent()
        end
        return cast(Block, item)
    end

    blueprint action ShowCaret

    blueprint action HideCaret

    blueprint action GetSelectedText returns text
    
    blueprint action GetText returns text
    
action IsPlaceholder returns boolean
        return placeholder
    end
    
    /*This action returns an array of the descriptive labels that are placed above this region
on a block. These labels aren't added directly to the region, but are added to the region's
parent block. By default, this is undefined, but an array is automatically created as part of
the AddTopLabel action.

Attribute: Returns An array of the labels placed above this region on the block, or undefined.*/
    action GetTopLabels returns Array<Label>
        return topLabels
    end

    /*This action sets the array of descriptive labels that are placed above this region on a block.
These labels aren't added directly to the region, but are added to the region's
parent block. By default, this is undefined, but an array is automatically created as part of
the AddTopLabel action.

Attribute: Parameter topLabels The labels to associate with this region.*/
    action SetTopLabels(Array<Label> topLabels)
        me:topLabels = topLabels
    end
    
    /*This action returns true if this region has associated labels to go above it, or
false otherwise. This doesn't indicate whether or not any labels are visible -- to
check that, use HasVisibleTopLabels instead.

Attribute: Returns True if this region has associated top labels, or false otherwise.*/
    action HasTopLabels returns boolean
        return topLabels not= undefined and topLabels:IsEmpty() = false
    end
    
/*This action returns true if this region has associated labels to go above it and they
are currently visible. If this region has associated labels but they are hidden, or
if it doesn't have any labels, this will return false.

Attribute: Returns True if this region has visible top labels, or false otherwise.*/
    action HasVisibleTopLabels returns boolean
        if topLabels not= undefined
            integer i = 0
            repeat while i < topLabels:GetSize()
                if topLabels:Get(i):IsShowing()
                    return true
                end
                i = i + 1
            end
        end
        
        return false
    end
    
    /*This action adds a label to the list of labels that can be displayed above this EditRegion.
If this EditRegion is already part of a block, the label will also be added to the block
for rendering. 

Attribute: Parameter label The label to be associated with this EditRegion.*/
    action AddTopLabel(Label label)
        if topLabels = undefined
            Array<Label> array
            topLabels = array
        end
        topLabels:Add(label)
        Block block = GetBlock()
        if block not= undefined
            if block is SingleLineBlock
                SingleLineBlock singleBlock = cast(SingleLineBlock, block)
if singleBlock:AlwaysShowDetailLabels() = false and singleBlock:IsSelected() = false
                label:Hide()
            end
            end
            
            block:Add(label)
        end
    end
    
    /*This action adds a label to the list of labels that can be displayed above this EditRegion.
If this EditRegion is already part of a block, the label will also be added to the block
for rendering. 

Attribute: Parameter labelText The text for the label to be associated with this EditRegion.*/
    action AddTopLabel(text labelText)
Label label
            label:SetName(GetName() + " Label")
            label:SetText(labelText)
            label:SetPositionOnBaseLine(false)
            label:SetBottomMargin(1)
        AddTopLabel(label)
    end
    
    /*This action shows all of the top labels associated with this EditRegion.*/
    action ShowTopLabels
        if topLabels not= undefined
            integer i = 0
            repeat while i < topLabels:GetSize()
                topLabels:Get(i):Show()
                i = i + 1
            end
            Block block = GetBlock()
            if block not= undefined
                block:RequestLayout()
            end
        end
        
        BlockEnvironment environment = GetBlockEnvironment()
        if environment is CodeEditor
            CodeEditor editor = cast(CodeEditor, environment)
            editor:RequestViewRefresh()
        end
    end
    
    /*This action hides all of the top labels associated with this EditRegion.*/
    action HideTopLabels
if topLabels not= undefined
            integer i = 0
            repeat while i < topLabels:GetSize()
                topLabels:Get(i):Hide()
                i = i + 1
            end
Block block = GetBlock()
            if block not= undefined
                block:RequestLayout()
            end
        end
        
BlockEnvironment environment = GetBlockEnvironment()
        if environment is CodeEditor
            CodeEditor editor = cast(CodeEditor, environment)
            editor:RequestViewRefresh()
        end
    end
    
    action GetTopLabelsHeight returns number
        number totalHeight = 0
        if topLabels not= undefined
            integer i = 0
            repeat while i < topLabels:GetSize()
                totalHeight = totalHeight + topLabels:Get(i):GetHeight()
                i = i + 1
            end
        end
        return totalHeight
    end

action GetVisibleTopLabelsHeight returns number
        number totalHeight = 0
        if topLabels not= undefined
            integer i = 0
            repeat while i < topLabels:GetSize()
                Label label = topLabels:Get(i)
                if label:IsShowing()
totalHeight = totalHeight + topLabels:Get(i):GetHeight()
                end
                i = i + 1
            end
        end
        return totalHeight
    end
    
end