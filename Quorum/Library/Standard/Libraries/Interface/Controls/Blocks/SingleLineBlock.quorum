package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.SingleLineBlockView
use Libraries.Language.Compile.CompilerError
use Libraries.Language.Compile.Hints.Hint
use Libraries.Interface.Selections.CodeEditorSelection
use Libraries.Containers.Array
use Libraries.Language.Debug.BreakpointManager
use Libraries.Language.Debug.Breakpoint
use Libraries.Interface.Controls.AnnotationLineGutter
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Support.GutterAnnotation
use Libraries.Interface.Controls.TextStyles.TextStyle


class SingleLineBlock is Block
    
    // If this is true, detail labels (such as "top labels" for EditRegions) are always visible on this block.
    // If false, they're only shown when contextually relevant (usually because the block or field is selected)
    boolean alwaysShowDetailLabels = false
    
    on create
        SetInputGroup("Block")
    end

    action LoadGraphics(LayoutProperties properties)
        if GetView2D() = undefined
            UpdateHintsAndErrorsVisuals()
        end

        parent:Control:LoadGraphics(properties)
    end

    /*
    Nests a block into this block. This is illegal for single line blocks. For multi-line blocks,
    only multi-line block parts can be added. Multi-line block parts can accept either single or
    multi-line blocks (as contents of a scope).
    */
    private action AddChildBlock(Block block)
        alert("I was asked to add a block named " + block:GetName() + " to the block named " + GetName() + ", but single line blocks can't have children blocks.")
    end

    /*
    Nests a block into this block. This is illegal for single line blocks. For multi-line blocks,
    only multi-line block parts can be added. Multi-line block parts can accept either single or
    multi-line blocks (as contents of a scope).
    */
    private action AddChildBlock(integer index, Block block)
        alert("I was asked to add a block named " + block:GetName() + " to the block named " + GetName() + ", but single line blocks can't have children blocks.")
    end

    action RemoveChildBlock(Block block) returns boolean
        return false
    end

    action RemoveChildBlock(integer index) returns Block
        return undefined
    end

    action EmptyChildBlocks
    end

    action GetChildCount returns integer
        return 0
    end

    action GetChild(integer index) returns Block
        alert("I could not get a child node from the block " + GetName() + " because single line blocks cannot have children blocks.")
    end

    /*
        The broad design philophy here is to make it feel like a text editor, but to have tree-like mechanisms
        as clues when traversing. Broadly, if we land only on a scoped item, it will give you the level
        count and the number of children at the same level. You can then use hotkeys to traverse those points.
        The level is only given if IsEnteringScope is true, which means the top of an if statement or
        other scoped construct.
    */
    action GetDescription returns text
        text result = ""

        CodeEditor editor = GetEditor()

        if editor not= undefined and editor:GetSelection() not= undefined
            CodeEditorSelection selection = editor:GetSelection()
            if selection:IsMultipleSelection()
                Array<Block> blocks = editor:GetSelectedBlocks()
                //Just in case of some whacky case
                if blocks not= undefined
                    Block start = blocks:GetFromFront()
                    Block last = blocks:GetFromEnd()
                    integer startLine = start:GetStartLine() + 1
                    integer lastLine = last:GetEndLine() + 1
                    result = ", Selected range from blocks at line " + startLine + " to " + lastLine + "."
                    i = 0 
                    integer errors = 0
                    integer hints = 0
                    repeat while i < blocks:GetSize()
                        Block block = blocks:Get(i)
                        errors = errors + block:GetErrorsSize()
                        hints = hints + block:GetHintsSize()
                        i = i + 1
                    end
                    if errors = 0 and hints = 0
                        result = result + " No errors or hints in range."
                    else
                        result = result + " " + errors + " errors and " + hints + " hints in range."
                    end
                    return result
                end
            end
        end
            
        integer scope = GetScopeDepth()
        integer kids = GetChildCount()
        //only for scoped items, otherwise it tends to feel subjectively annoying in a screen reader.
        if scope >= 1 and IsEnteringScope()
            result = ", level " + scope
        end
        
        if kids = 1
            result = result + ", " + GetChildCount() + " block"
        elseif kids > 1
            result = result + ", " + GetChildCount() + " blocks"
        elseif kids = 0 and IsEnteringScope()
            result = result + ", 0 blocks"
        end

        //if it's an end, try to determine what it's an end too
        if IsExitingScope()
            Block mom = GetParentBlock()
            if mom not= undefined
                text name = mom:GetName()
                result = result + " to " + name
                if scope >= 1 //inside the action only
                    result = result + ", level " + scope
                end
            end
        end
        
        boolean hints = IsHintsEmpty()
        boolean errors = IsErrorsEmpty()

        //if there's an error, put it in the description
        if not errors
            CompilerError error = GetFirstError()
            if error not= undefined
                if not hints //there's a hint and an error
                    result = ", ERROR. " + error:GetErrorMessage()
                else
                    result = ", ERROR + HINT. " + error:GetErrorMessage()
                end
            end
        end

        if not hints
            result = result + ", HINT. "
            Hint hint = GetFirstHint()
            if hint not= undefined
                result = result + hint:GetDisplayName()
            end
            result = result + " Press alt + enter to use the hint or the context menu to get a list."
        end
        
        if editor not= undefined
            BreakpointManager breakpoints = editor:GetBreakpointManager()
            
            if breakpoints not= undefined and editor:GetFile() not= undefined
integer currentLine = GetNavigationIndex()
                integer debuggerLine = editor:GetDebuggerLine()
Breakpoint point = breakpoints:GetBreakpoint(editor:GetFile():GetAbsolutePath(), currentLine)
                if (point not= undefined) or (currentLine = debuggerLine and debuggerLine not= -1)
                    if currentLine = debuggerLine
                        result = result + " Debugging line."
end
if point not= undefined and point:GetLine() = currentLine
                        result = result + " Breakpoint."
                    end
                end
            end
            
            AnnotationLineGutter gutter = editor:GetAnnotationLineGutter()
            if gutter not= undefined
                HashTable<integer, GutterAnnotation> gutterAnnotations = gutter:GetAnnotations()
                if gutterAnnotations not= undefined
                    GutterAnnotation annotation = gutterAnnotations:GetValue(GetNavigationIndex())
                    if annotation not= undefined
result = result + " " + annotation:GetName() + "."
                    end
                end
            end
            
        end
        
        return result
    end

    action GetName returns text
        if IsPlaceholder()
            return GetPlaceholderText()
        end
        
        CodeEditor editor = GetEditor()
        if editor not= undefined and GetStartIndex() >= 0 and GetEndIndex() >= 0
            check
               return editor:GetCode():GetText(GetStartIndex(), GetEndIndex())
            detect error
                return parent:Item:GetName()
            end
        end
        return parent:Item:GetName()
    end
    
    // An override of the implementation in Control. Used to make sure the block still shows selection colors during multiple selection.
    action IsRenderingSelection returns boolean
        return IsSelected() or parent:Block:IsRenderingSelection()
    end
    
    
// This action returns true if the given Block is valid to be placed immediately after this block, or false otherwise.
    action IsValidNextBlock(Block nextBlock) returns boolean
        // For now, always return true.
        return true
    end
    
    action AlwaysShowDetailLabels returns boolean
        return alwaysShowDetailLabels
    end

    action SetAlwaysShowDetailLabels(boolean alwaysShowDetailLabels)
        me:alwaysShowDetailLabels = alwaysShowDetailLabels
    end
    
    action GainedSelection
        if AlwaysShowDetailLabels() = false
            //ShowDetailLabels()
        end
        
        parent:Block:GainedSelection()
    end
    
    action LostSelection
        if AlwaysShowDetailLabels() = false
            HideDetailLabels()
        end
        
        parent:Block:LostSelection()
    end
    
    action ShowDetailLabels
        integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                edit:ShowDetailLabels()
            end
            i = i + 1
        end
    end
    
action ShowTopLabels
        integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                edit:ShowTopLabels()
            end
            i = i + 1
        end
    end
    
action ShowBottomLabels
        integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                edit:ShowBottomLabels()
            end
            i = i + 1
        end
    end
    
    action HideDetailLabels
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                edit:HideDetailLabels()
            end
            i = i + 1
        end
    end
    
action HideTopLabels
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                edit:HideTopLabels()
            end
            i = i + 1
        end
    end
    
action HideBottomLabels
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                edit:HideBottomLabels()
            end
            i = i + 1
        end
    end
    
    action HasDetailLabels returns boolean
        integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                if edit:HasDetailLabels()
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    
action HasTopLabels returns boolean
        integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                if edit:HasTopLabels()
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    
action HasBottomLabels returns boolean
        integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                if edit:HasBottomLabels()
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    
    action HasVisibleDetailLabels returns boolean
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                if edit:HasVisibleDetailLabels()
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    
action HasVisibleTopLabels returns boolean
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                if edit:HasVisibleTopLabels()
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    
action HasVisibleBottomLabels returns boolean
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                if edit:HasVisibleBottomLabels()
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    
    action GetDetailLabelsHeight returns number
        number maxHeight = 0
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                number height = edit:GetDetailLabelsHeight()
                if height > maxHeight
                    maxHeight = height
                end
            end
            i = i + 1
        end
        return maxHeight
    end
    
action GetVisibleDetailLabelsHeight returns number
        number maxHeight = 0
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                number height = edit:GetVisibleDetailLabelsHeight()
                if height > maxHeight
                    maxHeight = height
                end
            end
            i = i + 1
        end
        return maxHeight
    end
    
action GetTopLabelsHeight returns number
        number maxHeight = 0
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                number height = edit:GetTopLabelsHeight()
                if height > maxHeight
                    maxHeight = height
                end
            end
            i = i + 1
        end
        return maxHeight
    end
    
action GetVisibleTopLabelsHeight returns number
        number maxHeight = 0
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                number height = edit:GetVisibleTopLabelsHeight()
                if height > maxHeight
                    maxHeight = height
                end
            end
            i = i + 1
        end
        return maxHeight
    end
    
action GetBottomLabelsHeight returns number
        number maxHeight = 0
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                number height = edit:GetBottomLabelsHeight()
                if height > maxHeight
                    maxHeight = height
                end
            end
            i = i + 1
        end
        return maxHeight
    end
    
action GetVisibleBottomLabelsHeight returns number
        number maxHeight = 0
integer i = 0
        Array<Item2D> children = GetChildren()
        repeat while i < children:GetSize()
            Item2D child = children:Get(i)
            if child is EditRegion
                EditRegion edit = cast(EditRegion, child)
                number height = edit:GetVisibleBottomLabelsHeight()
                if height > maxHeight
                    maxHeight = height
                end
            end
            i = i + 1
        end
        return maxHeight
    end
    
    /*This action adds a TextStyle to this Block. The style's index will be applied with
consideration to the global index (that is, not the local index) that the block is
located at. The TextStyle will be applied to relevant EditRegions in the block.

Attribute: Parameter name A name identifying the TextStyle. Used to retrieve or remove the style from EditRegions later.
Attribute: TextStyle style The TextStyle to apply to the elements of this Block.*/
    action AddTextStyle(text name, TextStyle style)
        integer blockIndex = GetStartIndex()
        integer styleStart = style:GetIndex()
        integer styleEnd = style:GetIndex() + style:GetSize() - 1
        // Iterate through the children and find the appropriate EditRegion for this style.
        Array<Item2D> children = GetChildren()
        integer i = 0
        repeat while i < children:GetSize()
            Item2D item = children:Get(i)
            if item is EditField
                EditField field = cast(EditField, item)
                if styleStart >= (blockIndex + field:GetStartIndex()) and styleEnd <= (blockIndex + field:GetEndIndex())
                    TextStyle copy = style:Copy()
                    copy:SetIndex(styleStart - blockIndex - field:GetStartIndex())
                    field:AddTextStyle(name, copy)
                    // Set i = children size, so we exit the loop. We only want to apply the style to one region.
                    i = children:GetSize()
                end
            elseif item is EditBox
EditBox box = cast(EditBox, item)
                if styleStart >= (blockIndex + box:GetStartIndex()) and styleEnd <= (blockIndex + box:GetEndIndex())
                    TextStyle copy = style:Copy()
                    copy:SetIndex(styleStart - blockIndex - box:GetStartIndex())
                    box:AddTextStyle(name, copy)
                    // Set i = children size, so we exit the loop. We only want to apply the style to one region.
                    i = children:GetSize()
                end
            end
            i = i + 1
        end
    end
    
    /*This action removes all text styles applied to the EditRegions of this block.*/
    action EmptyTextStyles
Array<Item2D> children = GetChildren()
        integer i = 0
        repeat while i < children:GetSize()
            Item2D item = children:Get(i)
            if item is EditField
                EditField field = cast(EditField, item)
                field:EmptyTextStyles()
            elseif item is EditBox
                EditBox box = cast(EditBox, item)
                box:EmptyTextStyles()
            end
            i = i + 1
        end
        
    end

end