package Libraries.Interface.Controls.Blocks

use Libraries.Containers.Array
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.ControlShaderView
use Libraries.Game.Graphics.Painter2D
use Libraries.Interface.Controls.Blocks.BlockItem
use Libraries.Interface.Controls.Blocks.BlockLabel

class MultipleLineBlock is Block

    Array<MultipleLineBlockPart> blockParts
    Array<MultipleLineBlockConnector> blockConnectors

    on create
        SetFocusable(false)
    end
    
    action Add(MultipleLineBlockPart part)
        if part:GetParentBlock() not= undefined
            alert("I couldn't add the block part " + part:GetName() + " to the multiple line block " + GetName() + " because the part is already attached to " + part:GetParentBlock():GetName())
        end
        Add(cast(Block, part))
    end

    private action AddChildBlock(Block item)
        if item is MultipleLineBlockPart
            MultipleLineBlockPart part = cast(MultipleLineBlockPart, item)

            part:SetInterfaceOptionsKey(GetInterfaceOptionsKey())
            blockParts:Add(part)
    
            repeat until blockConnectors:GetSize() >= blockParts:GetSize() - 1
                AddConnector()
            end
    
            parent:Control:Add(part)
        else
            alert("I was asked to add a block named " + item:GetName() + " to the block named " + GetName() + ", but MultipleLineBlocks can only accept MultipleLineBlockParts as children.")
        end
    end

    private action AddChildBlock(integer index, Block item)
        if item is MultipleLineBlockPart
            MultipleLineBlockPart part = cast(MultipleLineBlockPart, item)

            part:SetInterfaceOptionsKey(GetInterfaceOptionsKey())
            blockParts:Add(index, part)
    
            repeat until blockConnectors:GetSize() >= blockParts:GetSize() - 1
                AddConnector()
            end
    
            parent:Control:Add(part)
        else
            alert("I was asked to add a block named " + item:GetName() + " to the block named " + GetName() + ", but MultipleLineBlocks can only accept MultipleLineBlockParts as children.")
        end
    end

    private action RemoveChildBlock(Block block) returns boolean
        if block is MultipleLineBlockPart
            MultipleLineBlockPart part = cast(MultipleLineBlockPart, block)
            blockParts:Remove(part)
            part:SetParentBlock(undefined)

            repeat until blockConnectors:GetSize() <= blockParts:GetSize() - 1
                blockConnectors:RemoveFromEnd()
            end
        end

        return parent:Control:Remove(block)
    end

    private action RemoveChildBlock(integer index) returns Block
        MultipleLineBlockPart part = blockParts:RemoveAt(index)
        part:SetParentBlock(undefined)
        
        if blockConnectors:GetSize() > 0
repeat until blockConnectors:GetSize() <= blockParts:GetSize() - 1
            blockConnectors:RemoveFromEnd()
        end
        end

        parent:Control:Remove(part)
        return part
    end

    action EmptyChildBlocks
        blockParts:Empty()
        blockConnectors:Empty()
    end

    private action AddConnector
        MultipleLineBlockConnector connector
        connector:Initialize(me)

        blockConnectors:Add(connector)
        Add(connector)
    end

    action SetupElements
        // Do nothing. Since MultipleLineBlocks don't have any visuals of their own, there's usually no elements to attach onto them.
        // The actual elements will be generated by the SetupElements calls on the attached parts.
    end

    action AddEndLine returns MultipleLineBlockPart
        MultipleLineBlockPart part
        Add(part)

        part:SetLocalStartLine(GetEndLine() - GetStartLine())
        part:SetLocalEndLine(part:GetLocalStartLine())
        part:SetLocalEndIndex(parent:Block:context:GetLocation():GetIndexEnd() + 1 - GetStartIndex())
        part:SetLocalStartIndex(part:GetLocalEndIndex() - 3)
        part:UseExitScopeStyling()
        part:SetName("end")

        BlockEnvironment environment = GetBlockEnvironment()

        BlockLabel endLabel
        endLabel:SetFont(environment:GetFont())
        endLabel:SetFontSize(environment:GetFontSize())
        endLabel:SetText("end")
        part:Add(endLabel)

        return part
    end

    action GetChildCount returns integer
        return blockParts:GetSize()
    end

    action GetChild(integer index) returns Block
        return blockParts:Get(index)
    end

    action SetEditor(CodeEditor editor)
        integer counter = 0
        repeat while counter < blockParts:GetSize()
            blockParts:Get(counter):SetBlockEnvironment(editor)
            counter = counter + 1
        end

        parent:Block:SetBlockEnvironment(editor)
    end

    action SetInterfaceOptionsKey(text key)
        integer counter = 0
        repeat while counter < blockParts:GetSize()
            blockParts:Get(counter):SetInterfaceOptionsKey(key)
            counter = counter + 1
        end

        parent:Block:SetInterfaceOptionsKey(key)
    end

    action GetBlockParts returns Array<MultipleLineBlockPart>
        return blockParts
    end

    action GetBlockConnectors returns Array<MultipleLineBlockConnector>
        return blockConnectors
    end

    action DrawParts(Painter2D painter)
        integer counter = 0
        repeat while counter < blockParts:GetSize()
            Block block = blockParts:Get(counter)
            block:Draw(painter)
            counter = counter + 1
        end
    end
    
action DrawContents(Painter2D painter)
        if not IsShowing()
            return now
        end

        integer counter = 0
repeat while counter < blockParts:GetSize()
            Block block = blockParts:Get(counter)
            block:DrawContents(painter)
            counter = counter + 1
        end
    end

    action DrawConnectors(Painter2D painter)
        integer counter = 0
        repeat while counter < blockConnectors:GetSize()
            Control control = blockConnectors:Get(counter)
            control:Draw(painter)
            counter = counter + 1
        end
    end

    private action SetDefaultTabOrder
        MultipleLineBlockPart currentPart = undefined
        BlockItem previous = undefined

        integer i = 0
        repeat while i < blockParts:GetSize()
            MultipleLineBlockPart part = blockParts:Get(i)
            part:SetDefaultTabOrder()
            i = i + 1
        end
    end

    /*
    Returns true if this block can be navigated to, or false otherwise.
    MultipleLineBlocks always return false, as they can't be navigated to
    directly, but rather their parts can be navigated to.
    */
    action IsNavigable returns boolean
        return false
    end

end