package Libraries.Interface.Controls

use Libraries.Interface.Accessibility
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.System.File
use Libraries.Interface.Views.ImageControlView
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Views.DrawableView
use Libraries.Game.Graphics.Shaders.ControlShaderProgram
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.TextureLoadListener
use Libraries.Interface.Events.TextureLoadEvent
use Libraries.Interface.Layouts.ButtonLayout

/*
    The Button class is a control object and UI element it is added to the Game 
    class. The Button is used to represent a general button with a standard 
    look and function across game applications.

    Attribute: Author Andreas Stefik, William Allee

    Attribute: Example
    use Libraries.Interface.Forms.Form
    use Libraries.Interface.Forms.Page
    use Libraries.Interface.Controls.Button
    use Libraries.Interface.Forms.FormBehavior
    
    class Main 
        action Main 
            Form form
            Page page = form:GetMainPage()
            
            Button button = page:AddButton("myButton")
            
            form:Display()
        end
    end
*/
class Button is Control, TextureLoadListener

    Behavior activationBehavior = undefined
    Label label = undefined
    Icon icon = undefined
    LayoutProperties labelProperties
    GameStateManager manager

    // Whether this button has been depressed, e.g. by a mouse click.
    boolean depressed = false

    // If this is true, the Button will automatically attempt to fit its font within the button.
    boolean automaticFontSizing = true
    
    /*  
        By default, automatic font sizing is disabled if the font size is manually set.
        However, if the automatic font sizing has been explicitly set to true, we don't
        want to override that (especially in something like a Layout), so we track if
        the auto-font sizing has been explicitly set here.
    */
    boolean explicitAutoFontSizing = false
    
    on create
        ButtonLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetInterfaceOptionsKey("Button")
        properties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        properties:SetVerticalLayoutMode(properties:FIT_FONT)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        SetName("Button")

        SetInputGroup("Button")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:BUTTON)

        // The padding is used to space out the internal contents.
        SetTopPadding(4)
        SetBottomPadding(7)
        SetLeftPadding(7)
        SetRightPadding(7)
    end

    /*
        This action gets the default font size.
        Attribute: Returns the font size in integer format.
    */
    action GetDefaultFontSize returns integer
        return 16
    end
    /*
        This action sets a defined behavior for the control.
        Attribute: Parameter behavior the event behavior to attatch to the control.
        
        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Controls.Button
        use Libraries.Interface.Events.BehaviorEvent
        
        class Main is FormBehavior
            action Main
                Form form
                Page page = form:GetMainPage()
                
                Button button = page:AddButton("Hi")
                
                button:SetBehavior(me)
                form:Display()
            end
        
            action Run(BehaviorEvent event)
                Form form = GetForm()
                Page page = GetPage()
                Button button = cast(Button, event:GetItem())
                output button:GetLabelText()
        
            end
        end
    */
    action SetBehavior(Behavior behavior)
        activationBehavior = behavior
    end
    /*
        This action gets the behavior for the control.
        Attribute: Returns behavior the event behavior to attatch to the control.
    */
    action GetActivationBehavior returns Behavior
        return activationBehavior
    end
    /*
        This action activates the behavior for the control.
        Attribute: Parameter event the event behavior to activate.
    */
    action Activate(BehaviorEvent event)
        parent:Control:Activate(event)

        Accessibility accessibility = manager:GetAccessibility()
        if accessibility not= undefined
            accessibility:ButtonActivated(me)
        end
    end
    /*
        This action sets the name of the control.
        Attribute: Parameter name the name of the control.
    */
    action SetName(text name)
        parent:Item2D:SetName(name)
        
        LayoutProperties defaultProperties = GetDefaultLayoutProperties()

        if defaultProperties not= undefined
            defaultProperties:SetLabelText(name)
        end
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:SetText(name)
        end
    end

    /*
    This action will load the Button as a single image, using the image file
    at the given path. The path is relative to the project's directory.

    Attribute: filePath A file path to an image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Layouts.ManualLayout
    use Libraries.Interface.Controls.Button
    
    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            ManualLayout layout
            SetLayout(layout)
    
            Button button
            button:LoadImage("Resources/MyImage.png")
            button:SetPixelWidth(100)
            button:SetPixelHeight(100)
            button:SetPixelX(100)
            button:SetPixelY(100)
            Add(button)
        end
    end
    */
    action LoadImage(text filePath)
        Drawable drawable
        drawable:Load(filePath)
        LoadImage(drawable)
    end

    /*
    This action will load the Button as a single image, using the given image file.

    Attribute: file An image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Layouts.ManualLayout
    use Libraries.Interface.Controls.Button
    use Libraries.System.File    

    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            ManualLayout layout
            SetLayout(layout)
    
            File file
            file:SetPath("Resources/MyImage.png")

            Button button
            button:LoadImage(file)
            button:SetPixelWidth(100)
            button:SetPixelHeight(100)
            button:SetPixelX(100)
            button:SetPixelY(100)
            Add(button)
        end
    end
    */
    action LoadImage(File file)
        Drawable drawable
        drawable:Load(file)
        LoadImage(drawable)
    end

    /*
    This action will load the Button as a single image, using the provided Drawable as an icon.

    Attribute: file An image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Layouts.ManualLayout
    use Libraries.Interface.Controls.Button
    use Libraries.Game.Graphics.Drawable  

    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            ManualLayout layout
            SetLayout(layout)
    
            Drawable drawable
            drawable:Load("Resources/MyImage.png")

            Button button
            button:LoadImage(drawable)
            button:SetPixelWidth(100)
            button:SetPixelHeight(100)
            button:SetPixelX(100)
            button:SetPixelY(100)
            Add(button)
        end
    end
    */
    action LoadImage(Drawable drawable)
        SetHorizontalLayoutMode(parent:Control:STANDARD)
        SetVerticalLayoutMode(parent:Control:STANDARD)

        SetIcon(drawable)
        SetFont(undefined)
    end

    /*
        This action is fired if the item received the focus.
    */
    action GainedFocus(FocusEvent event)
        parent:Control:GainedFocus(event)
        UpdateLabelColor()
    end

    /*
        This action is fired if the item lost the focus.
    */
    action LostFocus(FocusEvent event)
        parent:Control:LostFocus(event)
        UpdateLabelColor()
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if icon not= undefined
            icon:Dispose()
            Remove(icon)
            icon = undefined
        end

        if label not= undefined
            label:Dispose()
            Remove(label)
            label = undefined
        end

        if properties = undefined
            return now
        end

        ColorGroup background = properties:GetBackgroundColor()
        ColorGroup border = properties:GetBorderColor()
        number borderThickness = properties:GetBorderThickness()
        text labelText = properties:GetLabelText()

        Color color
        Font font = properties:GetFont()
        TextureRegion iconTexture = properties:GetIcon()

        View2D view = properties:GetView2D()

        if font not= undefined and labelText not= ""
            if view = undefined
                ControlShaderView newView
                newView:Initialize()
                view = newView
                SetView2D(view)
            end

            if iconTexture not= undefined
                if icon not= undefined
                    icon:Load(iconTexture)
                    icon:SetColor(properties:GetIconColor())
                else
                    Icon newIcon
                    icon = newIcon
                    icon:SetName("Icon")
                    icon:Load(iconTexture)

                    LayoutProperties iconProperties = icon:GetDefaultLayoutProperties()
                    iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
                    iconProperties:SetPercentageWidth(cast(number, icon:GetRegionWidth()) / icon:GetRegionHeight())
                    iconProperties:SetPercentageHeight(1.0)
                    iconProperties:SetLeftMargin(GetLeftPadding())
                    iconProperties:SetTopMargin(GetTopPadding())
                    iconProperties:SetBottomMargin(GetBottomPadding())
                    icon:SetColor(properties:GetIconColor())
                    Add(icon)
                end
            end

            if label = undefined
                Label newLabel
                label = newLabel
                //ignore the internal label.
                label:SetAccessibilityCode(parent:Item:NOT_ACCESSIBLE)
                LayoutProperties labelProperties = label:GetDefaultLayoutProperties()
                labelProperties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
                labelProperties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
                labelProperties:SetLeftMargin(GetLeftPadding())
                labelProperties:SetRightMargin(GetRightPadding())
                labelProperties:SetTopMargin(GetTopPadding())
                labelProperties:SetBottomMargin(GetBottomPadding())
                label:SetFont(font)
                label:SetSize(properties:GetFontSize())
                label:SetText(labelText)
                label:SetPositionOnBaseLine(false)
                Add(label)

                UpdateLabelColor()
            end
        elseif iconTexture not= undefined
            if manager:GetApplication() is Libraries.Game.WebApplication 
                if iconTexture:GetTextureField() = undefined
                    iconTexture:AddTextureLoadListener(me)
                else
                    iconTexture:RemoveTextureLoadListener(me)
                end
            end

            ImageControlView content
            content:Load(iconTexture)

            if properties:IsSettingWidth() = false
                properties:SetHorizontalLayoutMode(properties:STANDARD)
                properties:SetPixelWidth(content:GetWidth())
            end
            if properties:IsSettingHeight() = false
                properties:SetVerticalLayoutMode(properties:STANDARD)
                properties:SetPixelHeight(content:GetHeight())
            end

            // If the Button has a bad value for MAINTAIN_ASPECT_RATIO, give it a reasonable default. Important for the web where this can happen due to delayed asset loading.
            if GetHorizontalLayoutMode() = parent:Control:MAINTAIN_ASPECT_RATIO and (GetPercentageWidth() = 0 or GetPercentageWidth():IsNotANumber())
                SetPercentageWidth(content:GetWidth() / content:GetHeight())
            elseif GetVerticalLayoutMode() = parent:Control:MAINTAIN_ASPECT_RATIO and (GetPercentageHeight() = 0 or GetPercentageHeight():IsNotANumber())
                SetPercentageHeight(content:GetHeight() / content:GetWidth())
            end

            ColorGroup iconColor = properties:GetIconColor()
            if iconColor = undefined
                iconColor = color:White()
            end
            content:SetColor(iconColor)

            view = content
        end

        if view not= undefined
            SetView2D(view)
        end

        parent:Control:LoadGraphics(properties)
    end

    private action UpdateLabelColor
        if label = undefined
            return now
        end

        ColorGroup color = undefined
        if IsFocused()
            if IsRenderingSelection()
                color = GetSelectionFontColor()
            end

            if color = undefined
                color = GetFocusFontColor()
            end
        elseif IsRenderingSelection()
            color = GetUnfocusedSelectionFontColor()
        end

        if color = undefined
            color = GetFontColor()
        end

        if color not= undefined
            label:SetFontColor(color)
        end
    end

    /*
    Whether or not this button is currently depressed, e.g. by a mouse click or
    touch event.
    */
    action IsDepressed returns boolean
        return depressed
    end

    /*
    Sets whether or not this button is depressed. This is purely an internal
    state and doesn't affect the button's appearance. This function won't need
    to be called directly by most users.
    */
    action SetDepression(boolean depress)
        depressed = depress
    end

    action OnTextureLoad(TextureLoadEvent event)
        // If a texture we were listening to has loaded, refresh the visuals.
        LoadGraphics(GetDefaultLayoutProperties())
        RequestLayout()
    end
    /*
        This action sets the font size of text on the button.
        Attribute: Parameter size the button font size.
    */
    action SetFontSize(integer size)
        parent:Control:SetFontSize(size)
        if explicitAutoFontSizing = false
            automaticFontSizing = false
        end
    end

    /*
    This action returns true if the Button is automatically setting the size of
    the font of its Label, if it has one, or false if it uses a static font size.
    By default, this is true.
    */
    action IsAutomaticFontSizing returns boolean
        return automaticFontSizing
    end

    /*
    This action sets whether or not this Button should automatically set the size
    of the font of its Label, if it has one. This is true by default.
    */
    action SetAutomaticFontSizing(boolean automaticFontSizing)
        me:automaticFontSizing = automaticFontSizing
explicitAutoFontSizing = automaticFontSizing
    end

end