package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.DefaultTreeMenuView
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Behaviors.Controls.TreeTableCellExpandBehavior
use Libraries.Interface.Behaviors.Behavior
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Item2D
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Views.ControlShaderView

class TreeTableCell is Control
    
    TreeTableRow row = undefined
    ToggleButton expandButton
    TreeTableCellExpandBehavior expandBehavior

    // The cell which opens/closes the parent row of this cell's row.
    TreeTableCell accessibleParent = undefined

    text value = ""
    constant integer DEFAULT_PADDING = 6

    // How many pixels the content of a cell is padded per tree depth of the
    // row this cell represents.
    constant integer PADDING_PER_DEPTH = 12
    Label label

    // The Behavior to use when the Cell is activated (e.g. by double click).
    // If this is undefined, the Cell will attempt to use a Behavior defined by
    // the TreeTable instead.
    Behavior activationBehavior = undefined

    on create
label:SetAccessibilityCode(label:parent:Item:NOT_ACCESSIBLE)
        
        FlowLayout layout
        layout:SetIgnoreHidden(false)
        layout:SetSingleLine(true)
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:STANDARD)
        properties:SetVerticalLayoutMode(properties:FIT_FONT)

        properties:SetPercentageWidth(1)

        Font font = GetDefaultFont()
        if font not= undefined
            integer defaultFontSize = GetDefaultFontSize()
            properties:SetFont(font)
            properties:SetFontSize(defaultFontSize)
        end

        SetInputGroup("TreeTableCell")
        SetInterfaceOptionsKey("TreeTableCell")
        SetClipping(true)
        label:SetPositionOnBaseLine(false)
        Add(label)
        SetAccessibilityCode(parent:Item:TREE_TABLE_CELL)
        SetName("Cell")

        // The button isn't added here, it's only added to the structure in
        // LoadGraphics if it's necessary (e.g. this cell is in the first column
        // and the row is expandable).

        LayoutProperties buttonProperties = expandButton:GetDefaultLayoutProperties()
        buttonProperties:SetHorizontalLayoutMode(buttonProperties:MAINTAIN_ASPECT_RATIO)
        buttonProperties:SetVerticalLayoutMode(buttonProperties:STANDARD)
        buttonProperties:SetPercentageWidth(1.0)
        buttonProperties:SetPercentageHeight(1.0)
        buttonProperties:SetLabelText(" ")

        expandBehavior:SetCell(me)
        expandButton:SetBehavior(expandBehavior)
        expandButton:SetAccessibilityCode(parent:Item:NOT_ACCESSIBLE)

        SetBorderThickness(1)
    end

    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)
        
        if GetView2D() = undefined
            ControlShaderView view
            view:Initialize()
            SetView2D(view)
        end

        TreeTable table = GetTreeTable()
        LayoutProperties tableProperties = undefined

        if table not= undefined
            tableProperties = table:GetDefaultLayoutProperties()
        end

        if IsRenderingSelection()
            label:SetColor(GetSelectionFontColor())
        else
            label:SetColor(GetFontColor())
        end

        label:SetLeftMargin(DEFAULT_PADDING)
        label:SetFont(properties:GetFont())
        label:SetFontSize(properties:GetFontSize())
        label:SetInterfaceScale(properties:GetInterfaceScale())

        TreeTableColumn column = GetColumn()
        boolean inFirstColumn = column not= undefined and column:IsFirstColumn()

        if inFirstColumn and row not= undefined
            if GetChildren():Has(expandButton) = false
                TreeTableRow row = GetRow()
                if row not= undefined
                    expandButton:SetBehavior(undefined)
                    expandButton:SetToggleState(row:IsExpanded())
                    expandButton:SetBehavior(expandBehavior)
                end

                View2D buttonView = properties:GetView2D()
                if buttonView = undefined
                    buttonView = expandButton:GetView2D()
                    if buttonView = undefined
                        integer height = 10
                        Font font = properties:GetFont()
                        if font not= undefined
                            height = font:GetLineHeight()
                        end

                        DefaultTreeMenuView content
                        content:Initialize(height, height * 2)
                        buttonView = content
                    end
                end

                if expandButton:GetView2D() not= buttonView
                    expandButton:SetView2D(buttonView)
                    expandButton:GetDefaultLayoutProperties():SetView2D(buttonView)
                end

                Add(0, expandButton)
            end

            if row:IsEmpty()
                expandButton:Hide()
            else
                expandButton:Show()
            end

            if GetAccentColor() not= undefined
                expandButton:SetBackgroundColor(GetAccentColor())
                if expandButton:GetView2D() is DefaultTreeMenuView
                    DefaultTreeMenuView defaultView = cast(DefaultTreeMenuView, expandButton:GetView2D())
                    defaultView:SetColor(GetAccentColor())
                end
            elseif IsRenderingSelection()
                if IsRenderingFocus()
                    expandButton:SetBackgroundColor(GetSelectionFontColor())
                    if expandButton:GetView2D() is DefaultTreeMenuView
                        DefaultTreeMenuView defaultView = cast(DefaultTreeMenuView, expandButton:GetView2D())
                        defaultView:SetColor(GetSelectionFontColor())
                    end
                else
                    expandButton:SetBackgroundColor(GetUnfocusedSelectionFontColor())
                    if expandButton:GetView2D() is DefaultTreeMenuView
                        DefaultTreeMenuView defaultView = cast(DefaultTreeMenuView, expandButton:GetView2D())
                        defaultView:SetColor(GetUnfocusedSelectionFontColor())
                    end
                end
            else
                expandButton:SetBackgroundColor(GetFontColor())
                if expandButton:GetView2D() is DefaultTreeMenuView
                    DefaultTreeMenuView defaultView = cast(DefaultTreeMenuView, expandButton:GetView2D())
                    defaultView:SetColor(GetFontColor())
                end
            end

            LayoutProperties buttonProperties = expandButton:GetDefaultLayoutProperties()
            expandButton:SetLeftMargin(PADDING_PER_DEPTH * row:GetTreeDepth() * GetInterfaceScale())
        end
    end

    action SetText(text value)
        me:value = value
        label:SetText(value)
    end

    action GetText returns text
        return value
    end

    action GainedSelection
        parent:Control:GainedSelection()

        label:SetColor(GetSelectionFontColor())
        if GetAccentColor() = undefined
            expandButton:SetBackgroundColor(GetSelectionFontColor())
            if expandButton:GetView2D() is DefaultTreeMenuView
                DefaultTreeMenuView defaultView = cast(DefaultTreeMenuView, expandButton:GetView2D())
                defaultView:SetColor(GetSelectionFontColor())
            end
        end
    end

    action LostSelection
        parent:Control:LostSelection()

        label:SetColor(GetFontColor())
        if GetAccentColor() = undefined
            expandButton:SetBackgroundColor(GetFontColor())
            if expandButton:GetView2D() is DefaultTreeMenuView
                DefaultTreeMenuView defaultView = cast(DefaultTreeMenuView, expandButton:GetView2D())
                defaultView:SetColor(GetFontColor())
            end
        end
    end

    /*
    This action informs the cell to adjust its colors based on focus loss, if necessary.
    This is called automatically by the TreeTable class. Most users will not need to call this manually.
    */
    action TreeTableLostFocus
        if IsRenderingSelection()
            label:SetColor(GetUnfocusedSelectionFontColor())
        end
    end

    /*
    This action informs the cell to adjust its colors based on focus change, if necessary.
    This is called automatically by the TreeTable class. Most users will not need to call this manually.
    */
    action TreeTableGainedFocus
        if IsRenderingSelection()
            label:SetColor(GetSelectionFontColor())
        end
    end

    action IsRenderingSelection returns boolean
        return IsSelected()
    end

    action IsRenderingFocus returns boolean
        TreeTable table = GetTreeTable()
        return table not= undefined and table:IsRenderingFocus()
    end

    /*
    This action returns true if the cell is currently selected, or false otherwise.
    If this cell hasn't been added to a TreeTable, this action will always return false.

    Attribute: Returns Whether or not this cell is currently selected.
    */
    action IsSelected returns boolean
        TreeTable table = GetTreeTable()
        if table = undefined
            return false
        end

        return table:GetSelection():Get() = me
    end

    action ClickedMouse
        parent:Control:ClickedMouse()
        Select()
    end

    action Select
        // Don't actually select here! Go to the TreeTable and ask it to 
        // select us. We do this to allow the TreeTable to update the
        // selection and deselect the old selection.
        TreeTable table = GetTreeTable()
        if table not= undefined
            table:Select(me)
        end
    end

    action Deselect
        // Don't actually select here! Go to the TreeTable and ask it to 
        // select us. We do this to allow the TreeTable to update the
        // selection and deselect the old selection.
        TreeTable table = GetTreeTable()
        if table not= undefined
            table:Deselect()
        end
    end

    action GetColumn returns TreeTableColumn
        Item2D item = GetParent()
        repeat while (item is TreeTableColumn = false) and (item not= undefined)
            item = item:GetParent()
        end
        return cast(TreeTableColumn, item)
    end

    action GetTreeTable returns TreeTable
        TreeTableColumn column = GetColumn()
        if column not= undefined
            return column:GetTreeTable()
        else
            return undefined
        end
    end

    action GetActivationBehavior returns Behavior
        return activationBehavior
    end

    action SetActivationBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action Activate(BehaviorEvent event)
        if GetActivationBehavior() not= undefined
            parent:Control:Activate(event)
        else
            TreeTable table = GetTreeTable()
            if table = undefined or table:GetCellActivationBehavior() = undefined
                return now
            end

            Behavior behavior = table:GetCellActivationBehavior()

            if not event:GetItem():Equals(me)
                event = event:Copy()
                event:SetItem(me)
            end
            behavior:Run(event)

            ControlActivationEvent controlEvent
            controlEvent:Set(me, event)
            NotifyControlActivationListeners(controlEvent)
        end
    end

    action SetRow(TreeTableRow row)
        me:row = row
    end

    action GetRow returns TreeTableRow
        return row
    end

    /*
    This action is used internally by the system to update the toggle button for
    a tree. Most users will never need to call this action directly.
    */
    action UpdateButtonState
        if GetChildren():Has(expandButton) and row not= undefined
            // Temporarily remove the behavior from the button so that changing
            // its toggle state doesn't trigger the behavior.
            expandButton:SetBehavior(undefined)
            expandButton:SetToggleState(row:IsExpanded())
            expandButton:SetBehavior(expandBehavior)
        end
    end

    /*
        This action returns the nearest parent object that is accessible. This 
        can be anything that the programmer wants to be accessible, from user interface
        components in a 2D interface to 3D components relative in 3-space on screen. 
        By default, items have no accessible parent and are self-contained, but 
        user interface components normally override the behavior so that controls
        can be logically nested within each other.

        attribute: returns Item
    */
    action GetAccessibleParent returns Item
        return parent:Item2D:GetAccessibleParent()

        // Code used to allow TreeTableCells to host other cells.
//        if accessibleParent not= undefined
//            return accessibleParent
//        else
//            return parent:Item2D:GetAccessibleParent()
//        end
    end

    /*
    This action sets the accessible parent of this cell, which is always either
    the first cell of the parent row or undefined. This action is called
    internally by the system and should never be called explicitly.
    */
    action SetAccessibleParent(TreeTableCell parentCell)
        accessibleParent = parentCell
    end

    action IsAccessibleParent returns boolean
        // This should return true if/when TreeTableCells can host other cells.
        //return true
        return false
    end
end
