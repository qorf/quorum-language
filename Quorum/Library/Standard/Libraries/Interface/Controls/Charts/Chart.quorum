package Libraries.Interface.Controls.Charts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.ControlView
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Containers.Array
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Compute.Math
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Views.View2D
use Libraries.Interface.Item
use Libraries.Interface.Controls.Charts.ChartDisplay
use Libraries.System.File
use Libraries.Interface.Views.LabelBoxView
use Libraries.System.DateTime
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine 
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Interface.Controls.Charts.Graphics.RegressionLinePointMarker
use Libraries.System.Properties
use Libraries.Game.Graphics.Gradient


/*

    This class represents a generic chart on the system. By default, charts present visual 
    information to the user and also present themselves as accessible controls to the operating 
    system. This includes a selection, called ChartSelection, that can be queried for information 
    that is relevant to particular kinds of charts. For example, a bar chart might have labels, 
    axis, and bars. Each of these can be navigated up and down to go between parents, with the 
    top-most level being a summary and any ChartItems underneath being representations of the 
    underlying structure of the chart. 

    To put this in perspective, consider that a bar chart might allow one to navigate to a 
    level of a chart that contains the axis, bars, and labels. On the bars, if one presses the 
    down arrow, this now allows the user to navigate between the bars for information and this 
    changes the default selection, which informs the operating system of the change. The broad 
    purpose of this architecture is that it allows the chart to have an overall structure that 
    is different from the graphical structure, allowing the chart itself to set reasonable 
    defaults for how to navigate the control with the keyboard

    Attribute: Author Gabriel Contreras, Andreas Stefik, Hannah Williams

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Controls.Charts.Chart
    use Libraries.Interface.Controls.Charts.BarChart

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            BarChart chart
            Add(chart)
        end
    end
*/
class Chart is ChartItem
    private Math math
    private Color color
    private ChartOptions options

    // Chart Accessibilty
    private boolean treeNeedsUpdate = true
    private ChartSelection selection
    private Color highlightColor = undefined
    private ColorGroup previousColorGroup = undefined
    private ColorGroup previousBackgroundColor = undefined
    private Color previousColor = undefined
    private number previousZ = 0
    private boolean hasAccessibility = true
    private boolean showPatterns = false

    // Chart Orientation
    private boolean horizontalOrientation = false
    private boolean verticalOrientation = false
    private boolean orientationChanged = false
    private boolean orientationCapable = true

    // Title Area Components
    private number titleAreaHeightPercent = 0.05
    private ChartLabel title = undefined
    private text titleText = "Chart Title"
    private boolean showTitle = true 
    private integer titlefontsize = 0
    private boolean titleFontSizeOverride = false
    private boolean allFontSizeOverride = false
//    private text titleLocation = "center" 

    // Subtitle Area Components - not implemented yet
    private number subtitleAreaHeightPercent = 0
    private ChartLabel subtitle = undefined
    private text subtitleText = "Subtitle"
    private boolean showSubtitle = false
    private integer subtitlefontsize = 0
    private boolean subtitleFontSizeOverride = false
//    private text subtitleLocation = "center"

    // Chart Area Components
    private Drawable background = undefined
    private ChartAreaPanel chartArea
    private Array<GroupPanel> groupPanels
    private integer paddedChartOffset = 0
    private integer numberOfChartAreas = 1
    private integer regLineDensity = 0
    private Color regLineColor = undefined
    private boolean regressionCapable = false
    private boolean hasGroups = false
    private boolean defaultShowBrackets = false
    private boolean overrideDefaultShowBrackets = false
    private boolean showAnnotations = false

    // Chart Area Facetting
    private Array <ChartAreaPanel> subChartAreas
    private boolean separationCapable = true
    private boolean separateByFactor = false
    private boolean separateBySeries = false
    private boolean defaultSeparateBySeries = false
    private boolean defaultSeparateByFactor = false
    private boolean overrideDefaultSeparation = false
    private boolean showSubChartAreaBorders = true
    private boolean showSubChartAreaTitles = true
    private Array<text> factorList = undefined

    // X-Axis Components
    private HorizontalAxisPanel horizontalPanel
    private Array <HorizontalAxisPanel> subHorizontalPanels
    private boolean showXAxis = true   
    private boolean showXAxisTitle = true 
    private boolean showMajorXGridLines = true
    private boolean showMinorXGridLines = false
    private boolean xLabelFontSizeOverride = false
    private boolean xTitleFontSizeOverride = false
    private boolean overrideXLabelsRotation = false
    private number horizontalPanelWidthPercent = 0.75
    private number horizontalPanelHeightPercent = 0.05
    private integer xLabelsRotation = 0
    private boolean xAxisIsIndependent = true

    // Y-Axis Components
    private VerticalAxisPanel verticalPanel
    private Array <VerticalAxisPanel> subVerticalPanels
    private boolean showYAxis = true
    private boolean showYAxisTitle = true 
    private boolean showMajorYGridLines = true
    private boolean showMinorYGridLines = false   
    private boolean yLabelFontSizeOverride = false
    private boolean yTitleFontSizeOverride = false
    private number verticalPanelWidthPercent = 0.05
    private number verticalPanelHeightPercent = 0.75 
    private integer yLabelsRotation = 0

    // Legend Components
    private Legend legend
    private boolean showLegend = true
    private boolean legendLabelFontSizeOverride = false
    private boolean legendTitleFontSizeOverride = false
    private boolean showLinearRegression = false
    private number legendPanelWidthPercent = 0.05
    private number legendPanelHeightPercent = 0.05

    // Terminology for navigation instructions
    private text groupText = "group"
    private text groupsText = "groups"
    private text seriesText = "series"
    private text chartItemText = "chart item"
    private text chartItemsText = "chart items"

    // Keyboard Commands
    private text generalInstruction = "use the arrow keys"
    private text listOrderInstruction = "use the arrow keys"
    private text valueOrderInstruction = "use Page Up or Page Down"
    private text enterInstruction = "use Enter"
    private text exitInstruction = "use Shift + Enter"

    // How thick the borders of points should be, in pixels.
    // Only used if the chart renders points. Otherwise, this does nothing.
    number pointBorderThickness = 1

    // How thick the borders around icons in the Legend should be, in pixels.
    // Only used if the chart has a Legend. Otherwise, this does nothing.
    number legendIconBorderThickness = 1

    // Used to indicate that a chart should include a movable regression line.
    // Must be set before displaying the chart.
    boolean showMovableRegressionLine = false

    // Values used to lock the initial y-intercept value of regression lines.
    boolean lockRegressionIntercepts = false
    number regressionInterceptLock = 0
    //File paths for script/style
    text scriptFilepath = ""
    text styleFilepath = ""

    // Toggle Touch Exploration versus Gesture-based Structured Chart Navigation
    boolean touchExplorationEnabled = false

    // Single set of brackets and arrows reused for all selectable elements that would need them
    Array <Drawable> selectionBracket //may or may not be used
    Drawable selectionArrow //may or may not be used
    integer currentArrowSize = -1
    boolean currentSideArrow = false

    on create
        CheckPlatformInstructions()
        chartArea:SetName("Chart Area")
        Add(chartArea)

        // Get default colors from the InterfaceOptions.
        SetInterfaceOptionsKey("Chart")
    end

    action IsAccessibleParent returns boolean
        return true
    end

    blueprint action GenerateSummary returns text
    private blueprint action GenerateInfoTree

    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        parent:Control:LoadGraphics(properties)   
        if properties = undefined
            return now
        end
        
        // Set default size if necessary
        if GetWidth() <= 0 or GetHeight() <= 0
            //This was added in Quorum-12 to ensure it doesn't trigger layout during load graphics.
            boolean isResizing = parent:Item2D:isResizing
            parent:Item2D:isResizing = true
            SetSize(1000,1000)
            parent:Item2D:isResizing = isResizing
        end

        // Load background of display window
        if GetBackground() = undefined
            Drawable background
            background:LoadFilledRectangle(cast(integer, GetWidth()), cast(integer, GetHeight()))
            SetBackground(background)
            Add(background)
        end

        // Always ensure the background is the right color, whether it's newly loaded or not.
        GetBackground():SetColor(GetBackgroundColor())

        // Load background/border of chart area
        chartArea:LoadChartAreaView()
        
        if defaultSeparateBySeries and not overrideDefaultSeparation
            SeparateBySeries()
        elseif defaultSeparateByFactor and not overrideDefaultSeparation
            SeparateByFactor()
        end

        if defaultShowBrackets and HasGroups() and not overrideDefaultShowBrackets
            verticalPanel:ShowGroupBrackets(true)
            horizontalPanel:ShowGroupBrackets(true)
        end

        // Load the arrow and brackets
        //initially hidden and resized, arbitrary triangle
        Array<number> vertices
        integer tempArrowSize = 65
        vertices:Add(tempArrowSize)
        vertices:Add(0)
        vertices:Add(tempArrowSize*2)
        vertices:Add(tempArrowSize)
        vertices:Add(0)
        vertices:Add(tempArrowSize)
        selectionArrow:LoadShape(vertices, GetSelectionColor())
        selectionArrow:Hide()
        selectionArrow:SetZ(-1)
        Add(selectionArrow)

        //initially hidden and resized when new focus is found, arbitrary 3 rectangles
        Drawable top
        top:LoadFilledRectangle(0, 0, GetSelectionColor())
        top:SetPosition(0, 0)
        top:Hide()
        top:SetZ(-1)
        Add(top)

        Drawable side
        side:LoadFilledRectangle(0, 0, GetSelectionColor())
        side:SetPosition(0, 0)
        side:Hide()
        side:SetZ(-1)
        Add(side)

        Drawable bottom
        bottom:LoadFilledRectangle(0, 0, GetSelectionColor())
        bottom:SetPosition(0, 0)
        bottom:Hide()
        bottom:SetZ(-1)
        Add(bottom)

        selectionBracket:Add(top)
        selectionBracket:Add(side)
        selectionBracket:Add(bottom)


        // Load sub chart areas and sub axis panels
        if numberOfChartAreas > 1
            if separateByFactor
                Array<text> newLabels 
                integer size = GetSeriesList():GetSize()
                integer j = 0
                repeat while j < size
                    newLabels:Add(GetSeriesList():Get(j):GetName())
                    j = j + 1
                end
                if xAxisIsIndependent
                    horizontalPanel:SetTextLabels(newLabels)
                    horizontalPanel:SetTitleText(legend:GetTitleText())
                    horizontalPanel:NumericalOverrideLabels(false) //Set to false since new labels may not be numerical anymore
                else
                    verticalPanel:SetTextLabels(newLabels)
                    verticalPanel:SetTitleText(legend:GetTitleText())
                    verticalPanel:NumericalOverrideLabels(false) //Set to false since new labels may not be numerical anymore
                end      
            end
            integer i = 0
            repeat while i < numberOfChartAreas
                ChartAreaPanel subArea
                if separateByFactor
                    if i < GetFactorList():GetSize()
                        subArea:SetName(GetFactorList():Get(i))
                        ChartLabel newLabel
                        newLabel:SetText(subArea:GetName())
                        subArea:SetLabel(newLabel)
                        subArea:Add(newLabel)
                        chartArea:Add(subArea)
                    else
                        subArea:Hide()
                    end
                end
                if separateBySeries 
                    if i < GetSeriesList():GetSize()
                        subArea:SetName(GetSeriesList():Get(i):GetName())
                        subArea:SetSeries(GetSeriesList():Get(i))
                        ChartLabel newLabel
                        newLabel:SetText(subArea:GetName())
                        subArea:SetLabel(newLabel)
                        subArea:Add(newLabel)
                        chartArea:Add(subArea)
                    else
                        subArea:Hide()
                    end
                end

                subChartAreas:Add(subArea)
                if i < verticalPanel:GetNumberOfSections()
                    VerticalAxisPanel subYAxis
                    subYAxis:SetName("Sub y-axis")
                    subVerticalPanels:Add(subYAxis)
                end
                if i < horizontalPanel:GetNumberOfSections()
                    HorizontalAxisPanel subXAxis
                    subXAxis:SetName("Sub x-axis")
                    subHorizontalPanels:Add(subXAxis)
                end
                i = i + 1
            end
        end

        if IsShowingTitle()
            titleAreaHeightPercent = 0.10
            if GetTitleLabel() = undefined
                ChartLabel newLabel
                SetTitleLabel(newLabel)
                newLabel:SetText(titleText)
                newLabel:SetBold(true)
                Add(newLabel)
            end
        end

        if IsShowingSubtitle()
            subtitleAreaHeightPercent = 0.05
            if GetSubtitleLabel() = undefined
                ChartLabel newLabel
                ColorGroup border = GetIconColor()
                newLabel:SetFontColor(border)
                SetSubtitleLabel(newLabel)
                newLabel:SetText(subtitleText)
                Add(newLabel)
            end
        end

        horizontalPanel:LoadAxis(me, properties)
        if IsShowingXAxis()
            horizontalPanelHeightPercent = 0.15
            Add(horizontalPanel)
        end
        
        verticalPanel:LoadAxis(me, properties)
        if IsShowingYAxis()
            verticalPanelWidthPercent = 0.15
            Add(verticalPanel)
        end

        if HasMovableRegressionLine()
            LoadMovableRegressionLines()
        end

        legend:ApplySeriesColor()

        if IsShowingPatterns()
            legend:ApplySeriesPattern()
        end

        legend:LoadLegend(me, properties)
        if IsShowingLegend()
            legendPanelWidthPercent = 0.10
            Add(legend)
        elseif legend:GetSeriesList():GetSize() > 0
            integer i = 0
            repeat while i < legend:GetSeriesList():GetSize()
                Add(legend:GetSeriesList():Get(i))
                i = i + 1
            end
        end

        Add(chartArea)
        if IsShowingLinearRegression()
            LoadRegressionLines()
        end
        SetNeedsUpdate(true)
        Resize()
        SetNextFocus(GetNextFocus())
        SetPreviousFocus(GetPreviousFocus())
    end

    /*
        This action will flip the axis min/max and any labels associated.  
        Then the un-used axis will be deactivated so it won't interfere with the
        accessibility navigation.
    */
    private action FlipAxisInfo()
        number tempNum = 0
        integer tempInt = 0
        boolean tempBool = true
        text tempText = ""
        DateTime tempDate
        Array <text> tempLabels

        // Axis offset
        tempNum = horizontalPanel:GetPaddingOffsetPercent()
        horizontalPanel:SetPaddingOffsetPercent(verticalPanel:GetPaddingOffsetPercent())
        verticalPanel:SetPaddingOffsetPercent(tempNum)

        tempBool = horizontalPanel:OverrideDefaultPaddingOffset()
        horizontalPanel:OverrideDefaultPaddingOffset(verticalPanel:OverrideDefaultPaddingOffset())
        verticalPanel:OverrideDefaultPaddingOffset(tempBool)


        // Range values
        tempNum = horizontalPanel:GetMaximum()
        horizontalPanel:SetMaximum(verticalPanel:GetMaximum())
        verticalPanel:SetMaximum(tempNum)

        tempNum = horizontalPanel:GetMinimum()
        horizontalPanel:SetMinimum(verticalPanel:GetMinimum())
        verticalPanel:SetMinimum(tempNum)

        tempBool = horizontalPanel:OverrideDefaultMin()
        horizontalPanel:OverrideDefaultMin(verticalPanel:OverrideDefaultMin())
        verticalPanel:OverrideDefaultMin(tempBool)

        tempBool = horizontalPanel:OverrideDefaultMax()
        horizontalPanel:OverrideDefaultMax(verticalPanel:OverrideDefaultMax())
        verticalPanel:OverrideDefaultMax(tempBool)


        // DateRange values
        DateTime tempdate = horizontalPanel:GetMaximumDate()
        horizontalPanel:SetMaximumDate(verticalPanel:GetMaximumDate())
        verticalPanel:SetMaximumDate(tempdate)

        tempdate = horizontalPanel:GetMinimumDate()
        horizontalPanel:SetMinimumDate(verticalPanel:GetMinimumDate())
        verticalPanel:SetMinimumDate(tempdate)


        // Tick information
        tempNum = horizontalPanel:GetTickInterval()
        horizontalPanel:SetTickInterval(verticalPanel:GetTickInterval())
        verticalPanel:SetTickInterval(tempNum)

        tempBool = horizontalPanel:OverrideDefaultInterval()
        horizontalPanel:OverrideDefaultInterval(verticalPanel:OverrideDefaultInterval())
        verticalPanel:OverrideDefaultInterval(tempBool)

        tempInt = horizontalPanel:GetTickCount()
        horizontalPanel:SetTickCount(verticalPanel:GetTickCount())
        verticalPanel:SetTickCount(tempInt)

        tempBool = horizontalPanel:OverrideDefaultTickCount()
        horizontalPanel:OverrideDefaultTickCount(verticalPanel:OverrideDefaultTickCount())
        verticalPanel:OverrideDefaultTickCount(tempBool)

        tempBool = horizontalPanel:ShowTicks()
        horizontalPanel:ShowTicks(verticalPanel:ShowTicks())
        verticalPanel:ShowTicks(tempBool)

        // Brackets
        tempBool = horizontalPanel:ShowGroupBrackets()
        horizontalPanel:ShowGroupBrackets(verticalPanel:ShowGroupBrackets())
        verticalPanel:ShowGroupBrackets(tempBool)


        // Labels
        tempLabels = horizontalPanel:GetTextLabels()
        horizontalPanel:SetTextLabels(verticalPanel:GetTextLabels())
        verticalPanel:SetTextLabels(tempLabels)

        tempBool = horizontalPanel:ShowLabels()
        horizontalPanel:ShowLabels(verticalPanel:ShowLabels())
        verticalPanel:ShowLabels(tempBool)

        tempBool = horizontalPanel:NumericalOverrideLabels()
        horizontalPanel:NumericalOverrideLabels(verticalPanel:NumericalOverrideLabels())
        verticalPanel:NumericalOverrideLabels(tempBool)


        // Title
        tempText = horizontalPanel:GetTitleText()
        horizontalPanel:SetTitleText(verticalPanel:GetTitleText())
        verticalPanel:SetTitleText(tempText)


        // Number format
        tempText = horizontalPanel:GetNumberFormat()
        horizontalPanel:SetNumberFormat(verticalPanel:GetNumberFormat())
        verticalPanel:SetNumberFormat(tempText)

        if xAxisIsIndependent
            xAxisIsIndependent = false
        end
    end

    private action DisposeDrawables()
        if title not= undefined
            title:Dispose()
            Remove(title)
            title = undefined
        end

        if background not= undefined
            background:Dispose()
            Remove(background)
            background = undefined
        end

        GetChartArea():Empty()
        GetLegend():Empty()
        GetVerticalPanel():Empty()
        GetHorizontalPanel():Empty()
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetHorizontalPanel returns HorizontalAxisPanel
        return horizontalPanel
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetSubHorizontalPanels returns Array<HorizontalAxisPanel>
        return subHorizontalPanels
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetVerticalPanel returns VerticalAxisPanel
        return verticalPanel
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetSubVerticalPanels returns Array<VerticalAxisPanel>
        return subVerticalPanels
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetChartArea returns ChartAreaPanel
        return chartArea
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetSubChartAreas returns Array<ChartAreaPanel>
        return subChartAreas
    end

    /*
    This action allows user to show the borders around each sub chart area.
    By default this setting is set to true in most cases (with the exception of pie charts).
    */
    action ShowSubChartAreaBorders(boolean showSubChartAreaBorders)
        me:showSubChartAreaBorders = showSubChartAreaBorders
    end

    /*
    This action allows user to show the borders around each sub chart area.
    By default this setting is set to true.
    */
    action ShowSubChartAreaBorders returns boolean
        return showSubChartAreaBorders
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetNumberOfChartAreas returns integer
        return numberOfChartAreas
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    private action GetNumberOfVisibleChartAreas returns integer
        integer count = 0
        integer i = 0
        repeat while i < subChartAreas:GetSize()
            if subChartAreas:Get(i):IsShowing()
                count = count + 1
            end
            i = i + 1
        end
        return count
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetGroupPanels returns Array<GroupPanel>
        return groupPanels
    end

    action AddGroupPanel(GroupPanel group)
        groupPanels:Add(group)
    end

    /*
    Attribute: True if all items in chart are filled with a pattern by series.
    */
    action IsShowingPatterns returns boolean
        return showPatterns
    end

    action ShowPatterns(boolean show)
        showPatterns = show
    end

    /*
    Attribute: True if all annotations for chart drawables are showing.
    Attribute: Returns True if all annotations for chart drawables are showing.
    */
    action ShowAnnotations returns boolean
        return showAnnotations
    end

    /*
        This action sets whether to show annotations for chart dawables.

        Attribute: Parameter show The value to set the showAnnotations flag to.

        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.BarChart
        
        DataFrame frame
        frame:Load("Dogs.csv")
        
        frame:AddSelectedFactors("Maximum Life Span")
        
        BarChart chart = frame:BarChart()
        chart:ShowAnnotations(true)
        chart:Display(1500,750)
    */
    action ShowAnnotations(boolean show)
        showAnnotations = show
    end
    /*
        This action gets the chart area width percent of the whole chart width.
    */
    action GetChartAreaWidthPercent returns number
        return horizontalPanelWidthPercent
    end
    /*
        This action gets the chart area height percent of the whole chart height.
    */
    action GetChartAreaHeightPercent returns number
        return verticalPanelHeightPercent
    end

    private action SetChartAreaWidthPercent(number value)
        me:horizontalPanelWidthPercent = value
    end

    private action SetChartAreaHeightPercent(number value)
        me:verticalPanelHeightPercent = value
    end
    /*
        This action gets the horizontal panel height percent of the whole chart height.
    */
    action GetHorizontalPanelHeightPercent returns number
        return horizontalPanelHeightPercent
    end

    private action SetHorizontalPanelHeightPercent (number value)
        horizontalPanelHeightPercent = value
    end
    /*
        This action gets the horizontal panel width percent of the whole chart width.
    */
    action GetHorizontalPanelWidthPercent returns number
        return horizontalPanelWidthPercent
    end

    private action SetHorizontalPanelWidthtPercent (number value)
        horizontalPanelWidthPercent = value
    end
    /*
        This action gets the vertical panel height percent of the whole chart height.
    */
    action GetVerticalPanelHeightPercent returns number
        return verticalPanelHeightPercent
    end

    private action SetVerticalPanelHeightPercent (number num)
        verticalPanelHeightPercent = num
    end
    /*
        This action gets the vertical panel width percent of the whole chart width.
    */
    action GetVerticalPanelWidthPercent returns number
        return verticalPanelWidthPercent
    end

    private action SetVerticalPanelWidthtPercent (number num)
        verticalPanelWidthPercent = num
    end
    /*
        This action shows or hides the ticks on the Y axis.
        
        Atrribute: Parameter show when true and hide when false.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:ShowYTicks(true)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action ShowYTicks(boolean show)
        verticalPanel:ShowTicks(show)
    end
    /*
        This action shows or hides the ticks on the X axis.
        
        Atrribute: Parameter show when true and hide when false.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:ShowXTicks(true)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action ShowXTicks(boolean show)
        horizontalPanel:ShowTicks(show)
    end    
    /*
        This action shows the ticks on the X and Y axis.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:ShowAllTicks()
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action ShowAllTicks
        verticalPanel:ShowTicks(true)
        horizontalPanel:ShowTicks(true)
    end
    /*
        This action hides the ticks on the X and Y axis.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:HideAllTicks()
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action HideAllTicks
        verticalPanel:ShowTicks(false)
        horizontalPanel:ShowTicks(false)
    end
    /*
        This action set the number of ticks on the X axis.
        
        Atrribute: Parameter ticks the number of tick on the x axis.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:FlipOrientation()
                chart:SetXTickCount(8)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetXTickCount(integer ticks)
        horizontalPanel:SetTickCount(ticks)
        horizontalPanel:OverrideDefaultTickCount(true)
    end
    /*
        This action set the number between ticks on the X axis.
        
        Atrribute: Parameter set the number between ticks on the x axis.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:FlipOrientation()
                chart:SetXTickInterval(10.5)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetXTickInterval(number set)
        horizontalPanel:SetTickInterval(set)
        horizontalPanel:SetNumberFormat("number")
        horizontalPanel:OverrideDefaultInterval(true)
    end
    /*
        This action set the integer distance between ticks on the X axis.
        
        Atrribute: Parameter set the integer value between x axis ticks.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:FlipOrientation()
                chart:SetXTickInterval(10)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetXTickInterval(integer set)
        horizontalPanel:SetTickInterval(cast(number, set))
        horizontalPanel:OverrideDefaultInterval(true)
    end
    /*
        This action set the number of ticks on the y axis.
        
        Atrribute: Parameter ticks the number of tick on the y axis.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")

                chart:SetYTickCount(8)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetYTickCount(integer ticks)
        verticalPanel:SetTickCount(ticks)
        verticalPanel:OverrideDefaultTickCount(true)
    end
    /*
        This action set the number between ticks on the Y axis.
        
        Atrribute: Parameter set the number between ticks on the y axis.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:SetYTickInterval(10.5)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetYTickInterval(number set)
        verticalPanel:SetTickInterval(set)
        verticalPanel:SetNumberFormat("number")
        verticalPanel:OverrideDefaultInterval(true)
    end
    /*
        This action set the integer distance between ticks on the Y axis.
        
        Atrribute: Parameter set the integer value between y axis ticks.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:SetYTickInterval(10)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetYTickInterval(integer set)
        verticalPanel:SetTickInterval(cast(number, set))
        verticalPanel:OverrideDefaultInterval(true)
    end
    /*
        This action gets the number of the minimum value on the X axis.
        
        Atrribute: Returns the number value of the minumum on the x axis.
    */
    action GetXAxisMinimum returns number
        return horizontalPanel:GetMinimum()
    end
    /*
        This action sets the X axis minimum value.
        
        Atrribute: Parameter min the number for the x axis minumum.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:FlipOrientation()
                chart:SetXAxisMinimum(0.0)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetXAxisMinimum(number min)
        horizontalPanel:SetMinimum(min)
        horizontalPanel:OverrideDefaultMin(true)
    end
    /*
        This action gets the number of the maximum value on the X axis.
        
        Atrribute: Returns the number value of the maximum on the x axis.
    */
    action GetXAxisMaximum returns number
        return horizontalPanel:GetMaximum()
    end
    /*
        This action sets the X axis maximum value.
        
        Atrribute: Parameter max the number for the x axis maximum.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:FlipOrientation()
                chart:SetXAxisMaximum(20.5)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetXAxisMaximum(number max)
        horizontalPanel:SetMaximum(max)
        horizontalPanel:OverrideDefaultMax(true)
    end
    /*
        This action gets the number of the minimum value on the Y axis.
        
        Atrribute: Returns the number value of the minimum on the y axis.
    */
    action GetYAxisMinimum returns number
        return verticalPanel:GetMinimum()
    end
    /*
        This action sets the Y axis minimum value.
        
        Atrribute: Parameter min the number for the y axis minimum.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")

                chart:SetYAxisMinimum(0.0)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetYAxisMinimum(number min)
        verticalPanel:SetMinimum(min)
        verticalPanel:OverrideDefaultMin(true)
    end
    /*
        This action gets the number of the maximum value on the Y axis.
        
        Atrribute: Returns the number value of the maximum on the y axis.
    */
    action GetYAxisMaximum returns number
        return verticalPanel:GetMaximum()
    end
    /*
        This action sets the Y axis maximum value.
        
        Atrribute: Parameter max the number for the y axis maximum.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")

                chart:SetYAxisMaximum(0.0)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetYAxisMaximum(number max)
        verticalPanel:SetMaximum(max)
        verticalPanel:OverrideDefaultMax(true)
    end
    /*
        This action sets the X axis value format, "number" or "integer".
        
        Atrribute: Parameter format the text values "number" or "integer are valid.
    */
    action SetXAxisNumberFormat(text format)
        text newFormat = format:ToLowerCase()
        if newFormat = "integer" or newFormat = "number"
            horizontalPanel:SetNumberFormat(format)
            horizontalPanel:OverrideDefaultNumberFormat(true)
        end
    end
    /*
        This action sets the Y axis value format, "number" or "integer".
        
        Atrribute: Parameter format the text values "number" or "integer are valid.
    */
    action SetYAxisNumberFormat(text format)
        text newFormat = format:ToLowerCase()
        if newFormat = "integer" or newFormat = "number"
            verticalPanel:SetNumberFormat(format)
            verticalPanel:OverrideDefaultNumberFormat(true)
        end
    end
    /*
        This action sets whether the Y axis uses percent values or not.

        Attribute: Parameter bool is true if the values are percents and false if not.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:SetYAxisUsePercent(true)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetYAxisUsePercent(boolean bool)
        verticalPanel:UsePercent(bool)
    end
    /*
        This action gets whether the y axis values are using percent format.
        
        Atrribute: Returns true if the y axis is in percent.
    */
    action GetYAxisUsePercent returns boolean
        return verticalPanel:UsePercent()
    end
    /*
        This action sets whether the X axis uses percent values or not.

        Attribute: Parameter bool is true if the values are percents and false if not.

        Attribute: Example
        use Libraries.Game.Game
        use Libraries.Interface.Controls.Charts.Chart
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Compute.Statistics.DataFrame
    
        class Main is Game
            action Main
                StartGame()
            end
    
            action CreateGame
                DataFrame frame
        
                frame:Load("/Data/Cats.csv")
                frame:AddSelectedFactors("Maximum Life Span")
            
                BarChart chart = frame:BarChart()
                chart:SetTitle("Cat Lifespan")
    
                chart:FlipOrientation()
                chart:SetXAxisUsePercent(true)
    
                chart:ShowLegend(false)
                chart:SetSize(800, 600)
                Add(chart)
            end
        end
    */
    action SetXAxisUsePercent(boolean bool)
        horizontalPanel:UsePercent(bool)
    end
    /*
        This action gets whether the X axis uses percent values or not.
        
        Atrribute: Returns the boolean value of percent being used on the x axis.
    */
    action GetXAxisUsePercent returns boolean
        return horizontalPanel:UsePercent()
    end

    /*
        These actions are used to offset the start of the tick placement
        if the chart has added white space on either side of the chart area.
    */
    action SetYAxisPaddedOffsetPercent(number percent)
        if percent >= 0  and percent <= 1
            verticalPanel:SetPaddingOffsetPercent(percent)
            verticalPanel:OverrideDefaultPaddingOffset(true)
        else
            alert("Percent can be between 0 and 1")
        end
    end
    /*
        This action sets the X axis padded offset percent. This allows for adjustments
        to the offset of the X axis of the chart.
        
        Atrribute: Parameter percent a number between 0 and 1.
    */
    action SetXAxisPaddedOffsetPercent(number percent)
        if percent >= 0  and percent <= 1
            horizontalPanel:SetPaddingOffsetPercent(percent)
            horizontalPanel:OverrideDefaultPaddingOffset(true)
        else
            alert("Percent can be between 0 and 1")
        end
    end

    /*
    OrientationCapable is used to toggle orientation settings for different chart types.

    Attribute: Parameter orientationCapable a boolean setting a charts ability to use orientation.
    */
    private action OrientationCapable(boolean orientationCapable)
        me:orientationCapable = orientationCapable
    end
    /*
    SetDefaultOrientationToHorizontal is used to set the orientation. The default will
    be set on creation of each chart but can be changed afterwards manually
    or the user can call FlipOrientation().
    */
    private action SetDefaultOrientationToHorizontal
        verticalOrientation = false
        horizontalOrientation = true
    end

    private action SetDefaultOrientationToVertical
        verticalOrientation = true
        horizontalOrientation = false
    end
    /*
        SetOrientationToHorizontal sets the orientation to horizontal. 
    */
    action SetOrientationToHorizontal
        if orientationCapable
            if not orientationChanged and not horizontalOrientation
                orientationChanged = true
                horizontalOrientation = true
                verticalOrientation = false
                FlipAxisInfo()
            end
        end
    end
    /*
        SetOrientationToVertical sets the orientation to vertical. 
    */
    action SetOrientationToVertical
        if orientationCapable
            if not orientationChanged and not verticalOrientation
                orientationChanged = true
                horizontalOrientation = false
                verticalOrientation = true
                FlipAxisInfo()
            end
        end
    end

    /*
        If not already changed, this action will flip the axis at the current state.

        Attribute: Example
        //Would result in the y-axis having the title "My X title" and the x-axis having the title "My Y title"
        chart:SetXAxisTitle("My X title")
        chart:SetYAxisTitle("My Y title")
        chart:FlipOrientation() // Flipping after setting titles
            
        //Would result in the y-axis having the title "My Y title" and the x-axis having the title "My X title"
        chart:FlipOrientation() // Flipping before setting titles
        chart:SetXAxisTitle("My X title")
        chart:SetYAxisTitle("My Y title")
        
    */
    action FlipOrientation()
        if orientationCapable
            if not orientationChanged
                orientationChanged = true
                if verticalOrientation
                    verticalOrientation = false
                    horizontalOrientation = true
                else
                    verticalOrientation = true
                    horizontalOrientation = false
                end
                FlipAxisInfo()
            end
        end
    end
    /*
        This action returns the value of a flag for tracking whether the orientation has changed. 
    */
    action OrientationChanged returns boolean
        return orientationChanged
    end
    /*
        This action returns whether the chart is in the horizontal position. 
    */
    action GetHorizontalFlag returns boolean
        return horizontalOrientation
    end
    /*
        This action returns whether the chart is in the vertical position. 
    */
    action GetVerticalFlag returns boolean
        return verticalOrientation
    end
    /*
        Returns an array of the factor/group names 

        Attribute: Returns Array<text> an array of factors/groups in the chart.
    */
    action GetFactorList returns Array<text>
        return factorList
    end
    /*
        This action sets the list of factor or group names.

        Attribute: Parameter factorList an array of factor/group names in the chart.
    */
    action SetFactorList(Array <text> factorList)
        me:factorList = factorList
    end

    /*
        SeparateByFactor will attempt to create faceted sub chart area panels. 
        Each factor/group (independent variable) will get it's own panel.
        Each sub area will contain all elements associated with that factor.
    */
    action SeparateByFactor(boolean flag)
        defaultSeparateByFactor = flag
    end
    /*
        SeparateByFactor will attempt to create faceted sub chart area panels. Each 
        factor/group (independent variable) will get it's own panel. Each sub area 
        will contain all elements associated with that factor and requests a single column.
    */
    action SeparateByFactor()
        SeparateByFactor(1)
    end
    /*
        SeparateByFactor will attempt to create faceted sub chart area panels. Each 
        factor/group (independent variable) will get it's own panel. Each sub area 
        will contain all elements associated with that factor and requests some number
        of columns.

        Attribute: Parameter requestedColumns the number of requested columns to arrange each chart.
    */
    action SeparateByFactor(integer requestedColumns)
        if separationCapable and requestedColumns > 0 and GetFactorList() not= undefined
            integer numberOfFacets = GetFactorList():GetSize()
            boolean singleRow = false
            if numberOfFacets > 1
                if requestedColumns > 1
                    if requestedColumns > numberOfFacets
                        horizontalPanel:SplitIntoSections(numberOfFacets)
                        singleRow = true
                    else
                        horizontalPanel:SplitIntoSections(requestedColumns)
                    end
                end
                if not singleRow
                    verticalPanel:SplitIntoSections(cast(integer, math:Ceiling(cast(number, numberOfFacets)/requestedColumns)))
                end
            end
            numberOfChartAreas = verticalPanel:GetNumberOfSections()*horizontalPanel:GetNumberOfSections()
            if numberOfChartAreas > 1
                separateByFactor = true
                separateBySeries = false
            end
            overrideDefaultSeparation = true
        end
    end
    /*
        This action returns true if the chart is separated by factor.
    */
    action IsSeparatedByFactor returns boolean
        return separateByFactor
    end

    private action SeparateFactorByDefault(boolean flag)
        defaultSeparateByFactor = flag
    end

    /*
        SeparateBySeries will attempt to create faceted sub-chart area panels. Each 
        series entry in the legend will get its own chart area. Each sub-area will 
        contain all elements associated with that series.
    */
    action SeparateBySeries(boolean flag)
        defaultSeparateBySeries = flag
    end
    /*
        SeparateBySeries will attempt to create faceted sub-chart area panels. Each 
        series entry in the legend will get its own chart area. Each sub-area will 
        contain all elements associated with that series. This creates a single column
        of sub-chart area panels.
    */
    action SeparateBySeries
        SeparateBySeries(1)
    end
    /*
        SeparateBySeries will attempt to create faceted sub-chart area panels. Each 
        series entry in the legend will get its own chart area. Each sub-area will 
        contain all elements associated with that series. This creates a specified 
        number of columns of sub-chart area panels.

        Attribute: Parameter requestedColumns the number of columns requested to display the sub-charts.
    */
    action SeparateBySeries(integer requestedColumns)
        if separationCapable and requestedColumns > 0
            integer numberOfFacets = GetSeriesList():GetSize()
            boolean singleRow = false
            if numberOfFacets > 1
                if requestedColumns > 1
                    if requestedColumns > numberOfFacets
                        horizontalPanel:SplitIntoSections(numberOfFacets)
                        singleRow = true
                    else
                        horizontalPanel:SplitIntoSections(requestedColumns)
                    end
                end
                if not singleRow
                    verticalPanel:SplitIntoSections(cast(integer, math:Ceiling(cast(number, numberOfFacets)/requestedColumns)))
                end
            end
            numberOfChartAreas = verticalPanel:GetNumberOfSections()*horizontalPanel:GetNumberOfSections()
            if numberOfChartAreas > 1
                separateBySeries = true
                separateByFactor = false
            end
            overrideDefaultSeparation = true
        end
    end
    /*
        This action returns true if the chart is separated by series.
    */
    action IsSeparatedBySeries returns boolean
        return separateBySeries
    end

    private action SeparateSeriesByDefault(boolean flag)
        defaultSeparateBySeries = flag
    end

//    /*
//        SeparateByColumn will attempt to create faceted sub chart area panels 
//        Each column of the dataframe (dependent variable) will get it's own chart area.
//        Each sub area will contain all elements associated with that column
//    */
//    action SeparateByColumn(boolean flag)
//        defaultSeparateByColumn = flag
//    end
//
//    action SeparateByColumn
//        SeparateByColumn(1)
//    end
//
//    action SeparateByColumn(integer requestedColumns)
//        if separationCapable and requestedColumns > 0
//            integer numberOfFacets = GetColumnList():GetSize()
//            boolean singleRow = false
//            if numberOfFacets > 1
//                if requestedColumns > 1
//                    if requestedColumns > numberOfFacets
//                        horizontalPanel:SplitIntoSections(numberOfFacets)
//                        singleRow = true
//                    else
//                        horizontalPanel:SplitIntoSections(requestedColumns)
//                    end
//                end
//                if not singleRow
//                    verticalPanel:SplitIntoSections(cast(integer, math:Ceiling(cast(number, numberOfFacets)/requestedColumns)))
//                end
//            end
//            numberOfChartAreas = verticalPanel:GetNumberOfSections()*horizontalPanel:GetNumberOfSections()
//            if numberOfChartAreas > 1
//                separateByColumn = true
//                separateByFactor = false
//            end
//            overrideDefaultSeparation = true
//        end
//    end
//
//    action IsSeparatedByColumn returns boolean
//        return separateByColumn
//    end
//
//    private action SeparateColumnByDefault(boolean flag)
//        defaultSeparateByColumn = flag
//    end

    /*
        This action returns true if the chart is separated by factor or series.
    */
    action IsSeparated returns boolean
        return (separateBySeries or separateByFactor)
    end

    private action SeparationCapable(boolean separationCapable)
        me:separationCapable = separationCapable
    end

    private action XAxisIsIndependent returns boolean
        return xAxisIsIndependent
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action OverrideXLabelsWithText(Array<text> labels)
        horizontalPanel:SetTextLabels(labels)
    end
    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action OverrideYLabelsWithText(Array<text> labels)
        verticalPanel:SetTextLabels(labels)
    end
    /*
    This action is used to get the list of Y-axis labels from the Y-axis component.
    
    Attribute: Returns the array<ChartLabel> containing all of the labels on the Y-axis.
    */
    action GetYLabels returns Array<ChartLabel>
        return verticalPanel:GetLabels()
    end
    /*
    This action is used to Set the list of Y-axis labels on the Y-axis component.
    
    Attribute: Parameter newLabels containing all of the labels to be displayed on the Y-axis.
    */
    action SetYLabels(Array<ChartLabel> newLabels)
        verticalPanel:SetLabels(newLabels)
    end
    /*
    This action is used to toggle the visibility of the Y-axis labels.
    
    Attribute: Parameter show true will display the y-axis labels.
    */
    action ShowYLabels(boolean show)
        verticalPanel:ShowLabels(show)
    end  
    /*
    This action is used to get the X-axis labels.
    
    Attribute: Returns the array of ChartLabel's displayed on the X-axis.
    */
    action GetXLabels returns Array<ChartLabel>
        return horizontalPanel:GetLabels()
    end
    /*
    This action is used to Set the list of X-axis labels on the X-axis component.
    
    Attribute: Parameter newLabels containing all of the labels to be displayed on the X-axis.
    */
    action SetXLabels(Array<ChartLabel> newLabels)
        horizontalPanel:SetLabels(newLabels)
    end
    /*
    This action is used to toggle the visibility of the X-axis labels.
    
    Attribute: Parameter show true will display the X-axis labels.
    */
    action ShowXLabels(boolean show)
        horizontalPanel:ShowLabels(show)
    end  
    /*
    This action is used to rotate the X-axis labels by a number of degrees.
    
    Attribute: Parameter degrees between 0 and 360.
    */
    action RotateXLabels(integer degrees) // "360 -" because it rotates opposite of how you'd imagine.
        xLabelsRotation = 360 - degrees
        SetRotationOverride(true)
    end
    /*
    This action is used to get the number of degrees the X-axis labels are rotated.
    
    Attribute: Returns the degrees the labels are rotated.
    */
    action GetXLabelsRotation() returns integer
        return xLabelsRotation
    end
    /*
    This action is used to check whether the x-axis label rotation has been overridden.
    
    Attribute: Returns true if the x-axis labels are rotated.
    */
    action GetRotationOverride() returns boolean
        return overrideXLabelsRotation
    end
    /*
    This action is used to set when the x-axis label rotation has been overridden.
    
    Attribute: Parameter flag true if the x-axis labels are rotated.
    */
    action SetRotationOverride(boolean flag)
        overrideXLabelsRotation = flag
    end

    /* 
    This action returns the Label for the chart title.

    Attribute: Returns the chart title label
    */
    action GetTitleLabel returns ChartLabel
        return title
    end

    private action SetTitleLabel(ChartLabel label)
        me:title = label
    end

    /*
        This action sets the title of the chart.
    */
    action SetTitle(text name)
        SetName(name)
        titleText = name
    end
    /*
    This action gets the title of the chart

    Attribute: Returns the title of the chart
    */
    action GetTitle returns text
        return titleText
    end
    /*
        When true the chart title will be visible.

        Attribute: Parameter show when true the title is visible.
    */
    action ShowTitle(boolean show)
        showTitle = show
    end
    /*
        This action checks if the title is visible.

        Attribute: Returns true if the chart title is showing
    */
    action IsShowingTitle() returns boolean
        return showTitle
    end

    /*
        When true the x-axis title will be visible.

        Attribute: Parameter show when true the title is visible.
    */
    action ShowXAxisTitle(boolean show)
        showXAxisTitle = show
    end
    /*
        This action checks if the title is visible.

        Attribute: Returns true if the x-axis title is showing
    */
    action IsShowingXAxisTitle() returns boolean
        return showXAxisTitle
    end

    /*
        When true the y-axis title will be visible.

        Attribute: Parameter show when true the title is visible.
    */
    action ShowYAxisTitle(boolean show)
        showYAxisTitle = show
    end
    /*
        This action checks if the title is visible.

        Attribute: Returns true if the y-axis title is showing
    */
    action IsShowingYAxisTitle() returns boolean
        return showYAxisTitle
    end

    /*
        This action checks if the sub chart titles are visible.

        Attribute: Parameter show when true the titles are visible.
    */
    action ShowSubChartAreaTitles(boolean show)
        me:showSubChartAreaTitles = show
    end

    /*
        This action checks if the titles are visible.

        Attribute: Returns true if the sub chart titles are showing
    */
    action IsShowingSubChartAreaTitles returns boolean
        return showSubChartAreaTitles
    end

    /*
        Gets the title area height percent. This is handled automatically 
        so users don't need to use this action directly.

        Attribute: Returns percent of screen height alloted for the title
    */
    action GetTitleAreaHeightPercent returns number
        return titleAreaHeightPercent
    end
    
    /* 
        This action gets the Label object for the chart subtitle.
    */
    action GetSubtitleLabel returns ChartLabel
        return subtitle
    end

    private action SetSubtitleLabel(ChartLabel label)
        me:subtitle = label
    end

    /*
        This action sets the subtitle of the chart.
    */
    action SetSubtitle(text name)
        subtitleText = name
        if name not= ""
            showSubtitle = true
        end
    end
    /*
        This action get the current subtitle for the chart.

        Attribute: Returns the subtitle of the chart
    */
    action GetSubtitle returns text
        return subtitleText
    end
    /*
        This action sets the visibility of the subtitle. When true the chart 
        subtitle will be visible.
        
        Attribute: Parameter show true makes the subtitle visible.
    */
    action ShowSubtitle(boolean show)
        showSubtitle = show
    end
    /*
        This action checks if the subtitle is visible.

        Attribute: Returns true if the chart subtitle is showing
    */
    action IsShowingSubtitle() returns boolean
        return showSubtitle
    end
    /*
    This action gets the subtitle area height in percent (between 0 and 1). This is handled 
    automatically so users don't need to use this action directly.
    
    Attribute: Returns percent of screen height alloted for the title
    */
    action GetSubtitleAreaHeightPercent returns number
        return subtitleAreaHeightPercent
    end

    /*
        This action sets the title for the X-Axis of the Chart.

        Attribute: Parameter name the x-axis title.
    */
    action SetXAxisTitle(text name)
        horizontalPanel:SetTitleText(name)
    end

    /*
        This action gets the title for the X-Axis of the Chart.

        Attribute: Returns the x-axis title.
    */
    action GetXAxisTitle returns text
        return horizontalPanel:GetTitleText()
    end

    /*
        This action sets the title for the Y-Axis of the Chart.

        Attribute: Parameter name the y-axis title.
    */
    action SetYAxisTitle(text name)
        verticalPanel:SetTitleText(name)
    end

    /*
        Returns the title for the Y-Axis of the Chart.

        Attribute: Returns the y-axis title.
    */
    action GetYAxisTitle returns text
        return verticalPanel:GetTitleText()
    end

    /*
        This action sets the x-axis to visible (true) or hidden (false). 

        Attribute: Parameter show True if the axis should be shown.
    */
    action ShowXAxis(boolean show)
        showXAxis = show
    end
    /*
        This action checks if the x-axis to visible (true) or hidden (false). 

        Attribute: Returns True if the x-axis is shown.
    */
    action IsShowingXAxis() returns boolean
        return showXAxis
    end
    /*
        This action sets the y-axis to visible (true) or hidden (false). 

        Attribute: Parameter show True if the axis should be shown.
    */
    action ShowYAxis(boolean show)
        showYAxis = show
    end
    /*
        This action checks if the Y-axis to visible (true) or hidden (false). 

        Attribute: Returns True if the Y-axis is shown.
    */
    action IsShowingYAxis() returns boolean
        return showYAxis
    end
    /*
        This action checks if the linear regression line is visible on the chart. 

        Attribute: Returns True if the linear regression line is shown.
    */
    action IsShowingLinearRegression returns boolean
        return showLinearRegression
    end

    /*
    This action shows or hides linear regression lines, if possible. Some chart
    types, such as PieChart, cannot support linear regression lines. Trying to
    show the regression lines on a chart type that does not support it will output
    a warning, and otherwise have no effect.
    
    Attribute: Parameter show True to show linear regression lines, or false to hide them.
    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ScatterPlot
    
    DataFrame frame
    frame:Load("Data/ChartTestData.csv")
    frame:AddSelectedColumns("Column1")
    frame:AddSelectedColumns("Column2")
    frame:AddSelectedFactors("Factor1")
    
    ScatterPlot chart = frame:ScatterPlot()
    chart:SetTitle("ScatterPlot Feature Example")
    chart:SetSubtitle("Two Columns - One Factor")
    chart:ShowLinearRegression(true)
    chart:ShowSquaresOfResiduals(true)
    chart:ShowMovableRegressionLine(true)
    chart:SetResidualSquareThickness(2)
    chart:LockRegressionYIntercept(0)
    chart:Display(1200, 1200)
    */
    action ShowLinearRegression(boolean show)
        if regressionCapable
            showLinearRegression = show
            GetLegend():ShowRegression(show)
        else
            showLinearRegression = false
            output "This type of chart cannot support linear regression lines."
        end
    end

    private action RegressionCapable(boolean regressionCapable)
        me:regressionCapable = regressionCapable
    end

    /*
    This action enables or disables movable regression lines for interactive charts.
    If the regression lines are movable, they can be dragged with the mouse or using
    the keyboard. This will have no impact on charts that are exported to SVG format.

    Attribute: Parameter movable True to make regression lines movable, or false to make them non-interactive.
    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ScatterPlot
    
    DataFrame frame
    frame:Load("Data/ChartTestData.csv")
    frame:AddSelectedColumns("Column1")
    frame:AddSelectedColumns("Column2")
    frame:AddSelectedFactors("Factor1")
    
    ScatterPlot chart = frame:ScatterPlot()
    chart:SetTitle("ScatterPlot Feature Example")
    chart:SetSubtitle("Two Columns - One Factor")
    chart:ShowLinearRegression(true)
    chart:ShowSquaresOfResiduals(true)
    chart:ShowMovableRegressionLine(true)
    chart:SetResidualSquareThickness(2)
    chart:LockRegressionYIntercept(0)
    chart:Display(1200, 1200)
    */
    action ShowMovableRegressionLine(boolean movable)
        showMovableRegressionLine = movable
    end

    /*
    This action returns true if this chart includes a movable regression line, or false otherwise.

    Attribute: Returns True if this chart has a movable regression line, or false otherwise.
    */
    action HasMovableRegressionLine returns boolean
        return showMovableRegressionLine
    end

    /*
    This action locks the y-intercepts of regression lines to the given value (most commonly 0).
    
    Attribute: Parameter intercept The new y-intercept value that all regression lines in the chart must pass through.
    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ScatterPlot
    
    DataFrame frame
    frame:Load("Data/ChartTestData.csv")
    frame:AddSelectedColumns("Column1")
    frame:AddSelectedColumns("Column2")
    frame:AddSelectedFactors("Factor1")
    
    ScatterPlot chart = frame:ScatterPlot()
    chart:SetTitle("ScatterPlot Feature Example")
    chart:SetSubtitle("Two Columns - One Factor")
    chart:ShowLinearRegression(true)
    chart:ShowSquaresOfResiduals(true)
    chart:ShowMovableRegressionLine(true)
    chart:SetResidualSquareThickness(2)
    chart:LockRegressionYIntercept(0)
    chart:Display(1200, 1200)
    */
    action LockRegressionYIntercept(number intercept)
        lockRegressionIntercepts = true
        regressionInterceptLock = intercept
    end

    /*
    This action unlocks the y-intercepts of the regression lines. It does not reset the values of the lines
    if they were already locked, but makes it possible to adjust them dynamically if the lines are movable.
    */
    action UnlockRegressionYIntercepts
        lockRegressionIntercepts = false
    end

    /*
    This action returns true if the y-intercepts of the regression lines are locked, or false otherwise.

    Attribute: Returns True if the y-intercepts of the regression lines are locked, or false otherwise.
    */
    action IsLockingRegressionYIntercepts returns boolean
        return lockRegressionIntercepts
    end

    private action LoadRegressionLines()
        integer i = 0
        repeat while i < GetSeriesList():GetSize()
            RegressionLine line = GetSeriesList():Get(i):GetRegressionLine()
            if line not= undefined
                line:SetColor(GetSeriesList():Get(i):GetColor())
                if IsSeparatedBySeries()
                    integer k = 0
                    repeat while k < GetNumberOfChartAreas()
                        if GetSeriesList():Get(i):GetName() = GetSubChartAreas():Get(k):GetName()
                            GetSubChartAreas():Get(k):Add(line)
                            GetSubChartAreas():Get(k):AddChartAreaItem(line)
                        end
                        k = k + 1
                    end
                    if regLineDensity > 0
                        line:SetLineDensity(regLineDensity)
                    else
                        if GetSubChartAreas():GetSize() > 0
                            regLineDensity = cast(integer, GetSubChartAreas():Get(0):GetWidth() * 0.0025)
                            if regLineDensity < 2
                                regLineDensity = 2
                            end
                            line:SetLineDensity(regLineDensity)
                        end
                    end
                else
                    GetChartArea():Add(line)
                    if regLineDensity > 0
                        line:SetLineDensity(regLineDensity)
                    else
                        regLineDensity = cast(integer, GetChartArea():GetWidth() * 0.0025)
                        if regLineDensity < 2
                            regLineDensity = 2
                        end
                        line:SetLineDensity(regLineDensity)
                    end
                end

                if IsLockingRegressionYIntercepts()
                    line:LockYIntercept(regressionInterceptLock)
                end
            end

            i = i + 1
        end

        /*
        While the movable lines have previously been created so they're available during legend loading,
        they still need to be fully added to the chart areas after the other regression lines (to ensure
        correct render and navigation ordering).
        */
        if HasMovableRegressionLine()
            if IsSeparatedBySeries()
                i = 0
                repeat while i < GetNumberOfChartAreas()
                    ChartAreaPanel area = GetSubChartAreas():Get(i)
                    RegressionLine line = area:GetMovableRegressionSeries():GetRegressionLine()
                    area:Add(line)
                    i = i + 1
                end
            else
                ChartAreaPanel area = GetChartArea()
                RegressionLine line = area:GetMovableRegressionSeries():GetRegressionLine()
                area:Add(line)
            end
        end
    end

    private action LoadMovableRegressionLines
        if IsSeparatedBySeries()
            i = 0
            repeat while i < GetNumberOfChartAreas()
                ChartAreaPanel area = GetSubChartAreas():Get(i)
                MovableRegressionSeries series = CreateMovableRegressionSeries(area)
                area:SetMovableRegressionSeries(series)
                i = i + 1
            end
        else
            ChartAreaPanel area = GetChartArea()
            MovableRegressionSeries series = CreateMovableRegressionSeries(area)
            area:SetMovableRegressionSeries(series)
        end
    end

    private action CreateMovableRegressionSeries(ChartAreaPanel panel) returns MovableRegressionSeries
        // Fetch the next color from the palette in the Options
        ChartOptions options
        Color color = options:GetColorFromPalette(GetSeriesList():GetSize())

        RegressionLine line
        line:SetMovable(true)
        
        if regLineDensity > 0
            line:SetLineDensity(regLineDensity)
        else
            regLineDensity = cast(integer, panel:GetWidth() * 0.0025)
            if regLineDensity < 2
                regLineDensity = 2
            end
            line:SetLineDensity(regLineDensity)
        end

        line:SetPointThickness(regLineDensity * 4)

        if lockRegressionIntercepts = true
            line:SetSlopeAndIntercept(1, regressionInterceptLock)
        else
            line:SetSlopeAndIntercept(1, 0)
        end

        MovableRegressionSeries series
        series:SetColor(color)
        series:SetChartArea(panel)
        series:SetName("Movable Line")
        series:SetRegressionLine(line)

        line:SetSeries(series)

        Array<Series> realSeries = GetSeriesList()
        integer i = 0
        repeat while i < realSeries:GetSize()
            series:AddSeriesItems(realSeries:Get(i))
            i = i + 1
        end

        return series
    end

    /*
        This action sets the regression line density.
        
        Attribute: Parameter density the line density represented by an integer value.
    */
    action SetRegressionLineDensity(integer density)
        regLineDensity = density
    end
    /*
        This action gets the regression line density represented by an integer value.
        
        Attribute: Returns the density value of the regression line. 
    */
    action GetRegressionLineDensity() returns integer
        return regLineDensity
    end

    /*
        This action sets the regression line color.
        
        Attribute: Parameter color the line color.
    */
    action SetRegressionLineColor(Color color)
        regLineColor = color
    end
    /*
        This action gets the regression line color.
        
        Attribute: Returns the color value of the regression line. 
    */
    action GetRegressionLineColor() returns Color
        return regLineColor
    end
    /*
        This action either shows or hides group brackets in the vertical 
        or horizontal panels.
        
        Attribute: Parameter flag true will show group brackets. 
    */
    action ShowGroupBrackets(boolean flag)
        verticalPanel:ShowGroupBrackets(flag)
        horizontalPanel:ShowGroupBrackets(flag)
        overrideDefaultShowBrackets = true
    end

    private action SetDefaultShowBrackets(boolean flag)
        defaultShowBrackets = flag
    end

    private action HasGroups(boolean hasGroups)
        me:hasGroups = hasGroups
    end

    /*
        This action returns true if the chart has groups.
    */
    action HasGroups returns boolean
        return hasGroups
    end

    /*
        This action sets the number of minor Y-axis gridlines. Note, that major 
        gridlines are drawn to match the number and location of axis ticks. Minor gridlines 
        default to 5 intervals between major gridlines. The minor gridline interval count 
        can be manually changed.
        
        No option to customize density or color at this time.

        Attribute: Parameter count amount of minor gridlines on the Y-axis.
    */
    action SetMinorYGridlineCount(integer count)
        verticalPanel:SetMinorGridlineCount(count)
    end
    /*
        This action sets the number of minor X-axis gridlines. Note, that major 
        gridlines are drawn to match the number and location of axis ticks. Minor gridlines 
        default to 5 intervals between major gridlines. The minor gridline interval count 
        can be manually changed.
        
        No option to customize density or color at this time.

        Attribute: Parameter count amount of minor gridlines on the X-axis.
    */
    action SetMinorXGridlineCount(integer count)
        horizontalPanel:SetMinorGridlineCount(count)
    end
    /*
        This action shows all major and minor grid lines on the x-axis and y-axis.
    */
    action ShowAllGridLines()
        showMajorYGridLines = true
        showMajorXGridLines = true
        showMinorYGridLines = true
        showMinorXGridLines = true
    end
    /*
        This action hides all major and minor grid lines on the x-axis and y-axis.
    */
    action HideAllGridLines()
        showMajorYGridLines = false
        showMajorXGridLines = false
        showMinorYGridLines = false
        showMinorXGridLines = false
    end
    /*
        This action shows all major and minor grid lines on the x-axis.
    */
    action ShowAllXGridLines()
        showMajorXGridLines = true
        showMinorXGridLines = true
    end
    /*
        This action hides all major and minor grid lines on the x-axis.
    */
    action HideAllXGridLines()
        showMajorXGridLines = false
        showMinorXGridLines = false
    end
    /*
        This action shows all major and minor grid lines on the y-axis.
    */
    action ShowAllYGridLines()
        showMajorYGridLines = true
        showMinorYGridLines = true
    end
    /*
        This action hides all major and minor grid lines on the y-axis.
    */
    action HideAllYGridLines()
        showMajorYGridLines = false
        showMinorYGridLines = false
    end
    /*
        This action shows all major grid lines on the x-axis and y-axis.
    */
    action ShowMajorGridLines()
        showMajorYGridLines = true
        showMajorXGridLines = true
    end
    /*
        This action hides all major grid lines on the x-axis and y-axis.
    */
    action HideMajorGridLines()
        showMajorYGridLines = false
        showMajorXGridLines = false
    end
    /*
        This action shows all minor grid lines on the x-axis and y-axis.
    */
    action ShowMinorGridLines()
        showMinorYGridLines = true
        showMinorXGridLines = true
    end
    /*
        This action hides all minor grid lines on the x-axis and y-axis.
    */
    action HideMinorGridLines()
        showMinorYGridLines = false
        showMinorXGridLines = false
    end
    /*
        This action shows all minor grid lines on the y-axis.
    */
    action ShowMinorYGridLines()
        showMinorYGridLines = true
    end
    /*
        This action hides all minor grid lines on the y-axis.
    */
    action HideMinorYGridLines()
        showMinorYGridLines = false
    end
    /*
        This action shows all minor grid lines on the x-axis.
    */
    action ShowMinorXGridLines()
        showMinorXGridLines = true
    end
    /*
        This action hides all minor grid lines on the x-axis.
    */
    action HideMinorXGridLines()
        showMinorXGridLines = false
    end
    /*
        This action shows all major grid lines on the y-axis.
    */
    action ShowMajorYGridLines()
        showMajorYGridLines = true
    end
    /*
        This action hides all major grid lines on the y-axis.
    */
    action HideMajorYGridLines()
        showMajorYGridLines = false
    end
    /*
        This action shows all major grid lines on the x-axis.
    */
    action ShowMajorXGridLines()
        showMajorXGridLines = true
    end
    /*
        This action hides all major grid lines on the x-axis.
    */
    action HideMajorXGridLines()
        showMajorXGridLines = false
    end
    /*
        This action checks if the major grid lines on the x-axis are shown.
    */
    action IsShowingMajorXGridLines returns boolean
        return showMajorXGridLines
    end
    /*
        This action checks if the major grid lines on the y-axis are shown.
    */
    action IsShowingMajorYGridLines returns boolean
        return showMajorYGridLines
    end
    /*
        This action checks if the minor grid lines on the x-axis are shown.
    */
    action IsShowingMinorXGridLines returns boolean
        return showMinorXGridLines
    end
    /*
        This action checks if the minor grid lines on the y-axis are shown.
    */
    action IsShowingMinorYGridLines returns boolean
        return showMinorYGridLines
    end

    /*
        This action sets the Legend object
        Attribute: Parameter legend the legend to set
    */
    action SetLegend(Legend legend)
        me:legend = legend
    end
    /*
        This action returns the current legend, if one exists
        Attribute: Returns the Legend on the chart.
    */
    action GetLegend returns Legend
        return legend
    end
    /*
        This action sets the legend to visible. 
        Attribute: Parameter show true if the legend should be shown.
    */
    action ShowLegend(boolean show)
        showLegend = show
    end
    /*
        This action checks if the legend is shown. 
        Attribute: Returns true if the legend is shown.
    */
    action IsShowingLegend returns boolean
        return showLegend
    end

    /*
        Set the title for the legend of the Chart
        
        Attribute: Parameter name the title of the legend.
    */
    action SetLegendTitle(text name)
        legend:SetTitleText(name)
    end

    /*
        Returns the title for the legend of the Chart.
    */
    action GetLegendTitle returns text
        return legend:GetTitleText()
    end

    /*
        Sets the legend to show on top of the chart area.
    */
    action SetLegendLocationToTop
        if IsShowingLegend()
            legend:SetLocationToTop()
        end
    end

    /*
        Sets the legend to show beneath the chart area.
    */
    action SetLegendLocationToBottom
        if IsShowingLegend()
            legend:SetLocationToBottom()
        end
    end

    /*
        Sets the legend to show left of the chart area.
    */
    action SetLegendLocationToLeft
        if IsShowingLegend()
            legend:SetLocationToLeft()
        end
    end

    /*
        Sets the legend to show right of the chart area.
    */
    action SetLegendLocationToRight
        if IsShowingLegend()
            legend:SetLocationToRight()
        end
    end

    /*
        This action get the list of Series from the chart.
        
        Attribute: Returns the array<Series>. 
    */
    action GetSeriesList returns Array<Series>
        return legend:GetSeriesList()
    end
    /*
        This action sets the list of Series.
        
        Attribute: Parameter series the array<Series>. 
    */
    action SetSeriesList(Array <Series> series)
        legend:SetSeriesList(series)
    end
    /*
        This action adds to the list of Series.
        
        Attribute: Parameter series the Series object to add to the list of Series. 
    */
    action AddSeries(Series series)
        legend:GetSeriesList():Add(series)
    end
    /*
        This action sets the color palette to a collection of calm colors. 
    */
    action SetColorPaletteToCalm()
        options:SetPalette(options:CALM)
    end 
    /*
        This action sets the color palette to a collection of exciting colors. 
    */
    action SetColorPaletteToExciting()
        options:SetPalette(options:EXCITING)
    end 
    /*
        This action sets the color palette to a collection of positive colors. 
    */
    action SetColorPaletteToPositive()
        options:SetPalette(options:POSITIVE)
    end 
    /*
        This action sets color palette to a collection of negative colors. 
    */
    action SetColorPaletteToNegative()
        options:SetPalette(options:NEGATIVE)
    end 
    /*
        This action sets the color palette to a collection of serious colors. 
    */
    action SetColorPaletteToSerious()
        options:SetPalette(options:SERIOUS)
    end 
    /*
        This action sets the color palette to a collection of playful colors. 
    */
    action SetColorPaletteToPlayful()
        options:SetPalette(options:PLAYFUL)
    end 
    /*
        This action sets the color palette to a collection of trustworthy colors. 
    */
    action SetColorPaletteToTrustworthy()
        options:SetPalette(options:TRUSTWORTHY)
    end 
    /*
        This action sets the color palette to a collection of disturbing colors. 
    */
    action SetColorPaletteToDisturbing()
        options:SetPalette(options:DISTURBING)
    end 
    /*
        This action sets the color palette to a collection of colorgorical colors. 
    */
    action SetColorPaletteToColorgorical()
        options:SetPalette(options:COLORGORICAL)
    end 

    /*
        This action sets the color palette to a collection of cool scaled colors. Created 
        by Stefan van der Walt (https://github.com/stefanv) and Nathaniel Smith (https://github.com/njsmith)
        https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html
    */
    action SetColorPaletteToCoolScale() //Viridis
        Color colorA
        colorA:SetColor(252.0/255, 230.0/255, 30.0/255 ,1)
        Color colorB
        colorB:SetColor(31.0/255, 127.0/255, 122.0/255, 1)
        Color colorC
        colorC:SetColor(52.0/255, 0/255, 67.0/255, 1)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end 
    /*
        This action sets the color palette to a collection of warm scaled colors.
    */
    action SetColorPaletteToWarmScale() //Inferno
        Color colorA
        colorA:SetColor(253.0/255, 255/255, 147.0/255, 1)
        Color colorB
        colorB:SetColor(168.0/255, 33.0/255, 68.0/255, 1)
        Color colorC
        colorC:SetColor(0/255, 0/255, 4.0/255 ,1)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end 
    /*
        This action sets the color palette to a collection of magma colors.
    */
    action SetColorPaletteToMagma() //Think of a name for this?
        Color colorA
        colorA:SetColor(252.0/255, 251.0/255, 173.0/255, 1)
        Color colorB
        colorB:SetColor(164.0/255, 31.0/255, 103.0/255, 1)
        Color colorC
        colorC:SetColor(0/255, 0/255, 4.0/255 ,1)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end 

    /*
        This action sets a custom color palette.

        Attribute: Parameter palette a list of colors.
    */
    action SetColorPalette(Array <Color> palette)
        options:SetPalette(palette)
    end
    /*
        This action sets a custom color palette with one color.

        Attribute: Parameter color a colors.
    */
    action SetColorPalette(Color color)
        Color darkColor
        darkColor:SetColor(0,0,0,1)
        darkColor:LinearInterpolation(color, 0.15) // Not quite black
        Color lightColor
        lightColor:SetColor(1,1,1,1)
        lightColor:LinearInterpolation(color, 0.15) // Not quite white
        options:SetPalette(darkColor, color, lightColor, legend:GetSeriesList():GetSize())
    end
    /*
        This action sets a custom color palette with two colors.

        Attribute: Parameter colorA a color.
        Attribute: Parameter colorB a color.
    */
    action SetColorPalette(Color colorA, Color colorB)
        options:SetPalette(colorA, colorB, legend:GetSeriesList():GetSize())
    end
    /*
        This action sets a custom color palette with three colors.

        Attribute: Parameter colorA a color.
        Attribute: Parameter colorB a color.
        Attribute: Parameter colorC a color.
    */
    action SetColorPalette(Color colorA, Color colorB, Color colorC)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end
    /*
        This action sets the color palette to a collection of grey colors.
    */
    action SetCurrentPaletteToGrayScale()
        options:SetPaletteToGrayScale()
    end

    /*
        Sets the default selection color (highlighting) the chart items
    */
    action SetHighlightColor(Color color)
        highlightColor = color
        options:SetSelectionColor(color)
    end
    /*
        This action resizes the chart.
    */
    action Resize
        if GetBackground() not= undefined
            GetBackground():SetSize(GetWidth(), GetHeight())
        end

        // Create default tick sizes. 
        // Having a min of 4 pixels for short side, ensures 2 for the major gridlines and 1 for the minor gridline, all will be visible.
        // If gridlines aren't showing, then the min can go down.

        integer xTickWidth = 0
        if horizontalPanel:GetTickCount() > 0
            xTickWidth = cast(integer, (GetWidth()*0.75)/(horizontalPanel:GetTickCount()+horizontalPanel:GetTickCount()-1)) // Estimated chart area over tick count
            if (xTickWidth*3) > cast(integer, GetHeight()*0.01)
                xTickWidth = cast(integer, (GetHeight()*0.01)/3)
            end
        end
        if me:IsShowingMinorXGridLines() and me:IsShowingMajorXGridLines()
            if xTickWidth < 4
                xTickWidth = 4
            end
        elseif not me:IsShowingMinorXGridLines() and me:IsShowingMajorXGridLines()
            if xTickWidth < 2
                xTickWidth = 2
            end
        elseif not me:IsShowingMinorXGridLines() and not me:IsShowingMajorXGridLines()
            if xTickWidth < 1
                xTickWidth = 1
            end
        end
        horizontalPanel:SetTickWidth(xTickWidth)  
        horizontalPanel:SetTickHeight(xTickWidth*3)


        integer yTickHeight = 0
        if verticalPanel:GetTickCount() > 0
            yTickHeight = cast(integer, (GetHeight()*0.75)/(verticalPanel:GetTickCount()+verticalPanel:GetTickCount()-1)) // Estimated chart area over tick count
            if (yTickHeight*3) > cast(integer, GetWidth()*0.01)
                yTickHeight = cast(integer, (GetWidth()*0.01)/3)
            end
        end
        if me:IsShowingMinorYGridLines() and me:IsShowingMajorYGridLines()
            if yTickHeight < 4
                yTickHeight = 4
            end
        elseif not me:IsShowingMinorYGridLines() and me:IsShowingMajorYGridLines()
            if yTickHeight < 2
                yTickHeight = 2
            end
        elseif not me:IsShowingMinorYGridLines() and not me:IsShowingMajorYGridLines()
            if yTickHeight < 1
                yTickHeight = 1
            end
        end
        verticalPanel:SetTickWidth(yTickHeight*3)  
        verticalPanel:SetTickHeight(yTickHeight)
 
        // If the title font size is manually set then we can try to accomodate the title area percent
        // This has to be done before the axis panels because they use titleAreaHeightPercent in their calculations.
        if IsShowingTitle()
            if GetTitleLabel() not= undefined
                if titleFontSizeOverride
                    integer fontsize = titlefontsize
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize())
                    end
                    GetTitleLabel():SetFontSize(fontsize)
                    number newTitleAreaHeightPercent = GetTitleLabel():GetHeight()/GetHeight()
                    if newTitleAreaHeightPercent > titleAreaHeightPercent
                        titleAreaHeightPercent = newTitleAreaHeightPercent
                    end
                end
            end
        end

        // If the sub title font size is manually set then we can try to accomodate the title area percent
        // This has to be done before the axis panels because they use subtitleAreaHeightPercent in their calculations.
        if IsShowingSubtitle()
            if GetSubtitleLabel() not= undefined
                if subtitleFontSizeOverride
                    integer fontsize = subtitlefontsize
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*0.75)
                    end
                    GetSubtitleLabel():SetFontSize(fontsize)
                    number newTitleAreaHeightPercent = GetSubtitleLabel():GetHeight()/GetHeight()
                    if newTitleAreaHeightPercent > subtitleAreaHeightPercent
                        subtitleAreaHeightPercent = newTitleAreaHeightPercent
                    end
                end
            end
        end

        //This is where all the font sizes and axis padding will be set
        AdjustForXAxis()
        AdjustForYAxis()
        AdjustForLegend()

        // If any default font sizing ended up being too large; try to adjust.
        // If the title font size is default the title area percent will be 10% of the height
        if IsShowingTitle() and GetTitleLabel() not= undefined
            if not titleFontSizeOverride
                integer fontsize = cast(integer, GetHeight()*(titleAreaHeightPercent/2))
                GetTitleLabel():SetFontSize(fontsize)
                if GetTitleLabel():GetWidth() > GetWidth()*horizontalPanelWidthPercent // default size is too long
                    fontsize = cast(integer, GetTitleLabel():GetFontSize()*((GetWidth()*horizontalPanelWidthPercent)/GetTitleLabel():GetWidth()))
                    GetTitleLabel():SetFontSize(fontsize)
                end
            end
        end

        // If any default font sizing ended up being too large; try to adjust.
        // If the title font size is default the title area percent will be 10% of the height
        if IsShowingSubtitle() and GetSubtitleLabel() not= undefined
            if not subtitleFontSizeOverride
                integer fontsize = cast(integer, GetHeight()*(subtitleAreaHeightPercent/2))
                GetSubtitleLabel():SetFontSize(fontsize)
                if GetSubtitleLabel():GetWidth() > GetWidth()*horizontalPanelWidthPercent // default size is too long
                    fontsize = cast(integer, GetSubtitleLabel():GetFontSize()*((GetWidth()*horizontalPanelWidthPercent)/GetSubtitleLabel():GetWidth()))
                    GetSubtitleLabel():SetFontSize(fontsize)
                end
            end
        end

        // If the x axis title font size is default but it ended up too large for the x-axis panel
        if IsShowingXAxis() and horizontalPanel:GetTitleLabel() not= undefined
            if not xTitleFontSizeOverride
                if horizontalPanel:GetTitleLabel():GetWidth() > GetWidth()*horizontalPanelWidthPercent // default size is too long
                    integer fontsize = horizontalPanel:GetTitleLabel():GetFontSize()
                    fontsize = cast(integer, fontsize*((GetWidth()*horizontalPanelWidthPercent)/horizontalPanel:GetTitleLabel():GetWidth()))
                    horizontalPanel:GetTitleLabel():SetFontSize(fontsize)
                end
            end
            if not IsShowingXAxisTitle() and horizontalPanel:GetTitleLabel() not= undefined
                horizontalPanel:GetTitleLabel():Hide()
            end
        end

        // If the y axis title font size is default but it ended up too large for the y-axis panel
        if IsShowingYAxis() and verticalPanel:GetTitleLabel() not= undefined
            if not yTitleFontSizeOverride
                if verticalPanel:GetTitleLabel():GetWidth() > GetHeight()*verticalPanelHeightPercent // default size is too long
                    integer fontsize = verticalPanel:GetTitleLabel():GetFontSize()
                    fontsize = cast(integer, fontsize*((GetHeight()*verticalPanelHeightPercent)/verticalPanel:GetTitleLabel():GetWidth()))
                    verticalPanel:GetTitleLabel():SetFontSize(fontsize)
                end
            end
            if not IsShowingYAxisTitle() and verticalPanel:GetTitleLabel() not= undefined
                verticalPanel:GetTitleLabel():Hide()
            end
        end

        chartArea:SetSize(GetWidth()*horizontalPanelWidthPercent, GetHeight()*verticalPanelHeightPercent)
        parent:Control:Resize()
    end
    /*
        This action adjusts for the x-axis.
    */
    action AdjustForXAxis()
        if IsShowingXAxis()
            horizontalPanel:SetSize(GetWidth()*horizontalPanelWidthPercent, GetHeight()*horizontalPanelHeightPercent)

            integer minimumSpace = 0
            integer tickWidth = horizontalPanel:GetTickWidth()
            integer tickHeight = horizontalPanel:GetTickHeight()

            integer titleautofontsize = cast(integer, ((GetHeight()+GetWidth())/2)*(0.05/2))

            if horizontalPanel:GetTitleLabel() not= undefined
                if not xTitleFontSizeOverride // This is the auto-sized X-Axis Label
                    if allFontSizeOverride
                        titleautofontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent)
                    end
                    horizontalPanel:GetTitleLabel():SetFontSize(titleautofontsize)
                else
                    integer fontsize = horizontalPanel:GetTitleFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent)
                    end
                    horizontalPanel:GetTitleLabel():SetFontSize(fontsize)
                end

                number tickSpace = 3*tickHeight
                if horizontalPanel:ShowGroupBrackets()
                    tickSpace = 4*tickHeight + tickWidth
                end
                minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetTitleLabel():GetHeight() + tickSpace)
            end

            if horizontalPanel:GetLabelCount() > 0 and horizontalPanel:ShowLabels()
                integer labelautofontsize = cast(integer, (GetWidth()*horizontalPanelWidthPercent)/horizontalPanel:GetLabelCount())
                if labelautofontsize > cast(integer, titleautofontsize*0.75)
                    labelautofontsize = cast(integer, titleautofontsize*0.75)
                end

                if not xLabelFontSizeOverride
                    if allFontSizeOverride
                        labelautofontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent*0.75)
                    end
                    horizontalPanel:SetLabelFontSize(labelautofontsize)
                else
                    integer fontsize = horizontalPanel:GetLabelFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent*0.75)
                    end
                    horizontalPanel:SetLabelFontSize(fontsize)
                end
                number widthBefore = horizontalPanel:GetLongestLabel():GetWidth()
                horizontalPanel:GetLongestLabel():SetFontSize(horizontalPanel:GetLabelFontSize())
                number widthAfter = horizontalPanel:GetLongestLabel():GetWidth()
                number percentIncrease = (widthAfter/widthBefore)
                horizontalPanel:SetSumOfLabelWidths(horizontalPanel:GetSumOfLabelWidths()*percentIncrease)

                if xLabelsRotation not= 0
                    minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetLongestLabel():GetWidth() + 1.5*tickWidth)
                else
                    if (horizontalPanel:GetSumOfLabelWidths() + horizontalPanel:GetLabelCount()*5) > horizontalPanel:GetWidth()
                        minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetLongestLabel():GetWidth() + 1.5*tickWidth)
                        xLabelsRotation = 270
                    else
                        minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetLongestLabel():GetHeight() + 1.5*tickWidth)
                    end
                end
            end
            horizontalPanelHeightPercent = minimumSpace / GetHeight()
        else
            horizontalPanelHeightPercent = 0.05
        end
        horizontalPanel:SetSize(GetWidth()*horizontalPanelWidthPercent, GetHeight()*horizontalPanelHeightPercent)
        verticalPanelHeightPercent = 1-horizontalPanelHeightPercent-(titleAreaHeightPercent+subtitleAreaHeightPercent)
        legendPanelHeightPercent = verticalPanelHeightPercent
    end
    /*
        This action adjusts for the y-axis.
    */
    action AdjustForYAxis()
        if IsShowingYAxis()
            verticalPanel:SetSize(GetWidth()*verticalPanelWidthPercent, GetHeight()*verticalPanelHeightPercent)

            integer minimumSpace = 0
            integer tickWidth = verticalPanel:GetTickWidth()
            integer tickHeight = verticalPanel:GetTickHeight()

            integer titleautofontsize = cast(integer, ((GetHeight()+GetWidth())/2)*(0.05/2))

            if verticalPanel:GetTitleLabel() not= undefined
                if not yTitleFontSizeOverride // This is the auto-sized Y-Axis Label
                    if allFontSizeOverride
                        titleautofontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent)
                    end
                    verticalPanel:GetTitleLabel():SetFontSize(titleautofontsize)
                else
                    integer fontsize = verticalPanel:GetTitleFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent)
                    end
                    verticalPanel:GetTitleLabel():SetFontSize(fontsize)
                end

                number tickSpace = 3*tickWidth
                if verticalPanel:ShowGroupBrackets()
                    tickSpace = 4*tickWidth + tickHeight
                end
                minimumSpace = minimumSpace + cast(integer, verticalPanel:GetTitleLabel():GetHeight() + tickSpace)
            end

            if verticalPanel:GetLabelCount() > 0 and verticalPanel:ShowLabels()
                integer labelautofontsize = cast(integer, (GetHeight()*(1-horizontalPanelHeightPercent-(titleAreaHeightPercent+subtitleAreaHeightPercent)))/verticalPanel:GetLabelCount())
                if labelautofontsize > cast(integer, titleautofontsize*0.75)
                    labelautofontsize = cast(integer, titleautofontsize*0.75)
                end

                if not yLabelFontSizeOverride
                    if allFontSizeOverride
                        labelautofontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent*0.75)
                    end
                    verticalPanel:SetLabelFontSize(labelautofontsize)
                else
                    integer fontsize = verticalPanel:GetLabelFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent)
                    end
                    verticalPanel:SetLabelFontSize(fontsize)
                end
                verticalPanel:GetLongestLabel():SetFontSize(verticalPanel:GetLabelFontSize())
                verticalPanel:SetSumOfLabelHeights((verticalPanel:GetLongestLabel():GetHeight()*verticalPanel:GetLabelCount()))

                minimumSpace = minimumSpace + cast(integer, verticalPanel:GetLongestLabel():GetWidth() + 1.5*tickWidth)
            end

            verticalPanelWidthPercent = minimumSpace / GetWidth()
        else
            verticalPanelWidthPercent = 0.05
        end
        verticalPanel:SetSize(GetWidth()*verticalPanelWidthPercent, GetHeight()*verticalPanelHeightPercent)
    end
    /*
        This action adjusts the chart for the legend.
    */
    action AdjustForLegend()
        legend:SetContainer(me)
        if IsShowingLegend()
            legend:SetSize(GetWidth()*legendPanelWidthPercent, GetHeight()*legendPanelHeightPercent)
            integer minimumSpace = 0
            integer minimumWidthSpace = 0
            integer minimumHeightSpace = 0
            number labelHeight = 0
            number labelWidth = 0

            if legend:DisplayOnLeft() or legend:DisplayOnRight()
                integer titleautofontsize = cast(integer, ((GetHeight()+GetWidth())/2)*(0.05/2))
                if legend:GetTitleLabel() not= undefined
                    if not legendTitleFontSizeOverride // This is the auto-sized legend title
                        if allFontSizeOverride
                            titleautofontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent)
                        end
                        legend:SetTitleFontSize(titleautofontsize)
                    else
                        integer fontsize = legend:GetTitleFontSize()
                        if fontsize <= 0
                            fontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent)
                        end
                        legend:SetTitleFontSize(fontsize)
                    end
                end
    
                number newWidthSum = 0.0
                number newHeightSum = 0.0
                if not legend:GetSeriesList():IsEmpty()
                    integer labelautofontsize = cast(integer, GetWidth()*0.025)
                    if labelautofontsize > cast(integer, titleautofontsize*0.75)
                        labelautofontsize = cast(integer, titleautofontsize*0.75)
                    end
                    if not legendLabelFontSizeOverride
                        if allFontSizeOverride
                            labelautofontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent*0.75) //75% of legend title
                        end
                        legend:SetLabelFontSize(labelautofontsize)
                    else
                        integer fontsize = legend:GetLabelFontSize()
                        if fontsize <= 0
                            fontsize = cast(integer, GetFontSize()*verticalPanelHeightPercent*0.75)
                        end
                        legend:SetLabelFontSize(fontsize)
                    end
                    legend:CalculateMinimumSpace()
                    minimumWidthSpace = cast(integer, legend:GetMinimumWidth())
                    minimumHeightSpace = cast(integer, legend:GetMinimumHeight())

                    // Check and adjust default font size again if the minimum height exceeds the allowed space.
                    if not legendLabelFontSizeOverride and minimumHeightSpace > verticalPanelHeightPercent*GetHeight()
                        labelautofontsize = cast(integer, labelautofontsize*(verticalPanelHeightPercent*GetHeight()/minimumHeightSpace))
                        legend:SetLabelFontSize(labelautofontsize)
                        if not legendTitleFontSizeOverride
                            legend:SetTitleFontSize(cast(integer, labelautofontsize*1.25))
                        end
                        legend:CalculateMinimumSpace()
                        minimumWidthSpace = cast(integer, legend:GetMinimumWidth())
                        minimumHeightSpace = cast(integer, legend:GetMinimumHeight())
                    end
                end
    
                legendPanelWidthPercent = minimumWidthSpace / GetWidth()
                number remainingChartArea = math:Round(1 - legendPanelWidthPercent - verticalPanelWidthPercent - 0.025, 2) // 0.025 for margin padding
                SetChartAreaWidthPercent(remainingChartArea)
                horizontalPanel:SetWidth(remainingChartArea*GetWidth())

            else //legend:DisplayOnTop() or legend:DisplayOnBottom()
                integer titleautofontsize = cast(integer, ((GetHeight()+GetWidth())/2)*(0.05/2))
                if legend:GetTitleLabel() not= undefined
                    if not legendTitleFontSizeOverride // This is the auto-sized legend title
                        if allFontSizeOverride
                            titleautofontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent)
                        end
                        legend:SetTitleFontSize(cast(integer, titleautofontsize))
                    else
                        integer fontsize = legend:GetTitleFontSize()
                        if fontsize <= 0
                            fontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent)
                        end
                        legend:SetTitleFontSize(fontsize)
                    end
                end

                if not legend:GetSeriesList():IsEmpty()
                    integer labelautofontsize = cast(integer, GetHeight()*0.025)
                    if labelautofontsize > cast(integer, titleautofontsize*0.75)
                        labelautofontsize = cast(integer, titleautofontsize*0.75)
                    end

                    if not legendLabelFontSizeOverride
                        if allFontSizeOverride
                            labelautofontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent*0.75)
                        end
                        legend:SetLabelFontSize(labelautofontsize)
                    else
                        integer fontsize = legend:GetLabelFontSize()
                        if fontsize <= 0
                            fontsize = cast(integer, GetFontSize()*horizontalPanelWidthPercent*0.75)
                        end
                        legend:SetLabelFontSize(fontsize)
                    end
                    legend:CalculateMinimumSpace()
                    minimumWidthSpace = cast(integer, legend:GetMinimumWidth())
                    minimumHeightSpace = cast(integer, legend:GetMinimumHeight())

                    // Check and adjust default font size again if the minimum width exceeds the allowed space.
                    if not legendLabelFontSizeOverride and minimumWidthSpace > horizontalPanelWidthPercent*GetWidth()
                        labelautofontsize = cast(integer, labelautofontsize*(horizontalPanelWidthPercent*GetWidth()/minimumWidthSpace))
                        legend:SetLabelFontSize(labelautofontsize)
                        if not legendTitleFontSizeOverride
                            legend:SetTitleFontSize(cast(integer, labelautofontsize*1.25))
                        end
                        legend:CalculateMinimumSpace()
                        minimumWidthSpace = cast(integer, legend:GetMinimumWidth())
                        minimumHeightSpace = cast(integer, legend:GetMinimumHeight())
                    end
                end
    
                legendPanelHeightPercent = minimumHeightSpace / GetHeight()
                number remainingChartAreaHeight = math:Round(1 - legendPanelHeightPercent - horizontalPanelHeightPercent - (titleAreaHeightPercent+subtitleAreaHeightPercent), 2) // 0.10 for title padding
                SetChartAreaHeightPercent(remainingChartAreaHeight)
                verticalPanel:SetHeight(remainingChartAreaHeight*GetHeight())

                number remainingChartAreaWidth = math:Round(1 - verticalPanelWidthPercent - 0.05, 2) // 0.05 for margin padding
                SetChartAreaWidthPercent(remainingChartAreaWidth)
                horizontalPanel:SetWidth(remainingChartAreaWidth*GetWidth())
                legendPanelWidthPercent = horizontalPanelWidthPercent
            end
        else
            legendPanelWidthPercent = 0.05
            number remainingChartArea = math:Round(1 - legendPanelWidthPercent - verticalPanelWidthPercent, 2)
            SetChartAreaWidthPercent(remainingChartArea)
            horizontalPanel:SetWidth(remainingChartArea*GetWidth())
        end    
        legend:SetSize(GetWidth()*legendPanelWidthPercent, GetHeight()*legendPanelHeightPercent)    
    end
    /*
        This action sets the overall font size.

        Attribute: Parameter size of the overall font.
    */
    action SetFontSize(integer size)
        allFontSizeOverride = true
        titleFontSizeOverride = true
        subtitleFontSizeOverride = true
        parent:Control:SetFontSize(size)
    end
    /*
        This action sets the title font size.

        Attribute: Parameter size of the title font.
    */
    action SetTitleFontSize(integer size)
        titleFontSizeOverride = true
        titlefontsize = size
    end
    /*
        This action sets the subtitle font size.

        Attribute: Parameter size of the subtitle font.
    */
    action SetSubtitleFontSize(integer size)
        subtitleFontSizeOverride = true
        subtitlefontsize = size
    end
    /*
        This action sets the x-axis title font size.

        Attribute: Parameter size of the x-axis title font.
    */
    action SetXTitleFontSize(integer size)
        xTitleFontSizeOverride = true
        horizontalPanel:SetTitleFontSize(size)
    end
    /*
        This action sets the x-axis label font size.

        Attribute: Parameter size of the x-axis label font.
    */
    action SetXLabelFontSize(integer size)
        xLabelFontSizeOverride = true
        horizontalPanel:SetLabelFontSize(size)
    end
    /*
        This action sets the y-axis title font size.

        Attribute: Parameter size of the y-axis title font.
    */
    action SetYTitleFontSize(integer size)
        yTitleFontSizeOverride = true
        verticalPanel:SetTitleFontSize(size)
    end
    /*
        This action sets the y-axis label font size.

        Attribute: Parameter size of the y-axis label font.
    */
    action SetYLabelFontSize(integer size)
        yLabelFontSizeOverride = true
        verticalPanel:SetLabelFontSize(size)
    end
    /*
        This action sets the legend title font size.

        Attribute: Parameter size of the legend title font.
    */
    action SetLegendTitleFontSize(integer size)
        legendTitleFontSizeOverride = true
        legend:SetTitleFontSize(size)
    end
    /*
        This action sets the legend label font size.

        Attribute: Parameter size of the legend label font.
    */
    action SetLegendLabelFontSize(integer size)
        legendLabelFontSizeOverride = true
        legend:SetLabelFontSize(size)
    end

    /* 
        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.
        This action will control the LostSelection for ChartItems shared amoung all charts.
        Any ChartItems specific to one type of chart (i.e. lines for LineCharts) will have 
        an addition LostSelection action defined in the inherited class.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem item)
        if item = undefined
            return now
        end

        Item target = item
        if target not= undefined
            target:Focus()
            if target is Series
                Series temp = cast(Series, target)
                integer i = 0
                repeat while i < temp:GetSize()
                    Drawable element = temp:GetItemAt(i)
                    element:SetColor(previousColor)
                    element:SetZ(previousZ)
                    i = i + 1
                end
                temp:GetEntryIcon():SetColor(previousColor)
                temp:GetEntryBox():SetColor(0,0,0,0)
                if showLinearRegression and temp:GetRegressionLine() not= undefined
                    RegressionLine regressionLine = cast(RegressionLine, temp:GetRegressionLine())
                    regressionLine:SetZ(previousZ)
                    regressionLine:SetColor(previousColor)
                    regressionLine:GetLabel():LostSelection()
                    regressionLine:GetRegressionIcon():SetColor(previousColor)
                end
            elseif target is RegressionLine
                RegressionLine temp = cast(RegressionLine, target)
                temp:SetZ(previousZ)
                temp:SetColor(previousColor)
                temp:GetLabel():LostSelection()
                temp:GetRegressionIcon():SetColor(previousColor)
            elseif target is RegressionLinePointMarker
                target:Hide()
            elseif target is GroupPanel
                GroupPanel temp = cast(GroupPanel, target)  
//                if temp:GetSelectionArrow() not= undefined          
//                    temp:GetSelectionArrow():Hide()
//                end
//                if temp:GetSelectionBracket():GetSize() = 3          
//                    temp:GetSelectionBracket():Get(0):Hide()
//                    temp:GetSelectionBracket():Get(1):Hide()
//                    temp:GetSelectionBracket():Get(2):Hide()
//                end
            elseif target is ChartDrawable
                // Do nothing. Let the ChartDrawable handle itself.
            elseif target is Drawable
                Drawable temp = cast(Drawable, target)
                temp:SetZ(previousZ)
                temp:SetColor(previousColor)  
            elseif target is ChartLabel
                // Do nothing. Let the ChartLabel handle itself.
            elseif target is ChartAreaPanel
                // Do nothing.
            elseif target is HorizontalAxisPanel or target is VerticalAxisPanel
                // Do nothing.
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    // Remove the View set during Gained selection
                    temp:SetView2D(undefined)
                end
            end
        end
    end

    /* 
        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.
        This action will control the GainedSelection for ChartItems shared amoung all charts.
        Any ChartItems specific to one type of chart (i.e. lines for LineCharts) will have 
        an addition GainedSelection action defined in the inherited class.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action OnSelectionChange(ChartItem item)
        Item target = item
        if target not= undefined
            target:Focus()
            if target is Series
                Series temp = cast(Series, target)
                previousColor = temp:GetColor()
                integer i = 0
                repeat while i < temp:GetSize()
                    Drawable element = temp:GetItemAt(i)
                    element:SetColor(GetSelectionColor())
                    element:SetZ(-1)
                    i = i + 1
                end
                temp:GetEntryIcon():SetColor(GetSelectionColor())
                temp:GetEntryBox():SetColor(GetSelectionColor())
                if showLinearRegression and temp:GetRegressionLine() not= undefined
                    RegressionLine regressionLine = cast(RegressionLine, temp:GetRegressionLine())
                    previousZ = regressionLine:GetZ()
                    regressionLine:SetZ(-5)
                    //regressionLine:SetColor(GetSelectionColor())
                    regressionLine:GetLabel():GainedSelection()
                    regressionLine:GetRegressionIcon():SetColor(GetSelectionColor())
                end 
            elseif target is RegressionLine
                RegressionLine temp = cast(RegressionLine, target)
                previousZ = temp:GetZ()
                previousColor = temp:GetColor()
                temp:SetZ(-5)
                temp:SetColor(GetSelectionColor())
                temp:GetLabel():GainedSelection()
                temp:GetRegressionIcon():SetColor(GetSelectionColor())
            elseif target is RegressionLinePointMarker
                target:Show()
            elseif target is GroupPanel
                // Removed
            elseif target is ChartDrawable
                // Do nothing by default. The ChartDrawable handles its own selection event.
            elseif target is Drawable
                Drawable temp = cast(Drawable, target)
                previousZ = temp:GetZ()
                previousColor = temp:GetColor()
                temp:SetZ(-1)
                temp:SetColor(GetSelectionColor())
            elseif target is ChartLabel
                // Do nothing by default. The ChartLabel handles its own selection event.
            elseif target is ChartAreaPanel
                /*
                Do whatever specialized work we want to do to show overall focus/selection on the ChartAreaPanel here.
                Importantly, we do not want to override the color properties like we would if we fell into the last case below.
                */
            //elseif target:Equals(me)
            //    GetChartArea():GainedSelection()
            elseif target is HorizontalAxisPanel or target is VerticalAxisPanel
                // Do nothing by default. The axis panel handles its own selection event.
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    previousColorGroup = properties:GetBorderColor()
                    previousBackgroundColor = properties:GetBackgroundColor()
                    Color transparency
                    transparency:SetColor(0, 0, 0, 0)
                    ControlShaderView view
                    view:Initialize()
                    temp:SetBackgroundColor(transparency)
                    temp:SetBorderColor(GetSelectionColor())
                    temp:SetView2D(view)
                end
            end
        end
    end

    action LostSelection
        if GetChartArea() not= undefined
            GetChartArea():LostSelection()
        else
            parent:Control:LostSelection()
        end
    end

    /*
        This action gets the ChartSelection, which contains the ChartItem that is currently selected. 
        The reason why we use this indirection, instead of getting the items directly, is because this ensures
        the operating system is informed whenever selections are changed. The item can be obtained from this selection
        by calling GetChartItem on the selection. The selection is intended to never be undefined, even if nothing is selected.

        Attribute: Returns the current selection
    */
    action GetSelection returns ChartSelection
        return selection
    end

    /*
        This action sets the ChartItem that is currently selected. 
        This call has the same effect as calling GetSelection, then Set(ChartItem) on the selection.

        Attribute: Parameter item the current item to be selected
    */
    action Select(ChartItem item)
        selection:Set(item)
    end


    /*
        This action moves the selection to the right within the chart.
    */
    action SelectionRight
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        if selected:HasSpecialNavigation(selected:RIGHT)
            selected:DoSpecialNavigation(selected:RIGHT)
            return now
        end

        ChartItem next = selected:GetRightItem()
        if next not= undefined
            selection:Set(next)
        end
    end
    
    /*
        This action moves the selection to the left within the chart.
    */
    action SelectionLeft
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        if selected:HasSpecialNavigation(selected:LEFT)
            selected:DoSpecialNavigation(selected:LEFT)
            return now
        end

        ChartItem next = selected:GetLeftItem()
        if next not= undefined
            selection:Set(next)
        end
    end

    /*
        This action moves the selection down within the chart.
    */
    action SelectionDown
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        if selected:HasSpecialNavigation(selected:DOWN)
            selected:DoSpecialNavigation(selected:DOWN)
            return now
        end

        ChartItem next = selected:GetDownItem()
        if next not= undefined
            selection:Set(next)
        end
    end

    /*
        This action moves the selection up within the chart.
    */
    action SelectionUp
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        if selected:HasSpecialNavigation(selected:UP)
            selected:DoSpecialNavigation(selected:UP)
            return now
        end

        ChartItem next = selected:GetUpItem()
        if next not= undefined
            selection:Set(next)
        end
    end

    /*
        This action moves the selection to enter the current grouping or panel.
    */
    action SelectionEnter
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        if selected:HasSpecialNavigation(selected:ENTER)
            selected:DoSpecialNavigation(selected:ENTER)
            return now
        end

        ChartItem next = selected:GetEnterItem()

        if next not= undefined
            if next:IsEscapingToLastItem()
                next:SetEscapeItem(selected)
            end

            if next:IsPassingThroughSelection()
                repeat while next:IsPassingThroughSelection() and next:GetEnterItem() not= undefined
                    next = next:GetEnterItem()
                end
            end

            selection:Set(next)
        end
    end

    /*
        This action moves the selection to the "escape" item, typically moving upwards
        to the containing group or panel.
    */
    action SelectionEscape
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        if selected:HasSpecialNavigation(selected:ESCAPE)
            selected:DoSpecialNavigation(selected:ESCAPE)
            return now
        end

        ChartItem next = selected:GetEscapeItem()
        if next not= undefined
            if next:IsPassingThroughSelection()
                repeat while next:IsPassingThroughSelection() and next:GetEscapeItem() not= undefined
                    next = next:GetEscapeItem()
                end
            end

            selection:Set(next)
        end
    end

    /*
        This action moves the selection to the "next" focus item, typically moving upwards
        to the containing group or panel.
    */
    action SelectionNextFocus
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        Item next = selected:GetNextFocus()
        if next not= undefined and next is ChartItem
            
            selection:Set(cast(ChartItem, next))
        end
    end

    /*
        This action moves the selection to the "previous" focus item, typically moving upwards
        to the containing group or panel.
    */
    action SelectionPreviousFocus
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            selection:Set(me)
            return now
        end

        Item previous = selected:GetPreviousFocus()
        if previous not= undefined and previous is ChartItem
            
            selection:Set(cast(ChartItem, previous))
        end
    end
    /*
        This action get the current chart object.

        Attribute: Returns the chart object.
    */
    action GetContainer returns Chart
        return me
    end
    /*
        This action sets the current chart object.

        Attribute: Parameter container the chart object.
    */
    action SetContainer(Chart container)
        if container not= me
            alert("I cannot contain a chart inside of another chart.")
        end

        // If the chart is asked to contain itself, do nothing.
    end

    /*
        This action tells the system to update all of its graphics because its structure has changed. This might 
        be true if the charts are being used to update a live data source.

        Attribute: Parameter update whether or not an update is required
    */
    action SetNeedsUpdate(boolean update)
        me:treeNeedsUpdate = update
    end
    
    /*
        This action indicates whether the system needs its graphics updated.

        Attribute: Returns whether or not an update is required
    */
    action NeedsTreeUpdate returns boolean
        return treeNeedsUpdate
    end

    /*
        This action overrides the default Update action. If the tree needs to be updated, the tree is regenerated.

        Attribute: Parameter seconds the number of seconds since the last update.
    */
    action Update(number seconds)
        if treeNeedsUpdate
            GenerateInfoTree()
            treeNeedsUpdate = false
        end
    end
    /*
        This action gets the Drawable in the background of the chart.

        Attribute: Returns the chart background Drawable.
    */
    action GetBackground returns Drawable
        return background
    end
    /*
        This action sets the Drawable in the background of the chart.

        Attribute: Parameter background the chart background.
    */
    action SetBackground(Drawable background)
        me:background = background
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        return ""
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Parameter hasAccessibility flag to tell the ChartWriter if it should include accessibility elements and tags.
        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics(boolean hasAccessibility) returns text
        return ""
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            text value = ConvertToScalableVectorGraphics()
            file:Write(value)
        end
    end

    /*
        This is a helper action for saving that saves at the path relative to the current working directory.

        Attribute: Parameter path the path relative to the working directory.
    */
    action Save(text path)
        File file
        file:SetPath(path)
        Save(file)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Hypertext Markup Language (HTML) is currently
        supported, and Scalable Vector Graphics (SVG) conversion is used. This makes a file that can
        be opened in the browser that imports the Javascript and Cascading Stylesheets necessary
        to navigate the charts accessibly on the web.

        Attribute: Parameter file the location of where to save the file.
    */
    blueprint action Share(File file)

    /*
        This is a helper action for sharing that saves at the path relative to the current working directory.

        Attribute: Parameter path the path relative to the working directory.
    */
    action Share(text path)
        File file
        file:SetPath(path)
        Share(file)
    end

    /*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup.
    */
    action Display
        ChartDisplay game
        game:SetScreenSize(2000,1000) //Default size.
        game:SetChart(me)
        game:StartGame()
    end

    /*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup.
    */
    action Display(integer width, integer height)
        ChartDisplay game
        game:SetScreenSize(width,height)
        game:SetChart(me)
        game:StartGame()
    end

    /*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup. The exit flag tells the system, if true, to close the pre-built display
        right after completing layout, which can be useful for writing to disk.
    */
    action Display(boolean exit)
        ChartDisplay game
        game:SetExitOnStart(exit)
        game:SetScreenSize(1200,1000) //Default size.
        game:SetChart(me)
        game:StartGame()
    end

    /*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup. The exit flag tells the system, if true, to close the pre-built display
        right after completing layout, which can be useful for writing to disk.
    */
    action Display(integer width, integer height, boolean exit)
        ChartDisplay game
        game:SetExitOnStart(exit)
        game:SetScreenSize(width,height)
        game:SetChart(me)
        game:StartGame()
    end

    /*
    This action returns the thickness of the borders drawn around points in the chart, measured in pixels.
    This is only applied to points, not other chart elements like bars. If this chart isn't drawing any
    points, this value isn't used. By default, this value is 0.
    */
    action GetPointBorderThickness returns number
        return pointBorderThickness
    end

    /*
    This action sets the thickness of the borders drawn around points in the chart, measured in pixels.
    This is only applied to points, not other chart elements like bars. If this chart isn't drawing any
    points, this value isn't used. By default, this value is 0.
    */
    action SetPointBorderThickness(number pointBorderThickness)
        me:pointBorderThickness = pointBorderThickness
    end

    /*
    This action returns the thickness of the borders drawn around the icons in the Legend, measured in pixels.
    If this chart doesn't have a legend, this value isn't used. By default, this value is 1.
    */
    action GetLegendIconBorderThickness returns number
        return legendIconBorderThickness
    end

    /*
        This action sets the thickness of the borders drawn around the icons in the Legend, measured in pixels.
        If this chart doesn't have a legend, this value isn't used. By default, this value is 1.
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Interface.Controls.Charts.Chart

        DataFrame frame
        frame:Load("ChartTestData.csv")
        frame:AddSelectedColumns("Column1")
        frame:AddSelectedColumns("Column2")
        frame:AddSelectedColumns("Column3")
        frame:AddSelectedFactors("Factor1")
        
        BarChart chart = frame:BarChart()
        chart:SetTitle("BarChart Test")
        chart:SetSubtitle("Three Columns - One Factor")
        chart:SetLegendIconBorderThickness(3)
        chart:ShowAnnotations(true)

        chart:Display()
    */
    action SetLegendIconBorderThickness(number thickness)
        legendIconBorderThickness = thickness
    end
    
    /*
        This action sets a flag to know if all of the accessibility
        information should be included. This may be used to reduce
        the size of the image in cases where it will be used
        as a flat image such as in a PDF.

        Attribute: Parameter hasAccessibility flag to tell the ChartWriter if it should include accessibility elements and tags.
    */
    action SetAccessibilityFlag(boolean hasAccessibility)
        me:hasAccessibility = hasAccessibility
    end
    /*
        This action checks if the chart has accessibility information included.

        Attribute: Returns true if the accessibility information include in the chart.
    */
    action HasAccessibility() returns boolean
        return hasAccessibility
    end

    /*
    This action generates the instruction text for the Chart Area description.

    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddChartAreaInstructions(text description)
        
        if not IsSeparated()
            //Not Separated but has Groups
            if HasGroups()
                description = description + " To navigate the chart, " + enterInstruction + " to move into the list of " + GetGroupsText() + " or " + generalInstruction + " to navigate the chart information."
            //Not Separate and no Groups
            else
                description = description + " To navigate the chart, " + enterInstruction + " to move into the list of " + GetChartItemsText() + " or " + generalInstruction + " to navigate the chart information."
            end
        else
            description = description + " To navigate the chart, " + enterInstruction + " to move into the list of sub charts or " + generalInstruction + " to navigate the chart information."
        end
        me:GetChartArea():SetDescription(description)
        me:SetDescription(description)
    end

    /*
    This action generates the instruction text for a sub chart area description.

    Attribute: Parameter subChartArea The sub chart area that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddSubChartAreaInstructions(ChartAreaPanel subChartArea, text description)

        
        description = description + " To navigate the list of sub charts, " + generalInstruction + " to move between sub charts in list order," 
        description = description + " " + enterInstruction + " to move into the list of " + GetChartItemsText() + " for that sub chart, " + exitInstruction + " to return to the chart information."
        
        
        subChartArea:SetDescription(description)
    end

    /*
    This action generates the instruction text for a chart item description.

    Attribute: Parameter chartItem The chart item that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddChartItemInstructions(Item chartItem, text description)

        description = description + " To navigate the list of " + GetChartItemsText() + ", " + listOrderInstruction + " to move between " + GetChartItemsText() + " in list order," 
        
        Properties prop
        if (prop:IsIos() or prop:IsAndroid())
            description = description + "" //this command is not assigned for gestures yet
        else
            description = description + " " + valueOrderInstruction + " to move between " + GetChartItemsText() + " by value order,"
        end

        if IsSeparated()
            description = description + " " + exitInstruction + " to return to the sub chart list."
        elseif IsSeparatedBySeries() and not IsSeparatedByFactor()
            description = description + " " + exitInstruction + " to return to the " + GetSeriesText() + " list."
        elseif not IsSeparated() and HasGroups()
            description = description + " " + exitInstruction + " to return to the chart information."
        else
            description = description + " " + exitInstruction + " to return to the " + GetGroupText() + " list."
        end
        chartItem:SetDescription(description)
    end

    /*
    This action generates the instruction text for a group panel description.

    Attribute: Parameter groupPanel The group panel that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddGroupPanelInstructions(ChartDrawable groupPanel, text description)

        description = description + " To navigate the list of " + GetGroupsText() + ", " + generalInstruction + " to move between " + GetGroupsText() + " in list order," 
        description = description + " " + enterInstruction + " to move into the list of " + GetChartItemsText() + " for that " + GetGroupText() + ", " + exitInstruction + " to return to the chart information."
        
        groupPanel:SetDescription(description)
    end
    /*
        This action gets text for a group.

        Attribute: Returns the group text.
    */
    action GetGroupText returns text
        return groupText
    end
    /*
        This action gets text for groups.

        Attribute: Returns the groups text.
    */
    action GetGroupsText returns text
        return groupsText
    end
    /*
        This action gets text for a series.

        Attribute: Returns the series text.
    */
    action GetSeriesText returns text
        return seriesText
    end
    /*
        This action gets text for a chart item.

        Attribute: Returns the chart item text.
    */
    action GetChartItemText returns text
        return chartItemText
    end
    /*
        This action gets text for a chart items.

        Attribute: Returns the chart items text.
    */
    action GetChartItemsText returns text
        return chartItemsText
    end
    /*
        This action sets the file path for a script.

        Attribute: Parameter scriptFilepath the file path.
    */
    action SetScriptFilepath(text scriptFilepath)
        me:scriptFilepath = scriptFilepath
    end
    /*
        This action gets the script file path.

        Attribute: Returns the script file path.
    */
    action GetScriptFilepath returns text
        return me:scriptFilepath
    end
    /*
        This action sets the file path for a style.

        Attribute: Parameter styleFilepath the file path.
    */
    action SetStyleFilepath(text styleFilepath)
        me:styleFilepath = styleFilepath
    end
    /*
        This action gets the style file path.

        Attribute: Returns the style file path.
    */
    action GetStyleFilepath returns text
        return me:styleFilepath
    end
    /*
    This action gets the instruction text for a list order description.

    Attribute: Returns The description for list order.
    */
    action GetListOrderInstruction returns text
        return listOrderInstruction
    end
    /*
    This action sets the instruction text for a list order description.

    Attribute: Parameter listOrderInstruction The description for list order.
    */
    action SetListOrderInstruction(text listOrderInstruction)
        me:listOrderInstruction = listOrderInstruction
    end
    /*
    This action gets the instruction text for a value order  description.

    Attribute: Returns The description for value order.
    */
    action GetValueOrderInstruction returns text
        return valueOrderInstruction
    end
    /*
    This action sets the instruction text for a value order description.

    Attribute: Parameter valueOrderInstruction The description for value order.
    */
    action SetValueOrderInstruction(text valueOrderInstruction)
        me:valueOrderInstruction = valueOrderInstruction
    end
    /*
    This action gets the instruction text for an enter description.

    Attribute: Returns The description for enter.
    */
    action GetEnterInstruction returns text
        return enterInstruction
    end
    /*
    This action sets the instruction text for an enter description.

    Attribute: Parameter enterInstruction The description for enter.
    */
    action SetEnterInstruction(text enterInstruction)
        me:enterInstruction = enterInstruction
    end
    /*
    This action gets the instruction text for an exit description.

    Attribute: Returns The description for exit.
    */
    action GetExitInstruction returns text
        return exitInstruction
    end
    /*
    This action sets the instruction text for an exit description.

    Attribute: Parameter exitInstruction The description for exit.
    */
    action SetExitInstruction(text exitInstruction)
        me:exitInstruction = exitInstruction
    end
    /*
    This action gets the instruction text for a general chart description.

    Attribute: Returns The description for a general chart.
    */
    action GetGeneralInstruction returns text
        return generalInstruction
    end
    /*
    This action sets the instruction text for a general description.

    Attribute: Parameter exitInstruction The description for a general chart.
    */
    action SetGeneralInstruction(text generalInstruction)
        me:generalInstruction = generalInstruction
    end

    /*
    This action is used to check the current platform and adjust the command instructions to use gestures rather than keys

    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.BarChart
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:AddSelectedColumn(1)
    BarChart chart = frame:BarChart()
    chart:CheckPlatformInstructions
    */
    action CheckPlatformInstructions
        Properties properties
        if (properties:IsIos() or properties:IsAndroid())
            generalInstruction = "two finger swipe Left or Right"
            listOrderInstruction = "two finger swipe Left or Right"
            //valueOrderInstruction = " "
            enterInstruction = "two finger swipe Down"
            exitInstruction = "two finger swipe Up"
        end
    end

    
    /*
    This action gets the flag to determine if touch exploration is enabled.

    Attribute: Returns The flag for touch exploration.
    */
    action GetTouchExplorationEnabled returns boolean
        return touchExplorationEnabled
    end
    /*
    This action sets the flag to determine if touch exploration is enabled.

    Attribute: Parameter touchExplorationEnabled The flag to determine if touch exploration is enabled.
    */
    action SetTouchExplorationEnabled(boolean touchExplorationEnabled)
        me:touchExplorationEnabled = touchExplorationEnabled
    end

    /*
    This action toggles the alpha value of the selection color between 0 and 1.

    Attribute: Parameter visualHighlight The flag to determine if visual highlighting is showing.
    */
    action ShowVisualHighlight(boolean visualHighlight)
        Color selectionColor = cast(Color, GetSelectionColor())
        if visualHighlight
            selectionColor:SetAlpha(1)
        else
            selectionColor:SetAlpha(0)
        end
        SetSelectionColor(selectionColor)
    end

    /*
        This action gets the selection bracket (Array<Drawable>).

        Attribute: Returns the Array<Dawable> of the selection bracket.
    */
    action GetSelectionBracket returns Array<Drawable> 
        return selectionBracket
    end

    /*
        This action gets chart drawables selection arrow drawable object.

        Attribute: Returns the charts slection arrow object.
    */
    action GetSelectionArrow returns Drawable
        return selectionArrow
    end

    /*
        This action gets the current size of the selection arrow.

        Attribute: Returns the current size of the selection arrow.
    */
    action GetCurrentArrowSize returns integer
        return currentArrowSize
    end

    /*
        This action sets the current size of the selection arrow.

        Attribute: Parameter currentArrowSize The current size of the selection arrow.
    */
    action SetCurrentArrowSize(integer currentArrowSize)
        me:currentArrowSize = currentArrowSize
    end

    /*
        This action gets the current arrow's flag for direction.

        Attribute: Returns the current arrow's flag for direction.
    */
    action GetCurrentSideArrow returns boolean
        return currentSideArrow
    end

    /*
        This action sets the current arrow's flag for direction.

        Attribute: Parameter currentSideArrow The current arrow's flag for direction.
    */
    action SetCurrentSideArrow(boolean currentSideArrow)
        me:currentSideArrow = currentSideArrow
    end

end