package Libraries.Interface.Controls.Charts

use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Controls.Charts.Graphics.BarGroup
use Libraries.Interface.Controls.Charts.Graphics.Bar
use Libraries.Game.Graphics.LinePath

/*
    The SharedBarChartParent class is Chart object that inherits from Control and like other
    UI elements it is added to the Game class. SharedBarChartParent is a parent to the BarChart 
    and the Histogram class and is not directly used itself.

    Attribute: Authors: Gabriel Contreras, Hannah Williams, Tim Kluthe

    Attribute: Example

    use Libraries.Interface.Controls.Charts
    use Libraries.Interface.Controls.Charts.BarChart
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            BarChart chart
            Add(chart)
        end
    end
*/

class SharedBarChartParent is Chart
    private integer numberOfBars = 0
    private number maxBarValue = 0
    private number minBarValue = 0
    private number betweenGroupPadding = -1

    private boolean annotationFontSizeOverride = false
    private integer annotationFontSize = 0

    Array<BarGroup> barGroups
    boolean isStacked = false
    boolean showTrendLine = false

    Color barColor = undefined

    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    integer previousZ = 0
    ChartOptions options
    Math math

    number barBorderThickness = 1
    integer barBorderStyle = 0

    // Terminology for navigation instructions
    private text chartItemText = "bar"
    private text chartItemsText = "bars"

    // Used to render a trend line. Undefined if no trend line is being rendered.
    LinePath trendLine = undefined

    on create
        LayoutProperties properties = GetDefaultLayoutProperties()
        barBorderStyle = properties:ALL - properties:BOTTOM
    end
    
    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.

        Attribute: Parameter takes the layout properties of the chart.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end

        // If stacked, we need to adjust the maximum value to the full stack
        if GetStackedFlag() and not IsSeparatedBySeries()
            AdjustStacked()
        end

        parent:Chart:LoadGraphics(properties)

        if GetHorizontalFlag()
            HideMajorYGridLines()
        else
            HideMajorXGridLines()
        end

        LoadChartAreaItems()
    end

    action LoadChartAreaItems()
        integer i = 0
        repeat while i < barGroups:GetSize()
            text groupname = barGroups:Get(i):GetName()
            if HasGroups() and not IsSeparatedBySeries()
                BarGroup barGroupIcon = barGroups:Get(i)
                barGroupIcon:SetGroupName(groupname)
                barGroupIcon:SetName(groupname + " group, ")
                barGroupIcon:SetDescription((i+1) + " of " + barGroups:GetSize() + " groups, has " + barGroups:Get(i):GetSize() + " bars.")
                if i = 0
                    AddGroupPanelInstructions(barGroupIcon, barGroupIcon:GetDescription())
                end
                
                barGroupIcon:SetInputGroup("Chart")
                barGroupIcon:SetFocusable(true)
                barGroupIcon:SetAccessibilityCode(parent:Item:CHART_ITEM)
                barGroupIcon:SetNextFocus(GetNextFocus())
                barGroupIcon:SetPreviousFocus(GetPreviousFocus())
                GetChartArea():Add(barGroupIcon)
            end

            GetGroupPanels():Add(barGroups:Get(i))

            integer j = 0  
            repeat while j < barGroups:Get(i):GetSize()
                Bar temp = barGroups:Get(i):Get(j)
                ChartAreaPanel chartArea = GetChartArea()
                if IsSeparated()
                    integer k = 0
                    repeat while k < GetNumberOfChartAreas()
                        if IsSeparatedBySeries()
                            if temp:GetSeries():GetName() = GetSubChartAreas():Get(k):GetName()
                                chartArea = GetSubChartAreas():Get(k)
                                GetSubChartAreas():Get(k):AddChartAreaItem(temp)
                            end
                        elseif IsSeparatedByFactor()
                            if groupname = GetSubChartAreas():Get(k):GetName()
                                chartArea = GetSubChartAreas():Get(k)
                                GetSubChartAreas():Get(k):AddChartAreaItem(temp)
                            end
                        end
                        k = k + 1
                    end
                end

                number value = math:Round(temp:GetValue(), 2)
                text barname = temp:GetName()
                text valueText = ""+value
                if CheckIfInteger(value)
                    valueText = ""+cast(integer, value)
                end

                text placement = (j + 1) + " of " + barGroups:Get(i):GetSize() + " bars inside " + groupname + " group."
                if HasGroups()
                    temp:SetName(barname + " bar, ")
                    if IsSeparated()
                        placement = ""
                    end
                    temp:SetDescription(valueText + ", " + placement)
                else
                    temp:SetName(barname + " bar, ")
                    temp:SetDescription(valueText + ", " + (i + 1) + " of " + barGroups:GetSize() + " bars.")
                end
                temp:SetInputGroup("Chart")
                temp:SetFocusable(true)
                temp:SetAccessibilityCode(parent:Item:CHART_ITEM)
                temp:SetNextFocus(GetNextFocus())
                temp:SetPreviousFocus(GetPreviousFocus())

                if temp:ShowAnnotation() or ShowAnnotations() and not GetStackedFlag() //not sure how we will show annotations for stacked bars
                    ChartLabel barLabel
                    barLabel:SetText(valueText)
                    if annotationFontSizeOverride
                            barLabel:SetFontSize(annotationFontSize)
                    end
                    temp:SetAnnotation(barLabel)
                    chartArea:Add(barLabel)
                end
                chartArea:Add(temp)
                j = j + 1
            end
            i = i + 1
        end

        if IsShowingTrendLine()
            if IsSeparatedByFactor()
                // we don't want to add the trend line if series' bars are not in the same chart area
                showTrendLine = false
            else
                // Add the trend line to the correct chart area, if there is one.
                ChartAreaPanel chartArea = GetChartArea()
                integer s = 0  
                repeat while s < GetSeriesList():GetSize()
                    Series series = GetSeriesList():Get(s)
                    if IsSeparatedBySeries()
                        integer k = 0
                        repeat while k < GetNumberOfChartAreas()
                            if series:GetName() = GetSubChartAreas():Get(k):GetName()
                                chartArea = GetSubChartAreas():Get(k)
                                k = GetNumberOfChartAreas() // skip the rest once the right are is located
                            end
                            k = k + 1
                        end
                    end
                    series:ShowTrendLine(true)
                    chartArea:Add(series:GetTrendLine())
                    s = s + 1
                end
            end
        end
    end

    private action CheckIfInteger(number value) returns boolean
        return (cast(integer, value) = value)
    end

    /* 
        This action adjusts the axis ranges to allow for the bars to be stacked.

    */
    private action AdjustStacked() 
        if IsSeparatedByFactor()
            if XAxisIsIndependent()
                ShowXAxis(false)
            else
                ShowYAxis(false)
            end
        end

        integer i = 0
        repeat while i < barGroups:GetSize()
            if barGroups:Get(i):GetPositiveValue() > maxBarValue
                maxBarValue = barGroups:Get(i):GetPositiveValue()
            end
            if barGroups:Get(i):GetNegativeValue() < minBarValue
                minBarValue = barGroups:Get(i):GetNegativeValue()
            end
            i = i + 1
        end

        if GetHorizontalFlag()
            if maxBarValue > GetXAxisMaximum()
                GetHorizontalPanel():SetMaximum(maxBarValue)
            end
            if minBarValue < GetXAxisMinimum()
                GetHorizontalPanel():SetMinimum(minBarValue)
            end
        else
            if maxBarValue > GetYAxisMaximum()
                GetVerticalPanel():SetMaximum(maxBarValue)
            end
            if minBarValue < GetYAxisMinimum()
                GetVerticalPanel():SetMinimum(minBarValue)
            end
        end
    end

    /*
        DisposeDrawables
        
        Empties drawables from the chart area.
    */
    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        GetChartArea():Empty()
    end
    
    /*
        LostSelection is a supplemental action to the parent Chart's LostSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their LostSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item
        if target not= undefined
            parent:Chart:LostSelection(item)
        end 
    end

    /* 
        OnSelectionChange is a supplemental action to the parent Chart's OnSelectionChange.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their GainedSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action OnSelectionChange(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item
        if target not= undefined
            target:Focus()
            parent:Chart:OnSelectionChange(item)
        end
    end

    /*
        Resize

        This action is called whenever the window is resized.
    */
    action Resize
        parent:Chart:Resize()
    end

    /*
        Sorts the bars by size in descending order (only if there are no groups)
        Updates the axis labels to the correct position after sorting.
    */
    action SortByBarSize
        if not HasGroups()
            BarGroupComparison comparison
            barGroups:Sort(comparison)
            Array <text> labels = GetBarGroupNames()
            if GetHorizontalFlag()
                GetVerticalPanel():SetTextLabels(labels)
            else
                GetHorizontalPanel():SetTextLabels(labels)
            end
        end
    end

    /*
    This action returns an array containing all of the names of the bar groups (or
    individual bars, if this chart doesn't use bar groups) in the order they appear
    in the chart. The array is a copy, and so it can be safely modified without
    effecting the chart.

    Attribute: Returns An array containing the names of the bars/bar groups in the order they appear in the chart.
    */
    action GetBarGroupNames returns Array<text>
        Array <text> grouplabels
        integer i = 0
        repeat while i < barGroups:GetSize()
            grouplabels:Add(barGroups:Get(i):GetName())
            i = i + 1
        end
        return grouplabels
    end

    /*
    This action sets the order the bars appear in the chart. The bars will appear in the same
    order that their names appear in the given input array. The input array must contain each
    name of the bars exactly once. If the array doesn't include all of the names, if any names
    are repeated, or if any name in the array doesn't appear in the chart, an error will occur.

    Attribute: Parameter names An array containing the names of the bars or bar groups, in the order they should appear in the chart.
    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.BarChart
    use Libraries.Containers.Array
    
    // Create a dataframe to hold the data and select the factor and column we're interested in.
    DataFrame frame
    frame:Load("data/WorldNightOut.csv")
    frame:AddSelectedFactors("Country")
    frame:AddSelectedColumns("Cost")
    
    // Using the frame, create a BarChart object.
    BarChart chart = frame:BarChart()
    
    // We need an array of the names to order by. We can make this ourselves manually,
    // or we can use GetBarGroupNames() to get them in default order from the chart.
    Array<text> names = chart:GetBarGroupNames()
    
    // For this example, we'll take the last name out of the array, and insert it back in front.
    names:AddToFront(names:RemoveFromEnd())
    
    // Now, sort the order of the bars by the order they appear in the array.
    chart:OrderByBarNames(names)
    
    // Display your bar chart.
    chart:Display()
    */
    action OrderByBarNames(Array<text> names)
        text barTitle = "bar"
        if HasGroups()
            barTitle = "bar group"
        end

        if names:GetSize() not= barGroups:GetSize()
            alert("I cannot order " + barGroups:GetSize() + " " + barTitle + "s using " + names:GetSize() + " names. There must be exactly the same number of " + barTitle + "s and names.")
        end

        // The index accesses array is used to double check that we never try to use the same bar group twice. If we do, we had duplicate names in the input, which is an error.
        Array<integer> indexAccesses
        repeat barGroups:GetSize() times
            indexAccesses:Add(0)
        end

        Array<BarGroup> newOrder
        integer nameCount = 0
        repeat while nameCount < names:GetSize()
            text name = names:Get(nameCount)
            integer foundIndex = -1

            integer barCount = 0
            repeat while barCount < barGroups:GetSize()
                BarGroup group = barGroups:Get(barCount)
                if group:GetName() = name
                    foundIndex = barCount
                    barCount = barGroups:GetSize()
                    newOrder:Add(group)
                end
                barCount = barCount + 1
            end

            if foundIndex = -1
                text dq = barTitle:GetDoubleQuote()
                alert("I could not find a " + barTitle + " named " + dq + name + dq + " in the chart. Is it spelled and capitalized correctly?")
            elseif indexAccesses:Get(foundIndex) > 0
                text dq = barTitle:GetDoubleQuote()
                alert("The name " + dq + name + dq + " was given twice, but each name must be unique.")
            else
                indexAccesses:Set(foundIndex, 1)
            end

            nameCount = nameCount + 1
        end

        barGroups = newOrder
        if GetHorizontalFlag()
            GetVerticalPanel():SetTextLabels(names)
        else
            GetHorizontalPanel():SetTextLabels(names)
        end
    end

    /*
        Appends a bargroup to end of the Bar Chart. 
        The number of bars in the group are added to the total number of bars.
    */
    action AddBarGroup(BarGroup group)
        if maxBarValue < group:GetMaxBarValue()
            maxBarValue = group:GetMaxBarValue()
        end
        if minBarValue > group:GetMinBarValue()
            minBarValue = group:GetMinBarValue()
        end
        barGroups:Add(group)
        numberOfBars = numberOfBars + group:GetSize()
        if group:GetSize() > 1
            HasGroups(true)
        end
    end

    /*
        Returns the number of bars currently added to the Bar Chart
    */
    action GetNumberOfBars returns integer
        return numberOfBars
    end

    /*
        Returns an array of all the bar groups
    */
    action GetBarGroups returns Array<BarGroup>
        return barGroups
    end

    /*
        Sets a flag that will stack bars inside each group if set to true.
    */
    action StackBars(boolean flag)
        isStacked = flag
    end

    /*
        Returns stacked flag 

        Attribute: True if stacked
    */
    action GetStackedFlag() returns boolean
        return isStacked
    end

    /*
        GenerateInfoTree

        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
        GenerateSummary is done in the child class: BarChart or Histogram
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            // We haven't loaded graphics yet, so bail.
            return now 
        end

        Math math
        ChartItem xAxis = GetHorizontalPanel()
        ChartItem yAxis = GetVerticalPanel()
        ChartItem chartArea = GetChartArea()
        
        text bartext = " bars"
        if numberOfBars = 1
            bartext = " bar"    
        end
        
        
        ChartItem summary = me


        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())

        chartArea:SetName(summary:GetName())
        chartArea:SetDisplayName(GenerateSummary())
        chartArea:SetContainer(me)
        summary = chartArea

        AddChartAreaInstructions(" with " + numberOfBars + bartext)
    
        // If any of these are not showing the tree will skip them in the navigation
        if IsShowingXAxis() 
            GetHorizontalPanel():GenerateInfoTree(me, chartArea, yAxis, xAxis)
        end        
        if IsShowingYAxis() 
            GetVerticalPanel():GenerateInfoTree(me, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, chartArea, yAxis, xAxis)
        end

        if IsSeparated()
            integer subAreaCount = GetNumberOfVisibleChartAreas()
            if GetNumberOfChartAreas() > 0
                ChartAreaPanel firstArea = GetSubChartAreas():Get(0)
                firstArea:SetDisplayName(GetName())
                firstArea:SetContainer(me)

                AddChartAreaInstructions(" with " + subAreaCount + " sub charts")
                summary:SetEnterItem(firstArea)
                firstArea:SetEscapeItem(summary)
                Array<ChartItem> chartAreaItems = GetSubChartAreas():Get(0):GetChartAreaItems()
                AddSubChartAreaInstructions(firstArea, " chart area with " + chartAreaItems:GetSize() + " bars, 1 of " + subAreaCount + " sub charts")

                //Bars within SubChartArea
                if chartAreaItems:GetSize() > 0
                    ChartItem firstBar = chartAreaItems:Get(0)
                    firstBar:SetContainer(me)
                    firstArea:SetEnterItem(firstBar)
                    firstBar:SetEscapeItem(firstArea)
                    AddChartItemInstructions(firstBar, firstBar:GetDescription())

                    integer j = 1
                    ChartItem previousBar = firstBar
                    repeat while j < chartAreaItems:GetSize()
                        ChartItem bar = chartAreaItems:Get(j)
                        bar:SetContainer(me)
                        bar:SetEscapeItem(firstArea)
                        bar:SetDescription(chartAreaItems:Get(j):GetDescription() + ", " + (j+1) + " of " + chartAreaItems:GetSize() + " bars.")
                        previousBar:SetRightItem(bar)
                        bar:SetLeftItem(previousBar)
                        previousBar = bar
                        j = j + 1
                    end
                    previousBar:SetDescription(previousBar:GetDescription() + " End of list order.")
                    previousBar:SetRightItem(firstBar)
                    firstBar:SetLeftItem(previousBar)

                    // Iterate through the bars again, this time in ascending value order.
                    Array<ChartItem> sortedBars = chartAreaItems:CopyToArray()
                    BarComparison barCompare
                    barCompare:SetAscending(true)
                    sortedBars:Sort(barCompare)
                    firstBar = sortedBars:Get(0)
                    previousBar = firstBar

                    j = 1
                    repeat while j < sortedBars:GetSize()
                        ChartItem bar = sortedBars:Get(j)
                        previousBar:SetUpItem(bar)
                        bar:SetDownItem(previousBar)
                        previousBar = bar                 
                        j = j + 1
                    end
                    previousBar:SetDescription(previousBar:GetDescription() + " End of value order.")
                end

                integer i = 1
                ChartItem previousArea = firstArea
                repeat while i < GetNumberOfChartAreas()
                    ChartAreaPanel chartSubArea = GetSubChartAreas():Get(i)
                    if chartSubArea:IsShowing()
                        ChartItem nextArea = chartSubArea
                        nextArea:SetContainer(me)
                        nextArea:SetEscapeItem(summary)
                        previousArea:SetRightItem(nextArea)
                        nextArea:SetLeftItem(previousArea)
                        previousArea = nextArea
                        nextArea:SetDisplayName(chartSubArea:GetName())

                        Array<ChartItem> subAreaItems = chartSubArea:GetChartAreaItems()
                        chartSubArea:SetDescription(" chart area with " + subAreaItems:GetSize() + " bars, " + (i+1) + " of " + subAreaCount + " sub charts.")
    
                        //Bars within SubChartArea
                        if chartAreaItems:GetSize() > 0
                            ChartItem firstBar = subAreaItems:Get(0)
                            firstBar:SetContainer(me)
                            nextArea:SetEnterItem(firstBar)
                            firstBar:SetEscapeItem(nextArea)
                            AddChartItemInstructions(firstBar, firstBar:GetDescription())

                            j = 1
                            ChartItem previousBar = firstBar
                            repeat while j < subAreaItems:GetSize()
                                ChartItem bar = subAreaItems:Get(j)
                                bar:SetContainer(me)
                                bar:SetEscapeItem(nextArea)
                                bar:SetDescription(bar:GetDescription() + ", " + (j+1) + " of " + subAreaItems:GetSize() + " bars.")
                                previousBar:SetRightItem(bar)
                                bar:SetLeftItem(previousBar)
                                previousBar = bar
                                j = j + 1
                            end
                            previousBar:SetDescription(previousBar:GetDescription() + " End of list order.")
                            previousBar:SetRightItem(firstBar)
                            firstBar:SetLeftItem(previousBar)

                            // Iterate through the bars again, this time in ascending value order.
                            Array<ChartItem> sortedBars = subAreaItems:CopyToArray()
                            BarComparison barCompare
                            barCompare:SetAscending(true)
                            sortedBars:Sort(barCompare)
                            previousBar = sortedBars:Get(0)

                            j = 1
                            repeat while j < sortedBars:GetSize()
                                ChartItem bar = sortedBars:Get(j)
                                previousBar:SetUpItem(bar)
                                bar:SetDownItem(previousBar)
                                previousBar = bar                 
                                j = j + 1
                            end
                            previousBar:SetDescription(previousBar:GetDescription() + " End of value order.")
                        end
                    end
                    i = i + 1
                end
                previousArea:SetDescription(previousArea:GetDescription() + " End of list order.")
                previousArea:SetRightItem(firstArea)
                firstArea:SetLeftItem(previousArea)
            end
        else
            if HasGroups()
                //Bar Groups
                if barGroups:GetSize() > 0
                    ChartItem firstGroup = barGroups:Get(0)
                    firstGroup:SetContainer(me)
                    summary:SetEnterItem(firstGroup)
                    firstGroup:SetEscapeItem(summary)
        
                    //Bars within Bar Groups
                    if barGroups:Get(0):GetSize() > 0
                        ChartItem firstBar = barGroups:Get(0):Get(0)
                        firstBar:SetContainer(me)
                        AddChartItemInstructions(firstBar, firstBar:GetDescription())

                        firstGroup:SetEnterItem(firstBar)
                        firstBar:SetEscapeItem(firstGroup)

                        integer j = 1
                        ChartItem previousBar = firstBar
                        repeat while j < barGroups:Get(0):GetSize()
                            ChartItem bar = barGroups:Get(0):Get(j)
                            bar:SetContainer(me)
                            bar:SetEscapeItem(firstGroup)
                            previousBar:SetRightItem(bar)
                            bar:SetLeftItem(previousBar)
                            previousBar = bar
                            j = j + 1
                        end
                        previousBar:SetDescription(previousBar:GetDescription() + " End of list order.")
                        previousBar:SetRightItem(firstBar)
                        firstBar:SetLeftItem(previousBar)

                        // Iterate through the bars again, this time in ascending value order.
                        Array<Bar> sortedBars = barGroups:Get(0):GetBars():CopyToArray()
                        BarComparison barCompare
                        barCompare:SetAscending(true)
                        sortedBars:Sort(barCompare)
                        previousBar = sortedBars:Get(0)

                        j = 1
                        repeat while j < sortedBars:GetSize()
                            ChartItem bar = sortedBars:Get(j)
                            previousBar:SetUpItem(bar)
                            bar:SetDownItem(previousBar)
                            previousBar = bar                 
                            j = j + 1
                        end
                        previousBar:SetDescription(previousBar:GetDescription() + " End of value order.")
                    end

                    integer i = 1
                    ChartItem previousGroup = firstGroup
                    repeat while i < barGroups:GetSize()
                        ChartItem group = barGroups:Get(i)
                        group:SetContainer(me)
                        group:SetEscapeItem(summary)
                        previousGroup:SetRightItem(group)
                        group:SetLeftItem(previousGroup)
                        previousGroup = group
            
                        //Bars within Bar Groups
                        if barGroups:Get(i):GetSize() > 0
                            ChartItem firstBar = barGroups:Get(i):Get(0)
                            firstBar:SetContainer(me)
                            group:SetEnterItem(firstBar)
                            firstBar:SetEscapeItem(group)
                            AddChartItemInstructions(firstBar, firstBar:GetDescription())

                            integer j = 1
                            ChartItem previousBar = firstBar
                            repeat while j < barGroups:Get(i):GetSize()
                                ChartItem bar = barGroups:Get(i):Get(j)
                                bar:SetContainer(me)
                                bar:SetEscapeItem(group)
                                previousBar:SetRightItem(bar)
                                bar:SetLeftItem(previousBar)
                                previousBar = bar                 
                                j = j + 1
                            end
                            previousBar:SetDescription(previousBar:GetDescription() + " End of list order.")
                            previousBar:SetRightItem(firstBar)
                            firstBar:SetLeftItem(previousBar)

                            // Iterate through the bars again, this time in ascending value order.
                            Array<Bar> sortedBars = barGroups:Get(i):GetBars():CopyToArray()
                            BarComparison barCompare
                            barCompare:SetAscending(true)
                            sortedBars:Sort(barCompare)
                            previousBar = sortedBars:Get(0)

                            j = 1
                            repeat while j < sortedBars:GetSize()
                                ChartItem bar = sortedBars:Get(j)
                                previousBar:SetUpItem(bar)
                                bar:SetDownItem(previousBar)
                                previousBar = bar                 
                                j = j + 1
                            end
                            previousBar:SetDescription(previousBar:GetDescription() + " End of value order.")
                        end
                        i = i + 1
                    end
                    previousGroup:SetDescription(previousGroup:GetDescription() + " End of list order.")
                    previousGroup:SetRightItem(firstGroup)
                    firstGroup:SetLeftItem(previousGroup)
                end        
            else
                if barGroups:GetSize() > 0
                    if barGroups:Get(0):GetSize() > 0
                        ChartItem firstBar = barGroups:Get(0):Get(0)
                        AddChartItemInstructions(firstBar, firstBar:GetDescription())
                        firstBar:SetContainer(me)
                        summary:SetEnterItem(firstBar)
                        firstBar:SetEscapeItem(summary)

                        integer i = 1
                        ChartItem previousBar = firstBar
                        repeat while i < barGroups:GetSize()
                            ChartItem bar = barGroups:Get(i):Get(0)
                            bar:SetContainer(me)
                            bar:SetEscapeItem(summary)
                            previousBar:SetRightItem(bar)
                            bar:SetLeftItem(previousBar)
                            previousBar = bar
                            i = i + 1
                        end
                        previousBar:SetDescription(previousBar:GetDescription() + " End of list order.")
                        previousBar:SetRightItem(firstBar)
                        firstBar:SetLeftItem(previousBar)

                        // Iterate through the bars again, this time in ascending value order.
                        Array<BarGroup> sortedBars = barGroups:CopyToArray()
                        BarGroupComparison barCompare
                        sortedBars:Sort(barCompare)
                        previousBar = sortedBars:Get(0):Get(0)

                        i = 1
                        repeat while i < sortedBars:GetSize()
                            ChartItem bar = sortedBars:Get(i):Get(0)
                            previousBar:SetDownItem(bar)
                            bar:SetUpItem(previousBar)
                            previousBar = bar                 
                            i = i + 1
                        end
                        previousBar:SetDescription(previousBar:GetDescription() + " End of value order.")
                    end
                end
            end
        end
        ChartSelection selection = GetSelection()
        selection:Set(chartArea)
    end

    /* 
        Sets the XAxis maximum value. Max bar value will track the largest bar and 
        limit the axis controls to not drop below that value. This will prevent the 
        bar from being drawn over the edge of the chart area.

        Attribute: Parameter max the number on the x axis to set the max value to.
    */ 
    action SetXAxisMaximum(number max)
        parent:Chart:SetXAxisMaximum(max)
    end
    /* 
        Sets the YAxis maximum value. Max bar value will track the largest bar and 
        limit the axis controls to not drop below that value. This will prevent the 
        bar from being drawn over the edge of the chart area.

        Attribute: Parameter max the number on the y axis to set the max value to.
    */ 
    action SetYAxisMaximum(number max)
        parent:Chart:SetYAxisMaximum(max)
    end
    /*
        Sets the XAxis minimum value. Min bar value will track the smallest 
        (negative) bar and limit the axis controls to not go above that value.
        This will prevent the bar from being drawn over the edge of the chart area.

        Attribute: Parameter min the number on the x axis to set the minimum value to.
    */
    action SetXAxisMinimum(number min)
        parent:Chart:SetXAxisMinimum(min)
    end
    /*
        Sets the YAxis minimum value. Min bar value will track the smallest 
        (negative) bar and limit the axis controls to not go above that value.
        This will prevent the bar from being drawn over the edge of the chart area.

        Attribute: Parameter min the number on the y axis to set the minimum value to.
    */
    action SetYAxisMinimum(number min)
        parent:Chart:SetYAxisMinimum(min)
    end

    /*
    This action returns how thick the borders of the bars are, in pixels.
    */
    action GetBarBorderThickness returns number
        return barBorderThickness
    end

    /*
    This action sets how thick the borders of the bars are, in pixels.
    */
    action SetBarBorderThickness(number barBorderThickness)
        me:barBorderThickness = barBorderThickness
    end
    /*
        This action sets the chart orientation to horizontal, with the x 
        axis or first column displayed on the horizontal axis.
    */
    action SetOrientationToHorizontal
        LayoutProperties properties = GetDefaultLayoutProperties()
        barBorderStyle = properties:ALL - properties:LEFT
        parent:Chart:SetOrientationToHorizontal()
    end
    /*
        This action sets the chart orientation to vertical, with the y 
        axis or first column displayed on the vertical axis.
    */
    action SetOrientationToVertical
        LayoutProperties properties = GetDefaultLayoutProperties()
        barBorderStyle = properties:ALL - properties:BOTTOM
        parent:Chart:SetOrientationToVertical()
    end

    /*
    This action returns a code representing which sides of the bars have borders,
    using the style constants from LayoutProperties (LEFT, RIGHT, TOP, BOTTOM, ALL,
    and NONE). By default, vertical bar charts have bar borders on all sides except
    the bottom, and horizontal bar charts have bar borders on all sides except the left.
    */
    action GetBarBorderStyle returns integer
        return barBorderStyle
    end

    /*
    This action sets which sides of the bars have borders, using a combination of the
    style constants from LayoutProperties (LEFT, RIGHT, TOP, BOTTOM, ALL, and NONE).
    */
    action SetBarBorderStyle(integer barBorderStyle)
        me:barBorderStyle = barBorderStyle
    end

    /*
    This action shows or hides a trend line over the bars in the chart.
    By default, the trend line is hidden.

    Attribute: Parameter show True to display the trend line, or false to hide it.
    */
    action ShowTrendLine(boolean show)
        showTrendLine = show
    end

    action IsShowingTrendLine returns boolean
        return showTrendLine
    end
    /*
        This action gets the chart item text.
    */
    action GetChartItemText returns text
        return chartItemText
    end
    /*
        This action gets the chart items text.
    */
    action GetChartItemsText returns text
        return chartItemsText
    end
    /*
        This action sets the annotation font size on the scatte plot points

        Attribute: Parameter size the font size of point annotations.
    */
    action SetAnnotationFontSize (integer size)
        annotationFontSizeOverride = true
        annotationFontSize = size
    end

    action GetBetweenGroupPadding returns number
        return betweenGroupPadding
    end

    action SetBetweenGroupPadding(number betweenGroupPadding)
        me:betweenGroupPadding = betweenGroupPadding
    end

end