package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.ViolinPlotLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Selections.ChartSelection
use Libraries.Compute.Statistics.Analysis.UnivariateAction
use Libraries.Compute.Statistics.WindowingActions.NormalDistributionAction
use Libraries.System.File
use Libraries.Interface.Controls.Charts.Graphics.Plot
use Libraries.Interface.Controls.Charts.Graphics.PlotGroup
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Language.Errors.CastError
use Libraries.System.Properties

/*
    The ViolinPlot class is Chart object that inherits from Control and like other
    UI elements it is added to the Game class. 
    The Violin Plot is used as an indication of how the values in the data are spread out. 
    Violin Plots can also be used to compare datasets for more than one group. 
    The title label, axis labels, and scales can be modified. Any number of plots can be added.

    Attribute: Author Silafu Yiliyaer, Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ViolinPlot
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:AddSelectedColumn(1)
    ViolinPlot chart = frame:ViolinPlot()
    chart:SetTitle("My Awesome Title")
    chart:Display()
*/

class ViolinPlot is Chart
    //bandWidth is a scale option for distribution graph
    //the bigger the value, the flatter the distribution graph will be
    private number bandWidth = 0

    UnivariateAction windowingAction = undefined

    private integer numberOfPlots = 0
    Array<PlotGroup> plotGroups

    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    
    ChartOptions options
    Math math

    private boolean splitPlot = false

    private number maxValue = 0
    private number minValue = 0

    // Terminology for navigation instructions
    private text chartItemText = "plot"
    private text chartItemsText = "plots"
    private text groupText = "plot group"
    private text groupsText = "plot groups"

    on create
        CheckPlatformInstructions()
        ViolinPlotLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        properties:SetBorderThickness(2)
        SetName("Violin Plot")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        NormalDistributionAction window
        windowingAction = window

        SeparationCapable(true)
        SetDefaultShowBrackets(true)
        SetDefaultOrientationToVertical()
        GetVerticalPanel():BlockPaddingOffset(true)
        GetHorizontalPanel():BlockPaddingOffset(true)
    end

    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end
        parent:Chart:LoadGraphics(properties)

        LoadChartAreaItems()
    end

    action LoadChartAreaItems()
        ChartAreaPanel chartArea
        // Add drawables for each plot to the chart
        integer i = 0
        repeat while i < plotGroups:GetSize()
            PlotGroup group = plotGroups:Get(i)
            text groupname = plotGroups:Get(i):GetName()
            text chartAreaName = ""
            integer k = 0
            repeat while k < group:GetSize()
                Plot plot = group:Get(k)

                // Plot Area Outline Panel
                Icon plotArea
                plot:SetPlotArea(plotArea)  

                if IsSeparated()
                    integer j = 0
                    repeat while j < GetNumberOfChartAreas()
                        if IsSeparatedBySeries()
                            if plot:GetSeries():GetName() = GetSubChartAreas():Get(j):GetName()
                                chartArea = GetSubChartAreas():Get(j)
                                chartArea:AddChartAreaItem(plot)
                            end
                        elseif IsSeparatedByFactor()
                            if group:GetName() = GetSubChartAreas():Get(j):GetName()
                                chartArea = GetSubChartAreas():Get(j)
                                chartArea:AddChartAreaItem(plot)
                            end
                        end
                        j = j + 1
                    end
                    chartAreaName = chartArea:GetName()
                else
                    chartArea = GetChartArea()
                end
                chartArea:Add(plot) // This is to be the actual violin shape, add before all other stuff.

                ChartDrawable minimumLine
                ChartDrawable lowerWhisker 
                ChartDrawable interQuartileRange
                ChartDrawable rightBorder // Right side of IQR - not used
                ChartDrawable leftBorder  // Left side of IQR - not used
                ChartDrawable firstQuartileLine
                ChartPoint medianDot
                ChartDrawable thirdQuartileLine
                ChartDrawable upperWhisker 
                ChartDrawable maximumLine
                ChartDrawable filler

                if not plot:IsUndefined()
                    number median = plot:GetInfoAt(0)
                    number firstQ = plot:GetInfoAt(1)
                    number thirdQ = plot:GetInfoAt(2)
                    number minimum = plot:GetInfoAt(3)
                    number maximum = plot:GetInfoAt(4)
                    number iqr = thirdQ - firstQ
    
                    // Minimum Line 
                    minimumLine:SetInputGroup("Chart")
                    minimumLine:SetFocusable(true)
                    minimumLine:SetAccessibilityCode(0)
                    minimumLine:SetNextFocus(GetNextFocus())
                    minimumLine:SetPreviousFocus(GetPreviousFocus())
                    minimumLine:SetName("Minimum")
                    minimumLine:SetDescription(" " + minimum)
                    if CheckIfInteger(minimum)
                        minimumLine:SetDescription(" " + cast(integer, minimum))
                    end 

                    // Interquartile Range Region Area
                    interQuartileRange:SetInputGroup("Chart")
                    interQuartileRange:SetFocusable(true)
                    interQuartileRange:SetAccessibilityCode(0)
                    interQuartileRange:SetNextFocus(GetNextFocus())
                    interQuartileRange:SetPreviousFocus(GetPreviousFocus())
                    interQuartileRange:SetName("Interquartile range")
                    interQuartileRange:SetDescription(" " + iqr)
                    if CheckIfInteger(iqr)
                        interQuartileRange:SetDescription(" " + cast(integer, iqr))
                    end 
    
                    // Lower Quartile Line Q1
                    firstQuartileLine:SetInputGroup("Chart")
                    firstQuartileLine:SetFocusable(true)
                    firstQuartileLine:SetAccessibilityCode(0)
                    firstQuartileLine:SetNextFocus(GetNextFocus())
                    firstQuartileLine:SetPreviousFocus(GetPreviousFocus())
                    firstQuartileLine:SetName("1st Quartile")
                    firstQuartileLine:SetDescription(" " + firstQ)
                    if CheckIfInteger(firstQ)
                        firstQuartileLine:SetDescription(" " + cast(integer, firstQ))
                    end                  
    
                    // Median dot (denser) 
                    medianDot:SetInputGroup("Chart")
                    medianDot:SetFocusable(true)
                    medianDot:SetAccessibilityCode(0)
                    medianDot:SetNextFocus(GetNextFocus())
                    medianDot:SetPreviousFocus(GetPreviousFocus())
                    medianDot:SetName("Median")
                    medianDot:SetDescription(" " + median)
                    if CheckIfInteger(median)
                        medianDot:SetDescription(" " + cast(integer, median))
                    end
    
                    // Upper Quartile Line Q3
                    thirdQuartileLine:SetInputGroup("Chart")
                    thirdQuartileLine:SetFocusable(true)
                    thirdQuartileLine:SetAccessibilityCode(0)
                    thirdQuartileLine:SetNextFocus(GetNextFocus())
                    thirdQuartileLine:SetPreviousFocus(GetPreviousFocus())
                    thirdQuartileLine:SetName("3rd Quartile")
                    thirdQuartileLine:SetDescription(" " + thirdQ)
                    if CheckIfInteger(thirdQ)
                        thirdQuartileLine:SetDescription(" " + cast(integer, thirdQ))
                    end
    
                    // Maximum Line
                    maximumLine:SetInputGroup("Chart")
                    maximumLine:SetFocusable(true)
                    maximumLine:SetAccessibilityCode(0)
                    maximumLine:SetNextFocus(GetNextFocus())
                    maximumLine:SetPreviousFocus(GetPreviousFocus())
                    maximumLine:SetName("Maximum")
                    maximumLine:SetDescription(" " + maximum)
                    if CheckIfInteger(maximum)
                        maximumLine:SetDescription(" " + cast(integer, maximum))
                    end
                end
    
                // Add to chart
                chartArea:Add(rightBorder)
                chartArea:Add(leftBorder)
                chartArea:Add(lowerWhisker)
                chartArea:Add(upperWhisker)
                chartArea:Add(minimumLine)
                chartArea:Add(firstQuartileLine)
                chartArea:Add(thirdQuartileLine)
                chartArea:Add(maximumLine)
                chartArea:Add(interQuartileRange)
                chartArea:Add(medianDot)
                chartArea:Add(plotArea)
    

                // Add to plot
                /* Indices for items of individual violin plot
                    PLOT ITSELF IS A DRAWABLE - VIOLIN SHAPE
                    0: PLOT AREA (ENTIRE REGION) -> No longer necessary
                    1: MINIMUM LINE
                    2: LOWER WHISKER //not used in violin
                    3: INTERQUARTILE RANGE
                    4: RIGHT BORDER OF IQR //not used in violin
                    5: LEFT BORDER OF IQR //not used in violin
                    6: Q1 LINE
                    7: MEDIAN LINE
                    8: Q3 LINE
                    9: UPPER WHISKER //not used in violin
                    10: MAXIMUM LINE 
                */
                plot:AddItem(filler)
                plot:AddItem(minimumLine)      
                plot:AddItem(lowerWhisker)
                plot:AddItem(interQuartileRange)
                plot:AddItem(rightBorder)
                plot:AddItem(leftBorder)
                plot:AddItem(firstQuartileLine)
                plot:AddItem(medianDot)
                plot:AddItem(thirdQuartileLine)
                plot:AddItem(upperWhisker)
                plot:AddItem(maximumLine)
    

                // Set the plot description
                plot:SetInputGroup("Chart")
                plot:SetFocusable(true)
                plot:SetAccessibilityCode(parent:Item:ITEM)
                plot:SetNextFocus(GetNextFocus())
                plot:SetPreviousFocus(GetPreviousFocus())
                plot:SetName(group:GetName() + " " + plot:GetSeries():GetName() + " plot, ")
                if not HasGroups()
                    plot:SetName(group:GetName() + " plot, ")
                end
                text plotDescription = ""
                plotDescription = plotDescription + medianDot:GetDescription() + ","
                plotDescription = plotDescription + " data ranges from " + minimumLine:GetDescription() + " to " + maximumLine:GetDescription() + ", "

                if IsSeparated() 
                    if IsSeparatedBySeries()
                        plotDescription = plotDescription + (i+1) + " of " + plotGroups:GetSize() + " plots inside " + chartAreaName + " chart area."
                    elseif IsSeparatedByFactor()
                        plotDescription = plotDescription + (k+1) + " of " + group:GetSize() + " plots inside " + chartAreaName + " chart area."
                    end
                else
                    if HasGroups()
                        plotDescription = plotDescription + (k+1) + " of " + group:GetSize() + " plots inside " + groupname + " group."
                    else
                        plotDescription = plotDescription + (i+1) + " of " + plotGroups:GetSize() + " plots."
                    end
                end
                plot:SetDescription(plotDescription)
                if not IsSeparated()
                    if HasGroups() 
                        if k = 0
                            AddChartItemInstructions(plot,plot:GetDescription())
                        end
                    else
                        if i = 0 and k = 0
                            AddChartItemInstructions(plot,plot:GetDescription())
                        end
                    end
                else
                    if IsSeparatedByFactor()
                        if k = 0
                            AddChartItemInstructions(plot,plot:GetDescription())
                        end
                    elseif IsSeparatedBySeries()
                        if i = 0
                            AddChartItemInstructions(plot,plot:GetDescription())
                        end
                    end
                end

                // Set Navigation Instruction for first plot item (minimum)
                AddPlotItemInstructions(minimumLine, minimumLine:GetDescription())
                k = k + 1
            end

            // Area covering entire group panel
            group:SetName(group:GetName() + " group, ")
            group:SetDescription((i+1) + " of " + plotGroups:GetSize() + " groups, has " + group:GetSize() + " violin plots.")
            group:SetInputGroup("Chart")
            group:SetFocusable(true)
            group:SetAccessibilityCode(parent:Item:ITEM)
            group:SetNextFocus(GetNextFocus())
            group:SetPreviousFocus(GetPreviousFocus())
            chartArea:Add(group)
            if i = 0
                AddGroupPanelInstructions(group, group:GetDescription())
            end

            GetGroupPanels():Add(group)
            i = i + 1
        end

        // Set chart area(s) description
        if IsSeparated()
            GetChartArea():SetDescription(" with " + GetNumberOfChartAreas() + " sub charts.")
            AddChartAreaInstructions(GetChartArea():GetDescription())
            integer subAreaCount = GetSubChartAreas():GetSize()
            i = 0
            repeat while i < subAreaCount
                integer itemCount = GetSubChartAreas():Get(i):GetChartAreaItems():GetSize()
                GetSubChartAreas():Get(i):SetDescription(" chart area with " + itemCount + " violin plots, " + (i+1) + " of " + subAreaCount + " sub charts.")
                if i = 0
                    AddSubChartAreaInstructions(GetSubChartAreas():Get(i), GetSubChartAreas():Get(i):GetDescription())
                end
                i = i + 1
            end
        else
            if HasGroups()
                me:GetChartArea():SetDescription(" with " + plotGroups:GetSize() + " plot groups.")
            else
                me:GetChartArea():SetDescription(" with " + plotGroups:GetSize() + " violin plots.")
            end
            AddChartAreaInstructions(GetChartArea():GetDescription())
        end
    end

    private action CheckIfInteger(number value) returns boolean
        return (cast(integer, value) = value)
    end

    /*
        DisposeDrawables
        
        Empties drawables from the chart area.
    */
    action DisposeDrawables
        parent:Chart:DisposeDrawables()
        GetChartArea():Empty()
    end

    /*
        LostSelection is a supplemental action to the parent Chart's LostSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their LostSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci

        if target not= undefined
            parent:Chart:LostSelection(ci)
        end
    end

    /* 
        OnSelectionChange is a supplemental action to the parent Chart's OnSelectionChange.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their GainedSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    action OnSelectionChange(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci

        if target not= undefined
            target:Focus()
            parent:Chart:OnSelectionChange(ci)
        end
    end
    
    /*
        This sets what kind of kernel function to use to calculate the normal distributions
    */
    action SetWindowingAction(UnivariateAction act)
        me:windowingAction = act
    end

    /*
        This gets what kind of kernel function that is used to calculate the normal distributions
    */
    action GetWindowingAction returns UnivariateAction
        return me:windowingAction
    end

    /*
        This sets the inteval size to calculate the normal distributions
    */
    action SetBandWidth(number value)
        number limit = GetYAxisMaximum() - GetYAxisMinimum()
        if GetHorizontalFlag()
            limit = GetXAxisMaximum() - GetXAxisMinimum()
        end
        if value > 0 
            if value < limit
                bandWidth = value
            else
                bandWidth = limit
            end
        end

    end

    /*
        This returns the inteval size to calculate the normal distributions
    */
    action GetBandWidth returns number
        return bandWidth
    end

//    /*
//        Sets a flag that determines if a plot should be split for 2 column, one factor 
//    */
//    action IsSplit(boolean flag)
//        splitPlot = flag
//    end

    /*
        Sets a flag that determines if a plot should be split for 2 column, one factor 
    */
    action SplitPlot(boolean flag)
        splitPlot = flag
    end

    /*
        Returns the split plot flag
    */
    action GetSplitFlag() returns boolean
        return splitPlot
    end

    /*
    Appends a new plotgroup.
    */
    action AddPlotGroup(PlotGroup group)
        if plotGroups:GetSize() = 0
            maxValue = group:GetMaxOutlierValue()
            minValue = group:GetMinOutlierValue()        
        else
            if maxValue < group:GetMaxOutlierValue()
                maxValue = group:GetMaxOutlierValue()
            end
            if minValue > group:GetMinOutlierValue()
                minValue = group:GetMinOutlierValue()
            end
        end
        plotGroups:Add(group)
        if group:GetSize() > 1
            HasGroups(true)
        end
        numberOfPlots = numberOfPlots + group:GetSize()
    end
   
    /*
    Returns an array of all the plot groups
    */
    action GetPlotGroups returns Array<PlotGroup>
        return plotGroups
    end

    /*
        Returns the number of boxes currently added to the Box Plot
    */
    action GetNumberOfPlots returns integer
        return numberOfPlots
    end

    /* 
        Max and min value will track the highest and lowest values and limit the axis controls to not pass that value.
    */ 
    action SetXAxisMaximum(number max)
        if GetVerticalFlag()
            parent:Chart:SetXAxisMaximum(max)
        else
            if max >= maxValue
                parent:Chart:SetXAxisMaximum(max)
            else
                output "X-axis maximum cannot be below the highest plot value: " + maxValue
            end
        end
    end
    /*
        Set the x axis minumum for the violin plot.
        Attribute Parameter min the min value on the axis.
    */
    action SetXAxisMinimum(number min)
        if GetVerticalFlag()
            parent:Chart:SetXAxisMinimum(min)
        else
            if min <= minValue
                parent:Chart:SetXAxisMinimum(min)
            else
                output "X-axis minimum cannot be above the lowest plot value: " + minValue
            end
        end
    end
    /*
        Set the y axis maximum for the violin plot.
        Attribute Parameter max the maximum value on the axis.
    */
    action SetYAxisMaximum(number max)
        if GetHorizontalFlag()
            parent:Chart:SetYAxisMaximum(max)
        else
            if max >= maxValue
                parent:Chart:SetYAxisMaximum(max)
            else
                output "Y-axis maximum cannot be below highest plot maximum value: " + maxValue
            end
        end
    end
    /*
        Set the y axis minumum for the violin plot.
        Attribute Parameter min the min value on the axis
    */
    action SetYAxisMinimum(number min)
        if GetHorizontalFlag()
            parent:Chart:SetYAxisMinimum(min)
        else
            if min <= minValue
                parent:Chart:SetYAxisMinimum(min)
            else
                output "Y-axis minimum cannot be above the lowest plot value: " + minValue
            end
        end
    end
    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    action GenerateSummary returns text
        text grouptext = ""
        if HasGroups()
            text groups = " groups and "
            if GetPlotGroups():GetSize() = 1
                groups = " group and "
            end
            grouptext = GetPlotGroups():GetSize() + groups
        end
        text plottext = numberOfPlots + " plots"
        if numberOfPlots = 1
            plottext = numberOfPlots + " plot"
        end
        if GetName() = "Violin Plot"
            SetDescription(" with " + grouptext + plottext + ".")
        else
            SetDescription(", Violin Plot with " + grouptext + plottext + ".")
        end
        AddChartAreaInstructions(GetDescription())
        return GetDescription()
    end

    /*
        GenerateInfoTree
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            // We haven't loaded graphics yet, so bail.
            return now
        end

        ChartItem xAxis = GetHorizontalPanel()
        ChartItem yAxis = GetVerticalPanel()
        ChartItem chartArea = GetChartArea()
        ChartItem summary = me

        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetContainer(me)

        chartArea:SetName(summary:GetName())
        chartArea:SetDisplayName(GenerateSummary())
        chartArea:SetContainer(me)
        summary = chartArea
    
        // If any of these are not showing the tree will skip them in the navigation
        if IsShowingXAxis()
            GetHorizontalPanel():GenerateInfoTree(me, chartArea, yAxis, xAxis)
        end        
        if IsShowingYAxis()
            GetVerticalPanel():GenerateInfoTree(me, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, chartArea, yAxis, xAxis)
        end

        if IsSeparated()
            //Chart Areas
            integer subAreaCount = GetLegend():GetSeriesList():GetSize()
            if GetNumberOfChartAreas() > 0
                ChartItem firstArea = GetSubChartAreas():Get(0)
                firstArea:SetContainer(me)
                summary:SetEnterItem(firstArea)
                firstArea:SetEscapeItem(summary)
                firstArea:SetDisplayName(GetSubChartAreas():Get(0):GetName())
                Array<ChartItem> chartAreaItems = GetSubChartAreas():Get(0):GetChartAreaItems()
                AddPlots(summary, firstArea, CastToPlots(chartAreaItems))

                i = 1
                ChartItem previousArea = firstArea
                repeat while i < GetNumberOfChartAreas()
                    ChartAreaPanel chartSubArea = GetSubChartAreas():Get(i)
                    if chartSubArea:IsShowing()
                        ChartItem nextArea = chartSubArea
                        nextArea:SetContainer(me)
                        nextArea:SetEscapeItem(summary)
                        previousArea:SetRightItem(nextArea)
                        nextArea:SetLeftItem(previousArea)
                        previousArea = nextArea
                        nextArea:SetDisplayName(chartSubArea:GetName())
                        Array<ChartItem> chartSubAreaItems = chartSubArea:GetChartAreaItems()
                        AddPlots(summary, nextArea, CastToPlots(chartSubAreaItems))
                    end
                    i = i + 1
                end
                previousArea:SetDescription(previousArea:GetDescription() + " End of list order.")
                previousArea:SetRightItem(firstArea)
                firstArea:SetLeftItem(previousArea)
            end
        else
            if HasGroups()
                if plotGroups:GetSize() > 0
                    ChartItem firstGroup = plotGroups:Get(0)
                    firstGroup:SetContainer(me)
                    summary:SetEnterItem(firstGroup)
                    firstGroup:SetEscapeItem(summary)
                    firstGroup:SetDisplayName(plotGroups:Get(0):GetName())
                    AddPlots(summary, firstGroup, plotGroups:Get(0):GetPlots())

                    i = 1
                    ChartItem previousGroup = firstGroup
                    repeat while i < plotGroups:GetSize()
                        ChartItem group = plotGroups:Get(i)
                        group:SetContainer(me)
                        group:SetPreviousFocus(summary)
                        group:SetEscapeItem(summary)
                        group:SetDisplayName(plotGroups:Get(i):GetName())
                        previousGroup:SetRightItem(group)
                        group:SetLeftItem(previousGroup)
                        previousGroup = group
                        AddPlots(summary, group, plotGroups:Get(i):GetPlots())
                        i = i + 1
                    end
                    previousGroup:SetDescription(previousGroup:GetDescription() + " End of list order.")
                    previousGroup:SetRightItem(firstGroup)
                    firstGroup:SetLeftItem(previousGroup)
                end
            else
                if plotGroups:GetSize() > 0 and plotGroups:Get(0):GetSize() > 0
                    // Add LEFT/RIGHT navigation
                    Plot firstPlot = plotGroups:Get(0):Get(0)
                    AddPlotItems(summary, firstPlot, firstPlot:GetPlotItems())
                    firstPlot:SetDisplayName(firstPlot:GetName())
                    firstPlot:SetContainer(me)
                    firstPlot:SetEscapeItem(summary)
                    summary:SetEnterItem(firstPlot)
            
                    integer i = 1
                    ChartItem previousPlot = firstPlot
                    repeat while i < plotGroups:GetSize()
                        if plotGroups:Get(i):GetSize() > 0
                            Plot plot = plotGroups:Get(i):Get(0)
                            AddPlotItems(summary, plot, plot:GetPlotItems())
                            plot:SetDisplayName(plot:GetName())
                            plot:SetContainer(me)
                            plot:SetEscapeItem(summary)
                            plot:SetLeftItem(previousPlot)
                            previousPlot:SetRightItem(plot)
                            previousPlot = plot
                        end
                        i = i + 1
                    end
                    previousPlot:SetDescription(previousPlot:GetDescription() + " End of list order.")
                    previousPlot:SetRightItem(firstPlot)
                    firstPlot:SetLeftItem(previousPlot)
        
                    // Add UP/DOWN navigation
                    PlotGroupComparison comparison
                    comparison:SetAscending(true)
                    Array<PlotGroup> sortUDPlots = plotGroups:CopyToArray()
                    sortUDPlots:Sort(comparison)
                    if sortUDPlots:Get(0):GetSize() > 0
                        firstPlot = sortUDPlots:Get(0):Get(0)
                        i = 1
                        previousPlot = firstPlot
                        repeat while i < sortUDPlots:GetSize()
                            if sortUDPlots:Get(i):GetSize() > 0
                                Plot plot = sortUDPlots:Get(i):Get(0)
                                plot:SetDownItem(previousPlot)
                                previousPlot:SetUpItem(plot)
                                previousPlot = plot
                            end
                            i = i + 1
                        end
                        previousPlot:SetDescription(previousPlot:GetDescription() + " End of value order.")
                    end
                end
            end
        end
        
        ChartSelection selection = GetSelection()
        selection:Set(chartArea)
    end

    /* 
        This action converts sub chart area chart items into an array of plots (if applicable). This is not directly handled by the user.
    */
    private action CastToPlots(Array <ChartItem> chartAreaItems) returns Array <Plot>
        Array <Plot> plots
        integer i = 0
        repeat while i < chartAreaItems:GetSize()
            if (chartAreaItems:Get(i) is Plot)
                plots:Add(cast(Plot, chartAreaItems:Get(i)))
            end
            i = i + 1
        end
        return plots
    end

    /* 
        This action sets the navigation within an array of plots. This is not directly handled by the user.
    */
    private action AddPlots(ChartItem summary, ChartItem parentItem, Array<Plot> plots)
        if not plots:IsEmpty()
            // Add LEFT/RIGHT navigation
            Plot firstPlot = plots:Get(0)
            AddPlotItems(summary, firstPlot, firstPlot:GetPlotItems())
            firstPlot:SetDisplayName(firstPlot:GetName())
            firstPlot:SetContainer(me)
            firstPlot:SetEscapeItem(parentItem)
            parentItem:SetEnterItem(firstPlot)
    
            integer i = 1
            ChartItem previousPlot = firstPlot
            repeat while i < plots:GetSize()
                Plot plot = plots:Get(i)
                AddPlotItems(summary, plot, plot:GetPlotItems())
                plot:SetDisplayName(plot:GetName())
                plot:SetContainer(me)
                plot:SetEscapeItem(parentItem)
                plot:SetLeftItem(previousPlot)
                previousPlot:SetRightItem(plot)
                previousPlot = plot
                i = i + 1
            end
            previousPlot:SetDescription(previousPlot:GetDescription() + " End of list order.")
            previousPlot:SetRightItem(firstPlot)
            firstPlot:SetLeftItem(previousPlot)

            // Add UP/DOWN navigation
            PlotComparison comparison
            comparison:SetAscending(true)
            Array<Plot> sortUDPlots = plots:CopyToArray()
            sortUDPlots:Sort(comparison)
            firstPlot = sortUDPlots:Get(0)
            i = 1
            previousPlot = firstPlot
            repeat while i < sortUDPlots:GetSize()
                Plot plot = sortUDPlots:Get(i)
                plot:SetDownItem(previousPlot)
                previousPlot:SetUpItem(plot)
                previousPlot = plot
                i = i + 1
            end
            previousPlot:SetDescription(previousPlot:GetDescription() + " End of value order.")
        end
    end

    /* 
        This action sets the plot summary items' navigation. This is not directly handled by the user.
    */
    private action AddPlotItems(ChartItem summary, ChartItem parentItem, Array <ChartDrawable> items)
        if not items:IsEmpty()
            // Add LEFT/RIGHT navigation
            ChartDrawable firstItem = items:Get(0)
            text description = firstItem:GetDescription() 
            integer i = 0
            repeat while description = "" and i < items:GetSize()
                firstItem = items:Get(i)
                description = firstItem:GetDescription()   
                i = i + 1
            end
            firstItem:SetDisplayName(firstItem:GetName())
            firstItem:SetContainer(me)
            firstItem:SetEscapeItem(parentItem)
            parentItem:SetEnterItem(firstItem)
    
            ChartItem previousItem = firstItem
            repeat while i < items:GetSize()
                ChartDrawable item = items:Get(i)
                description = item:GetDescription() 
                if description not= ""
                    item:SetDisplayName(item:GetName())
                    item:SetContainer(me)
                    item:SetEscapeItem(parentItem)
                    item:SetLeftItem(previousItem)
                    previousItem:SetRightItem(item)
                    previousItem = item
                end
                i = i + 1
            end
            previousItem:SetDescription(previousItem:GetDescription() + " End of list order.")
            previousItem:SetRightItem(firstItem)
            firstItem:SetLeftItem(previousItem)
        end
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        ViolinPlotWriter writer
        writer:SetAccessibilityFlag(HasAccessibility())
        return writer:WriteOutChart(me)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            ViolinPlotWriter chartWriter
            chartWriter:SetAccessibilityFlag(HasAccessibility())
            chartWriter:WriteOutChart(me,file)
        else
           alert("Save currently only supports Scalable Vector Graphics (SVG), please use a .svg file extension.")
        end
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Hypertext Markup Language (HTML) is currently
        supported, and Scalable Vector Graphics (SVG) conversion is used. This makes a file that can
        be opened in the browser that imports the Javascript and Cascading Stylesheets necessary
        to navigate the charts accessibly on the web.

        Attribute: Parameter file the location of where to save the file.
    */
    action Share(File file)
        if file:GetFileExtension() = "html"
            ViolinPlotWriter chartWriter
            chartWriter:SetAccessibilityFlag(HasAccessibility())
            chartWriter:SetScriptFilepath(GetScriptFilepath())
            chartWriter:SetStyleFilepath(GetStyleFilepath())
            chartWriter:WriteOutHTML(me,file)
        else
            alert("Share currently only supports Hypertext Markup Language (HTML), please use a .html file extension.")
        end
    end
    /*
        This action gets the group text.
    */
    action GetGroupText returns text
        return groupText
    end
    /*
        This action gets the groups text.
    */
    action GetGroupsText returns text
        return groupsText
    end
    /*
        This action gets the chart item text.
    */
    action GetChartItemText returns text
        return chartItemText
    end
    /*
        This action gets the chart items text.
    */
    action GetChartItemsText returns text
        return chartItemsText
    end

    /*
    This action generates the instruction text for a chart item description.

    Attribute: Parameter chartItem The chart item that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddChartItemInstructions(Item chartItem, text description)

        description = description + " To navigate the list of " + GetChartItemsText() + ", " + GetGeneralInstruction() + " to move between " + GetChartItemsText() + " in list order," 

        Properties prop
        if (prop:IsIos() or prop:IsAndroid())
            description = description + "" //this command is not assigned for gestures yet
        else
            description = description + " " + GetValueOrderInstruction() + " to move between " + GetChartItemsText() + " by median value order,"
        end

        if not IsSeparatedBySeries() and IsSeparatedByFactor()
            description = description + " " + GetExitInstruction() + " to return to the " + GetGroupText() + " list."
        elseif IsSeparatedBySeries() and not IsSeparatedByFactor()
            description = description + " " + GetExitInstruction() + " to return to the " + GetSeriesText() + " list."
        elseif not IsSeparated() and HasGroups()
            description = description + " " + GetExitInstruction() + " to return to the chart information."
        else
            description = description + " " + GetExitInstruction() + " to return to the " + GetGroupText() + " list."
        end
        chartItem:SetDescription(description)
    end

    /*
    This action generates the instruction text for a plot item description.

    Attribute: Parameter chartItem The chart item that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddPlotItemInstructions(Item chartItem, text description)
        description = description + " To navigate the list of plot summary items, " + GetGeneralInstruction() + " to move between plot summary items in list order," 
        description = description + " " + GetExitInstruction() + " to return to the " + GetChartItemsText() + " list."
        chartItem:SetDescription(description)
    end

end