package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Compute.Vector
use Libraries.Game.Graphics.Color
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Division
use Libraries.Web.Page.Script
use Libraries.Containers.Support.Pair
use Libraries.Containers.Array
use Libraries.Interface.Item
use Libraries.Interface.Controls.Charts.ViolinPlot
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Interface.Controls.Charts.Graphics.Plot
use Libraries.Interface.Controls.Charts.Graphics.PlotGroup
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Group
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Data.Formats.ScalableVectorGraphics.Circle
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Data.Formats.ScalableVectorGraphics.Polygon

/*
    The ViolinPlotWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Gabriel Contreras, Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ViolinPlot
    use Libraries.Interface.Controls.Charts.ViolinPlotWriter

    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    ViolinPlot chart = frame:ViolinPlot()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    ViolinPlotWriter writer
    output writer:WriteOutChart(chart)
*/
class ViolinPlotWriter is ChartWriter

    action WriteOutChart(ViolinPlot chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(ViolinPlot chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(ViolinPlot chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(ViolinPlot chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end
    
    action WriteOutHTML(ViolinPlot chart, File file)
        WriteOutHTML(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)

        ViolinPlot violinPlot
        violinPlot = cast(ViolinPlot, chart)

        if HasAccessibility()
            canvas:SetRole("application")
            GetChartArea():SetAriaLabel(chart:GetChartArea():GetName() + " " + chart:GetChartArea():GetDescription())
        end
    end

    /*
        This action adds the content of the Violin Plot
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        ViolinPlot plot
        plot = cast(ViolinPlot, chart)
        AddViolins(canvas, plot)
    end

    /*
        This action adds the content of the Violin Plot
    */
    private action AddViolins(ScalableVectorGraphics canvas, ViolinPlot chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        Script script
        text scriptText = ""
        text newLine = scriptText:GetLineFeed()

        Group chartContent
        chartContent:SetSize(GetChartArea():GetWidth(),GetChartArea():GetHeight())
        chartContent:SetPosition(GetChartArea():GetPositionX(),GetChartArea():GetPositionY())

        GetChartInformation():Add(chartContent)
        Rectangle chartContentBoundingBox
        chartContentBoundingBox:SetSize(GetChartArea():GetWidth(), GetChartArea():GetHeight())
        chartContentBoundingBox:SetPosition(GetChartArea():GetPositionX(), GetChartArea():GetPositionY())
        chartContentBoundingBox:SetFill(transparent)
        chartContentBoundingBox:SetFillOpacity(transparent)
        chartContentBoundingBox:SetStroke(transparent)
        chartContentBoundingBox:SetStrokeOpacity(transparent)
        if HasAccessibility()
            chartContent:SetTabIndex(0)
            chartContent:SetStyleClass("quorum-chart-element quorum-chart-area quorum-chart-information-list")
            chartContent:SetIsOneLine(true)
            chartContent:SetRole("graphics-object") 
            chartContent:SetID(canvas:GetID() + "_" + GetChartArea():GetHashCode())
            chartContentBoundingBox:SetID(chartContent:GetID() + "_boundingbox")
            chartContentBoundingBox:SetTabIndex(-1)  
            chartContentBoundingBox:SetAriaHidden("true")
            if chart:IsShowingTitle()
                chartContent:SetAriaLabel(chart:GetTitle() + " " + chart:GetDescription())
            else
                chartContent:SetAriaLabel(chart:GetName() + " " + chart:GetDescription())
            end
            chartContent:SetAriaHidden("false")
            //chartContent:SetOnFocus("gainFocus('" + chartContentBoundingBox:GetID() + "'); ")
            //chartContent:SetOnBlur("loseFocus('" + chartContentBoundingBox:GetID() + "'); ")
        end
        chartContent:Add(chartContentBoundingBox)

        if chart:IsShowingLinearRegression()
            AddRegressionLines(canvas, chart)
        end

        text description = GetChartArea():GetAriaLabel() + "."

        if not chart:IsSeparated()
            Array <PlotGroup> plotGroups = chart:GetPlotGroups()

            integer i = 0
            repeat while i < plotGroups:GetSize()
                PlotGroup group = plotGroups:Get(i)

                Group plotGroupSVG
                if chart:HasGroups()                
                    plotGroupSVG:SetFill(cast(Color, chart:GetSelectionColor()))
                    plotGroupSVG:SetFillOpacity(cast(Color, chart:GetSelectionColor()))
                    if HasAccessibility()
                        plotGroupSVG:SetID(canvas:GetID() + "_" + group:GetHashCode())
                        plotGroupSVG:SetStyleClass("quorum-chart-plotgroup quorum-chart-category-list")
                        plotGroupSVG:SetTabIndex(-1)
                        plotGroupSVG:SetRole("graphics-object") 
                        plotGroupSVG:SetAriaLabel(group:GetName() + group:GetDescription())
                        plotGroupSVG:SetAriaHidden("false")
                    end
                    chartContent:Add(plotGroupSVG)

                    text plotGroupFocus = ""
                    text plotGroupBlur = ""

                    // Add group selection symbols here!
                    // The group area, used for hover 
                    Rectangle plotGroup
                    plotGroup:SetWidth(group:GetWidth())
                    plotGroup:SetHeight(group:GetHeight())
                    plotGroup:SetPosition(group:GetGlobalX(), TranslatePositionY(group) - group:GetHeight()) 
                    plotGroup:SetFill(transparent)
                    plotGroup:SetFillOpacity(transparent)
                    if HasAccessibility()
                        plotGroup:SetStyleClass("quorum-chart-rect")
                        plotGroup:SetTabIndex(-1)
                        plotGroup:SetAriaHidden("true")
                    end
                    plotGroupSVG:Add(plotGroup)
    
//                    if group:GetSelectionBracket():GetSize() = 3
//                        integer k = 0
//                        repeat while k < group:GetSelectionBracket():GetSize()
//                            Rectangle bracket
//                            bracket:SetWidth(group:GetSelectionBracket():Get(k):GetWidth())
//                            bracket:SetHeight(group:GetSelectionBracket():Get(k):GetHeight())
//                            bracket:SetPosition(group:GetSelectionBracket():Get(k):GetGlobalX(), TranslatePositionY(group:GetSelectionBracket():Get(k)) - group:GetSelectionBracket():Get(k):GetHeight()) 
//                            bracket:SetFill(transparent) // Should be transparent until selected
//                            bracket:SetFillOpacity(transparent)
//                            if HasAccessibility()
//                                bracket:SetStyleClass("quorum-chart-selection-bracket")
//                                bracket:SetTabIndex(-1)
//                                bracket:SetID(plotGroupSVG:GetID() + "_bracket" + k)
//                                bracket:SetAriaHidden("true")
//                                plotGroupFocus = plotGroupFocus + "gainFocus('" + bracket:GetID() + "'); "
//                                plotGroupBlur = plotGroupBlur + "loseFocus('" + bracket:GetID() + "'); "
//                            end
//                            canvas:Add(bracket)    
//                            k = k + 1
//                        end
//                    end

//                    if group:GetSelectionArrow() not= undefined
//                        Array <number> vertices = group:GetSelectionArrowVertices()
//                        number Yoffset = TranslatePositionY(group:GetSelectionArrow())
//                        number Xoffset = group:GetSelectionArrow():GetGlobalX()
//                        
//                        Polygon arrow
//                        integer k = 0
//                        repeat while k < vertices:GetSize()
//                            arrow:AddPoint(vertices:Get(k)+Xoffset, Yoffset+(group:GetSelectionArrow():GetY()-vertices:Get(k+1)))
//                            k = k + 2
//                        end
//                        arrow:SetFill(transparent) // Should be transparent until selected
//                        arrow:SetFillOpacity(transparent)
//                        if HasAccessibility()
//                            arrow:SetStyleClass("quorum-chart-selection-arrow")
//                            arrow:SetID(plotGroupSVG:GetID() + "_arrow")
//                            arrow:SetTabIndex(-1)
//                            arrow:SetAriaHidden("true")
//                            plotGroupFocus = plotGroupFocus + "gainFocus('" + arrow:GetID() + "'); "
//                            plotGroupBlur = plotGroupBlur + "loseFocus('" + arrow:GetID() + "'); "
//                        end
//                        canvas:Add(arrow)
//                    end
    
                    if HasAccessibility()
                        if plotGroupFocus not= ""
                            scriptText = scriptText + "document.getElementById('" + plotGroupSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + plotGroupFocus + "});" + newLine
                        end
                        if plotGroupBlur not= ""
                            scriptText = scriptText + "document.getElementById('" + plotGroupSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + plotGroupBlur + "});" + newLine
                        end
                    end
                end

                integer j = 0
                repeat while j < group:GetSize()
                    Plot plot = group:Get(j)

                    Group plotSVG
                    plotSVG:SetFill(plot:GetColor())
                    plotSVG:SetFillOpacity(plot:GetColor())
                    if HasAccessibility()  
                        plotSVG:SetID(canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode())
                        plotSVG:SetStyleClass("quorum-chart-plot quorum-chart-plot-list") 
                        plotSVG:SetTabIndex(-1)
                        plotSVG:SetRole("graphics-object") 
                        plotSVG:SetAriaLabel(plot:GetName() + plot:GetDescription())
                        plotSVG:SetAriaHidden("false")
                    end
                    if chart:HasGroups()
                        plotGroupSVG:Add(plotSVG)
                    else
                        chartContent:Add(plotSVG)
                    end

                    text plotFocus = ""
                    text plotBlur = ""

                    // Add plot selection symbols here!
                    // The plot area, used for hover 
                    Rectangle plotArea
                    plotArea:SetWidth(plot:GetPlotArea():GetWidth())
                    plotArea:SetHeight(plot:GetPlotArea():GetHeight())
                    plotArea:SetPosition(plot:GetPlotArea():GetGlobalX(), TranslatePositionY(plot:GetPlotArea()) - plot:GetPlotArea():GetHeight()) 
                    plotArea:SetFill(transparent)
                    plotArea:SetFillOpacity(transparent)
                    if HasAccessibility()
                        plotArea:SetStyleClass("quorum-chart-rect")
                        plotArea:SetTabIndex(-1)
                        plotArea:SetAriaHidden("true")
                    end
                    plotSVG:Add(plotArea)
    
//                    if plot:GetSelectionBracket():GetSize() = 3
//                        integer k = 0
//                        repeat while k < plot:GetSelectionBracket():GetSize()
//                            Rectangle bracket
//                            bracket:SetWidth(plot:GetSelectionBracket():Get(k):GetWidth())
//                            bracket:SetHeight(plot:GetSelectionBracket():Get(k):GetHeight())
//                            bracket:SetPosition(plot:GetSelectionBracket():Get(k):GetGlobalX(), TranslatePositionY(plot:GetSelectionBracket():Get(k)) - plot:GetSelectionBracket():Get(k):GetHeight()) 
//                            bracket:SetFill(transparent) // Should be transparent until selected
//                            bracket:SetFillOpacity(transparent)
//                            if HasAccessibility()
//                                bracket:SetStyleClass("quorum-chart-selection-bracket")
//                                bracket:SetTabIndex(-1)
//                                bracket:SetID(plotSVG:GetID() + "_bracket" + k)
//                                bracket:SetAriaHidden("true")
//                                plotFocus = plotFocus + "gainFocus('" + bracket:GetID() + "'); "
//                                plotBlur = plotBlur + "loseFocus('" + bracket:GetID() + "'); "
//                            end
//                            canvas:Add(bracket)    
//                            k = k + 1
//                        end
//                    end

//                    if plot:GetSelectionArrow() not= undefined
//                        Array <number> vertices = plot:GetSelectionArrowVertices()
//                        number Yoffset = TranslatePositionY(plot:GetSelectionArrow())
//                        number Xoffset = plot:GetSelectionArrow():GetGlobalX()
//                        
//                        Polygon arrow
//                        integer k = 0
//                        repeat while k < vertices:GetSize()
//                            arrow:AddPoint(vertices:Get(k)+Xoffset, Yoffset+(plot:GetSelectionArrow():GetY()-vertices:Get(k+1)))
//                            k = k + 2
//                        end
//                        arrow:SetFill(transparent) // Should be transparent until selected
//                        arrow:SetFillOpacity(transparent)
//                        if HasAccessibility()
//                            arrow:SetStyleClass("quorum-chart-selection-arrow")
//                            arrow:SetID(plotSVG:GetID() + "_arrow")
//                            arrow:SetTabIndex(-1)
//                            arrow:SetAriaHidden("true")
//                            plotFocus = plotFocus + "gainFocus('" + arrow:GetID() + "'); "
//                            plotBlur = plotBlur + "loseFocus('" + arrow:GetID() + "'); "
//                        end
//                        canvas:Add(arrow)
//                    end

                    if HasAccessibility()
                        if plotFocus not= ""
                            scriptText = scriptText + "document.getElementById('" + plotSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + plotFocus + "});" + newLine
                        end
                        if plotBlur not= ""
                            scriptText = scriptText + "document.getElementById('" + plotSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + plotBlur + "});" + newLine
                        end
                    end   

                    // Plot: The violin shape, will be loaded as a polygon in the SVG          
                    Array<Pair<integer>> points = plot:GetPoints() //These points were calculated by ViolinPlotLayout
                    Polygon violin
                    integer index = 0
                    repeat while index < points:GetSize()
                        integer xCoor = points:Get(index):GetFirstValue() + cast(integer, chart:GetChartArea():GetGlobalX())
                        integer yCoor = points:Get(index):GetSecondValue() + cast(integer, TranslatePositionY(chart:GetChartArea()) - chart:GetChartArea():GetHeight())
                        if chart:GetHorizontalFlag()
                            yCoor = cast(integer, TranslatePositionY(chart:GetChartArea())) - points:Get(index):GetSecondValue()
                        end
                        violin:AddPoint(xCoor, yCoor)
                        index = index + 1
                    end 
                    violin:SetFill(plot:GetColor())
                    violin:SetFillOpacity(plot:GetColor())
                    violin:SetStroke(cast(Color, plot:GetBorderColor()))
                    violin:SetStrokeOpacity(cast(Color, plot:GetBorderColor()))
                    violin:SetStrokeWidth(plot:GetBorderThickness())
                    if HasAccessibility()
                        violin:SetTabIndex(-1)
                        violin:SetAriaHidden("true")
                    end 
                    plotSVG:Add(violin)

                    // Plot items 
                    Array<ChartDrawable> items = plot:GetPlotItems()
                    /* Indices for items of individual box plot
                        0: PLOT AREA (ENTIRE REGION)
                        1: MINIMUM LINE
                        2: LOWER WHISKER
                        3: INTERQUARTILE RANGE
                        4: RIGHT BORDER OF IQR //not used
                        5: LEFT BORDER OF IQR //not used
                        6: Q1 LINE
                        7: MEDIAN LINE
                        8: Q3 LINE
                        9: UPPER WHISKER    
                        10: MAXIMUM LINE 
                    */   

                    integer k = 1
                    repeat while k < items:GetSize()
                        ChartDrawable currentItem = items:Get(k)

                        if currentItem not= undefined 
    
                            Group itemSVG
                            itemSVG:SetFill(currentItem:GetColor())
                            itemSVG:SetFillOpacity(currentItem:GetColor())
                            if HasAccessibility()  
                                itemSVG:SetID(canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode() + "_" + currentItem:GetHashCode())
                                itemSVG:SetStyleClass("quorum-chart-plotitem quorum-chart-plotitem-list") 
                                itemSVG:SetTabIndex(-1) 
                                itemSVG:SetRole("graphics-symbol") 
                                itemSVG:SetAriaLabel(currentItem:GetName() + currentItem:GetDescription())
                                itemSVG:SetAriaHidden("false")
                            end
                            if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                plotSVG:Add(itemSVG)
                            else
                                if k not= 4 and k not= 5
                                    canvas:Add(itemSVG)
                                end
                            end

                            text itemFocus = ""
                            text itemBlur = ""

                            if k = 7 and currentItem is ChartPoint// This is the median dot
                                Circle outlier
                                number radius = currentItem:GetHeight()/2
                                outlier:SetRadius(radius)
                                outlier:SetPosition(currentItem:GetGlobalX()+radius, TranslatePositionY(currentItem) - currentItem:GetHeight() + radius) 
                                outlier:SetFill(currentItem:GetColor())
                                outlier:SetFillOpacity(currentItem:GetColor())
                                outlier:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                outlier:SetStrokeOpacity(cast(Color, currentItem:GetBorderColor()))
                                outlier:SetStrokeWidth(currentItem:GetBorderThickness())
                                if HasAccessibility()
                                    outlier:SetStyleClass("quorum-chart-circle")
                                    outlier:SetID(itemSVG:GetID() + "_item")
                                    outlier:SetTabIndex(-1)
                                    outlier:SetAriaHidden("true")
                                    itemFocus = itemFocus + "gainFocus('" + outlier:GetID() + "'); "
                                    itemBlur = itemBlur + "loseFocus('" + outlier:GetID() + "'); "
                                end 
                                itemSVG:Add(outlier)
                            else
                                Rectangle plotLine
                                plotLine:SetSize(currentItem:GetWidth(), currentItem:GetHeight())
                                plotLine:SetPosition(currentItem:GetGlobalX(), TranslatePositionY(currentItem) - currentItem:GetHeight())
                                plotLine:SetFill(currentItem:GetColor())
                                plotLine:SetFillOpacity(currentItem:GetColor())
                                plotLine:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                plotLine:SetStrokeOpacity(cast(Color, currentItem:GetBorderColor()))
                                plotLine:SetStrokeWidth(currentItem:GetBorderThickness())
                                if HasAccessibility() 
                                    plotLine:SetStyleClass("quorum-chart-rect")
                                    plotLine:SetID(itemSVG:GetID() + "_item")
                                    plotLine:SetTabIndex(-1)
                                    plotLine:SetAriaHidden("true")
                                    itemFocus = itemFocus + "gainFocus('" + plotLine:GetID() + "'); "
                                    itemBlur = itemBlur + "loseFocus('" + plotLine:GetID() + "'); "
                                end 
                                itemSVG:Add(plotLine)
                            end

                            if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                if currentItem:ShowAnnotation() or chart:ShowAnnotations()
                                    ChartLabel label = currentItem:GetAnnotation()
                                    if label not= undefined
                                        Label labelSVG
                                        labelSVG:SetText(label:GetText())
                                        labelSVG:SetTextAnchor("left")
                                        labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                        labelSVG:SetFontSize(label:GetFontSize() + "px")                            
                                        labelSVG:SetFontFamily("Arial")
                                        labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                        labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                                        if HasAccessibility()
                                            labelSVG:SetID(itemSVG:GetID() + "_annotation")
                                            labelSVG:SetStyleClass("quorum-chart-text")
                                            labelSVG:SetTabIndex(-1)
                                            labelSVG:SetAriaHidden("true")
                                            //itemFocus = itemFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                            //itemBlur = itemBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                        end
                                        canvas:Add(labelSVG)
                                    end
                                end 

                                // Add item selection symbols here!
//                                if currentItem:GetSelectionBracket():GetSize() = 3
//                                    integer m = 0
//                                    repeat while m < currentItem:GetSelectionBracket():GetSize()
//                                        Rectangle bracket
//                                        bracket:SetWidth(currentItem:GetSelectionBracket():Get(m):GetWidth())
//                                        bracket:SetHeight(currentItem:GetSelectionBracket():Get(m):GetHeight())
//                                        bracket:SetPosition(currentItem:GetSelectionBracket():Get(m):GetGlobalX(), TranslatePositionY(currentItem:GetSelectionBracket():Get(m)) - currentItem:GetSelectionBracket():Get(m):GetHeight()) 
//                                        bracket:SetFill(transparent) // Should be transparent until selected
//                                        bracket:SetFillOpacity(transparent)
//                                        if HasAccessibility()
//                                            bracket:SetStyleClass("quorum-chart-selection-bracket")
//                                            bracket:SetTabIndex(-1)
//                                            bracket:SetID(itemSVG:GetID() + "_bracket" + m)
//                                            bracket:SetAriaHidden("true")
//                                            itemFocus = itemFocus + "gainFocus('" + bracket:GetID() + "'); "
//                                            itemBlur = itemBlur + "loseFocus('" + bracket:GetID() + "'); "
//                                        end
//                                        canvas:Add(bracket)    
//                                        m = m + 1
//                                    end
//                                end

//                                if currentItem:GetSelectionArrow() not= undefined
//                                    Array <number> vertices = currentItem:GetSelectionArrowVertices()
//                                    number Yoffset = TranslatePositionY(currentItem:GetSelectionArrow())
//                                    number Xoffset = currentItem:GetSelectionArrow():GetGlobalX()
//            
//                                    Polygon arrow
//                                    integer m = 0
//                                    repeat while m < vertices:GetSize()
//                                        arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentItem:GetSelectionArrow():GetY()-vertices:Get(m+1)))
//                                        m = m + 2
//                                    end
//                                    arrow:SetFill(transparent) // Should be transparent until selected 
//                                    arrow:SetFillOpacity(transparent)
//                                    if HasAccessibility()
//                                        arrow:SetStyleClass("quorum-chart-selection-arrow")
//                                        arrow:SetTabIndex(-1)
//                                        arrow:SetID(itemSVG:GetID() + "_arrow")
//                                        arrow:SetAriaHidden("true")
//                                        itemFocus = itemFocus + "gainFocus('" + arrow:GetID() + "'); "
//                                        itemBlur = itemBlur + "loseFocus('" + arrow:GetID() + "'); "
//                                    end
//                                    canvas:Add(arrow)
//                                end
                            end
        
                            if HasAccessibility()
                                if itemFocus not= ""
                                    scriptText = scriptText + "document.getElementById('" + itemSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + itemFocus + "});" + newLine
                                end
                                if itemBlur not= ""
                                    scriptText = scriptText + "document.getElementById('" + itemSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + itemBlur + "});" + newLine
                                end
                            end 
                        end
                        k = k + 1
                    end        
                    j = j + 1
                end  
                i = i + 1
            end
        else
            integer i = 0
            repeat while i < chart:GetSubChartAreas():GetSize()
                if i < GetSubChartAreas():GetSize() // These are the svg chart areas
                    Group subChartContent
                    subChartContent:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                    subChartContent:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())

                    Rectangle subChartContentBoundingBox
                    subChartContentBoundingBox:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                    subChartContentBoundingBox:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())
                    subChartContentBoundingBox:SetFill(transparent)
                    subChartContentBoundingBox:SetFillOpacity(transparent)
                    subChartContentBoundingBox:SetStroke(transparent)
                    subChartContentBoundingBox:SetStrokeOpacity(transparent)
                    if HasAccessibility()
                        subChartContent:SetTabIndex(-1)
                        subChartContent:SetStyleClass("quorum-chart-region")
                        subChartContentBoundingBox:SetAriaHidden("true")
                        subChartContentBoundingBox:SetTabIndex(-1)
                    end
                    subChartContent:Add(subChartContentBoundingBox)
                    AddSubChartTitle(canvas, chart:GetSubChartAreas():Get(i))
    
                    if HasAccessibility()
                        //Separated, by the Factor levels with multiple Series per subplot
                        if not chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                            subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                            subChartContent:SetStyleClass("quorum-chart-region quorum-chart-category-list") 
                            subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                            subChartContent:SetRole("graphics-object") 
                            subChartContent:SetAriaHidden("false")
                            subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                            //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            chartContent:Add(subChartContent)
                        //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
                        elseif chart:IsSeparatedBySeries() and not chart:IsSeparatedByFactor()
                            subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                            subChartContent:SetStyleClass("quorum-chart-region quorum-chart-series-list") 
                            subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                            subChartContent:SetRole("graphics-object") 
                            subChartContent:SetAriaHidden("false")
                            subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                            //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            chartContent:Add(subChartContent)
                        else
                            subChartContent:SetAriaHidden("true")
                        end
                    else
                        chartContent:Add(subChartContent)
                    end

                    integer j = 0
                    repeat while j < chart:GetSubChartAreas():Get(i):GetChartAreaItems():GetSize()
                        Plot plot = cast(Plot, chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(j))
    
                        Group plotSVG
                        plotSVG:SetFill(plot:GetColor())
                        plotSVG:SetFillOpacity(plot:GetColor())
                        if HasAccessibility()
                            plotSVG:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + plot:GetHashCode())
                            plotSVG:SetStyleClass("quorum-chart-plot quorum-chart-plot-list")  
                            plotSVG:SetTabIndex(-1)
                            plotSVG:SetRole("graphics-object")  
                            plotSVG:SetAriaLabel(plot:GetName() + plot:GetDescription())
                            plotSVG:SetAriaHidden("false")
                        end
                        if chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                            chartContent:Add(plotSVG)
                        else
                            subChartContent:Add(plotSVG)
                        end
    
                        text plotFocus = ""
                        text plotBlur = ""

                        // Add plot selection symbols here!
                        // The plot area, used for hover 
                        Rectangle plotArea
                        plotArea:SetWidth(plot:GetPlotArea():GetWidth())
                        plotArea:SetHeight(plot:GetPlotArea():GetHeight())
                        plotArea:SetPosition(plot:GetPlotArea():GetGlobalX(), TranslatePositionY(plot:GetPlotArea()) - plot:GetPlotArea():GetHeight()) 
                        plotArea:SetFill(transparent) 
                        plotArea:SetFillOpacity(transparent)
                        if HasAccessibility()
                            plotArea:SetStyleClass("quorum-chart-rect")
                            plotArea:SetTabIndex(-1)
                            plotArea:SetAriaHidden("true")
                        end
                        plotSVG:Add(plotArea)
        
//                        if plot:GetSelectionBracket():GetSize() = 3
//                            integer k = 0
//                            repeat while k < plot:GetSelectionBracket():GetSize()
//                                Rectangle bracket
//                                bracket:SetWidth(plot:GetSelectionBracket():Get(k):GetWidth())
//                                bracket:SetHeight(plot:GetSelectionBracket():Get(k):GetHeight())
//                                bracket:SetPosition(plot:GetSelectionBracket():Get(k):GetGlobalX(), TranslatePositionY(plot:GetSelectionBracket():Get(k)) - plot:GetSelectionBracket():Get(k):GetHeight()) 
//                                bracket:SetFill(transparent) // Should be transparent until selected
//                                bracket:SetFillOpacity(transparent)
//                                if HasAccessibility()
//                                    bracket:SetStyleClass("quorum-chart-selection-bracket")
//                                    bracket:SetTabIndex(-1)
//                                    bracket:SetID(plotSVG:GetID() + "_bracket" + k)
//                                    bracket:SetAriaHidden("true")
//                                    plotFocus = plotFocus + "gainFocus('" + bracket:GetID() + "'); "
//                                    plotBlur = plotBlur + "loseFocus('" + bracket:GetID() + "'); "
//                                end
//                                canvas:Add(bracket)    
//                                k = k + 1
//                            end
//                        end

//                        if plot:GetSelectionArrow() not= undefined
//                            Array <number> vertices = plot:GetSelectionArrowVertices()
//                            number Yoffset = TranslatePositionY(plot:GetSelectionArrow())
//                            number Xoffset = plot:GetSelectionArrow():GetGlobalX()
//                            
//                            Polygon arrow
//                            integer k = 0
//                            repeat while k < vertices:GetSize()
//                                arrow:AddPoint(vertices:Get(k)+Xoffset, Yoffset+(plot:GetSelectionArrow():GetY()-vertices:Get(k+1)))
//                                k = k + 2
//                            end
//                            arrow:SetFill(transparent) // Should be transparent until selected
//                            arrow:SetFillOpacity(transparent)
//                            if HasAccessibility()
//                                arrow:SetStyleClass("quorum-chart-selection-arrow")
//                                arrow:SetID(plotSVG:GetID() + "_arrow")
//                                arrow:SetTabIndex(-1)
//                                arrow:SetAriaHidden("true")
//                                plotFocus = plotFocus + "gainFocus('" + arrow:GetID() + "'); "
//                                plotBlur = plotBlur + "loseFocus('" + arrow:GetID() + "'); "
//                            end
//                            canvas:Add(arrow)
//                        end

                        if HasAccessibility()
                            if plotFocus not= ""
                                scriptText = scriptText + "document.getElementById('" + plotSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + plotFocus + "});" + newLine
                            end
                            if plotBlur not= ""
                                scriptText = scriptText + "document.getElementById('" + plotSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + plotBlur + "});" + newLine
                            end
                        end   
    
                        // Plot: The violin shape, will be loaded as a polygon in the SVG          
                        Array<Pair<integer>> points = plot:GetPoints() //These points were calculated by ViolinPlotLayout
                        Polygon violin
                        integer index = 0
                        repeat while index < points:GetSize()
                            integer xCoor = points:Get(index):GetFirstValue() + cast(integer, chart:GetSubChartAreas():Get(i):GetGlobalX())
                            integer yCoor = points:Get(index):GetSecondValue() + cast(integer, TranslatePositionY(chart:GetSubChartAreas():Get(i)) - chart:GetSubChartAreas():Get(i):GetHeight())
                            if chart:GetHorizontalFlag()
                                yCoor = cast(integer, TranslatePositionY(chart:GetSubChartAreas():Get(i))) - points:Get(index):GetSecondValue()
                            end
                            violin:AddPoint(xCoor, yCoor)
                            index = index + 1
                        end 
                        violin:SetFill(plot:GetColor())
                        violin:SetFillOpacity(plot:GetColor())
                        violin:SetStroke(cast(Color, plot:GetBorderColor()))
                        violin:SetStrokeOpacity(cast(Color, plot:GetBorderColor()))
                        violin:SetStrokeWidth(plot:GetBorderThickness())
                        if HasAccessibility()
                            violin:SetTabIndex(-1)
                            violin:SetAriaHidden("true")
                        end 
                        plotSVG:Add(violin)

                        // Plot items 
                        Array<ChartDrawable> items = plot:GetPlotItems()
                        /* Indices for items of individual box plot
                            0: PLOT AREA (ENTIRE REGION)
                            1: MINIMUM LINE
                            2: LOWER WHISKER
                            3: INTERQUARTILE RANGE
                            4: RIGHT BORDER OF IQR //not used
                            5: LEFT BORDER OF IQR //not used
                            6: Q1 LINE
                            7: MEDIAN LINE
                            8: Q3 LINE
                            9: UPPER WHISKER    
                            10: MAXIMUM LINE 
                        */   
    
                        integer k = 1
                        repeat while k < items:GetSize()
                            ChartDrawable currentItem = items:Get(k)
    
                            if currentItem not= undefined 
        
                                Group itemSVG
                                itemSVG:SetFill(currentItem:GetColor())
                                itemSVG:SetFillOpacity(currentItem:GetColor())
                                if HasAccessibility() 
                                    itemSVG:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + plot:GetHashCode() + "_" + currentItem:GetHashCode())
                                    itemSVG:SetStyleClass("quorum-chart-plotitem quorum-chart-plotitem-list")
                                    itemSVG:SetTabIndex(-1)
                                    itemSVG:SetRole("graphics-symbol")    
                                    itemSVG:SetAriaLabel(currentItem:GetName() + currentItem:GetDescription())
                                    itemSVG:SetAriaHidden("false")
                                end
                                if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                    plotSVG:Add(itemSVG)
                                else
                                    if k not= 4 and k not= 5
                                        canvas:Add(itemSVG)
                                    end
                                end
    
                                text itemFocus = ""
                                text itemBlur = ""

                                if k = 7 and currentItem is ChartPoint// This is the median dot
                                    Circle outlier
                                    number radius = currentItem:GetHeight()/2
                                    outlier:SetRadius(radius)
                                    outlier:SetPosition(currentItem:GetGlobalX()+radius, TranslatePositionY(currentItem) - currentItem:GetHeight() + radius) 
                                    outlier:SetFill(currentItem:GetColor())
                                    outlier:SetFillOpacity(currentItem:GetColor())
                                    outlier:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                    outlier:SetStrokeOpacity(cast(Color, currentItem:GetBorderColor()))
                                    outlier:SetStrokeWidth(currentItem:GetBorderThickness())
                                    if HasAccessibility()
                                        outlier:SetStyleClass("quorum-chart-circle")
                                        outlier:SetID(itemSVG:GetID() + "_item")
                                        outlier:SetTabIndex(-1)
                                        outlier:SetAriaHidden("true")
                                        itemFocus = itemFocus + "gainFocus('" + outlier:GetID() + "'); "
                                        itemBlur = itemBlur + "loseFocus('" + outlier:GetID() + "'); "
                                    end 
                                    itemSVG:Add(outlier)
                                else
                                    Rectangle plotLine
                                    plotLine:SetSize(currentItem:GetWidth(), currentItem:GetHeight())
                                    plotLine:SetPosition(currentItem:GetGlobalX(), TranslatePositionY(currentItem) - currentItem:GetHeight())
                                    plotLine:SetFill(currentItem:GetColor())
                                    plotLine:SetFillOpacity(currentItem:GetColor())
                                    plotLine:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                    plotLine:SetStrokeOpacity(cast(Color, currentItem:GetBorderColor()))
                                    plotLine:SetStrokeWidth(currentItem:GetBorderThickness())
                                    if HasAccessibility() 
                                        plotLine:SetStyleClass("quorum-chart-rect")
                                        plotLine:SetID(itemSVG:GetID() + "_item")
                                        plotLine:SetTabIndex(-1)
                                        plotLine:SetAriaHidden("true")
                                        itemFocus = itemFocus + "gainFocus('" + plotLine:GetID() + "'); "
                                        itemBlur = itemBlur + "loseFocus('" + plotLine:GetID() + "'); "
                                    end 
                                    itemSVG:Add(plotLine)
                                end
    
                                if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                    if currentItem:ShowAnnotation() or chart:ShowAnnotations()
                                        ChartLabel label = currentItem:GetAnnotation()
                                        if label not= undefined
                                            Label labelSVG
                                            labelSVG:SetText(label:GetText())
                                            labelSVG:SetTextAnchor("left")
                                            labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                            labelSVG:SetFontSize(label:GetFontSize() + "px")                            
                                            labelSVG:SetFontFamily("Arial")
                                            labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                            labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                                            if HasAccessibility()
                                                labelSVG:SetID(itemSVG:GetID() + "_annotation")
                                                labelSVG:SetStyleClass("quorum-chart-text")
                                                labelSVG:SetTabIndex(-1)
                                                labelSVG:SetAriaHidden("true")
                                                //itemFocus = itemFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                                //itemBlur = itemBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                            end
                                            canvas:Add(labelSVG)
                                        end
                                    end 

                                    // Add item selection symbols here!
//                                    if currentItem:GetSelectionBracket():GetSize() = 3
//                                        integer m = 0
//                                        repeat while m < currentItem:GetSelectionBracket():GetSize()
//                                            Rectangle bracket
//                                            bracket:SetWidth(currentItem:GetSelectionBracket():Get(m):GetWidth())
//                                            bracket:SetHeight(currentItem:GetSelectionBracket():Get(m):GetHeight())
//                                            bracket:SetPosition(currentItem:GetSelectionBracket():Get(m):GetGlobalX(), TranslatePositionY(currentItem:GetSelectionBracket():Get(m)) - currentItem:GetSelectionBracket():Get(m):GetHeight()) 
//                                            bracket:SetFill(transparent) // Should be transparent until selected
//                                            bracket:SetFillOpacity(transparent)
//                                            if HasAccessibility()
//                                                bracket:SetStyleClass("quorum-chart-selection-bracket")
//                                                bracket:SetTabIndex(-1)
//                                                bracket:SetID(itemSVG:GetID() + "_bracket" + m)
//                                                bracket:SetAriaHidden("true")
//                                                itemFocus = itemFocus + "gainFocus('" + bracket:GetID() + "'); "
//                                                itemBlur = itemBlur + "loseFocus('" + bracket:GetID() + "'); "
//                                            end
//                                            canvas:Add(bracket)    
//                                            m = m + 1
//                                        end
//                                    end

//                                    if currentItem:GetSelectionArrow() not= undefined
//                                        Array <number> vertices = currentItem:GetSelectionArrowVertices()
//                                        number Yoffset = TranslatePositionY(currentItem:GetSelectionArrow())
//                                        number Xoffset = currentItem:GetSelectionArrow():GetGlobalX()
//                
//                                        Polygon arrow
//                                        integer m = 0
//                                        repeat while m < vertices:GetSize()
//                                            arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentItem:GetSelectionArrow():GetY()-vertices:Get(m+1)))
//                                            m = m + 2
//                                        end
//                                        arrow:SetFill(transparent) // Should be transparent until selected 
//                                        arrow:SetFillOpacity(transparent)
//                                        if HasAccessibility()
//                                            arrow:SetStyleClass("quorum-chart-selection-arrow")
//                                            arrow:SetTabIndex(-1)
//                                            arrow:SetID(itemSVG:GetID() + "_arrow")
//                                            arrow:SetAriaHidden("true")
//                                            itemFocus = itemFocus + "gainFocus('" + arrow:GetID() + "'); "
//                                            itemBlur = itemBlur + "loseFocus('" + arrow:GetID() + "'); "
//                                        end
//                                        canvas:Add(arrow)
//                                    end
                                end
        
                                if HasAccessibility()
                                    if itemFocus not= ""
                                        scriptText = scriptText + "document.getElementById('" + itemSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + itemFocus + "});" + newLine
                                    end
                                    if itemBlur not= ""
                                        scriptText = scriptText + "document.getElementById('" + itemSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + itemBlur + "});" + newLine
                                    end
                                end 
                            end
                            k = k + 1
                        end      
                        j = j + 1
                    end
                end
                i = i + 1
            end
        end
        if HasAccessibility()
            script:AddText(scriptText)  
            canvas:Add(script)
        end
    end

    action AddOrderingList(ScalableVectorGraphics canvas, Chart chart)
        ViolinPlot currentChart
        currentChart = cast(ViolinPlot, chart)
        Script script       

        text scriptText = ""
        text newLine = scriptText:GetLineFeed()
        text tab = scriptText:GetTab()
        text dq = scriptText:GetDoubleQuote()

        scriptText = newLine + "if (typeof quorum_chart_value_order == 'undefined' || quorum_chart_value_order == null)" + newLine
        scriptText = scriptText  + tab + "var quorum_chart_value_order = {};" + newLine + newLine
        scriptText = scriptText + "quorum_chart_value_order." + canvas:GetID() + " = {" + newLine

        if chart:IsSeparated()
            Array<ChartAreaPanel> subChartAreas = currentChart:GetSubChartAreas()
            PlotComparison comparison
            comparison:SetAscending(true)

            i = 0
            repeat while i < subChartAreas:GetSize() - 1
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    chartAreaItems:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j< chartAreaItems:GetSize() - 1
                        if chartAreaItems:Get(j) is Plot
                            Plot currentPlot = cast(Plot, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentPlot:GetHashCode() + ": " + currentPlot:GetMedian() + "," + newLine
                        end
                        j = j + 1
                    end

                    if chartAreaItems:Get(j) is Plot
                        Plot lastPlot = cast(Plot, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastPlot:GetHashCode() + ": " + lastPlot:GetMedian() + newLine
                        scriptText = scriptText + tab + "}," + newLine
                    end
                end
                i = i + 1
            end

            if i < subChartAreas:GetSize()
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    chartAreaItems:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j< chartAreaItems:GetSize() - 1
                        if chartAreaItems:Get(j) is Plot
                            Plot currentPlot = cast(Plot, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentPlot:GetHashCode() + ": " + currentPlot:GetMedian() + "," + newLine
                        end
                        j = j + 1
                    end
    
                    if chartAreaItems:Get(j) is Plot
                        Plot lastPlot = cast(Plot, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastPlot:GetHashCode() + ": " + lastPlot:GetMedian() + newLine
                        scriptText = scriptText + tab + "}" + newLine
                    end
                end
            end

        elseif chart:HasGroups()
            Array<PlotGroup> plotGroups = currentChart:GetPlotGroups()
            PlotComparison comparison
            comparison:SetAscending(true)

            if plotGroups:GetSize() > 0
                i = 0
                repeat while i < plotGroups:GetSize() - 1
                    if plotGroups:Get(i):GetSize() > 0
                        Array<Plot> plots = plotGroups:Get(i):GetPlots():CopyToArray()
                        plots:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + plotGroups:Get(i):GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < plots:GetSize() - 1
                            Plot currentPlot = plots:Get(j)
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentPlot:GetSeries():GetHashCode() + "_" + currentPlot:GetHashCode() + ": " + currentPlot:GetMedian() + "," + newLine
                            j = j + 1
                        end
                        
                        Plot lastPlot = plots:Get(j)
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + lastPlot:GetSeries():GetHashCode() + "_" + lastPlot:GetHashCode() + ": " + lastPlot:GetMedian() + newLine
                        scriptText = scriptText + tab + "}," + newLine
                    end
                    i = i + 1
                end
                if plotGroups:Get(i):GetSize() > 0
                    Array<Plot> plots = plotGroups:Get(i):GetPlots():CopyToArray()
                    plots:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + plotGroups:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j < plots:GetSize() - 1
                        Plot currentPlot = plots:Get(j)
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentPlot:GetSeries():GetHashCode() + "_" + currentPlot:GetHashCode() + ": " + currentPlot:GetMedian() + "," + newLine
                        j = j + 1
                    end
                    
                    Plot lastPlot = plots:Get(j)
                    scriptText = scriptText + tab + tab + canvas:GetID() + "_" + lastPlot:GetSeries():GetHashCode() + "_" + lastPlot:GetHashCode() + ": " + lastPlot:GetMedian() + newLine
                    scriptText = scriptText + tab + "}" + newLine
                end
            end
        else
            Array<PlotGroup> plotGroups = currentChart:GetPlotGroups():CopyToArray()
            PlotGroupComparison comparison
            comparison:SetAscending(true)
            plotGroups:Sort(comparison)
            i = 0
            repeat while i < plotGroups:GetSize() - 1
                if plotGroups:Get(i):GetSize() > 0
                    j = 0
                    repeat while j < plotGroups:Get(i):GetSize()
                        Plot currentPlot = plotGroups:Get(i):Get(j)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentPlot:GetSeries():GetHashCode() + "_" + currentPlot:GetHashCode() + ": " + currentPlot:GetMedian() + "," + newLine
                        j = j + 1
                    end
                end
                i = i + 1
            end
            if plotGroups:Get(i):GetSize() > 0
                j = 0
                repeat while j < plotGroups:Get(i):GetSize() - 1
                    Plot currentPlot = plotGroups:Get(i):Get(j)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + currentPlot:GetSeries():GetHashCode() + "_" + currentPlot:GetHashCode() + ": " + currentPlot:GetMedian() + "," + newLine
                    j = j + 1
                end
                
                Plot lastPlot = plotGroups:Get(i):Get(j)
                scriptText = scriptText + tab + canvas:GetID() + "_" + lastPlot:GetSeries():GetHashCode() + "_" + lastPlot:GetHashCode() + ": " + lastPlot:GetMedian() + newLine
            end
        end
        scriptText = scriptText + "};" + newLine
        script:AddText(scriptText)
        canvas:Add(script)
    end
end