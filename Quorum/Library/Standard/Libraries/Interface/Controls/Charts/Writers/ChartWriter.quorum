package Libraries.Interface.Controls.Charts

use Libraries.Data.Formats.ScalableVectorGraphics.Group
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Web.Page.Script
use Libraries.Containers.Array
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Division
use Libraries.Web.Page.ListItem
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Item2D
use Libraries.System.File
use Libraries.Interface.Controls.Icon
use Libraries.Compute.Random
use Libraries.System.DateTime
use Libraries.System.FileWriter
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine
use Libraries.Web.Page.WebPage
use Libraries.Web.Page.MetaData
use Libraries.Compute.Vector2
use Libraries.Data.Formats.ScalableVectorGraphics.Pattern
use Libraries.Compute.Math

class ChartWriter
    private number axisPointX = 105
    private number axisPointY = 90
    private number axisLengthX = 525
    private number axisLengthY = 450
    private integer svgHeight = 600
    private integer svgWidth = 700
    private boolean hasAccessibility = true
    private number paddedChartOffset = 0
    private number fontSize = 12

    Label chartTitle
    Label chartSubtitle
    Label xAxisLabel
    Label yAxisLabel
    Rectangle xAxis
    Rectangle yAxis
    Rectangle horizontalPanel
    Rectangle verticalPanel
    Rectangle legendPanel
    Rectangle background
    Rectangle chartArea
    Array<Rectangle> subChartAreas
    Array<Rectangle> subHorizontalPanels
    Array<Rectangle> subVerticalPanels
    Array<Rectangle> subXAxes
    Array<Rectangle> subYAxes
    Array<Label> yLabels
    Array<Label> xLabels
    Array<Array<Label>> subYLabels
    Array<Array<Label>> subXLabels
    Array<Rectangle> groupPanels
    Group chartInformation
    ScalableVectorGraphics canvas

    //File paths for script/style
    text scriptFilepath = ""
    text styleFilepath = ""

    /*
        This action writes out the Chart by grabbing necessary information from the chart and it will then return
        all of the necessary text needed to write out an SVG file that will contain the chart.
    
        Attribute: Parameter chart The chart that will be used to create an SVG
        Attribute: Parameter svgWidth The width in pixels of the SVG
        Attribute: Parameter svgHeight The height in pixels of the SVG
    
        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Interface.Controls.Charts.BarChartWriter
        
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedColumnRange(0,1)
        BarChart chart = frame:BarChart()
        chart:Display()
    
        BarChartWriter writer
        output writer:WriteOutChart(chart, 1400, 1200)
    */
    action WriteOutChart(Chart chart, integer svgWidth, integer svgHeight) returns text
        me:svgWidth = svgWidth
        me:svgHeight = svgHeight
        return WriteOutChart(chart)
    end

    /*
        This action writes out the Chart by grabbing necessary information from the chart and it will then return
        all of the necessary text needed to write out an SVG file that will contain the chart.
    
        Attribute: Parameter chart The chart that will be used to create an SVG
        Attribute: Parameter file The file object that will be written to
        Attribute: Parameter svgWidth The width in pixels of the SVG
        Attribute: Parameter svgHeight The height in pixels of the SVG
    
        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Interface.Controls.Charts.BarChartWriter
        
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedColumnRange(0,1)
        BarChart chart = frame:BarChart()
        chart:Display()
    
        BarChartWriter writer
        File f
        f:SetPath("aFile.svg")
        chartWriter:WriteOutChart(chart, f, 1400, 1200)
    */
    action WriteOutChart(Chart chart, File file, integer svgWidth, integer svgHeight)
        me:svgWidth = svgWidth
        me:svgHeight = svgHeight
        WriteOutChart(chart, file)
    end

    /*
        This action writes out the Chart by grabbing necessary information from the chart and it will then return
        all of the necessary text needed to write out an SVG file that will contain the chart.
    
        Attribute: Parameter chart The chart that will be used to create an SVG
    
        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Interface.Controls.Charts.BarChartWriter
        
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedColumnRange(0,1)
        BarChart chart = frame:BarChart()
        chart:Display()
    
        BarChartWriter writer
        output writer:WriteOutChart(chart)
    */
    action WriteOutChart(Chart chart) returns text
        ScalableVectorGraphics chartCanvas
        canvas = chartCanvas
        //chartCanvas:SetSize(svgWidth,svgHeight)
        svgWidth = cast(integer,chart:GetWidth())
        svgHeight = cast(integer,chart:GetHeight())
        chartCanvas:SetViewBox(0,0,svgWidth,svgHeight)
        if HasAccessibility()
            chartCanvas:SetStyleClass("quorum-chart")
            chartCanvas:SetID("svg_" + chartCanvas:GetHashCode() + "_" + UniversalUniqueIdentifier())
            chartCanvas:SetTabIndex(-1)
        else
            chartCanvas:SetTabIndex(0)
        end

        //Generate SVG elements for each piece of the chart
        Group newChartInformation
        chartInformation = newChartInformation
        if HasAccessibility()
            chartInformation:SetIsOneLine(true)
            chartInformation:SetTabIndex(-1)
        end
        
        AddBackground(chartCanvas, chart)
        AddChartArea(chartCanvas, chart)
        if chart:IsShowingXAxis()
            AddXLabels(chartCanvas, chart)
        end
        if chart:IsShowingYAxis()
            AddYLabels(chartCanvas, chart)
        end
        AddAxes(chartCanvas, chart)
        if chart:IsShowingTitle()
            AddChartTitle(chartCanvas, chart)
        end
        if chart:IsShowingSubtitle()
            AddChartSubtitle(chartCanvas, chart)
        end
        if chart:IsShowingLegend()
            AddLegend(chartCanvas, chart)
        end
        if chart:IsShowingLinearRegression()
//            AddRegressionLines(chartCanvas, chart)
        end

        chartCanvas:Add(chartInformation)

        AddChartContent(chartCanvas, chart)
        //add the rest of the chart information after the chart content has been populated
        if chart:IsShowingXAxis()
            chartInformation:Add(horizontalPanel)
        end
        if chart:IsShowingYAxis()
            chartInformation:Add(verticalPanel)
        end
        if chart:IsShowingLegend()
            chartInformation:Add(legendPanel)
        end
        if chart:IsShowingPatterns()
            AddPatternDefinitions(chartCanvas, chart)
        end

        //Generate a list tree to give navigation structure
        if HasAccessibility()
            chart:AddChartAreaInstructions(" with")
            Division accessibleChart
            accessibleChart = AddAccessibility(chartCanvas, chart)
            return accessibleChart:Generate()
        else
            return chartCanvas:ToText()
        end
    end

    /*
        This action writes out the Chart by grabbing necessary information from the chart and it will then return
        all of the necessary text needed to write out an SVG file that will contain the chart.
    
        Attribute: Parameter chart The chart that will be used to create an SVG
        Attribute: Parameter file The file object that will be written to
    
        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.BarChart
        use Libraries.Interface.Controls.Charts.BarChartWriter
        
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedColumnRange(0,1)
        BarChart chart = frame:BarChart()
        chart:Display()
    
        BarChartWriter writer
        File f
        f:SetPath("aFile.svg")
        chartWriter:WriteOutChart(chart, f)
    */
    action WriteOutChart(Chart chart, File file)
        svgWidth = cast(integer,chart:GetWidth())
        svgHeight = cast(integer,chart:GetHeight())
        axisLengthX = cast(integer, svgWidth*chart:GetChartAreaWidthPercent())
        axisPointX = cast(integer, svgWidth*chart:GetVerticalPanelWidthPercent())
        axisLengthY = cast(integer, svgHeight*chart:GetChartAreaHeightPercent())
        axisPointY = cast(integer, svgHeight*(1 - chart:GetHorizontalPanelHeightPercent()))
        ScalableVectorGraphics chartCanvas
        canvas = chartCanvas
        //chartCanvas:SetSize(svgWidth,svgHeight)
        chartCanvas:SetViewBox(0,0,svgWidth,svgHeight)
        if HasAccessibility()
            chartCanvas:SetID("svg_" + chartCanvas:GetHashCode() + "_" + UniversalUniqueIdentifier())
            chartCanvas:SetStyleClass("quorum-chart")
            chartCanvas:SetTabIndex(-1)
        else
            chartCanvas:SetTabIndex(0)
        end

        //Generate SVG elements for each piece of the chart
        Group newChartInformation
        chartInformation = newChartInformation
        if HasAccessibility()
            chartInformation:SetIsOneLine(true)
            chartInformation:SetTabIndex(-1)
        end

        AddBackground(chartCanvas, chart)
        AddChartArea(chartCanvas, chart)
        if chart:IsShowingLegend()
            AddLegend(chartCanvas, chart)
        end
        if chart:IsShowingXAxis()
            AddXLabels(chartCanvas, chart)
        end
        if chart:IsShowingYAxis()
            AddYLabels(chartCanvas, chart)
        end
        AddAxes(chartCanvas, chart)
        if chart:IsShowingTitle()
            AddChartTitle(chartCanvas, chart)
        end
        if chart:IsShowingSubtitle()
            AddChartSubtitle(chartCanvas, chart)
        end
        if chart:IsShowingLinearRegression()
//            AddRegressionLines(chartCanvas, chart)
        end        

        chartCanvas:Add(chartInformation)

        AddChartContent(chartCanvas, chart)
        //add the rest of the chart information after the chart content has been populated
        if chart:IsShowingXAxis()
            chartInformation:Add(horizontalPanel)
        end
        if chart:IsShowingYAxis()
            chartInformation:Add(verticalPanel)
        end
        if chart:IsShowingLegend()
            chartInformation:Add(legendPanel)
        end
        if chart:IsShowingPatterns()
            AddPatternDefinitions(chartCanvas, chart)
        end

        //Generate a list tree to give navigation structure
        if HasAccessibility()
            Division accessibleChart
            accessibleChart = AddAccessibility(chartCanvas, chart)
            file:Write(accessibleChart:Generate())
        else
            chartCanvas:Write(file)
        end
    end

    action WriteOutHTML(Chart chart, File file)
        WebPage page

        //add language headers
        page:AddAttribute("xml:lang", "en")
        page:SetLanguage("en")

        //add the meta-data character set
        MetaData charset
        charset:SetCharacterSet("UTF-8")
        page:AddMetaData(charset)

        MetaData viewport
        viewport:SetContent("width=device-width, initial-scale=1")
        viewport:SetName("viewport")
        page:AddMetaData(viewport)

        page:AddIcon("http://quorumlanguage.com/media/favicon.ico")

        // add necessary scripts
        if scriptFilepath not= ""
            page:AddScript(scriptFilepath)
        else
            page:AddScript("http://quorumlanguage.com/script/quorumCharts.js")
        end

        // add necessary styles
        if styleFilepath not= ""
            page:AddStylesheet(styleFilepath)
        else
            page:AddStylesheet("http://quorumlanguage.com/style/quorumCharts.css")
        end

        page:SetWebPageTitle("Quorum Charts: " + chart:GetTitle())

        Division responsiveWrapper
        responsiveWrapper:AddText(WriteOutChart(chart))
        if chart:GetWidth() > 200
            responsiveWrapper:SetStyle("min-width: 200px; max-width: " + svgWidth + "px")
        end
        page:Add(responsiveWrapper)

        file:Write(page:Generate())
    end

    /*
        This action sets a flag to know if all of the accessibility
        information should be included. This may be used to reduce
        the size of the image in cases where it will be used
        as a flat image such as in a PDF.
    */
    action SetAccessibilityFlag(boolean hasAccessibility)
        me:hasAccessibility = hasAccessibility
    end

    action HasAccessibility() returns boolean
        return hasAccessibility
    end

    /*
        This action sets the position (percentage) of the chart area.
    */
    action SetChartAreaPosition(number x, number y)
        axisPointX = x
        axisPointY = y
    end

    action SetChartAreaPositionX(number x)
        axisPointX = x
    end

    action GetChartAreaPositionX() returns number
        return axisPointX
    end

    action SetChartAreaPositionY(number y)
        axisPointY = y
    end

    action GetChartAreaPositionY() returns number
        return axisPointY
    end

    /*
        This action sets the width (percentage) of the chart area.
    */
    action SetChartAreaWidth(number width)
        axisLengthX = width
    end

    action GetChartAreaWidth() returns number
        return axisLengthX
    end

    /*
        This action sets the height (percentage) of the chart area.
    */
    action SetChartAreaHeight(number height)
        axisLengthY = height
    end

    action GetChartAreaHeight() returns number
        return axisLengthY
    end

    /*
        This action sets the height (pixel) of the chart.
    */
    action SetChartHeight(integer svgHeight)
        me:svgHeight = svgHeight
    end

    action GetChartHeight() returns integer
        return svgHeight
    end

    /*
        This action sets the width (pixel) of the chart.
    */
    action SetChartWidth(integer svgWidth)
        me:svgWidth = svgWidth
    end

    action GetChartWidth() returns integer
        return svgWidth
    end

    /*
        This action sets the chart title.
    */
    action SetChartTitle(Label chartTitle)
        me:chartTitle = chartTitle
    end

    action GetChartTitle() returns Label
        return chartTitle
    end

    /*
        This action sets the x axis label.
    */
    action SetXAxisLabel(Label xAxisLabel)
        me:xAxisLabel = xAxisLabel
    end

    action GetXAxisLabel() returns Label
        return xAxisLabel
    end

    /*
        This action sets the y axis label.
    */
    action SetYAxisLabel(Label yAxisLabel)
        me:yAxisLabel = yAxisLabel
    end

    action GetYAxisLabel() returns Label
        return yAxisLabel
    end

    /*
        This action sets the x axis line.
    */
    action SetXAxis(Rectangle xAxis)
        me:xAxis = xAxis
    end

    action GetXAxis() returns Rectangle
        return xAxis
    end

    /*
        This action sets the y axis line.
    */
    action SetYAxis(Rectangle yAxis)
        me:yAxis = yAxis
    end

    action GetYAxis() returns Rectangle
        return yAxis
    end

    /*
        This action sets the background.
    */
    action SetBackground(Rectangle background)
        me:background = background
    end

    action GetBackground() returns Rectangle
        return background
    end

    /*
        This action sets the chart area.
    */
    action SetChartArea(Rectangle chartArea)
        me:chartArea = chartArea
    end

    action GetChartArea() returns Rectangle
        return chartArea
    end

    /*
        This action gets the subchart area list.
    */
    action GetSubChartAreas() returns Array<Rectangle>
        return subChartAreas
    end

    /*
        This action sets the y labels.
    */
    action SetXLabels(Array<Label> xLabels)
        me:xLabels = xLabels
    end

    action GetXLabels() returns Array<Label>
        return xLabels
    end

    /*
        This action sets the y labels.
    */
    action SetYLabels(Array<Label> yLabels)
        me:yLabels = yLabels
    end

    action GetYLabels() returns Array<Label>
        return yLabels
    end

    /*
        This action sets the group panels.
    */
    action GetGroupPanels() returns Array<Rectangle>
        return groupPanels
    end

    action SetScriptFilepath(text scriptFilepath)
        me:scriptFilepath = scriptFilepath
    end

    action GetScriptFilepath returns text
        return me:scriptFilepath
    end

    action SetStyleFilepath(text styleFilepath)
        me:styleFilepath = styleFilepath
    end

    action GetStyleFilepath returns text
        return me:styleFilepath
    end

    action SetChartInformation(Group chartInformation)
        me:chartInformation = chartInformation
    end

    action GetChartInformation returns Group
        return me:chartInformation
    end

    /*
        This action adds a white background to the canvas
    */
    private action AddBackground(ScalableVectorGraphics canvas, Chart chart)
//        background:SetFill(cast(Color, chart:GetBackgroundColor()))
        text chartTitle = ""
        if chart:GetBackground() not= undefined
            background:SetFill(cast(Color, chart:GetBackground():GetColor()))
        end
        background:SetSize(100,100, "%")
        background:SetPosition(0, 0, "%")
        if HasAccessibility()
            background:SetID(canvas:GetID() + "_" + background:GetHashCode())
            //background:SetStyleClass("quorum-chart-element quorum-chart-information-list")
            background:SetTabIndex(-1)
            background:SetRole("graphics-object")
            if chart:IsShowingTitle()
                chartTitle = chart:GetTitle()
            else
                chartTitle = chart:GetName()
            end
            if chart:IsShowingSubtitle()
                chartTitle = chartTitle + ", " + chart:GetSubtitle()
            end
            //chart:GenerateSummary()
            //background:SetAriaLabel(chartTitle + chart:GenerateSummary())
            background:SetAriaHidden("true")
        end
        canvas:Add(background)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        chartArea:SetFill(cast(Color, chart:GetChartArea():GetBackgroundColor()))
        chartArea:SetFillOpacity(cast(Color, chart:GetChartArea():GetBackgroundColor()))
        chartArea:SetStroke(cast(Color, chart:GetChartArea():GetBorderColor()))
        chartArea:SetStrokeOpacity(cast(Color, chart:GetChartArea():GetBorderColor()))
        chartArea:SetStrokeWidth(chart:GetChartArea():GetBorderThickness())
        chartArea:SetSize(cast(integer, chart:GetChartArea():GetWidth()), cast(integer, chart:GetChartArea():GetHeight()))
        chartArea:SetPosition(chart:GetChartArea():GetGlobalX(), TranslatePositionY(chart:GetChartArea())  - chart:GetChartArea():GetHeight())
        if HasAccessibility()
            chartArea:SetTabIndex(-1)
            chartArea:SetID(canvas:GetID() + "_" + chartArea:GetHashCode())
            chartArea:SetStyleClass("quorum-chart-element")
            chartArea:SetAriaHidden("true")
        end
        //canvas:Add(chartArea)

        Array<ChartAreaPanel> subChartAreas = chart:GetSubChartAreas()
        i = 0
        repeat while i < subChartAreas:GetSize()
            ChartAreaPanel currentSubChartArea = subChartAreas:Get(i)

            if currentSubChartArea:IsShowing()
                Rectangle svgSubChartArea
    
                svgSubChartArea:SetFill(cast(Color, chart:GetChartArea():GetBackgroundColor()))
                svgSubChartArea:SetFillOpacity(cast(Color, chart:GetChartArea():GetBackgroundColor()))
                svgSubChartArea:SetStroke(cast(Color, currentSubChartArea:GetBorderColor()))
                svgSubChartArea:SetStrokeOpacity(cast(Color, currentSubChartArea:GetBorderColor()))
                svgSubChartArea:SetStrokeWidth(currentSubChartArea:GetBorderThickness())
                svgSubChartArea:SetSize(currentSubChartArea:GetWidth(),currentSubChartArea:GetHeight())
                svgSubChartArea:SetPosition(currentSubChartArea:GetGlobalX(), TranslatePositionY(currentSubChartArea)  - currentSubChartArea:GetHeight())
                if HasAccessibility()
                    svgSubChartArea:SetTabIndex(-1)
                    svgSubChartArea:SetID(canvas:GetID() + "_" + svgSubChartArea:GetHashCode())
                    svgSubChartArea:SetStyleClass("quorum-chart-element")
                    svgSubChartArea:SetAriaLabel(currentSubChartArea:GetName() + currentSubChartArea:GetDescription())
                    svgSubChartArea:SetAriaHidden("false")
                end
                me:subChartAreas:Add(svgSubChartArea)
                //canvas:Add(svgSubChartArea)

                if currentSubChartArea:GetLabel() not= undefined
                    Label areaTitle
                    areaTitle:SetText(currentSubChartArea:GetLabel():GetText())
                    areaTitle:SetTextAnchor("left")
                    areaTitle:SetPosition(currentSubChartArea:GetLabel():GetGlobalX(), TranslatePositionY(currentSubChartArea:GetLabel()) - currentSubChartArea:GetLabel():GetHeight()/4)
                    areaTitle:SetFontSize(currentSubChartArea:GetLabel():GetFontSize() + "px")
                    areaTitle:SetFontFamily("Arial")
                    areaTitle:SetFill(cast(Color, currentSubChartArea:GetLabel():GetFontColor()))
                    if HasAccessibility()
                        areaTitle:SetTabIndex(-1)
                        areaTitle:SetID(canvas:GetID() + "_" + areaTitle:GetHashCode())
                        areaTitle:SetStyleClass("quorum-chart-text")
                        areaTitle:SetAriaHidden("true")
                    end
                    //canvas:Add(areaTitle)
                end
            end
            i = i + 1
        end
    end

    /*
        This action adds the two lines for the x and y axis
    */
    private action AddAxes(ScalableVectorGraphics canvas, Chart chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        if chart:IsShowingXAxis()
            HorizontalAxisPanel horizontalAxisPanel = chart:GetHorizontalPanel()
            
            if horizontalAxisPanel not= undefined and horizontalAxisPanel:IsShowing()
                horizontalPanel:SetWidth(horizontalAxisPanel:GetWidth())
                horizontalPanel:SetHeight(horizontalAxisPanel:GetHeight())
                horizontalPanel:SetPosition(horizontalAxisPanel:GetGlobalX(), TranslatePositionY(horizontalAxisPanel) - horizontalAxisPanel:GetHeight())
                horizontalPanel:SetFill(transparent)
                horizontalPanel:SetFillOpacity(transparent)
                if HasAccessibility()
                    horizontalPanel:SetTabIndex(-1)
                    horizontalPanel:SetID(canvas:GetID() + "_" + horizontalAxisPanel:GetHashCode())
                    horizontalPanel:SetStyleClass("quorum-chart-element quorum-chart-information-list")
                    horizontalPanel:SetRole("graphics-object")
                    Array<ChartLabel> xTextLabels = horizontalAxisPanel:GetLabels()
                    if xTextLabels:GetSize() not= 0
                        horizontalPanel:SetAriaLabel(horizontalAxisPanel:GetName() + " shows " + horizontalAxisPanel:GetTitleLabel():GetText() + " and ranges from " + xTextLabels:Get(0):GetText() +  " to " + xTextLabels:Get(xTextLabels:GetSize()-1):GetText())       
                    else
                        horizontalPanel:SetAriaLabel(horizontalAxisPanel:GetName() + " shows " + horizontalAxisPanel:GetTitleLabel():GetText() + " and ranges from " + chart:GetXAxisMinimum() +  " to " + chart:GetXAxisMaximum())       
                    end
                    horizontalPanel:SetAriaHidden("false")
                end
                //chartInformation:Add(horizontalPanel)

                if not chart:IsSeparated()
                    Array<Drawable> axisLines = horizontalAxisPanel:GetAxisLines()
                    j = 0
                    repeat while j < axisLines:GetSize()
                        Drawable axisLine = axisLines:Get(j)
                        if axisLine not= undefined and axisLine:IsShowing()
                            Rectangle svgAxisLine
                
                            svgAxisLine:SetWidth(axisLine:GetWidth())
                            svgAxisLine:SetHeight(axisLine:GetHeight())
                            svgAxisLine:SetPosition(axisLine:GetGlobalX(), TranslatePositionY(axisLine) - axisLine:GetHeight())
                            svgAxisLine:SetFill(axisLine:GetColor())
                            xAxis = svgAxisLine

                            if HasAccessibility()
                                svgAxisLine:SetTabIndex(-1)
                                svgAxisLine:SetID(canvas:GetID() + "_" + axisLine:GetHashCode())
                                svgAxisLine:SetAriaHidden("true")
                            end

                            canvas:Add(svgAxisLine)
                        end
                        j = j + 1
                    end
                end
            end

            Array<HorizontalAxisPanel> subHorizontalPanels = chart:GetSubHorizontalPanels()
    
            i = 0
            repeat while i < subHorizontalPanels:GetSize()
                HorizontalAxisPanel currentSubHorizontalPanel = subHorizontalPanels:Get(i)

                Array<Drawable> axisLines = currentSubHorizontalPanel:GetAxisLines()
                j = 0
                repeat while j < axisLines:GetSize()
                    Drawable axisLine = axisLines:Get(j)
                    if axisLine not= undefined and axisLine:IsShowing()
                        Rectangle svgAxisLine
            
                        svgAxisLine:SetWidth(axisLine:GetWidth())
                        svgAxisLine:SetHeight(axisLine:GetHeight())
                        svgAxisLine:SetPosition(axisLine:GetGlobalX(), TranslatePositionY(axisLine) - axisLine:GetHeight())
                        svgAxisLine:SetFill(axisLine:GetColor())
                        svgAxisLine:SetFillOpacity(axisLine:GetColor())
                        subXAxes:Add(svgAxisLine)
                        if HasAccessibility()
                            svgAxisLine:SetTabIndex(-1)
                            svgAxisLine:SetID(canvas:GetID() + "_" + axisLine:GetHashCode())
                            svgAxisLine:SetAriaHidden("true")
                        end
                        canvas:Add(svgAxisLine)
                    end
                    j = j + 1
                end
        
                if currentSubHorizontalPanel not= undefined and currentSubHorizontalPanel:IsShowing()
                    //Background of sub panel
                    Rectangle svgSubHorizontalPanel
        
                    svgSubHorizontalPanel:SetWidth(currentSubHorizontalPanel:GetWidth())
                    svgSubHorizontalPanel:SetHeight(currentSubHorizontalPanel:GetHeight())
                    svgSubHorizontalPanel:SetPosition(currentSubHorizontalPanel:GetGlobalX(), TranslatePositionY(currentSubHorizontalPanel) - currentSubHorizontalPanel:GetHeight())
                    svgSubHorizontalPanel:SetFill(transparent)
                    svgSubHorizontalPanel:SetFillOpacity(transparent)
                    if HasAccessibility()
                        svgSubHorizontalPanel:SetTabIndex(-1)
                        svgSubHorizontalPanel:SetID(canvas:GetID() + "_" + currentSubHorizontalPanel:GetHashCode())
                        svgSubHorizontalPanel:SetStyleClass("quorum-chart-element")
                        svgSubHorizontalPanel:SetAriaLabel(currentSubHorizontalPanel:GetName() + currentSubHorizontalPanel:GetDescription())
                        svgSubHorizontalPanel:SetAriaHidden("true")
                    end
                    me:subHorizontalPanels:Add(svgSubHorizontalPanel)
                    canvas:Add(svgSubHorizontalPanel)
                end
                i = i + 1
            end

            ChartLabel xAxisTitle = chart:GetHorizontalPanel():GetTitleLabel()
            if xAxisTitle not= undefined and xAxisTitle:IsShowing()
                xAxisLabel:SetText(chart:GetXAxisTitle())
                xAxisLabel:SetTextAnchor("left")
                xAxisLabel:SetPosition(xAxisTitle:GetGlobalX(), TranslatePositionY(xAxisTitle))
                xAxisLabel:SetFontSize(xAxisTitle:GetFontSize() + "px")
                xAxisLabel:SetFontFamily("Arial")
                xAxisLabel:SetFill(cast(Color, xAxisTitle:GetFontColor()))
                xAxisLabel:SetFillOpacity(cast(Color, xAxisTitle:GetFontColor()))
                if HasAccessibility()
                    xAxisLabel:SetID(canvas:GetID() + "-" + xAxisLabel:GetHashCode())
                    xAxisLabel:SetStyleClass("quorum-chart-text")
                    xAxisLabel:SetTabIndex(-1)
                    xAxisLabel:SetAriaHidden("true")
                end
                canvas:Add(xAxisLabel)
            end
        end

        if chart:IsShowingYAxis()
            VerticalAxisPanel verticalAxisPanel = chart:GetVerticalPanel()

            if verticalAxisPanel not= undefined and verticalAxisPanel:IsShowing()
                verticalPanel:SetWidth(verticalAxisPanel:GetWidth())
                verticalPanel:SetHeight(verticalAxisPanel:GetHeight())
                verticalPanel:SetPosition(verticalAxisPanel:GetGlobalX(), TranslatePositionY(verticalAxisPanel) - verticalAxisPanel:GetHeight())
                verticalPanel:SetFill(transparent)
                verticalPanel:SetFillOpacity(transparent)
                if HasAccessibility()
                    verticalPanel:SetTabIndex(-1)
                    verticalPanel:SetID(canvas:GetID() + "_" + verticalAxisPanel:GetHashCode())
                    verticalPanel:SetStyleClass("quorum-chart-element quorum-chart-information-list")
                    verticalPanel:SetRole("graphics-object")
                    //verticalPanel:SetAriaLabel(verticalAxisPanel:GetName() + verticalAxisPanel:GetDescription())
                    Array<ChartLabel> yTextLabels = verticalAxisPanel:GetLabels()
                    if yTextLabels:GetSize() not= 0
                        verticalPanel:SetAriaLabel(verticalAxisPanel:GetName() + " shows " + verticalAxisPanel:GetTitleLabel():GetText() + " and ranges from " + yTextLabels:Get(0):GetText() +  " to " + yTextLabels:Get(yTextLabels:GetSize()-1):GetText())       
                    else
                        verticalPanel:SetAriaLabel(verticalAxisPanel:GetName() + " shows " + verticalAxisPanel:GetTitleLabel():GetText() + " and ranges from " + chart:GetYAxisMinimum() +  " to " + chart:GetYAxisMaximum())       
                    end
                    verticalPanel:SetAriaHidden("false")
                end
                //chartInformation:Add(verticalPanel)

                if not chart:IsSeparated()
                    Array<Drawable> axisLines = verticalAxisPanel:GetAxisLines()
                    j = 0
                    repeat while j < axisLines:GetSize()
                        Drawable axisLine = axisLines:Get(j)
                        if axisLine not= undefined and axisLine:IsShowing()
                            Rectangle svgAxisLine
                
                            svgAxisLine:SetWidth(axisLine:GetWidth())
                            svgAxisLine:SetHeight(axisLine:GetHeight())
                            svgAxisLine:SetPosition(axisLine:GetGlobalX(), TranslatePositionY(axisLine) - axisLine:GetHeight())
                            svgAxisLine:SetFill(axisLine:GetColor())
                            svgAxisLine:SetFillOpacity(axisLine:GetColor())
                            yAxis = svgAxisLine

                            if HasAccessibility()
                                svgAxisLine:SetTabIndex(-1)
                                svgAxisLine:SetID(canvas:GetID() + "_" + axisLine:GetHashCode())
                                svgAxisLine:SetAriaHidden("true")
                            end
                            canvas:Add(svgAxisLine)
                        end
                        j = j + 1
                    end
                end
            end

            Array<VerticalAxisPanel> subVerticalPanels = chart:GetSubVerticalPanels()
    
            i = 0
            repeat while i < subVerticalPanels:GetSize()
                VerticalAxisPanel currentSubVerticalPanel = subVerticalPanels:Get(i)

                Array<Drawable> axisLines = currentSubVerticalPanel:GetAxisLines()
                j = 0
                repeat while j < axisLines:GetSize()
                    Drawable axisLine = axisLines:Get(j)
                    if axisLine not= undefined and axisLine:IsShowing()
                        Rectangle svgAxisLine
            
                        svgAxisLine:SetWidth(axisLine:GetWidth())
                        svgAxisLine:SetHeight(axisLine:GetHeight())
                        svgAxisLine:SetPosition(axisLine:GetGlobalX(), TranslatePositionY(axisLine) - axisLine:GetHeight())
                        svgAxisLine:SetFill(axisLine:GetColor())
                        subYAxes:Add(svgAxisLine)
                        if HasAccessibility()
                            svgAxisLine:SetTabIndex(-1)
                            svgAxisLine:SetID(canvas:GetID() + "_" + axisLine:GetHashCode())
                            svgAxisLine:SetAriaHidden("true")
                        end
                        canvas:Add(svgAxisLine)
                    end
                    j = j + 1
                end
    
                if currentSubVerticalPanel not= undefined and currentSubVerticalPanel:IsShowing()
                    //Background of sub panel
                    Rectangle svgSubVerticalPanel
        
                    svgSubVerticalPanel:SetWidth(currentSubVerticalPanel:GetWidth())
                    svgSubVerticalPanel:SetHeight(currentSubVerticalPanel:GetHeight())
                    svgSubVerticalPanel:SetPosition(currentSubVerticalPanel:GetGlobalX(), TranslatePositionY(currentSubVerticalPanel) - currentSubVerticalPanel:GetHeight())
                    svgSubVerticalPanel:SetFill(transparent)
                    svgSubVerticalPanel:SetFillOpacity(transparent)
                    if HasAccessibility()
                        svgSubVerticalPanel:SetTabIndex(-1)
                        svgSubVerticalPanel:SetID(canvas:GetID() + "_" + currentSubVerticalPanel:GetHashCode())
                        svgSubVerticalPanel:SetStyleClass("quorum-chart-element")
                        svgSubVerticalPanel:SetAriaLabel(currentSubVerticalPanel:GetName() + currentSubVerticalPanel:GetDescription())
                        svgSubVerticalPanel:SetAriaHidden("true")
                    end
                    me:subVerticalPanels:Add(svgSubVerticalPanel)
                    canvas:Add(svgSubVerticalPanel)
                end
                i = i + 1
            end

            ChartLabel yAxisTitle = chart:GetVerticalPanel():GetTitleLabel()
            if yAxisTitle not= undefined and yAxisTitle:IsShowing()
                Item2D yAxisTitleAnchor = chart:GetVerticalPanel():GetTitleLabel():GetParent()
                yAxisLabel:SetText(chart:GetYAxisTitle())
                yAxisLabel:SetTextAnchor("left")
                yAxisLabel:SetPosition(yAxisTitleAnchor:GetGlobalX(), TranslatePositionY(yAxisTitleAnchor))
                yAxisLabel:SetTransform("rotate(" + yAxisTitleAnchor:GetRotation() + ", " + yAxisTitleAnchor:GetGlobalX() + ", " + TranslatePositionY(yAxisTitleAnchor) + ")")
                yAxisLabel:SetFontSize(yAxisTitle:GetFontSize() + "px")
                yAxisLabel:SetFontFamily("Arial")
                yAxisLabel:SetFill(cast(Color, yAxisTitle:GetFontColor()))
                if HasAccessibility()
                    yAxisLabel:SetID(canvas:GetID() + "_" + yAxisLabel:GetHashCode())
                    yAxisLabel:SetStyleClass("quorum-chart-text")
                    yAxisLabel:SetTabIndex(-1)
                    yAxisLabel:SetAriaHidden("true")
                end
                canvas:Add(yAxisLabel)
            end
        end
    end

    /*
        This action adds a chart title to the canvas
    */
    private action AddChartTitle(ScalableVectorGraphics canvas, Chart chart)
        if chart:GetTitleLabel() not= undefined
            chartTitle:SetText(chart:GetTitle())
            chartTitle:SetTextAnchor("left")
            chartTitle:SetPosition(chart:GetTitleLabel():GetGlobalX(), TranslatePositionY(chart:GetTitleLabel()))
            chartTitle:SetBold(true)
// - chart:GetTitleLabel():GetHeight()/2)
            chartTitle:SetFontSize(chart:GetTitleLabel():GetFontSize() + "px")
            
            chartTitle:SetFontFamily("Arial")
            chartTitle:SetFill(cast(Color, chart:GetTitleLabel():GetFontColor()))
            chartTitle:SetFillOpacity(cast(Color, chart:GetTitleLabel():GetFontColor()))
            if HasAccessibility()
                chartTitle:SetID(canvas:GetID() + "_" + chartTitle:GetHashCode())
                chartTitle:SetStyleClass("quorum-chart-text")
                chartTitle:SetTabIndex(-1)
                chartTitle:SetAriaHidden("true")
            end
            canvas:Add(chartTitle)
        end
    end

    /*
        This action adds a chart subtitle to the canvas
    */
    private action AddChartSubtitle(ScalableVectorGraphics canvas, Chart chart)
        if chart:GetSubtitleLabel() not= undefined
            chartSubtitle:SetText(chart:GetSubtitle())
            chartSubtitle:SetTextAnchor("left")
            chartSubtitle:SetPosition(chart:GetSubtitleLabel():GetGlobalX(), TranslatePositionY(chart:GetSubtitleLabel()))// - chart:GetSubtitleLabel():GetHeight()/2)
            chartSubtitle:SetFontSize(chart:GetSubtitleLabel():GetFontSize() + "px")
            chartSubtitle:SetFontFamily("Arial")
            chartSubtitle:SetFill(cast(Color, chart:GetSubtitleLabel():GetFontColor()))
            if HasAccessibility()
                chartSubtitle:SetID(canvas:GetID() + "_" + chartSubtitle:GetHashCode())
                chartSubtitle:SetTabIndex(-1)
                chartSubtitle:SetAriaHidden("true")
            end
            canvas:Add(chartSubtitle)
        end
    end

    /*
        This action adds a chart title for the subchart to the canvas
    */
    private action AddSubChartTitle(ScalableVectorGraphics canvas, ChartAreaPanel subChartArea)
        Label subChartTitle
        if subChartArea:GetLabel() not= undefined
            subChartTitle:SetText(subChartArea:GetLabel():GetText())
            subChartTitle:SetTextAnchor("left")
            subChartTitle:SetPosition(subChartArea:GetLabel():GetGlobalX(), TranslatePositionY(subChartArea:GetLabel()))// - chart:GetTitleLabel():GetHeight()/2)
            subChartTitle:SetFontSize(subChartArea:GetLabel():GetFontSize() + "px")
            subChartTitle:SetFontFamily("Arial")
            subChartTitle:SetFill(cast(Color, subChartArea:GetLabel():GetFontColor()))
            subChartTitle:SetFillOpacity(cast(Color, subChartArea:GetLabel():GetFontColor()))
            if HasAccessibility()
                subChartTitle:SetID(canvas:GetID() + "_" + subChartTitle:GetHashCode())
                subChartTitle:SetStyleClass("quorum-chart-text")
                subChartTitle:SetTabIndex(-1)
                subChartTitle:SetAriaHidden("true")
            end
            canvas:Add(subChartTitle)
        end
    end

    /*
        This action adds the elements used within the chart area (bars, lines, datapoints, etc). 

        Attribute: Parameter The chart that will be used to create an SVG
        Attribute: Parameter chart
    */
    blueprint action AddChartContent(ScalableVectorGraphics canvas, Chart chart)

    /*
        This action adds the patterns to be used on chart elements
    */
    action AddPatternDefinitions(ScalableVectorGraphics canvas, Chart chart)
        Pattern patternSVG
        patternSVG:SetCanvasSize(canvas:GetWidth(), canvas:GetHeight())
        Array<integer> palette
        i = 0
        repeat while i < chart:GetSeriesList():GetSize()
            palette:Add(chart:GetSeriesList():Get(i):GetPattern())
            i = i + 1
        end
        patternSVG:SetPatternPalette(palette)
        canvas:Add(patternSVG)
    end

    /*
        This action adds the labels on the x axis
    */
    action AddXLabels(ScalableVectorGraphics canvas, Chart chart)
        HorizontalAxisPanel horizontalContainer
        horizontalContainer = chart:GetHorizontalPanel()
        
        Array<HorizontalAxisPanel> subHorizontalPanels = chart:GetSubHorizontalPanels()
        Array<Drawable> ticks = horizontalContainer:GetTicks()
        Array<Drawable> brackets = horizontalContainer:GetBrackets()
        Array<Drawable> lines = horizontalContainer:GetMajorGridlines()
        Array<Drawable> minorlines = horizontalContainer:GetMinorGridlines()
        Array<ChartLabel> labels = horizontalContainer:GetLabels()

        i = 0
        repeat while i < ticks:GetSize()
            Drawable currentTick = ticks:Get(i)
            if currentTick:IsShowing()
                Rectangle svgElementTick

                svgElementTick:SetWidth(currentTick:GetWidth())
                svgElementTick:SetHeight(currentTick:GetHeight())
                svgElementTick:SetPosition(currentTick:GetGlobalX(), TranslatePositionY(currentTick) - currentTick:GetHeight())
                svgElementTick:SetFill(currentTick:GetColor())
                svgElementTick:SetFillOpacity(currentTick:GetColor())

                if HasAccessibility()
                    svgElementTick:SetTabIndex(-1)
                    svgElementTick:SetID(canvas:GetID() + "_" + svgElementTick:GetHashCode())
                    svgElementTick:SetAriaHidden("true")
                end

                canvas:Add(svgElementTick)
            end
            i = i + 1
        end

        i = 0
        repeat while i < brackets:GetSize()
            Drawable currentBracket = brackets:Get(i)
            if currentBracket:IsShowing()
                Rectangle svgElementBracket
                
                svgElementBracket:SetWidth(currentBracket:GetWidth())
                svgElementBracket:SetHeight(currentBracket:GetHeight())
                svgElementBracket:SetPosition(currentBracket:GetGlobalX(), TranslatePositionY(currentBracket) - currentBracket:GetHeight())
                svgElementBracket:SetFill(currentBracket:GetColor())

                if HasAccessibility()
                    svgElementBracket:SetTabIndex(-1)
                    svgElementBracket:SetID(canvas:GetID() + "_" + svgElementBracket:GetHashCode())
                    svgElementBracket:SetAriaHidden("true")
                end
                canvas:Add(svgElementBracket)
            end
            i = i + 1
        end


        i = 0
        repeat while i < lines:GetSize()
            Drawable currentLine = lines:Get(i)
            if currentLine:IsShowing()
                Rectangle svgElementLine
                
                svgElementLine:SetWidth(currentLine:GetWidth())
                svgElementLine:SetHeight(currentLine:GetHeight())
                svgElementLine:SetPosition(currentLine:GetGlobalX(), TranslatePositionY(currentLine) - currentLine:GetHeight())
                svgElementLine:SetFill(currentLine:GetColor())
                svgElementLine:SetFillOpacity(currentLine:GetColor())
                if HasAccessibility()
                    svgElementLine:SetTabIndex(-1)
                    svgElementLine:SetID(canvas:GetID() + "_" + svgElementLine:GetHashCode())
                    svgElementLine:SetAriaHidden("true")
                end
                canvas:Add(svgElementLine)
            end
            i = i + 1
        end


        i = 0
        repeat while i < minorlines:GetSize()
            Drawable currentMinorline = minorlines:Get(i)
            if currentMinorline:IsShowing()
                Rectangle svgElementMinorline

                svgElementMinorline:SetWidth(currentMinorline:GetWidth())
                svgElementMinorline:SetHeight(currentMinorline:GetHeight())
                svgElementMinorline:SetPosition(currentMinorline:GetGlobalX(), TranslatePositionY(currentMinorline) - currentMinorline:GetHeight())
                svgElementMinorline:SetFill(currentMinorline:GetColor())
                if HasAccessibility()
                    svgElementMinorline:SetTabIndex(-1)
                    svgElementMinorline:SetID(canvas:GetID() + "_" + svgElementMinorline:GetHashCode())
                    svgElementMinorline:SetAriaHidden("true")
                end
                canvas:Add(svgElementMinorline)
            end
            i = i + 1
        end

        i = 0
        repeat while i < labels:GetSize()
            ChartLabel currentLabel = labels:Get(i)
            if currentLabel:IsShowing()
                Item2D currentLabelAnchor = currentLabel:GetParent()
                Label svgLabel

                svgLabel:SetText(currentLabel:GetText())
                svgLabel:SetTextAnchor("left")
                svgLabel:SetPosition(currentLabelAnchor:GetGlobalX(), TranslatePositionY(currentLabelAnchor))     
                svgLabel:SetTransform("rotate(" + currentLabelAnchor:GetRotation() + ", " + currentLabelAnchor:GetGlobalX() + ", " + TranslatePositionY(currentLabelAnchor) + ")")   
                svgLabel:SetFontSize(currentLabel:GetFontSize() + "px")
                svgLabel:SetFontFamily("Arial")
                svgLabel:SetFill(cast(Color, currentLabel:GetFontColor()))
                svgLabel:SetFillOpacity(cast(Color, currentLabel:GetFontColor()))

                if HasAccessibility()
                    svgLabel:SetID(canvas:GetID() + "_" + svgLabel:GetHashCode())
                    svgLabel:SetStyleClass("quorum-chart-text")
                    svgLabel:SetTabIndex(-1)
                    svgLabel:SetAriaLabel(currentLabel:GetDescription())
                    svgLabel:SetAriaHidden("true")
                end
                
                canvas:Add(svgLabel)
                xLabels:Add(svgLabel)
            end
            i = i + 1
        end

        j = 0
        repeat while j < subHorizontalPanels:GetSize()
            HorizontalAxisPanel subHorizontalPanel = subHorizontalPanels:Get(j)
            Array<Drawable> subTicks = subHorizontalPanel:GetTicks()
            Array<Drawable> subBrackets = subHorizontalPanel:GetBrackets()
            Array<Drawable> subLines = subHorizontalPanel:GetMajorGridlines()
            Array<Drawable> subMinorlines = subHorizontalPanel:GetMinorGridlines()
            Array<ChartLabel> subLabels = subHorizontalPanel:GetLabels()
            
            Array<Label> subXLabels

            i = 0
            repeat while i < subTicks:GetSize()
                Drawable currentSubTick = subTicks:Get(i)
                if currentSubTick:IsShowing()
                    Rectangle svgElementTick
    
                    svgElementTick:SetWidth(currentSubTick:GetWidth())
                    svgElementTick:SetHeight(currentSubTick:GetHeight())
                    svgElementTick:SetPosition(currentSubTick:GetGlobalX(), TranslatePositionY(currentSubTick) - currentSubTick:GetHeight())
                    svgElementTick:SetFill(currentSubTick:GetColor())
    
                    if HasAccessibility()
                        svgElementTick:SetTabIndex(-1)
                        svgElementTick:SetID(canvas:GetID() + "_" + svgElementTick:GetHashCode())
                        svgElementTick:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementTick)
                end
                i = i + 1
            end
    
            i = 0
            repeat while i < subBrackets:GetSize()
                Drawable currentSubBracket = subBrackets:Get(i)
                if currentSubBracket:IsShowing()
                    Rectangle svgElementBracket
                    
                    svgElementBracket:SetWidth(currentSubBracket:GetWidth())
                    svgElementBracket:SetHeight(currentSubBracket:GetHeight())
                    svgElementBracket:SetPosition(currentSubBracket:GetGlobalX(), TranslatePositionY(currentSubBracket) - currentSubBracket:GetHeight())
                    svgElementBracket:SetFill(currentSubBracket:GetColor())
                    svgElementBracket:SetFillOpacity(currentSubBracket:GetColor())
    
                    if HasAccessibility()
                        svgElementBracket:SetTabIndex(-1)
                        svgElementBracket:SetID(canvas:GetID() + "_" + svgElementBracket:GetHashCode())
                        svgElementBracket:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementBracket)
                end
                i = i + 1
            end
    
    
            i = 0
            repeat while i < subLines:GetSize()
                Drawable currentSubLine = subLines:Get(i)
                if currentSubLine:IsShowing()
                    Rectangle svgElementLine
                    
                    svgElementLine:SetWidth(currentSubLine:GetWidth())
                    svgElementLine:SetHeight(currentSubLine:GetHeight())
                    svgElementLine:SetPosition(currentSubLine:GetGlobalX(), TranslatePositionY(currentSubLine) - currentSubLine:GetHeight())
                    svgElementLine:SetFill(currentSubLine:GetColor())
    
                    if HasAccessibility()
                        svgElementLine:SetTabIndex(-1)
                        svgElementLine:SetID(canvas:GetID() + "_" + svgElementLine:GetHashCode())
                        svgElementLine:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementLine)
                end
                i = i + 1
            end
    
    
            i = 0
            repeat while i < subMinorlines:GetSize()
                Drawable currentSubMinorline = subMinorlines:Get(i)
                if currentSubMinorline:IsShowing()
                    Rectangle svgElementMinorline
    
                    svgElementMinorline:SetWidth(currentSubMinorline:GetWidth())
                    svgElementMinorline:SetHeight(currentSubMinorline:GetHeight())
                    svgElementMinorline:SetPosition(currentSubMinorline:GetGlobalX(), TranslatePositionY(currentSubMinorline) - currentSubMinorline:GetHeight())
                    svgElementMinorline:SetFill(currentSubMinorline:GetColor())
                    svgElementMinorline:SetFillOpacity(currentSubMinorline:GetColor())
    
                    if HasAccessibility()
                        svgElementMinorline:SetTabIndex(-1)
                        svgElementMinorline:SetID(canvas:GetID() + "_" + svgElementMinorline:GetHashCode())
                        svgElementMinorline:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementMinorline)
                end
                i = i + 1
            end
    
            i = 0
            repeat while i < subLabels:GetSize()
                ChartLabel currentSubLabel = subLabels:Get(i)
                if currentSubLabel:IsShowing()
                    Item2D currentLabelAnchor = currentSubLabel:GetParent()
                    Label svgLabel
    
                    svgLabel:SetText(currentSubLabel:GetText())
                    svgLabel:SetTextAnchor("left")
                    svgLabel:SetPosition(currentLabelAnchor:GetGlobalX(), TranslatePositionY(currentLabelAnchor))     
                    svgLabel:SetTransform("rotate(" + currentLabelAnchor:GetRotation() + ", " + currentLabelAnchor:GetGlobalX() + ", " + TranslatePositionY(currentLabelAnchor) + ")")   
                    svgLabel:SetFontSize(currentSubLabel:GetFontSize() + "px")
                    svgLabel:SetFontFamily("Arial")
                    svgLabel:SetFill(cast(Color, currentSubLabel:GetFontColor()))
    
                    if HasAccessibility()
                        svgLabel:SetID(canvas:GetID() + "_" + svgLabel:GetHashCode())
                        svgLabel:SetStyleClass("quorum-chart-text")
                        svgLabel:SetTabIndex(-1)
                        svgLabel:SetAriaLabel(currentSubLabel:GetDescription())
                        svgLabel:SetAriaHidden("true")
                    end
                    
                    canvas:Add(svgLabel)
                    subXLabels:Add(svgLabel)
                end
                i = i + 1
            end
    
            me:subXLabels:Add(subXLabels)
            j = j + 1
        end

    end

    /*
        This action adds the labels on the y axis
    */
    action AddYLabels(ScalableVectorGraphics canvas, Chart chart)
        VerticalAxisPanel verticalContainer
        verticalContainer = chart:GetVerticalPanel()
        
        Array<VerticalAxisPanel> subVerticalPanels = chart:GetSubVerticalPanels()
        Array<Drawable> ticks = verticalContainer:GetTicks()
        Array<Drawable> brackets = verticalContainer:GetBrackets()
        Array<Drawable> lines = verticalContainer:GetMajorGridlines()
        Array<Drawable> minorlines = verticalContainer:GetMinorGridlines()
        Array<ChartLabel> labels = verticalContainer:GetLabels()

        i = 0
        repeat while i < ticks:GetSize()
            Drawable currentTick = ticks:Get(i)
            if currentTick:IsShowing()
                Rectangle svgElementTick

                svgElementTick:SetWidth(currentTick:GetWidth())
                svgElementTick:SetHeight(currentTick:GetHeight())
                svgElementTick:SetPosition(currentTick:GetGlobalX(), TranslatePositionY(currentTick) - currentTick:GetHeight())
                svgElementTick:SetFill(currentTick:GetColor())
                svgElementTick:SetFillOpacity(currentTick:GetColor())

                if HasAccessibility()
                    svgElementTick:SetTabIndex(-1)
                    svgElementTick:SetID(canvas:GetID() + "_" + svgElementTick:GetHashCode())
                    svgElementTick:SetAriaHidden("true")
                end

                canvas:Add(svgElementTick)
            end
            i = i + 1
        end

        i = 0
        repeat while i < brackets:GetSize()
            Drawable currentBracket = brackets:Get(i)
            if currentBracket:IsShowing()
                Rectangle svgElementBracket
                
                svgElementBracket:SetWidth(currentBracket:GetWidth())
                svgElementBracket:SetHeight(currentBracket:GetHeight())
                svgElementBracket:SetPosition(currentBracket:GetGlobalX(), TranslatePositionY(currentBracket) - currentBracket:GetHeight())
                svgElementBracket:SetFill(currentBracket:GetColor())

                if HasAccessibility()
                    svgElementBracket:SetTabIndex(-1)
                    svgElementBracket:SetID(canvas:GetID() + "_" + svgElementBracket:GetHashCode())
                    svgElementBracket:SetAriaHidden("true")
                end

                canvas:Add(svgElementBracket)
            end
            i = i + 1
        end


        i = 0
        repeat while i < lines:GetSize()
            Drawable currentLine = lines:Get(i)
            if currentLine:IsShowing()
                Rectangle svgElementLine
                
                svgElementLine:SetWidth(currentLine:GetWidth())
                svgElementLine:SetHeight(currentLine:GetHeight())
                svgElementLine:SetPosition(currentLine:GetGlobalX(), TranslatePositionY(currentLine) - currentLine:GetHeight())
                svgElementLine:SetFill(currentLine:GetColor())
                svgElementLine:SetFillOpacity(currentLine:GetColor())

                if HasAccessibility()
                    svgElementLine:SetTabIndex(-1)
                    svgElementLine:SetID(canvas:GetID() + "_" + svgElementLine:GetHashCode())
                    svgElementLine:SetAriaHidden("true")
                end

                canvas:Add(svgElementLine)
            end
            i = i + 1
        end


        i = 0
        repeat while i < minorlines:GetSize()
            Drawable currentMinorline = minorlines:Get(i)
            if currentMinorline:IsShowing()
                Rectangle svgElementMinorline
                
                svgElementMinorline:SetWidth(currentMinorline:GetWidth())
                svgElementMinorline:SetHeight(currentMinorline:GetHeight())
                svgElementMinorline:SetPosition(currentMinorline:GetGlobalX(), TranslatePositionY(currentMinorline) - currentMinorline:GetHeight())
                svgElementMinorline:SetFill(currentMinorline:GetColor())

                if HasAccessibility()
                    svgElementMinorline:SetTabIndex(-1)
                    svgElementMinorline:SetID(canvas:GetID() + "_" + svgElementMinorline:GetHashCode())
                    svgElementMinorline:SetAriaHidden("true")
                end

                canvas:Add(svgElementMinorline)
            end
            i = i + 1
        end


        i = 0
        repeat while i < labels:GetSize()
            ChartLabel currentLabel = labels:Get(i)
            if currentLabel:IsShowing()
                //Item2D currentLabelAnchor = currentLabel:GetParent()
                Label svgLabel

                svgLabel:SetText(currentLabel:GetText())
                svgLabel:SetTextAnchor("left")
                svgLabel:SetPosition(currentLabel:GetGlobalX(), TranslatePositionY(currentLabel))  
                svgLabel:SetFontSize(currentLabel:GetFontSize() + "px")
                svgLabel:SetFontFamily("Arial")
                svgLabel:SetFill(cast(Color, currentLabel:GetFontColor()))
                svgLabel:SetFillOpacity(cast(Color, currentLabel:GetFontColor()))
                
                if HasAccessibility()
                    svgLabel:SetID(canvas:GetID() + "_" + svgLabel:GetHashCode())
                    svgLabel:SetStyleClass("quorum-chart-text")
                    svgLabel:SetTabIndex(-1)
                    svgLabel:SetAriaLabel(currentLabel:GetDescription())
                    svgLabel:SetAriaHidden("true")
                end

                canvas:Add(svgLabel)
                yLabels:Add(svgLabel)
            end
            i = i + 1
        end

        j = 0
        repeat while j < subVerticalPanels:GetSize()
            VerticalAxisPanel subVerticalPanel = subVerticalPanels:Get(j)
            Array<Drawable> subTicks = subVerticalPanel:GetTicks()
            Array<Drawable> subBrackets = subVerticalPanel:GetBrackets()
            Array<Drawable> subLines = subVerticalPanel:GetMajorGridlines()
            Array<Drawable> subMinorlines = subVerticalPanel:GetMinorGridlines()
            Array<ChartLabel> subLabels = subVerticalPanel:GetLabels()
    
            Array<Label> subYLabels

            i = 0
            repeat while i < subTicks:GetSize()
                Drawable currentSubTick = subTicks:Get(i)
                if currentSubTick:IsShowing()
                    Rectangle svgElementTick
    
                    svgElementTick:SetWidth(currentSubTick:GetWidth())
                    svgElementTick:SetHeight(currentSubTick:GetHeight())
                    svgElementTick:SetPosition(currentSubTick:GetGlobalX(), TranslatePositionY(currentSubTick) - currentSubTick:GetHeight())
                    svgElementTick:SetFill(currentSubTick:GetColor())
    
                    if HasAccessibility()
                        svgElementTick:SetTabIndex(-1)
                        svgElementTick:SetID(canvas:GetID() + "_" + svgElementTick:GetHashCode())
                        svgElementTick:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementTick)
                end
                i = i + 1
            end
    
            i = 0
            repeat while i < subBrackets:GetSize()
                Drawable currentSubBracket = subBrackets:Get(i)
                if currentSubBracket:IsShowing()
                    Rectangle svgElementBracket
                    
                    svgElementBracket:SetWidth(currentSubBracket:GetWidth())
                    svgElementBracket:SetHeight(currentSubBracket:GetHeight())
                    svgElementBracket:SetPosition(currentSubBracket:GetGlobalX(), TranslatePositionY(currentSubBracket) - currentSubBracket:GetHeight())
                    svgElementBracket:SetFill(currentSubBracket:GetColor())
                    svgElementBracket:SetFillOpacity(currentSubBracket:GetColor())
    
                    if HasAccessibility()
                        svgElementBracket:SetTabIndex(-1)
                        svgElementBracket:SetID(canvas:GetID() + "_" + svgElementBracket:GetHashCode())
                        svgElementBracket:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementBracket)
                end
                i = i + 1
            end
    
    
            i = 0
            repeat while i < subLines:GetSize()
                Drawable currentSubLine = subLines:Get(i)
                if currentSubLine:IsShowing()
                    Rectangle svgElementLine
                    
                    svgElementLine:SetWidth(currentSubLine:GetWidth())
                    svgElementLine:SetHeight(currentSubLine:GetHeight())
                    svgElementLine:SetPosition(currentSubLine:GetGlobalX(), TranslatePositionY(currentSubLine) - currentSubLine:GetHeight())
                    svgElementLine:SetFill(currentSubLine:GetColor())
    
                    if HasAccessibility()
                        svgElementLine:SetTabIndex(-1)
                        svgElementLine:SetID(canvas:GetID() + "_" + svgElementLine:GetHashCode())
                        svgElementLine:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementLine)
                end
                i = i + 1
            end
    
    
            i = 0
            repeat while i < subMinorlines:GetSize()
                Drawable currentSubMinorline = subMinorlines:Get(i)
                if currentSubMinorline:IsShowing()
                    Rectangle svgElementMinorline
    
                    svgElementMinorline:SetWidth(currentSubMinorline:GetWidth())
                    svgElementMinorline:SetHeight(currentSubMinorline:GetHeight())
                    svgElementMinorline:SetPosition(currentSubMinorline:GetGlobalX(), TranslatePositionY(currentSubMinorline) - currentSubMinorline:GetHeight())
                    svgElementMinorline:SetFill(currentSubMinorline:GetColor())
                    svgElementMinorline:SetFillOpacity(currentSubMinorline:GetColor())
    
                    if HasAccessibility()
                        svgElementMinorline:SetTabIndex(-1)
                        svgElementMinorline:SetID(canvas:GetID() + "_" + svgElementMinorline:GetHashCode())
                        svgElementMinorline:SetAriaHidden("true")
                    end

                    canvas:Add(svgElementMinorline)
                end
                i = i + 1
            end
    
            i = 0
            repeat while i < subLabels:GetSize()
                ChartLabel currentSubLabel = subLabels:Get(i)
                if currentSubLabel:IsShowing()
                    //Item2D currentLabelAnchor = currentSubLabel:GetParent()
                    Label svgLabel
    
                    svgLabel:SetText(currentSubLabel:GetText())
                    svgLabel:SetTextAnchor("left")
                    svgLabel:SetPosition(currentSubLabel:GetGlobalX(), TranslatePositionY(currentSubLabel))  
                    //svgLabel:SetPosition(currentLabelAnchor:GetGlobalX(), TranslatePositionY(currentLabelAnchor))     
                    //svgLabel:SetTransform("rotate(" + currentLabelAnchor:GetRotation() + ", " + currentLabelAnchor:GetGlobalX() + ", " + TranslatePositionY(currentLabelAnchor) + ")")   
                    svgLabel:SetFontSize(currentSubLabel:GetFontSize() + "px")
                    svgLabel:SetFontFamily("Arial")
                    svgLabel:SetFill(cast(Color, currentSubLabel:GetFontColor()))
    
                    if HasAccessibility()
                        svgLabel:SetID(canvas:GetID() + "_" + svgLabel:GetHashCode())
                        svgLabel:SetStyleClass("quorum-chart-text")
                        svgLabel:SetTabIndex(-1)
                        svgLabel:SetAriaLabel(currentSubLabel:GetDescription())
                        svgLabel:SetAriaHidden("true")
                    end
                    
                    canvas:Add(svgLabel)
                    subYLabels:Add(svgLabel)
                end
                i = i + 1
            end
    
            me:subYLabels:Add(subYLabels)
            j = j + 1
        end
    end

    
    /*
        This action adds the labels on the y axis
    */
    action AddLegend(ScalableVectorGraphics canvas, Chart chart)
        Color transparent
        transparent:SetColor(0,0,0,0)

        Legend legend = chart:GetLegend()
        text svgElementSeries = ""
        Rectangle svgElementLegend
        
        svgElementLegend:SetWidth(legend:GetWidth())
        svgElementLegend:SetHeight(legend:GetHeight())
        svgElementLegend:SetPosition(legend:GetGlobalX(), TranslatePositionY(legend) - legend:GetHeight())
        svgElementLegend:SetFill(transparent)
        svgElementLegend:SetFillOpacity(transparent)

        if HasAccessibility()
            svgElementLegend:SetTabIndex(-1)
            svgElementLegend:SetID(canvas:GetID() + "_" + legend:GetHashCode())
            svgElementLegend:SetStyleClass("quorum-chart-element quorum-chart-information-list")
            svgElementLegend:SetRole("graphics-object")
            //svgElementLegend:SetAriaLabel(legend:GetName() + legend:GetDescription() + " " + chart:GetLegendTitle())
            svgElementLegend:SetAriaHidden("false")
        end
        legendPanel = svgElementLegend
        //chartInformation:Add(svgElementLegend)

        ChartLabel legendTitle = legend:GetTitleLabel()
        if legendTitle not= undefined and legendTitle:IsShowing()
            Label svgElementLegendTitle

            svgElementLegendTitle:SetText(legendTitle:GetText())
            svgElementLegendTitle:SetTextAnchor("left")
            svgElementLegendTitle:SetPosition(legendTitle:GetGlobalX(), TranslatePositionY(legendTitle))    
            svgElementLegendTitle:SetFontSize(legendTitle:GetFontSize() + "px")
            svgElementLegendTitle:SetFontFamily("Arial")
            svgElementLegendTitle:SetFill(cast(Color, legendTitle:GetFontColor()))
            
            if HasAccessibility()
                svgElementLegendTitle:SetID(canvas:GetID() + "_" + legendTitle:GetHashCode())
                svgElementLegendTitle:SetStyleClass("quorum-chart-text")
                svgElementLegendTitle:SetTabIndex(-1)
                svgElementLegendTitle:SetAriaLabel(legendTitle:GetDescription())
                svgElementLegendTitle:SetAriaHidden("true")
            end

            canvas:Add(svgElementLegendTitle)
        end

        integer i = 0
        Array<Series> seriesList = legend:GetSeriesList()
        repeat while i < seriesList:GetSize()
            Icon entryBox = seriesList:Get(i):GetEntryBox()

            Group entryGroupSVG
            if entryBox not= undefined and entryBox:IsShowing()
                
                entryGroupSVG:SetFill(cast(Color, chart:GetSelectionColor())) //This color will be used to fill selection upon focus/hover
                entryGroupSVG:SetFillOpacity(cast(Color, chart:GetSelectionColor()))
                if HasAccessibility()
                    entryGroupSVG:SetID(canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_legend")
                    entryGroupSVG:SetStyleClass("quorum-chart-legendentry")
                    entryGroupSVG:SetTabIndex(-1)
                    entryGroupSVG:SetAriaLabel(seriesList:Get(i):GetName() + seriesList:Get(i):GetDescription())
                    entryGroupSVG:SetAriaHidden("true")
                    if i = 0
                        svgElementSeries = svgElementSeries + " " + seriesList:Get(i):GetName()
                    elseif i = seriesList:GetSize() - 1
                        svgElementSeries = svgElementSeries + ", and " + seriesList:Get(i):GetName()
                    else
                        svgElementSeries = svgElementSeries + ", " + seriesList:Get(i):GetName()
                    end
                end
                canvas:Add(entryGroupSVG)

                Rectangle svgElementSeriesEntry                
                svgElementSeriesEntry:SetWidth(entryBox:GetWidth())
                svgElementSeriesEntry:SetHeight(entryBox:GetHeight())
                svgElementSeriesEntry:SetPosition(entryBox:GetGlobalX(), TranslatePositionY(entryBox) - entryBox:GetHeight())
//                svgElementSeriesEntry:SetFill(entryBox:GetColor())
                svgElementSeriesEntry:SetFill(transparent)
                svgElementSeriesEntry:SetFillOpacity(transparent)
                
                if HasAccessibility()
                    svgElementSeriesEntry:SetTabIndex(-1)
                    svgElementSeriesEntry:SetID(canvas:GetID() + "-" + seriesList:Get(i):GetHashCode())
                    svgElementSeriesEntry:SetStyleClass("quorum-chart-selection-outline")
                    svgElementSeriesEntry:SetAriaHidden("true")
                end

                entryGroupSVG:Add(svgElementSeriesEntry)
            end

            Icon currentSeriesIcon = seriesList:Get(i):GetEntryIcon()
            if currentSeriesIcon not= undefined and currentSeriesIcon:IsShowing()
                Rectangle svgElementSeriesIcon
                
                svgElementSeriesIcon:SetWidth(currentSeriesIcon:GetWidth())
                svgElementSeriesIcon:SetHeight(currentSeriesIcon:GetHeight())
                svgElementSeriesIcon:SetPosition(currentSeriesIcon:GetGlobalX(), TranslatePositionY(currentSeriesIcon) - currentSeriesIcon:GetHeight())
                svgElementSeriesIcon:SetFill(currentSeriesIcon:GetColor())

                if seriesList:Get(i):HasPattern()
                    Rectangle seriesPattern
                    seriesPattern:SetWidth(currentSeriesIcon:GetWidth())
                    seriesPattern:SetHeight(currentSeriesIcon:GetHeight())
                    seriesPattern:SetPosition(currentSeriesIcon:GetGlobalX(), TranslatePositionY(currentSeriesIcon) - currentSeriesIcon:GetHeight()) 
                    text patternID = "pattern"+seriesList:Get(i):GetPattern() 
                    seriesPattern:SetFill("url(#"+patternID+")")    
                    canvas:Add(seriesPattern)  
                end    

                if currentSeriesIcon:GetBorderThickness() > 0
                    svgElementSeriesIcon:SetStroke(cast(Color, currentSeriesIcon:GetBorderColor()))
                    svgElementSeriesIcon:SetStrokeOpacity(cast(Color, currentSeriesIcon:GetBorderColor()))
                    svgElementSeriesIcon:SetStrokeWidth(currentSeriesIcon:GetBorderThickness())
                end

                if HasAccessibility()
                    svgElementSeriesIcon:SetTabIndex(-1)
                    svgElementSeriesIcon:SetID(canvas:GetID() + "_" + currentSeriesIcon:GetHashCode())
                    svgElementSeriesIcon:SetStyleClass("quorum-chart-rect")
                    svgElementSeriesIcon:SetAriaHidden("true")
                end

                entryGroupSVG:Add(svgElementSeriesIcon)
            end

            ChartLabel currentSeriesLabel = seriesList:Get(i):GetLabel()
            if currentSeriesLabel not= undefined and currentSeriesLabel:IsShowing()
                Label svgElementSeriesLabel
    
                svgElementSeriesLabel:SetText(currentSeriesLabel:GetText())
                svgElementSeriesLabel:SetTextAnchor("left")
                svgElementSeriesLabel:SetPosition(currentSeriesLabel:GetGlobalX(), TranslatePositionY(currentSeriesLabel))    
                svgElementSeriesLabel:SetFontSize(currentSeriesLabel:GetFontSize() + "px")
                svgElementSeriesLabel:SetFill(cast(Color, currentSeriesLabel:GetFontColor()))
                svgElementSeriesLabel:SetFillOpacity(cast(Color, currentSeriesLabel:GetFontColor()))
                svgElementSeriesLabel:SetFontFamily("Arial")
                
                if HasAccessibility()
                    svgElementSeriesLabel:SetID(canvas:GetID() + "_" + currentSeriesLabel:GetHashCode())
                    svgElementSeriesLabel:SetStyleClass("quorum-chart-text")
                    svgElementSeriesLabel:SetTabIndex(-1)
                    svgElementSeriesLabel:SetAriaLabel(currentSeriesLabel:GetDescription())
                    svgElementSeriesLabel:SetAriaHidden("true")
                end
                entryGroupSVG:Add(svgElementSeriesLabel)
            end

            if legend:IsShowingRegression()
                if seriesList:Get(i):GetRegressionLine() not= undefined
                    Icon currentIcon = seriesList:Get(i):GetRegressionLine():GetRegressionIcon()
                    Rectangle svgElementRegIcon
                    
                    svgElementRegIcon:SetWidth(currentIcon:GetWidth())
                    svgElementRegIcon:SetHeight(currentIcon:GetHeight())
                    svgElementRegIcon:SetPosition(currentIcon:GetGlobalX(), TranslatePositionY(currentIcon) - currentIcon:GetHeight())
                    svgElementRegIcon:SetFill(currentIcon:GetColor())

                    if HasAccessibility()
                        svgElementRegIcon:SetTabIndex(-1)
                        svgElementRegIcon:SetID(canvas:GetID() + "_" + currentIcon:GetHashCode())
                        svgElementRegIcon:SetStyleClass("quorum-chart-rect")
                        svgElementRegIcon:SetAriaHidden("true")
                    end

                    entryGroupSVG:Add(svgElementRegIcon)

                    //Regression equation
                    ChartLabel currentLabel = seriesList:Get(i):GetRegressionLine():GetEquationLabel()
                    Label svgElementRegLabel

                    svgElementRegLabel:SetText(currentLabel:GetText())
                    svgElementRegLabel:SetTextAnchor("left")
                    svgElementRegLabel:SetPosition(currentLabel:GetGlobalX(), TranslatePositionY(currentLabel))
                    svgElementRegLabel:SetFontSize(currentLabel:GetFontSize() + "px")
                    svgElementRegLabel:SetFontFamily("Arial")
                    svgElementRegLabel:SetFill(cast(Color, currentLabel:GetFontColor()))
                    svgElementRegLabel:SetFillOpacity(cast(Color, currentLabel:GetFontColor()))
                    if HasAccessibility()
                        svgElementRegLabel:SetTabIndex(-1)
                        svgElementRegLabel:SetID(canvas:GetID() + "_" + currentLabel:GetHashCode())
                        svgElementRegLabel:SetStyleClass("quorum-chart-text")
                        svgElementRegLabel:SetAriaLabel(currentLabel:GetDescription())
                        svgElementRegLabel:SetAriaHidden("true")
                    end
                    entryGroupSVG:Add(svgElementRegLabel)

                    //R^2 equation
                    ChartLabel currentRLabel = seriesList:Get(i):GetRegressionLine():GetRSquaredLabel()
                    Label svgElementRLabel

                    svgElementRLabel:SetText(currentRLabel:GetText())
                    svgElementRLabel:SetTextAnchor("left")
                    svgElementRLabel:SetPosition(currentRLabel:GetGlobalX(), TranslatePositionY(currentRLabel))
                    svgElementRLabel:SetFontSize(currentRLabel:GetFontSize() + "px")
                    svgElementRLabel:SetFontFamily("Arial")
                    svgElementRLabel:SetFill(cast(Color, currentRLabel:GetFontColor()))
                    svgElementRLabel:SetFillOpacity(cast(Color, currentRLabel:GetFontColor()))
                    if HasAccessibility()
                        svgElementRLabel:SetTabIndex(-1)
                        svgElementRLabel:SetID(canvas:GetID() + "_" + currentRLabel:GetHashCode())
                        svgElementRLabel:SetStyleClass("quorum-chart-text")
                        svgElementRLabel:SetAriaLabel(currentRLabel:GetDescription())
                        svgElementRLabel:SetAriaHidden("true")
                    end
                    entryGroupSVG:Add(svgElementRLabel)
                    entryGroupSVG:SetAriaLabel(entryGroupSVG:GetAriaLabel() + ", " + svgElementRegLabel:GetText() + " " + svgElementRLabel:GetText())
                end
            end
            i = i + 1
        end
        // Generate the svgElementLegend after traversing the series list to get the full list
        if HasAccessibility()
           if legendTitle:GetDescription() not= ""
                svgElementLegend:SetAriaLabel(legend:GetName() + " shows " + legendTitle:GetDescription() + " and has values" + svgElementSeries)
            else
                svgElementLegend:SetAriaLabel(legend:GetName() + " has values" + svgElementSeries)
           end
        end
    end

    /*
        Generates the treeview of treeitems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    private action AddAccessibility(ScalableVectorGraphics canvas, Chart chart) returns Division
        //Region Wrapper
        Division divRegion
        divRegion:SetClassAttribute("quorum-wrapper")
        //divRegion:SetStyle("")
        divRegion:AddAttribute("role","region")

        //Wrapper for SVG to help with scaling size
        Division svgWrapper
        svgWrapper:SetTabIndex("-1")
        svgWrapper:SetStyle("user-select: none;")
        divRegion:AddNestedTag(svgWrapper)
        AddOrderingList(canvas, chart)
        svgWrapper:AddText(canvas:ToText())

        return divRegion
    end

    action AddOrderingList(ScalableVectorGraphics canvas, Chart chart)
        Script script
        canvas:Add(script)
    end

    action AddRegressionLines(ScalableVectorGraphics canvas, Chart chart)
        integer i = 0
        repeat while i < chart:GetSeriesList():GetSize()
            RegressionLine line = chart:GetSeriesList():Get(i):GetRegressionLine()
            if line not= undefined
                text x1 = NumberToText(line:GetX1())
                text y1 = NumberToText(line:GetY1())
                text x2 = NumberToText(line:GetX2())
                text y2 = NumberToText(line:GetY2())
                text pointsText = "(" + x1 + ", " + y1 + ") to (" + x2 + ", " + y2 + ")"

                Line svgElementRegLine
                Vector2 startPoint = line:GetPixelStartPosition()
                Vector2 endPoint = line:GetPixelEndPosition()

                svgElementRegLine:SetFirstPoint(startPoint:GetX() + line:GetGlobalX(), svgHeight - (startPoint:GetY() + line:GetGlobalY()))
                svgElementRegLine:SetSecondPoint(endPoint:GetX() + line:GetGlobalX(), svgHeight - (endPoint:GetY() + line:GetGlobalY()))
                svgElementRegLine:SetStroke(line:GetColor())

                svgElementRegLine:SetStrokeOpacity(line:GetColor())
                svgElementRegLine:SetStrokeWidth(line:GetLineThickness())

                text seriesName = chart:GetSeriesList():Get(i):GetName()
                svgElementRegLine:SetTitle(seriesName + ", regression line from " + pointsText + ". Regression Equation: " + line:GetEquationLabel():GetText())

                if HasAccessibility()
                    svgElementRegLine:SetTabIndex(-1)
                    svgElementRegLine:SetID(canvas:GetID() + "_" + chart:GetSeriesList():Get(i):GetHashCode() + "_regression")
                    svgElementRegLine:SetStyleClass("quorum-chart-linesegment")
                    svgElementRegLine:SetAriaHidden("true")
                end

                canvas:Add(svgElementRegLine)
            end
            i = i + 1
        end
    end

    action TranslatePositionY(Item2D item) returns integer
        return cast(integer, svgHeight - item:GetGlobalY())
    end

    action UniversalUniqueIdentifier() returns text
        Random random
        DateTime datetime
        text uuid = ""

        random:SetSeed(datetime:GetSecond())
        integer randomizedInteger = random:RandomInteger()

        uuid = "" + datetime:GetMonth() + datetime:GetDayOfMonth() + datetime:GetYear() + datetime:GetHour() + datetime:GetMinute() + datetime:GetSecond() + randomizedInteger

        return uuid
    end

    private action NumberToText(number value) returns text
        if value = cast(integer, value)
            return "" + cast(integer, value)
        else
            Math math
            return "" + math:Round(value, 2)
        end
    end

end