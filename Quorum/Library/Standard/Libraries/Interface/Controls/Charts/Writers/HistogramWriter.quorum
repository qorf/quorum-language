package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.Interface.Controls.Charts.Histogram
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.Group
use Libraries.Data.Formats.ScalableVectorGraphics.Polygon
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Game.Graphics.Color
use Libraries.Web.Page.Script
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.ListItem
use Libraries.Interface.Item
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Charts.Graphics.BarGroup
use Libraries.Interface.Controls.Charts.Graphics.Bar
use Libraries.Data.Formats.ScalableVectorGraphics.Path
use Libraries.Web.Page.Division

/*
    The HistogramWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Gabriel Contreras

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.Histogram
    use Libraries.Interface.Controls.Charts.HistogramWriter
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    Histogram chart = frame:Histogram()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    HistogramWriter writer
    output writer:WriteOutChart(chart)
*/

class HistogramWriter is ChartWriter

    private number outerEdgePadding = 0
    private number betweenGroupPadding = 0
    private number betweenBarPadding = 0
    private number barWidthPercent = 0
    private number barHeightPercent = 0
    
//    Array<Rectangle> bars

    action WriteOutChart(Histogram chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(Histogram chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(Histogram chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(Histogram chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end

    action WriteOutHTML(Histogram chart, File file)
        WriteOutHTML(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)
        
        Histogram histogram
        histogram = cast(Histogram, chart)

        if HasAccessibility()
            canvas:SetRole("application")
            GetChartArea():SetAriaLabel(chart:GetChartArea():GetName() + " " + chart:GetChartArea():GetDescription())
        end
    end

    /*
        This action adds the content of the Histogram
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        Histogram histogram
        histogram = cast(Histogram, chart)
        AddBars(canvas, histogram)
        AddTrendLine(canvas, histogram)
    end

    /*
        This action adds the content of the Histogram to the SVG
    */

    private action AddBars(ScalableVectorGraphics canvas, Histogram chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        Script script
        text scriptText = ""
        text newLine = scriptText:GetLineFeed()

        Group chartContent
        chartContent:SetSize(GetChartArea():GetWidth(),GetChartArea():GetHeight())
        chartContent:SetPosition(GetChartArea():GetPositionX(),GetChartArea():GetPositionY())
        GetChartInformation():Add(chartContent)

        Rectangle chartContentBoundingBox
        chartContentBoundingBox:SetSize(GetChartArea():GetWidth(), GetChartArea():GetHeight())
        chartContentBoundingBox:SetPosition(GetChartArea():GetPositionX(), GetChartArea():GetPositionY())
        chartContentBoundingBox:SetFill(transparent)
        chartContentBoundingBox:SetFillOpacity(transparent)
        chartContentBoundingBox:SetStroke(transparent)
        chartContentBoundingBox:SetStrokeOpacity(transparent)
        if HasAccessibility()
            chartContent:SetTabIndex(0)
            chartContent:SetIsOneLine(true)
            chartContent:SetRole("graphics-object")  
            chartContent:SetStyleClass("quorum-chart-element quorum-chart-area quorum-chart-information-list")
            chartContent:SetID(canvas:GetID() + "_" + GetChartArea():GetHashCode())
            chartContentBoundingBox:SetID(chartContent:GetID() + "_boundingbox")
            chartContentBoundingBox:SetTabIndex(-1)
            chartContentBoundingBox:SetAriaHidden("true")
            if chart:IsShowingTitle()
                chartContent:SetAriaLabel(chart:GetTitle() + " " + chart:GetDescription())
            else
                chartContent:SetAriaLabel(chart:GetName() + " " + chart:GetDescription())
            end
            chartContent:SetAriaHidden("false")     
        end

        chartContent:Add(chartContentBoundingBox)

        if chart:IsShowingLinearRegression()
            AddRegressionLines(canvas, chart)
        end

        if not chart:IsSeparated()
            
            i = 0
            repeat while i < chart:GetBarGroups():GetSize()
                BarGroup currentBarGroup = chart:GetBarGroups():Get(i)
    
                Group barGroupSVG
                if chart:HasGroups()
                    barGroupSVG:SetFill(cast(Color, chart:GetSelectionColor()))
                    barGroupSVG:SetFillOpacity(cast(Color, chart:GetSelectionColor()))
                    if HasAccessibility()
                        barGroupSVG:SetTabIndex(-1)
                        barGroupSVG:SetID(canvas:GetID() + "_" + currentBarGroup:GetHashCode())
                        barGroupSVG:SetStyleClass("quorum-chart-bargroup quorum-chart-category-list")
                        barGroupSVG:SetRole("graphics-object")  
                        barGroupSVG:SetAriaLabel(currentBarGroup:GetName() + currentBarGroup:GetDescription())
                        barGroupSVG:SetAriaHidden("false")
                    end

                    chartContent:Add(barGroupSVG)
                    
                    text barGroupFocus = ""
                    text barGroupBlur = ""

                    // The group area, used for hover 
                    Rectangle barGroup
                    barGroup:SetWidth(currentBarGroup:GetWidth())
                    barGroup:SetHeight(currentBarGroup:GetHeight())
                    barGroup:SetPosition(currentBarGroup:GetGlobalX(), TranslatePositionY(currentBarGroup) - currentBarGroup:GetHeight()) 
                    barGroup:SetFill(transparent)
                    barGroup:SetFillOpacity(transparent)
                    if HasAccessibility()
                        barGroup:SetStyleClass("quorum-chart-rect")
                        barGroup:SetTabIndex(-1)
                        barGroup:SetAriaHidden("true")
                    end
                    barGroupSVG:Add(barGroup)
    
//                    if currentBarGroup:GetSelectionBracket():GetSize() = 3
//                        integer k = 0
//                        repeat while k < currentBarGroup:GetSelectionBracket():GetSize()
//                            Rectangle bracket
//                            bracket:SetWidth(currentBarGroup:GetSelectionBracket():Get(k):GetWidth())
//                            bracket:SetHeight(currentBarGroup:GetSelectionBracket():Get(k):GetHeight())
//                            bracket:SetPosition(currentBarGroup:GetSelectionBracket():Get(k):GetGlobalX(), TranslatePositionY(currentBarGroup:GetSelectionBracket():Get(k)) - currentBarGroup:GetSelectionBracket():Get(k):GetHeight()) 
//                            bracket:SetFill(transparent) // Should be transparent until selected
//                            bracket:SetFillOpacity(transparent)
//                            if HasAccessibility()
//                                bracket:SetStyleClass("quorum-chart-selection-bracket")
//                                bracket:SetTabIndex(-1)
//                                bracket:SetID(barGroupSVG:GetID() + "_bracket" + k)
//                                bracket:SetAriaHidden("true")
//                                barGroupFocus = barGroupFocus + "gainFocus('" + bracket:GetID() + "'); "
//                                barGroupBlur = barGroupBlur + "loseFocus('" + bracket:GetID() + "'); "
//                            end
//                            canvas:Add(bracket)    
//                            k = k + 1
//                        end
//                    end

//                    if currentBarGroup:GetSelectionArrow() not= undefined
//                        Array <number> vertices = currentBarGroup:GetSelectionArrowVertices()
//                        number Yoffset = TranslatePositionY(currentBarGroup:GetSelectionArrow())
//                        number Xoffset = currentBarGroup:GetSelectionArrow():GetGlobalX()
//                        
//                        Polygon arrow
//                        integer k = 0
//                        repeat while k < vertices:GetSize()
//                            arrow:AddPoint(vertices:Get(k)+Xoffset, Yoffset+(currentBarGroup:GetSelectionArrow():GetY()-vertices:Get(k+1)))
//                            k = k + 2
//                        end
//                        arrow:SetFill(transparent) // Should be transparent until selected
//                        arrow:SetFillOpacity(transparent)
//                        if HasAccessibility()
//                            arrow:SetStyleClass("quorum-chart-selection-arrow")
//                            arrow:SetID(barGroupSVG:GetID() + "_arrow")
//                            arrow:SetTabIndex(-1)
//                            arrow:SetAriaHidden("true")
//                            barGroupFocus = barGroupFocus + "gainFocus('" + arrow:GetID() + "'); "
//                            barGroupBlur = barGroupBlur + "loseFocus('" + arrow:GetID() + "'); "
//                        end
//                        canvas:Add(arrow)
//                    end
                    
                    if HasAccessibility()
                        if barGroupFocus not= ""
                            scriptText = scriptText + "document.getElementById('" + barGroupSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + barGroupFocus + "});" + newLine
                        end
                        if barGroupBlur not= ""
                            scriptText = scriptText + "document.getElementById('" + barGroupSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + barGroupBlur+ "});" + newLine
                        end
                    end
                end
                
                j = 0
                repeat while j < currentBarGroup:GetSize()
                    Bar currentBar = currentBarGroup:Get(j)
    
                    Group barSVG
                    barSVG:SetFill(currentBar:GetColor())
                    barSVG:SetFillOpacity(currentBar:GetColor())
                    if HasAccessibility()  
                        barSVG:SetID(canvas:GetID() + "_" + currentBar:GetSeries():GetHashCode() + "_" + currentBar:GetHashCode())
                        barSVG:SetStyleClass("quorum-chart-bar quorum-chart-bar-list")
                        barSVG:SetTabIndex(-1) 
                        barSVG:SetRole("graphics-symbol")  
                        barSVG:SetAriaLabel(currentBar:GetName() + currentBar:GetDescription())
                        barSVG:SetAriaHidden("false")
                    end
                    if chart:HasGroups()
                        barGroupSVG:Add(barSVG)
                    else
                        chartContent:Add(barSVG)
                    end

                    text barFocus = ""
                    text barBlur = ""

                    Rectangle bar
                    bar:SetWidth(currentBar:GetWidth())
                    bar:SetHeight(currentBar:GetHeight())
                    bar:SetPosition(currentBar:GetGlobalX(), TranslatePositionY(currentBar) - currentBar:GetHeight()) 
                    bar:SetFill(currentBar:GetColor())
                    bar:SetFillOpacity(currentBar:GetColor())
                    bar:SetStroke(cast(Color, currentBar:GetBorderColor()))
                    bar:SetStrokeOpacity(cast(Color, currentBar:GetBorderColor()))
                    bar:SetStrokeWidth(currentBar:GetBorderThickness())
                    
                    number value = currentBar:GetValue()
                    if value = cast(integer, value)
                        bar:SetTitle(currentBar:GetSeries():GetName() + ": " + cast(integer, currentBar:GetValue()))
                    else
                        bar:SetTitle(currentBar:GetSeries():GetName() + ": " + currentBar:GetValue())
                    end

                    if HasAccessibility()
                        bar:SetStyleClass("quorum-chart-rect")
                        bar:SetID(barSVG:GetID() + "_bar")
                        bar:SetTabIndex(-1)
                        bar:SetAriaHidden("true")
                        //barFocus = barFocus + "gainFocus('" + bar:GetID() + "'); "
                        //barBlur = barBlur + "loseFocus('" + bar:GetID() + "'); "
                    end
                    barSVG:Add(bar)

                    if currentBar:HasPattern()
                        Rectangle barPattern
                        barPattern:SetWidth(currentBar:GetWidth())
                        barPattern:SetHeight(currentBar:GetHeight())
                        barPattern:SetPosition(currentBar:GetGlobalX(), TranslatePositionY(currentBar) - currentBar:GetHeight()) 
                        text patternID = "pattern"+currentBar:GetPattern() 
                        barPattern:SetFill("url(#"+patternID+")")  
                        canvas:Add(barPattern)                 
                    end
    
                    if currentBar:ShowAnnotation() or chart:ShowAnnotations()
                        ChartLabel label = currentBar:GetAnnotation()
                        if label not= undefined
                            Label labelSVG
                            labelSVG:SetText(label:GetText())
                            labelSVG:SetTextAnchor("left")
                            labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                            labelSVG:SetFontSize(label:GetFontSize() + "px")                            
                            labelSVG:SetFontFamily("Arial")
                            labelSVG:SetFill(cast(Color, label:GetFontColor()))
                            labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                            if HasAccessibility()
                                labelSVG:SetID(barSVG:GetID() + "_annotation")
                                labelSVG:SetStyleClass("quorum-chart-text")
                                labelSVG:SetTabIndex(-1)
                                labelSVG:SetAriaHidden("true")
                                //barFocus = barFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                //barBlur = barBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                            end
                            canvas:Add(labelSVG)
                        end
                    end 

//                    if currentBar:GetSelectionArrow() not= undefined
//                        Array <number> vertices = currentBar:GetSelectionArrowVertices()
//                        number Yoffset = TranslatePositionY(currentBar:GetSelectionArrow())
//                        number Xoffset = currentBar:GetSelectionArrow():GetGlobalX()
//
//                        Polygon arrow
//                        integer k = 0
//                        repeat while k < vertices:GetSize()
//                            arrow:AddPoint(vertices:Get(k)+Xoffset, Yoffset+(currentBar:GetSelectionArrow():GetY()-vertices:Get(k+1)))
//                            k = k + 2
//                        end
//                        arrow:SetFill(transparent) // Should be transparent until selected 
//                        arrow:SetFillOpacity(transparent)
//                        if HasAccessibility()
//                            arrow:SetStyleClass("quorum-chart-selection-arrow")
//                            arrow:SetTabIndex(-1)
//                            arrow:SetID(barSVG:GetID() + "_arrow")
//                            arrow:SetAriaHidden("true")
//                            barFocus = barFocus + "gainFocus('" + arrow:GetID() + "'); "
//                            barBlur = barBlur + "loseFocus('" + arrow:GetID() + "'); "
//                        end
//                        canvas:Add(arrow)
//                    end

                    if HasAccessibility()

                        if barFocus not= ""
                            scriptText = scriptText + "document.getElementById('" + barSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + barFocus + "});" + newLine
                        end
                        if barBlur not= ""
                            scriptText = scriptText + "document.getElementById('" + barSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + barBlur + "});" + newLine
                        end
                    end

                    j = j + 1
                end
    
                i = i + 1
            end
        else

            i = 0
            repeat while i < chart:GetSubChartAreas():GetSize() and i < GetSubChartAreas():GetSize()
                Group subChartContent
                subChartContent:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContent:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())

                Rectangle subChartContentBoundingBox
                subChartContentBoundingBox:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContentBoundingBox:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())
                subChartContentBoundingBox:SetFill(transparent)
                subChartContentBoundingBox:SetFillOpacity(transparent)
                subChartContentBoundingBox:SetStroke(transparent)
                subChartContentBoundingBox:SetStrokeOpacity(transparent)
                if HasAccessibility()
                    subChartContent:SetTabIndex(-1)
                    subChartContent:SetStyleClass("quorum-chart-region")
                    subChartContentBoundingBox:SetTabIndex(-1)
                    subChartContentBoundingBox:SetAriaHidden("true")
                    //scriptText = scriptText + "document.getElementById('" + subChartContentBoundingBox:GetID() + "').addEventListener('focusin', (event) => {gainFocus('" + subChartContentBoundingBox:GetID() + "'); });"
                    //scriptText = scriptText + "document.getElementById('" + subChartContentBoundingBox:GetID() + "').addEventListener('focusout', (event) => {loseFocus('" + subChartContentBoundingBox:GetID() + "'); });"
                end
                subChartContent:Add(subChartContentBoundingBox)
                AddSubChartTitle(canvas, chart:GetSubChartAreas():Get(i))

                if HasAccessibility()
                    //Separated, by the Factor levels with multiple Series per subplot
                    if not chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-category-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetRole("graphics-object")  
                        subChartContent:SetAriaHidden("false")
                        subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                        //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        chartContent:Add(subChartContent)
                    //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
                    elseif chart:IsSeparatedBySeries() and not chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-series-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetRole("graphics-object")  
                        subChartContent:SetAriaHidden("false")
                        subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                        //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        chartContent:Add(subChartContent)
                    else
                        subChartContent:SetAriaHidden("true")
                    end
                else
                    chartContent:Add(subChartContent)
                end
                j = 0
                repeat while j < chart:GetSubChartAreas():Get(i):GetChartAreaItems():GetSize()
                    if (chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(j) is Bar)
                        Bar currentBar = cast(Bar, chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(j)) 
                      
                        Group barSVG
                        barSVG:SetFill(currentBar:GetColor())
                        barSVG:SetFillOpacity(currentBar:GetColor())
                        if HasAccessibility()
                            barSVG:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentBar:GetHashCode())
                            barSVG:SetStyleClass("quorum-chart-bar quorum-chart-bar-list")
                            barSVG:SetTabIndex(-1)
                            barSVG:SetRole("graphics-symbol")  
                            barSVG:SetAriaLabel(currentBar:GetName() + currentBar:GetDescription() + ".")
                            barSVG:SetAriaHidden("false")
                        end
                        if chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                            chartContent:Add(barSVG)
                        else
                            subChartContent:Add(barSVG)
                        end

                        text barFocus = ""
                        text barBlur = ""
    
                        Rectangle bar
                        bar:SetWidth(currentBar:GetWidth())
                        bar:SetHeight(currentBar:GetHeight())
                        bar:SetPosition(currentBar:GetGlobalX(), TranslatePositionY(currentBar) - currentBar:GetHeight()) 
                        bar:SetFill(currentBar:GetColor())
                        bar:SetFillOpacity(currentBar:GetColor())
                        bar:SetStroke(cast(Color, currentBar:GetBorderColor()))
                        bar:SetStrokeOpacity(cast(Color, currentBar:GetBorderColor()))
                        bar:SetStrokeWidth(currentBar:GetBorderThickness())

                        number value = currentBar:GetValue()
                        if value = cast(integer, value)
                            bar:SetTitle(currentBar:GetSeries():GetName() + ": " + cast(integer, currentBar:GetValue()))
                        else
                            bar:SetTitle(currentBar:GetSeries():GetName() + ": " + currentBar:GetValue())
                        end

                        if HasAccessibility()
                            bar:SetStyleClass("quorum-chart-rect")
                            bar:SetID(barSVG:GetID() + "_bar")
                            bar:SetTabIndex(-1)
                            bar:SetAriaHidden("true")
                            //barFocus = barFocus + "gainFocus('" + bar:GetID() + "'); "
                            //barBlur = barBlur + "loseFocus('" + bar:GetID() + "'); "
                        end
                        barSVG:Add(bar)

                        if currentBar:HasPattern()
                            Rectangle barPattern
                            barPattern:SetWidth(currentBar:GetWidth())
                            barPattern:SetHeight(currentBar:GetHeight())
                            barPattern:SetPosition(currentBar:GetGlobalX(), TranslatePositionY(currentBar) - currentBar:GetHeight()) 
                            text patternID = "pattern"+currentBar:GetPattern() 
                            barPattern:SetFill("url(#"+patternID+")")  
                            canvas:Add(barPattern)                 
                        end

                        if currentBar:ShowAnnotation() or chart:ShowAnnotations()
                            ChartLabel label = currentBar:GetAnnotation()
                            if label not= undefined
                                Label labelSVG
                                labelSVG:SetText(label:GetText())
                                labelSVG:SetTextAnchor("left")
                                labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                labelSVG:SetFontSize(label:GetFontSize() + "px")
                                labelSVG:SetFontFamily("Arial")
                                labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                                if HasAccessibility()
                                    labelSVG:SetID(barSVG:GetID() + "_annotation")
                                    labelSVG:SetStyleClass("quorum-chart-text")
                                    labelSVG:SetTabIndex(-1)
                                    labelSVG:SetAriaHidden("true")
                                    //barFocus = barFocus + "gainFocus('" + bar:GetID() + "'); "
                                    //barBlur = barBlur + "loseFocus('" + bar:GetID() + "'); "
                                end
                                canvas:Add(labelSVG)
                            end
                        end 

//                        if currentBar:GetSelectionArrow() not= undefined
//                            Array <number> vertices = currentBar:GetSelectionArrowVertices()
//                            number Yoffset = TranslatePositionY(currentBar:GetSelectionArrow())
//                            number Xoffset = currentBar:GetSelectionArrow():GetGlobalX()
//    
//                            Polygon arrow
//                            integer k = 0
//                            repeat while k < vertices:GetSize()
//                                arrow:AddPoint(vertices:Get(k)+Xoffset, Yoffset+(currentBar:GetSelectionArrow():GetY()-vertices:Get(k+1)))
//                                k = k + 2
//                            end
//                            arrow:SetFill(transparent) // Should be transparent until selected
//                            arrow:SetFillOpacity(transparent)
//                            if HasAccessibility()
//                                arrow:SetStyleClass("quorum-chart-selection-arrow")
//                                arrow:SetTabIndex(-1)
//                                arrow:SetID(barSVG:GetID() + "_arrow")
//                                arrow:SetAriaHidden("true")
//                                barFocus = barFocus + "gainFocus('" + arrow:GetID() + "'); "
//                                barBlur = barBlur + "loseFocus('" + arrow:GetID() + "'); "
//                            end
//                            canvas:Add(arrow)
//                        end

                        if HasAccessibility()
                            if barFocus not= ""
                                scriptText = scriptText + "document.getElementById('" + barSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + barFocus + "});" + newLine
                            end
                            if barBlur not= ""
                                scriptText = scriptText + "document.getElementById('" + barSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + barBlur + "});" + newLine
                            end
                        end
                    end
                    j = j + 1
                end
                i = i + 1
            end
        end
        if chart:IsShowingTrendLine()
            Array<Series> seriesList = chart:GetSeriesList()
            s = 0
            repeat while s < seriesList:GetSize()
                Path svgPath
                svgPath:SetCanvasSize(GetChartWidth(), GetChartHeight())
                svgPath:SetPath(seriesList:Get(s):GetTrendLine())
                if HasAccessibility()
                    svgPath:SetAriaHidden("true")
                    svgPath:SetTabIndex(-1)
                end
                canvas:Add(svgPath)
                s = s + 1
            end
        end
        if HasAccessibility()
            script:AddText(scriptText)  
            canvas:Add(script)
        end
    end

    private action AddTrendLine(ScalableVectorGraphics canvas, Histogram chart)
        if chart:IsShowingTrendLine() = false
            return now
        end
    end

    action AddOrderingList(ScalableVectorGraphics canvas, Chart chart)
        Histogram histogram
        histogram = cast(Histogram, chart)
        Script script

        text scriptText = ""
        text newLine = scriptText:GetLineFeed()
        text tab = scriptText:GetTab()
        text dq = scriptText:GetDoubleQuote()

        scriptText = newLine + "if (typeof quorum_chart_value_order == 'undefined' || quorum_chart_value_order == null)" + newLine
        scriptText = scriptText  + tab + "var quorum_chart_value_order = {};" + newLine + newLine
        scriptText = scriptText + "quorum_chart_value_order." + canvas:GetID() + " = {" + newLine

        if chart:IsSeparated()
            Array<ChartAreaPanel> subChartAreas = histogram:GetSubChartAreas()
            BarComparison comparison
            comparison:SetAscending(true)

            i = 0
            repeat while i < subChartAreas:GetSize() - 1
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    chartAreaItems:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j< chartAreaItems:GetSize() - 1
                        if chartAreaItems:Get(j) is Bar
                            Bar currentBar = cast(Bar, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentBar:GetHashCode() + ": " + currentBar:GetValue() + "," + newLine
                        end
                        j = j + 1
                    end

                    if chartAreaItems:Get(j) is Bar
                        Bar lastBar = cast(Bar, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastBar:GetHashCode() + ": " + lastBar:GetValue() + newLine
                        scriptText = scriptText + tab + "}," + newLine
                    end
                end
                i = i + 1
            end

            if i < subChartAreas:GetSize()
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    chartAreaItems:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j< chartAreaItems:GetSize() - 1
                        if chartAreaItems:Get(j) is Bar
                            Bar currentBar = cast(Bar, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentBar:GetHashCode() + ": " + currentBar:GetValue() + "," + newLine
                        end
                        j = j + 1
                    end
    
                    if chartAreaItems:Get(j) is Bar
                        Bar lastBar = cast(Bar, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastBar:GetHashCode() + ": " + lastBar:GetValue() + newLine
                        scriptText = scriptText + tab + "}" + newLine
                    end
                end
            end

        elseif chart:HasGroups()
            Array<BarGroup> barGroups = histogram:GetBarGroups()
            BarComparison comparison
            comparison:SetAscending(true)

            if barGroups:GetSize() > 0
                i = 0
                repeat while i < barGroups:GetSize() - 1
                    if barGroups:Get(i):GetSize() > 0
                        Array<Bar> bars = barGroups:Get(i):GetBars():CopyToArray()
                        bars:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + barGroups:Get(i):GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < bars:GetSize() - 1
                            Bar currentBar = bars:Get(j)
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentBar:GetSeries():GetHashCode() + "_" + currentBar:GetHashCode() + ": " + currentBar:GetValue() + "," + newLine
                            j = j + 1
                        end
                        
                        Bar lastBar = bars:Get(j)
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + lastBar:GetSeries():GetHashCode() + "_" + lastBar:GetHashCode() + ": " + lastBar:GetValue() + newLine
                        scriptText = scriptText + tab + "}," + newLine
                    end
                    i = i + 1
                end
                if barGroups:Get(i):GetSize() > 0
                    Array<Bar> bars = barGroups:Get(i):GetBars():CopyToArray()
                    bars:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + barGroups:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j < bars:GetSize() - 1
                        Bar currentBar = bars:Get(j)
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentBar:GetSeries():GetHashCode() + "_" + currentBar:GetHashCode() + ": " + currentBar:GetValue() + "," + newLine
                        j = j + 1
                    end
                    
                    Bar lastBar = bars:Get(j)
                    scriptText = scriptText + tab + tab + canvas:GetID() + "_" + lastBar:GetSeries():GetHashCode() + "_" + lastBar:GetHashCode() + ": " + lastBar:GetValue() + newLine
                    scriptText = scriptText + tab + "}" + newLine
                end
            end
        else
            Array<BarGroup> barGroups = histogram:GetBarGroups():CopyToArray()
            BarGroupComparison comparison
            comparison:SetAscending(true)
            barGroups:Sort(comparison)
            i = 0
            repeat while i < barGroups:GetSize() - 1
                if barGroups:Get(i):GetSize() > 0
                    j = 0
                    repeat while j < barGroups:Get(i):GetSize()
                        Bar currentBar = barGroups:Get(i):Get(j)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentBar:GetSeries():GetHashCode() + "_" + currentBar:GetHashCode() + ": " + currentBar:GetValue() + "," + newLine
                        j = j + 1
                    end
                end
                i = i + 1
            end
            if barGroups:Get(i):GetSize() > 0
                j = 0
                repeat while j < barGroups:Get(i):GetSize() - 1
                    Bar currentBar = barGroups:Get(i):Get(j)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + currentBar:GetSeries():GetHashCode() + "_" + currentBar:GetHashCode() + ": " + currentBar:GetValue() + "," + newLine
                    j = j + 1
                end
                
                Bar lastBar = barGroups:Get(i):Get(j)
                scriptText = scriptText + tab + canvas:GetID() + "_" + lastBar:GetSeries():GetHashCode() + "_" + lastBar:GetHashCode() + ": " + lastBar:GetValue() + newLine
            end
        end
        scriptText = scriptText + "};" + newLine
        script:AddText(scriptText)
        canvas:Add(script)
    end
end