package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.Interface.Controls.Charts.LineChart
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Data.Formats.ScalableVectorGraphics.Circle
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Icon
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.UnorderedList
use Libraries.Data.Formats.ScalableVectorGraphics.Group
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Interface.Item
use Libraries.Web.Page.Division
use Libraries.Web.Page.Script
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine
use Libraries.Data.Formats.ScalableVectorGraphics.Polygon

/*
    The LineChartWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Tim Kluthe

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.LineChart
    use Libraries.Interface.Controls.Charts.LineChartWriter
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    LineChart chart = frame:LineChart()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    LineChartWriter writer
    output writer:WriteOutChart(chart)
*/
class LineChartWriter is ChartWriter

    action WriteOutChart(LineChart chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(LineChart chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(LineChart chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(LineChart chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end
    
    action WriteOutHTML(LineChart chart, File file)
        WriteOutHTML(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)
        
        LineChart lineChart
        lineChart = cast(LineChart, chart)

        if HasAccessibility()
            canvas:SetRole("application")
            GetChartArea():SetAriaLabel(chart:GetChartArea():GetName() + " " + chart:GetChartArea():GetDescription())
        end
    end

    /*
        This action adds the content of the LineChart
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        LineChart lineChart
        lineChart = cast(LineChart, chart)
        AddPointsAndLines(canvas, lineChart)
//        if chart:IsShowingLinearRegression()
//            AddRegressionLines(canvas, chart)
//        end
    end

    /*
        This action adds the content of the LineChart to the SVG
    */
    private action AddPointsAndLines(ScalableVectorGraphics canvas, LineChart chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        Script script
        text scriptText = ""
        text newLine = scriptText:GetLineFeed()

        Group chartContent
        chartContent:SetSize(GetChartArea():GetWidth(),GetChartArea():GetHeight())
        chartContent:SetPosition(GetChartArea():GetPositionX(),GetChartArea():GetPositionY())

        // Add chartContent to the canvas after all non-nav elements (see below)

        Rectangle chartContentBoundingBox
        chartContentBoundingBox:SetSize(GetChartArea():GetWidth(), GetChartArea():GetHeight())
        chartContentBoundingBox:SetPosition(GetChartArea():GetPositionX(), GetChartArea():GetPositionY())
        chartContentBoundingBox:SetFill(transparent)
        chartContentBoundingBox:SetFillOpacity(transparent)
        chartContentBoundingBox:SetStroke(transparent)
        chartContentBoundingBox:SetStrokeOpacity(transparent)
        if HasAccessibility()
            chartContent:SetTabIndex(0)
            chartContent:SetStyleClass("quorum-chart-element quorum-chart-area quorum-chart-information-list")
            chartContent:SetIsOneLine(true)
            chartContent:SetRole("graphics-object")  
            chartContent:SetID(canvas:GetID() + "_" + GetChartArea():GetHashCode())
            chartContentBoundingBox:SetID(chartContent:GetID() + "_boundingbox")
            chartContentBoundingBox:SetTabIndex(-1)
            chartContentBoundingBox:SetAriaHidden("true")
            if chart:IsShowingTitle()
                chartContent:SetAriaLabel(chart:GetTitle() + " " + chart:GetDescription())
            else
                chartContent:SetAriaLabel(chart:GetName() + " " + chart:GetDescription())
            end
            chartContent:SetAriaHidden("false")
            //chartContent:SetOnFocus("gainFocus('" + chartContentBoundingBox:GetID() + "'); ")
            //chartContent:SetOnBlur("loseFocus('" + chartContentBoundingBox:GetID() + "'); ")
        end
        chartContent:Add(chartContentBoundingBox)

        if chart:IsShowingLinearRegression()
            AddRegressionLines(canvas, chart)
        end

        if not chart:IsSeparated()
            i = 0
            repeat while i < chart:GetAllLines():GetSize()
                ChartLine currentLine = chart:GetAllLines():Get(i)
                Series currentSeries = currentLine:GetSeries()

                if currentLine:GetPoints():GetSize() > 0
                    Group seriesSVG
                    seriesSVG:SetFill(cast(Color, chart:GetSelectionColor()))
                    seriesSVG:SetFillOpacity(cast(Color, chart:GetSelectionColor()))
                    if HasAccessibility()
                        seriesSVG:SetID(canvas:GetID() + "_" + currentSeries:GetHashCode())
                        seriesSVG:SetStyleClass("quorum-chart-scatter-series quorum-chart-series-list")
                        seriesSVG:SetTabIndex(-1)
                        seriesSVG:SetRole("graphics-object")  
                        seriesSVG:SetAriaLabel(currentLine:GetName() + currentLine:GetDescription())
                        seriesSVG:SetAriaHidden("false")
                    end
                    if chart:GetSeriesList():GetSize() > 0
                        chartContent:Add(seriesSVG)
                    end
                    text seriesFocus = ""
                    text seriesBlur = ""

                    if HasAccessibility()
                        RegressionLine line = currentLine:GetSeries():GetRegressionLine()
                        if line not= undefined
                            seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_regression" + "'); "
                            seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_regression" + "'); "
                        end

                        Icon entryBox = currentLine:GetSeries():GetEntryBox()
            
                        if entryBox not= undefined and entryBox:IsShowing()
                            seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_legend" + "'); "
                            seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_legend" + "'); "
                        end
                    end

//                    if currentLine:GetSelectionArrow() not= undefined
//                        Array <number> vertices = currentLine:GetSelectionArrowVertices()
//                        number Yoffset = TranslatePositionY(currentLine:GetSelectionArrow())
//                        number Xoffset = currentLine:GetSelectionArrow():GetGlobalX()
//
//                        Polygon arrow
//                        integer m = 0
//                        repeat while m < vertices:GetSize()
//                            arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentLine:GetSelectionArrow():GetY()-vertices:Get(m+1)))
//                            m = m + 2
//                        end
//                        arrow:SetFill(transparent) // Should be transparent until selected 
//                        arrow:SetStyleClass("quorum-chart-selection-arrow")
//                        arrow:SetTabIndex(-1)
//                        arrow:SetID(seriesSVG:GetID() + "_arrow")
//                        if HasAccessibility()
//                            arrow:SetAriaHidden("true")
//                            seriesFocus = seriesFocus + "gainFocus('" + arrow:GetID() + "'); "
//                            seriesBlur = seriesBlur + "loseFocus('" + arrow:GetID() + "'); "
//                        end
//                        canvas:Add(arrow)
//                    end

                    j = 0
                    repeat while j < currentLine:GetPoints():GetSize()
                        ChartPoint currentPoint = currentLine:GetPoints():Get(j)
                        number radius = currentPoint:GetHeight()/2

                        // Add line segment
                        if j < currentLine:GetLines():GetSize() 
                            LineSegment currentSegment = currentLine:GetLines():Get(j)
                            ChartPoint firstPoint = currentSegment:GetPoint1()
                            ChartPoint secondPoint = currentSegment:GetPoint2()
                            radius = firstPoint:GetHeight()/2
                
                            Line segment
                            segment:SetFirstPoint(firstPoint:GetGlobalX() + radius, TranslatePositionY(firstPoint) - radius)
                            segment:SetSecondPoint(secondPoint:GetGlobalX() + radius, TranslatePositionY(secondPoint) - radius)
                            segment:SetFill(currentSegment:GetColor())
                            segment:SetFillOpacity(currentSegment:GetColor())
                            segment:SetStroke(currentSegment:GetColor())
                            segment:SetStrokeOpacity(currentSegment:GetColor())
                            segment:SetStrokeWidth(currentSegment:GetHeight())
                            segment:SetTitle(currentSeries:GetName())
                            if HasAccessibility()
                                segment:SetID(seriesSVG:GetID() + "_segment"+j)
                                segment:SetStyleClass("quorum-chart-linesegment")
                                segment:SetTabIndex(-1)
                                segment:SetAriaHidden("true")
                                seriesFocus = seriesFocus + "gainFocus('" + segment:GetID() + "'); "
                                seriesBlur = seriesBlur + "loseFocus('" + segment:GetID() + "'); "
                            end
                            seriesSVG:Add(segment)
                        end

                        text pointFocus = ""
                        text pointBlur = ""

                        Group pointSVG
                        pointSVG:SetFill(currentPoint:GetColor())
                        pointSVG:SetFillOpacity(currentPoint:GetColor())
                        if HasAccessibility()
                            pointSVG:SetID(canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode())
                            pointSVG:SetStyleClass("quorum-chart-point quorum-chart-point-list")
                            pointSVG:SetTabIndex(-1)
                            pointSVG:SetRole("graphics-symbol")  
                            pointSVG:SetAriaLabel(currentPoint:GetName() + currentPoint:GetDescription())
                            pointSVG:SetAriaHidden("false")
                        end
                        if chart:GetSeriesList():GetSize() > 0
                            seriesSVG:Add(pointSVG)
                        else
                            chartContent:Add(pointSVG)
                        end

                      if currentLine:GetPointsFlag()
                            Circle point
                            point:SetRadius(radius)
                            point:SetPosition(currentPoint:GetGlobalX() + radius, TranslatePositionY(currentPoint) - radius) 
                            point:SetFill(currentPoint:GetColor())
                            point:SetFillOpacity(currentPoint:GetColor())
                            point:SetStroke(cast(Color, currentPoint:GetBorderColor()))
                            point:SetStrokeOpacity(cast(Color, currentPoint:GetBorderColor()))
                            point:SetStrokeWidth(currentPoint:GetBorderThickness())
                            point:SetTitle(currentSeries:GetName() + ": " + currentPoint:GetName())
                            if HasAccessibility()
                                point:SetID(pointSVG:GetID() + "_point")
                                point:SetStyleClass("quorum-chart-circle")
                                point:SetTabIndex(-1)
                                point:SetAriaHidden("true")
                                pointFocus = pointFocus + "gainFocus('" + point:GetID() + "'); "
                                pointBlur = pointBlur + "loseFocus('" + point:GetID() + "'); "
                            end
                            pointSVG:Add(point)
                        end
                        
                        if currentPoint:ShowAnnotation() or chart:ShowAnnotations()
                            ChartLabel label = currentPoint:GetAnnotation()
                            if label not= undefined
                                Label labelSVG
                                labelSVG:SetText(label:GetText())
                                labelSVG:SetTextAnchor("left")
                                labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label) - radius)
                                labelSVG:SetFontSize(label:GetFontSize() + "px")
                                labelSVG:SetFontFamily("Arial")
                                labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                                if HasAccessibility()
                                    labelSVG:SetID(pointSVG:GetID() + "_annotation")
                                    labelSVG:SetStyleClass("quorum-chart-text")
                                    labelSVG:SetTabIndex(-1)
                                    labelSVG:SetAriaHidden("true")
                                    //pointFocus = pointFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                    //pointBlur = pointBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                end
                                canvas:Add(labelSVG)
                            end
                        end

//                        if currentPoint:GetSelectionArrow() not= undefined
//                            Array <number> vertices = currentPoint:GetSelectionArrowVertices()
//                            number Yoffset = TranslatePositionY(currentPoint:GetSelectionArrow())
//                            number Xoffset = currentPoint:GetSelectionArrow():GetGlobalX()
//    
//                            Polygon arrow
//                            integer m = 0
//                            repeat while m < vertices:GetSize()
//                                arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentPoint:GetSelectionArrow():GetY()-vertices:Get(m+1)))
//                                m = m + 2
//                            end
//                            arrow:SetFill(transparent) // Should be transparent until selected 
//                            arrow:SetFillOpacity(transparent)
//                            if HasAccessibility()
//                                arrow:SetStyleClass("quorum-chart-selection-arrow")
//                                arrow:SetTabIndex(-1)
//                                arrow:SetID(pointSVG:GetID() + "_arrow")
//                                arrow:SetAriaHidden("true")
//                                pointFocus = pointFocus + "gainFocus('" + arrow:GetID() + "'); "
//                                pointBlur = pointBlur + "loseFocus('" + arrow:GetID() + "'); "
//                            end
//                            canvas:Add(arrow)
//                        end

                        if HasAccessibility()
                            if pointFocus not= ""
                                scriptText = scriptText + "document.getElementById('" + pointSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + pointFocus + "});" + newLine
                            end
                            if pointBlur not= ""
                                scriptText = scriptText + "document.getElementById('" + pointSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + pointBlur + "});" + newLine
                            end
                        end 
                        j = j + 1
                    end

                    if HasAccessibility()
                        if seriesFocus not= ""
                            scriptText = scriptText + "document.getElementById('" + seriesSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + seriesFocus + "});" + newLine
                        end
                        if seriesBlur not= ""
                            scriptText = scriptText + "document.getElementById('" + seriesSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + seriesBlur + "});" + newLine
                        end
                    end            
                end
                i = i + 1
            end
        else
            i = 0
            repeat while i < chart:GetSubChartAreas():GetSize() and i < GetSubChartAreas():GetSize()
                Group subChartContent
                subChartContent:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContent:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())

                Rectangle subChartContentBoundingBox
                subChartContentBoundingBox:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContentBoundingBox:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())
                subChartContentBoundingBox:SetFill(transparent)
                subChartContentBoundingBox:SetFillOpacity(transparent)
                subChartContentBoundingBox:SetStroke(transparent)
                subChartContentBoundingBox:SetStrokeOpacity(transparent)
                if HasAccessibility()
                    subChartContent:SetTabIndex(-1)
                    subChartContent:SetStyleClass("quorum-chart-region")
                    subChartContentBoundingBox:SetAriaHidden("true")
                    subChartContentBoundingBox:SetTabIndex(-1)
                end
                subChartContent:Add(subChartContentBoundingBox)
                AddSubChartTitle(canvas, chart:GetSubChartAreas():Get(i))
                
                if HasAccessibility()
                    //Separated, by the Factor levels with multiple Series per subplot
                    if not chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetSeries():GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-line-series quorum-chart-category-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetRole("graphics-object")  
                        subChartContent:SetAriaHidden("false")
                        subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                        //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        chartContent:Add(subChartContent)
                    //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
                    elseif chart:IsSeparatedBySeries() and not chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetSeries():GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-line-series quorum-chart-series-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetRole("graphics-object")  
                        subChartContent:SetAriaHidden("false")
                        subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                        //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                        chartContent:Add(subChartContent)
                    else
                        subChartContent:SetAriaHidden("true")
                    end
                else
                    chartContent:Add(subChartContent)
                end

                text seriesFocus = ""
                text seriesBlur = ""

                if HasAccessibility()
                    RegressionLine line = chart:GetSubChartAreas():Get(i):GetSeries():GetRegressionLine()
                    if line not= undefined
                        seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetSeries():GetHashCode() + "_regression" + "'); "
                        seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetSeries():GetHashCode() + "_regression" + "'); "
                    end
                end

                if chart:GetSubChartAreas():Get(i):GetChartAreaItems():GetSize() > 0
                    if chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(0) is ChartLine
                        ChartLine currentLine = cast(ChartLine, chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(0))

                        if currentLine:GetPoints():GetSize() > 0
                            if HasAccessibility()
                                RegressionLine line = currentLine:GetSeries():GetRegressionLine()
                                if line not= undefined
                                    seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + currentLine:GetSeries():GetHashCode() + "_regression" + "'); "
                                    seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + currentLine:GetSeries():GetHashCode() + "_regression" + "'); "
                                end
        
                                Icon entryBox = currentLine:GetSeries():GetEntryBox()
                    
                                if entryBox not= undefined and entryBox:IsShowing()
                                    seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + currentLine:GetSeries():GetHashCode() + "_legend" + "'); "
                                    seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + currentLine:GetSeries():GetHashCode() + "_legend" + "'); "
                                end
                            end

//                            if currentLine:GetSelectionArrow() not= undefined
//                                Array <number> vertices = currentLine:GetSelectionArrowVertices()
//                                number Yoffset = TranslatePositionY(currentLine:GetSelectionArrow())
//                                number Xoffset = currentLine:GetSelectionArrow():GetGlobalX()
//        
//                                Polygon arrow
//                                integer m = 0
//                                repeat while m < vertices:GetSize()
//                                    arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentLine:GetSelectionArrow():GetY()-vertices:Get(m+1)))
//                                    m = m + 2
//                                end
//                                arrow:SetFill(transparent) // Should be transparent until selected 
//                                arrow:SetFillOpacity(transparent)
//                                if HasAccessibility()
//                                    arrow:SetStyleClass("quorum-chart-selection-arrow")
//                                    arrow:SetTabIndex(-1)
//                                    arrow:SetID(subChartContent:GetID() + "_arrow")
//                                    arrow:SetAriaHidden("true")
//                                    seriesFocus = seriesFocus + "gainFocus('" + arrow:GetID() + "'); "
//                                    seriesBlur = seriesBlur + "loseFocus('" + arrow:GetID() + "'); "
//                                end
//                                canvas:Add(arrow)
//                            end

                            j = 0
                            repeat while j < currentLine:GetPoints():GetSize()
                                if currentLine:GetPoints():Get(j) is ChartPoint
                                    ChartPoint currentPoint = cast(ChartPoint, currentLine:GetPoints():Get(j))
                                    number radius = currentPoint:GetHeight()/2
        
                                    Group pointSVG
                                    pointSVG:SetFill(currentPoint:GetColor())
                                    pointSVG:SetFillOpacity(currentPoint:GetColor())
                                    if HasAccessibility()
                                        pointSVG:SetID(canvas:GetID() + "_" + currentLine:GetSeries():GetHashCode() + "_" + currentPoint:GetHashCode())
                                        pointSVG:SetStyleClass("quorum-chart-point quorum-chart-point-list")
                                        pointSVG:SetTabIndex(-1)
                                        pointSVG:SetRole("graphics-symbol")  
                                        pointSVG:SetAriaLabel(currentPoint:GetName() + currentPoint:GetDescription())
                                        pointSVG:SetAriaHidden("false")
                                    end
                                    subChartContent:Add(pointSVG)

                                    text pointFocus = ""
                                    text pointBlur = ""

                                    if currentLine:GetPointsFlag()
                                        Circle point
                                        point:SetRadius(radius)
                                        point:SetPosition(currentPoint:GetGlobalX() + radius, TranslatePositionY(currentPoint) - radius) 
                                        point:SetFill(currentPoint:GetColor())
                                        point:SetFillOpacity(currentPoint:GetColor())
                                        point:SetStroke(cast(Color, currentPoint:GetBorderColor()))
                                        point:SetStrokeOpacity(cast(Color, currentPoint:GetBorderColor()))
                                        point:SetStrokeWidth(currentPoint:GetBorderThickness())
                                        point:SetTitle(currentLine:GetSeries():GetName() + ": " + currentPoint:GetName())
                                        if HasAccessibility()
                                            point:SetID(pointSVG:GetID() + "_point")
                                            point:SetStyleClass("quorum-chart-circle")
                                            point:SetTabIndex(-1)
                                            point:SetAriaHidden("true")
                                            pointFocus = pointFocus + "gainFocus('" + point:GetID() + "'); "
                                            pointBlur = pointBlur + "loseFocus('" + point:GetID() + "'); "
                                            seriesFocus = seriesFocus + "gainFocus('" + point:GetID() + "'); "
                                            seriesBlur = seriesBlur + "loseFocus('" + point:GetID() + "'); "
                                        end
                                        pointSVG:Add(point)
                                    end

                                    // Add line segment
                                    if j < currentLine:GetLines():GetSize() 
                                        LineSegment currentSegment = currentLine:GetLines():Get(j)
                                        ChartPoint firstPoint = currentSegment:GetPoint1()
                                        ChartPoint secondPoint = currentSegment:GetPoint2()
                                        radius = firstPoint:GetHeight()/2
                            
                                        Line segment
                                        segment:SetFirstPoint(firstPoint:GetGlobalX() + radius, TranslatePositionY(firstPoint) - radius)
                                        segment:SetSecondPoint(secondPoint:GetGlobalX() + radius, TranslatePositionY(secondPoint) - radius)
                                        segment:SetFill(currentSegment:GetColor())
                                        segment:SetFillOpacity(currentSegment:GetColor())
                                        segment:SetStroke(currentSegment:GetColor())
                                        segment:SetStrokeOpacity(currentSegment:GetColor())
                                        segment:SetStrokeWidth(currentSegment:GetHeight())
                                        segment:SetTitle(currentLine:GetSeries():GetName())
                                        if HasAccessibility()
                                            segment:SetID(subChartContent:GetID() + "_segment"+j)
                                            segment:SetStyleClass("quorum-chart-linesegment")
                                            segment:SetTabIndex(-1)
                                            segment:SetAriaHidden("true")
                                            seriesFocus = seriesFocus + "gainFocus('" + segment:GetID() + "'); "
                                            seriesBlur = seriesBlur + "loseFocus('" + segment:GetID() + "'); "
                                        end
                                        canvas:Add(segment)
                                    end
                
                                    if currentPoint:ShowAnnotation() or chart:ShowAnnotations()
                                        ChartLabel label = currentPoint:GetAnnotation()
                                        if label not= undefined
                                            Label labelSVG
                                            labelSVG:SetText(label:GetText())
                                            labelSVG:SetTextAnchor("left")
                                            labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                            labelSVG:SetFontSize(label:GetFontSize() + "px")
                                            labelSVG:SetFontFamily("Arial")
                                            labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                            labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                                            if HasAccessibility()
                                                labelSVG:SetID(pointSVG:GetID() + "_annotation")
                                                labelSVG:SetStyleClass("quorum-chart-text")
                                                labelSVG:SetTabIndex(-1)
                                                labelSVG:SetAriaHidden("true")
                                                //pointFocus = pointFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                                //pointBlur = pointBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                            end
                                            canvas:Add(labelSVG)
                                        end
                                    end

//                                    if currentPoint:GetSelectionArrow() not= undefined
//                                        Array <number> vertices = currentPoint:GetSelectionArrowVertices()
//                                        number Yoffset = TranslatePositionY(currentPoint:GetSelectionArrow())
//                                        number Xoffset = currentPoint:GetSelectionArrow():GetGlobalX()
//                
//                                        Polygon arrow
//                                        integer m = 0
//                                        repeat while m < vertices:GetSize()
//                                            arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentPoint:GetSelectionArrow():GetY()-vertices:Get(m+1)))
//                                            m = m + 2
//                                        end
//                                        arrow:SetFill(transparent) // Should be transparent until selected 
//                                        arrow:SetFillOpacity(transparent)
//                                        if HasAccessibility()
//                                            arrow:SetStyleClass("quorum-chart-selection-arrow")
//                                            arrow:SetTabIndex(-1)
//                                            arrow:SetID(pointSVG:GetID() + "_arrow")
//                                            arrow:SetAriaHidden("true")
//                                            pointFocus = pointFocus + "gainFocus('" + arrow:GetID() + "'); "
//                                            pointBlur = pointBlur + "loseFocus('" + arrow:GetID() + "'); "
//                                        end
//                                        canvas:Add(arrow)
//                                    end

                                    if HasAccessibility()
                                        if pointFocus not= ""
                                            scriptText = scriptText + "document.getElementById('" + pointSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + pointFocus + "});" + newLine
                                        end
                                        if pointBlur not= ""
                                            scriptText = scriptText + "document.getElementById('" + pointSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + pointBlur + "});" + newLine
                                        end
                                    end 
                                end
                                j = j + 1
                            end
                        end
                    end
                end
                    
                if HasAccessibility()
                    if seriesFocus not= ""
                        scriptText = scriptText + "document.getElementById('" + subChartContent:GetID() + "').addEventListener('focus', (event) => {" + newLine + seriesFocus + "});" + newLine
                    end
                    if seriesBlur not= ""
                        scriptText = scriptText + "document.getElementById('" + subChartContent:GetID() + "').addEventListener('blur', (event) => {" + newLine + seriesBlur + "});" + newLine
                    end
                end   
        
                i = i + 1
            end
        end
        // Add chartContent to the canvas after all non-nav elements
        GetChartInformation():Add(chartContent)
        if HasAccessibility()
            script:AddText(scriptText)  
            canvas:Add(script)
        end
    end

    action AddOrderingList(ScalableVectorGraphics canvas, Chart chart)
        LineChart lineChart
        lineChart = cast(LineChart, chart)
        Script script

        text scriptText = ""
        text newLine = scriptText:GetLineFeed()
        text tab = scriptText:GetTab()
        text dq = scriptText:GetDoubleQuote()

        scriptText = newLine + "if (typeof quorum_chart_value_order == 'undefined' || quorum_chart_value_order == null)" + newLine
        scriptText = scriptText  + tab + "var quorum_chart_value_order = {};" + newLine + newLine

        //Ordered list for X values
        scriptText = scriptText + "quorum_chart_value_order." + canvas:GetID() + "_x" + " = {" + newLine

        if chart:IsSeparated()
            Array<ChartAreaPanel> subChartAreas = lineChart:GetSubChartAreas()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByX(true)
            if subChartAreas:GetSize() > 0
                i = 0
                repeat while i < subChartAreas:GetSize() - 1
                    if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0 and subChartAreas:Get(i):GetChartAreaItems():Get(0) is ChartLine
                        Series currentSeries = subChartAreas:Get(i):GetSeries()
                        ChartLine currentLine = cast(ChartLine, subChartAreas:Get(i):GetChartAreaItems():Get(0))
                        Array<ChartPoint> points = currentLine:GetPoints():CopyToArray()
                        if points:GetSize() > 0
                            points:Sort(comparison)
                            scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                            j = 0
                            repeat while j < points:GetSize() - 1
                                ChartPoint currentPoint = points:Get(j)
                                scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                                j = j + 1
                            end
        
                            ChartPoint lastPoint = points:Get(j)
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                            scriptText = scriptText + tab + "}," + newLine
                        end
                    end
                    i = i + 1
                end

                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0 and subChartAreas:Get(i):GetChartAreaItems():Get(0) is ChartLine
                    Series currentSeries = subChartAreas:Get(i):GetSeries()
                    ChartLine currentLine = cast(ChartLine, subChartAreas:Get(i):GetChartAreaItems():Get(0))
                    Array<ChartPoint> points = currentLine:GetPoints():CopyToArray()

                    if points:GetSize() > 0
                        points:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < points:GetSize() - 1
                            ChartPoint currentPoint = points:Get(j)
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                            j = j + 1
                        end
        
                        ChartPoint lastPoint = points:Get(j)
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                        scriptText = scriptText + tab + "}" + newLine
                    end
                end
            end
        else
            Array<ChartLine> seriesList = lineChart:GetAllLines()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByX(true)
            
            if seriesList:GetSize() > 0
                i = 0
                repeat while i < seriesList:GetSize() - 1
                    Series currentSeries = seriesList:Get(i):GetSeries()
                    Array<ChartPoint> points = seriesList:Get(i):GetPoints():CopyToArray()
                    if points:GetSize() > 0
                        points:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < points:GetSize() - 1
                            ChartPoint currentPoint = points:Get(j)
                            scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                            j = j + 1
                        end

                        ChartPoint lastPoint = points:Get(j)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                        scriptText = scriptText + tab + "}," + newLine
                    end
                    i = i + 1
                end
    
                Series currentSeries = seriesList:Get(i):GetSeries()
                Array<ChartPoint> points = seriesList:Get(i):GetPoints():CopyToArray()
                points:Sort(comparison)
                if seriesList:GetSize() > 0
                    scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                end
                j = 0
                repeat while j < points:GetSize() - 1
                    ChartPoint currentPoint = points:Get(j)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                    j = j + 1
                end

                ChartPoint lastPoint = points:Get(j)
                scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                
                if seriesList:GetSize() > 0
                    scriptText = scriptText + tab + "}" + newLine
                end
            end
        end
        scriptText = scriptText + "};" + newLine + newLine

        //Ordered list for Y values
        scriptText = scriptText + "quorum_chart_value_order." + canvas:GetID() + "_y" + " = {" + newLine

        if chart:IsSeparated()
            Array<ChartAreaPanel> subChartAreas = lineChart:GetSubChartAreas()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByY(true)
            if subChartAreas:GetSize() > 0
                i = 0
                repeat while i < subChartAreas:GetSize() - 1
                    if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0 and subChartAreas:Get(i):GetChartAreaItems():Get(0) is ChartLine
                       Series currentSeries = subChartAreas:Get(i):GetSeries()
                        ChartLine currentLine = cast(ChartLine, subChartAreas:Get(i):GetChartAreaItems():Get(0))
                        Array<ChartPoint> points = currentLine:GetPoints():CopyToArray()
                        if points:GetSize() > 0
                            points:Sort(comparison)
                            scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                            j = 0
                            repeat while j < points:GetSize() - 1
                                ChartPoint currentPoint = points:Get(j)
                                scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                                j = j + 1
                            end
        
                            ChartPoint lastPoint = points:Get(j)
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                            scriptText = scriptText + tab + "}," + newLine
                        end
                    end
                    i = i + 1
                end
    
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0 and subChartAreas:Get(i):GetChartAreaItems():Get(0) is ChartLine
                    Series currentSeries = subChartAreas:Get(i):GetSeries()
                    ChartLine currentLine = cast(ChartLine, subChartAreas:Get(i):GetChartAreaItems():Get(0))
                    Array<ChartPoint> points = currentLine:GetPoints():CopyToArray()

                    if points:GetSize() > 0
                        points:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < points:GetSize() - 1
                            ChartPoint currentPoint = points:Get(j)
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                            j = j + 1
                        end
        
                        ChartPoint lastPoint = points:Get(j)
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                        scriptText = scriptText + tab + "}" + newLine
                    end
                end
            end
        else
            Array<ChartLine> seriesList = lineChart:GetAllLines()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByY(true)
            
            if seriesList:GetSize() > 0
                i = 0
                repeat while i < seriesList:GetSize() - 1
                    Series currentSeries = seriesList:Get(i):GetSeries()
                    Array<ChartPoint> points = seriesList:Get(i):GetPoints():CopyToArray()
                    if points:GetSize() > 0
                        points:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < points:GetSize() - 1
                            ChartPoint currentPoint = points:Get(j)
                            scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                            j = j + 1
                        end
                        
                        ChartPoint lastPoint = points:Get(j)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                        scriptText = scriptText + tab + "}," + newLine
                    end
                    i = i + 1
                end
    
                Series currentSeries = seriesList:Get(i):GetSeries()
                Array<ChartPoint> points = seriesList:Get(i):GetPoints():CopyToArray()
                points:Sort(comparison)
                if seriesList:GetSize() > 0
                    scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + ": {" + newLine
                end
                j = 0
                repeat while j < points:GetSize() - 1
                    ChartPoint currentPoint = points:Get(j)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                    j = j + 1
                end
                ChartPoint lastPoint = points:Get(j)
                scriptText = scriptText + tab + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                if seriesList:GetSize() > 0
                    scriptText = scriptText + tab + "}" + newLine
                end
            end
        end
        scriptText = scriptText + "};" + newLine + newLine

        script:AddText(scriptText)
        canvas:Add(script)
    end
end