package Libraries.Interface.Controls.Charts
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Containers.HashTable

/*
    This class represents the default options any chart will use when displaying information in a chart. These options
    can be overriden on a per chart basis, but this provides a way to manage defaults across the board.

    Attribute: Author Andreas Stefik

    Attribute: Example

    use Libraries.Controls.Charts.ChartOptions

    ChartOptions options
    Color color = options:GetBarColor()
    output "We have obtained the default bar color on the system."
*/
shared class ChartOptions
    Color color
    Color selectionColor = undefined
    private boolean needToMakePalettes = true
    integer tickDigits = 1

    // Color Palettes
    public constant integer DEFAULT = 0
    public constant integer CALM = 1
    public constant integer EXCITING = 2
    public constant integer POSITIVE = 3
    public constant integer NEGATIVE = 4
    public constant integer SERIOUS = 5
    public constant integer PLAYFUL = 6
    public constant integer TRUSTWORTHY = 7
    public constant integer DISTURBING = 8
    public constant integer COLORBLIND = 9 
    public constant integer COLORGORICAL = 10

    // Patterns
    public constant integer VERTICAL_LINES = 1
    public constant integer HORIZONTAL_LINES = 2
    public constant integer DIAGONAL_DOWN_LINES = 3
    public constant integer DIAGONAL_UP_LINES = 4
    public constant integer PLAIN_CROSSHATCH = 5      
    public constant integer DIAGONAL_CROSSHATCH = 6
    public constant integer SOLID_CIRCLES = 7
    public constant integer HOLLOW_CIRCLES = 8
    public constant integer PINPOINT_DASHES = 9
    public constant integer SOLID_TRIANGLES = 10
    public constant integer HOLLOW_TRIANGLES = 11
    public constant integer SOLID_BOXES = 12
    public constant integer HOLLOW_BOXES = 13

    // The distance between the beginning of a pattern "tile" and the next "tile". Measured in pixels. Scales with interface scale.
    constant number PATTERN_DISTANCE = 12

    // The thickness of the edges of a pattern. Measured in pixels, and scales with interface scale.
    constant number PATTERN_THICKNESS = 2

    // Currently, we return a uniform Black color for all patterns.
    constant Color PATTERN_COLOR = color:Black()

    HashTable <integer, Array<Color>> palettes
    Array<Color> colorPalette = undefined
    Array<integer> patternPalette = undefined

    // Currently, we return a uniform Black color for all borders across all palettes.
    Color borderColor = color:Black()

    on create
        palettes:Add(DEFAULT, DefaultPalette())

        // Default selection color is used when focusing on a chart item
        if selectionColor = undefined
            selectionColor = color:Blue()
        end

        // Default colors will be filled with the COLORGORICAL color palette
        if colorPalette = undefined
            colorPalette = palettes:GetValue(DEFAULT)
        end

        if patternPalette = undefined
            patternPalette = DefaultPatternPalette()
        end
    end

    action SetPalette(Array<Color> colorPalette)
        me:colorPalette = colorPalette
    end

    action SetPatternPalette(Array<integer> patternPalette)
        me:patternPalette = patternPalette
    end

    action GetPatternPalette returns Array<integer>
        return patternPalette
    end

    action SetPalette(integer choice)
        if needToMakePalettes
            BuildPalettes()
            needToMakePalettes = false
        end
        if palettes:HasKey(choice)
            colorPalette = palettes:GetValue(choice)
        end
    end

    action SetPalette(Color colorA, Color colorB, integer shades)
        colorPalette = InterpolatedPalette(colorA, colorB, shades)
    end

    action SetPalette(Color colorA, Color colorB, Color colorC, integer shades)
        colorPalette = InterpolatedPalette(colorA, colorB, colorC, shades)
    end

    /*
        This action uses the weighted RBG grayscale method based on the wavelength GRAYSCALE  = 0.299R + 0.587G + 0.114B
        It changes the current palette to grayscale. There is also a GRAYSCALE palette that uses an interpolated palette.
    */
    action SetPaletteToGrayScale()
        integer i = 0
        number grayscale = 0.0
        repeat while i < colorPalette:GetSize()
            grayscale = (0.299 * colorPalette:Get(i):GetRed()) + (0.587 * colorPalette:Get(i):GetGreen()) + (0.114 * colorPalette:Get(i):GetBlue())
            colorPalette:Get(i):SetColor(grayscale,grayscale,grayscale,1)
            i = i + 1
        end
    end

    /*
        Returns a single color from the palette at a given index.
        If the index reaches beyond the palette size
        it will return a lighter version of the color at the palette mod index

    */
    action GetColorFromPalette(integer index) returns Color
        if index > colorPalette:GetSize()-1
            integer laps = index/colorPalette:GetSize()
            Color temp = colorPalette:Get(index mod colorPalette:GetSize()):Copy()
            temp:LinearInterpolation(color:White(), (1-1.0/(2*laps)))
            return temp
        else
            return colorPalette:Get(index)
        end
    end

    /*
        Returns a single integer corresponding to a texture from the palette at a given index.
        If the index reaches beyond the palette size it will wrap around and repeat textures.
    */
    action GetPatternFromPalette(integer index) returns integer
        if index > patternPalette:GetSize()-1
            integer laps = index/patternPalette:GetSize()
            integer temp = patternPalette:Get(index mod patternPalette:GetSize())
            return temp
        else
            return patternPalette:Get(index)
        end
    end  

    /*
        This action returns a border color to complement the
        palette color at the given index. Currently, this always
        returns Black, but this can be adjusted in the future to
        allow palettes to provide fine-tuned border color information.
    */
    action GetBorderColorFromPalette(integer index) returns Color
        return borderColor
    end

    /*
        This action returns a pattern color to complement the
        palette color at the given index. Currently, this always
        returns Black, but this can be adjusted in the future to
        allow palettes to provide fine-tuned border color information.
    */
    action GetPatternColorFromPalette(integer index) returns Color
        return PATTERN_COLOR
    end

    /*
        This action returns the distance between the beginning of a pattern "tile"
        and the beginning of the next "tile". Patterns are rendered as tiled squares
        that are repeated across the surface of the chart element. This value is
        measured in pixels, not including any scaling performed by interface scaling.
        The default value is 12 pixels.

        Attribute: Returns The number of pixels between each tile of any pattern.
    */
    action GetPatternDistanceFromPalette(integer index) returns number
        return PATTERN_DISTANCE
    end

    /*
        This action returns the thickness of the edges of each pattern, measured in
        pixels. This doesn't include the scaling performed by interface scaling.
        The default value is 2 pixels.
    */
    action GetPatternThicknessFromPalette(integer index) returns number
        return PATTERN_THICKNESS
    end

    private action BuildPalettes()
        palettes:Add(CALM, CalmPalette())
        palettes:Add(EXCITING, ExcitingPalette())
        palettes:Add(POSITIVE, PositivePalette())
        palettes:Add(NEGATIVE, NegativePalette())
        palettes:Add(SERIOUS, SeriousPalette())
        palettes:Add(PLAYFUL, PlayfulPalette())
        palettes:Add(TRUSTWORTHY, TrustworthyPalette())
        palettes:Add(DISTURBING, DisturbingPalette())
        palettes:Add(COLORBLIND, ColorblindPalette())
        palettes:Add(COLORGORICAL, ColorgoricalPalette())
    end

    private action DefaultPalette() returns Array <Color>
        return DefaultLightPalette()
    end

    private action DefaultPatternPalette() returns Array <integer>
        Array <integer> palette
        palette:Add(DIAGONAL_CROSSHATCH)
        palette:Add(VERTICAL_LINES)
        palette:Add(HOLLOW_CIRCLES)
        palette:Add(DIAGONAL_DOWN_LINES)
        palette:Add(HOLLOW_TRIANGLES)
        palette:Add(HORIZONTAL_LINES)
        palette:Add(HOLLOW_BOXES)
        palette:Add(DIAGONAL_UP_LINES)
        palette:Add(PLAIN_CROSSHATCH)
        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action CalmPalette() returns Array <Color>
        Array <Color> palette

        //Dark Teal
        color:SetColor(57.0/255, 126.0/255, 123.0/255, 1)
        palette:Add(color:Copy())

        // Light Gray
        color:SetColor(202.0/255, 202.0/255, 202.0/255, 1)
        palette:Add(color:Copy())       

        // Greenish Gray
        color:SetColor(91.0/255, 97.0/255, 87.0/255, 1)
        palette:Add(color:Copy())  

        //Pastel Teal
        color:SetColor(146.0/255, 194.0/255, 179.0/255, 1)
        palette:Add(color:Copy())  

        // Bright purple
        color:SetColor(150.0/255, 62.0/255, 153.0/255, 1)
        palette:Add(color:Copy())

        // Pastel Eggplant
        color:SetColor(133.0/255, 131.0/255, 173.0/255, 1)
        palette:Add(color:Copy())

        // Light pastel blue
        color:SetColor(155.0/255, 200.0/255, 216.0/255, 1)
        palette:Add(color:Copy())

        // Bright Teal
        color:SetColor(23.0/255, 179.0/255, 170.0/255, 1)
        palette:Add(color:Copy())

        // Pastel green
        color:SetColor(158.0/255, 211.0/255, 144.0/255, 1)
        palette:Add(color:Copy())

        // Khaki
        color:SetColor(213.0/255, 209.0/255, 171.0/255, 1)
        palette:Add(color:Copy())

        // Pink
        color:SetColor(214.0/255, 159.0/255, 187.0/255, 1)
        palette:Add(color:Copy())

        // Pastel Orange
        color:SetColor(228.0/255, 187.0/255, 129.0/255, 1)
        palette:Add(color:Copy())

        // Blue
        color:SetColor(113.0/255, 163.0/255, 220.0/255, 1)
        palette:Add(color:Copy())

        // Light peach
        color:SetColor(236.0/255, 208.0/255, 190.0/255, 1)
        palette:Add(color:Copy())

        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action ExcitingPalette() returns Array <Color>
        Array <Color> palette
        // Bright pink
        color:SetColor(244.0/255, 41.0/255, 122.0/255, 1)
        palette:Add(color:Copy())

        // Bright Red
        color:SetColor(242.0/255, 0/255, 22.0/255, 1)
        palette:Add(color:Copy())

        // Lighter Orange
        color:SetColor(253.0/255, 155.0/255, 23.0/255, 1)
        palette:Add(color:Copy()) 

        // Purple
        color:SetColor(114.0/255, 42.0/255, 114.0/255, 1)
        palette:Add(color:Copy())

        // Bright Green
        color:SetColor(37.0/255, 183.0/255, 13.0/255, 1)
        palette:Add(color:Copy())

        // Light pastel blue
        color:SetColor(155.0/255, 200.0/255, 216.0/255, 1)
        palette:Add(color:Copy())

        // Neutral Red
        color:SetColor(187.0/255, 7.0/255, 16.0/255, 1)
        palette:Add(color:Copy()) 

        // Bluish purple
        color:SetColor(89.0/255, 87.0/255, 171.0/255, 1)
        palette:Add(color:Copy())

        // Greenish Gray
        color:SetColor(91.0/255, 97.0/255, 87.0/255, 1)
        palette:Add(color:Copy()) 

        // Navy blue
        color:SetColor(51.0/255, 42.0/255, 151.0/255, 1)
        palette:Add(color:Copy())

        // Darker Orange
        color:SetColor(253.0/255, 107.0/255, 7.0/255, 1)
        palette:Add(color:Copy())

        // Yellow
        color:SetColor(239.0/255, 201.0/255, 31.0/255, 1)
        palette:Add(color:Copy())

        // Ocean Blue
        color:SetColor(12.0/255, 94.0/255, 154.0/255, 1)
        palette:Add(color:Copy())

        // Dark Red
        color:SetColor(125.0/255, 0.0/255, 3.0/255, 1)
        palette:Add(color:Copy())

        // Dark Teal
        color:SetColor(57.0/255, 126.0/255, 123.0/255, 1)
        palette:Add(color:Copy())

        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action PositivePalette() returns Array <Color>
        Array <Color> palette
        // Yellow
        color:SetColor(239.0/255, 201.0/255, 31.0/255, 1)
        palette:Add(color:Copy())

        // Bright Red
        color:SetColor(242.0/255, 0.0/255, 22.0/255, 1)
        palette:Add(color:Copy()) 

        // Bright pink
        color:SetColor(244.0/255, 41.0/255, 122.0/255, 1)
        palette:Add(color:Copy())

        // Bright Green
        color:SetColor(37.0/255, 183.0/255, 13.0/255, 1)
        palette:Add(color:Copy())

        // Lighter Orange
        color:SetColor(253.0/255, 155.0/255, 23.0/255, 1)
        palette:Add(color:Copy())

        // Bright Baby Blue
        color:SetColor(44.0/255, 177.0/255, 239.0/255, 1)
        palette:Add(color:Copy())

        // Darker Orange
        color:SetColor(253.0/255, 107.0/255, 7.0/255, 1)
        palette:Add(color:Copy()) 

        // Yellowish Green
        color:SetColor(170.0/255, 218.0/255, 68.0/255, 1)
        palette:Add(color:Copy())

        // Dark Yellowish Green
        color:SetColor(74.0/255, 131.0/255, 34.0/255, 1)
        palette:Add(color:Copy())

        // Pastel Baby Blue
        color:SetColor(122.0/255, 199.0/255, 237.0/255, 1)
        palette:Add(color:Copy())

        // Bright Teal
        color:SetColor(23.0/255, 179.0/255, 170.0/255, 1)
        palette:Add(color:Copy())

        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action NegativePalette() returns Array <Color>
        Array <Color> palette
        // Neutral Red
        color:SetColor(187.0/255, 7.0/255, 16.0/255, 1)
        palette:Add(color:Copy())

        // Darker Brown
        color:SetColor(85.0/255, 35.0/255, 23.0/255, 1)
        palette:Add(color:Copy())

        // Greenish Gray
        color:SetColor(91.0/255, 97.0/255, 87.0/255, 1)
        palette:Add(color:Copy())

        // Dark Navy
        color:SetColor(39.0/255, 67.0/255, 94.0/255, 1)
        palette:Add(color:Copy())

        // Neutral Gray
        color:SetColor(118.0/255, 129.0/255, 125.0/255, 1)
        palette:Add(color:Copy())

        // Dark Red
        color:SetColor(125.0/255, 0.0/255, 3.0/255, 1)
        palette:Add(color:Copy())

        // Pastel Eggplant
        color:SetColor(133.0/255, 131.0/255, 173.0/255, 1)
        palette:Add(color:Copy())

        // Dark Purplish Gray
        color:SetColor(36.0/255, 38.0/255, 77.0/255, 1)
        palette:Add(color:Copy())

        // Dark Forest Green
        color:SetColor(65.0/255, 88.0/255, 33.0/255, 1)
        palette:Add(color:Copy())

        // Light Gray
        color:SetColor(202.0/255, 202.0/255, 202.0/255, 1)
        palette:Add(color:Copy())

        // Lighter Brown
        color:SetColor(112.0/255, 63.0/255, 53.0/255, 1)
        palette:Add(color:Copy())

        // Dark Gray
        color:SetColor(46.0/255, 46.0/255, 46.0/255, 1)
        palette:Add(color:Copy())       

        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action SeriousPalette() returns Array <Color>
        Array <Color> palette
        // Dark Navy
        color:SetColor(39.0/255, 67.0/255, 94.0/255, 1)
        palette:Add(color:Copy())

        // Lighter Brown
        color:SetColor(112.0/255, 63.0/255, 53.0/255, 1)
        palette:Add(color:Copy())

        // Dark Yellowish Green
        color:SetColor(74.0/255, 131.0/255, 34.0/255, 1)
        palette:Add(color:Copy())

        // Dark Purplish Gray
        color:SetColor(36.0/255, 38.0/255, 77.0/255, 1)
        palette:Add(color:Copy())

        // Dark Red
        color:SetColor(125.0/255, 0.0/255, 3.0/255, 1)
        palette:Add(color:Copy())

        // Darkest Teal
        color:SetColor(18.0/255, 79.0/255, 78.0/255, 1)
        palette:Add(color:Copy())

        // Greenish Mustard
        color:SetColor(149.0/255, 167.0/255, 59.0/255, 1)
        palette:Add(color:Copy())

        // Bright Red
        color:SetColor(242.0/255, 0/255, 22.0/255, 1)
        palette:Add(color:Copy())

        // Neutral Gray
        color:SetColor(118.0/255, 129.0/255, 125.0/255, 1)
        palette:Add(color:Copy())

        // Greenish Gray
        color:SetColor(91.0/255, 97.0/255, 87.0/255, 1)
        palette:Add(color:Copy()) 

        // Darker Brown
        color:SetColor(85.0/255, 35.0/255, 23.0/255, 1)
        palette:Add(color:Copy())

        // True Navy
        color:SetColor(22.0/255, 58.0/255, 101.0/255, 1)
        palette:Add(color:Copy()) 

        // Dark Gray
        color:SetColor(46.0/255, 46.0/255, 46.0/255, 1)
        palette:Add(color:Copy())  

        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action PlayfulPalette() returns Array <Color>
        Array <Color> palette
        // Darker Orange
        color:SetColor(253.0/255, 107.0/255, 7.0/255, 1)
        palette:Add(color:Copy()) 

        // Bright purple
        color:SetColor(150.0/255, 62.0/255, 153.0/255, 1)
        palette:Add(color:Copy())

        // Yellow
        color:SetColor(239.0/255, 201.0/255, 31.0/255, 1)
        palette:Add(color:Copy())

        // Bright Red
        color:SetColor(242.0/255, 0/255, 22.0/255, 1)
        palette:Add(color:Copy())

        // Bright pink
        color:SetColor(244.0/255, 41.0/255, 122.0/255, 1)
        palette:Add(color:Copy())

        // Lighter Orange
        color:SetColor(253.0/255, 155.0/255, 23.0/255, 1)
        palette:Add(color:Copy()) 

        // Bright Baby Blue
        color:SetColor(44.0/255, 177.0/255, 239.0/255, 1)
        palette:Add(color:Copy())

        // Bright Teal
        color:SetColor(23.0/255, 179.0/255, 170.0/255, 1)
        palette:Add(color:Copy())

        // Bright Green
        color:SetColor(37.0/255, 183.0/255, 13.0/255, 1)
        palette:Add(color:Copy())

        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action TrustworthyPalette() returns Array <Color>
        Array <Color> palette
        // Bright Baby Blue
        color:SetColor(44.0/255, 177.0/255, 239.0/255, 1)
        palette:Add(color:Copy())

        //Dark Teal
        color:SetColor(57.0/255, 126.0/255, 123.0/255, 1)
        palette:Add(color:Copy())

        // Pastel green
        color:SetColor(158.0/255, 211.0/255, 144.0/255, 1)
        palette:Add(color:Copy())

        // Pastel Eggplant
        color:SetColor(133.0/255, 131.0/255, 173.0/255, 1)
        palette:Add(color:Copy())

        // Bright Green
        color:SetColor(37.0/255, 183.0/255, 13.0/255, 1)
        palette:Add(color:Copy())

        // Pastel Baby Blue
        color:SetColor(122.0/255, 199.0/255, 237.0/255, 1)
        palette:Add(color:Copy())

        // Lighter Orange
        color:SetColor(253.0/255, 155.0/255, 23.0/255, 1)
        palette:Add(color:Copy()) 

        // Darker Blue
        color:SetColor(13.0/255, 91.0/255, 192.0/255, 1)
        palette:Add(color:Copy())

        // Yellow
        color:SetColor(239.0/255, 201.0/255, 31.0/255, 1)
        palette:Add(color:Copy())

        //Pastel Teal
        color:SetColor(146.0/255, 194.0/255, 179.0/255, 1)
        palette:Add(color:Copy()) 

        // Darker Orange
        color:SetColor(253.0/255, 107.0/255, 7.0/255, 1)
        palette:Add(color:Copy())

        // Yellowish Green
        color:SetColor(170.0/255, 218.0/255, 68.0/255, 1)
        palette:Add(color:Copy())

        return palette
    end

    /*
        See the paper below for more information on this palette
        https://research.tableau.com/sites/default/files/Affective%20Color%20CHI%202017.pdf
    */
    private action DisturbingPalette() returns Array <Color>
        Array <Color> palette
        // Dark Gray
        color:SetColor(46.0/255, 46.0/255, 46.0/255, 1)
        palette:Add(color:Copy())  

        // Yellow
        color:SetColor(239.0/255, 201.0/255, 31.0/255, 1)
        palette:Add(color:Copy())

        // Bright Red
        color:SetColor(242.0/255, 0/255, 22.0/255, 1)
        palette:Add(color:Copy())

        // Dark Purplish Gray
        color:SetColor(36.0/255, 38.0/255, 77.0/255, 1)
        palette:Add(color:Copy())

        // Dark Red
        color:SetColor(125.0/255, 0.0/255, 3.0/255, 1)
        palette:Add(color:Copy())

        // Darker Orange
        color:SetColor(253.0/255, 107.0/255, 7.0/255, 1)
        palette:Add(color:Copy())

        // Greenish Mustard
        color:SetColor(149.0/255, 167.0/255, 59.0/255, 1)
        palette:Add(color:Copy())

        // Neutral Red
        color:SetColor(187.0/255, 7.0/255, 16.0/255, 1)
        palette:Add(color:Copy()) 

        // Lighter Brown
        color:SetColor(112.0/255, 63.0/255, 53.0/255, 1)
        palette:Add(color:Copy())

        // Neutral Gray
        color:SetColor(118.0/255, 129.0/255, 125.0/255, 1)
        palette:Add(color:Copy())
        
        // Bright Green
        color:SetColor(37.0/255, 183.0/255, 13.0/255, 1)
        palette:Add(color:Copy())

        // Darker Brown
        color:SetColor(85.0/255, 35.0/255, 23.0/255, 1)
        palette:Add(color:Copy())  

        return palette
    end

    /*
        This palette was produced by Masataka Okabe and Kei (both colorblind) at the University of Japan in 2002
        Since then it has been advocated as a palette distinguishable by all whom are colorblind and not colorblind.
        https://jfly.uni-koeln.de/color/
    */
    private action ColorblindPalette() returns Array <Color>
        Array <Color> palette
        // Black 
        color:SetColor(0.0/255, 0.0/255, 0.0/255, 1)
        palette:Add(color:Copy())

        // Orange
        color:SetColor(230.0/255, 159.0/255, 0.0/255, 1)
        palette:Add(color:Copy())

        // Sky Blue
        color:SetColor(86.0/255, 180.0/255, 233.0/255, 1)
        palette:Add(color:Copy())

        // Bluish Green
        color:SetColor(0.0/255, 158.0/255, 115.0/255, 1)
        palette:Add(color:Copy())

        // Yellow
        color:SetColor(240.0/255, 228.0/255, 66.0/255, 1)
        palette:Add(color:Copy())

        // Blue
        color:SetColor(0.0/255, 114.0/255, 178.0/255, 1)
        palette:Add(color:Copy())

        // Vermillion
        color:SetColor(213.0/255, 94.0/255, 0.0/255, 1)
        palette:Add(color:Copy())

        // Reddish Purple (pink)
        color:SetColor(204.0/255, 121.0/255, 167.0/255, 1)
        palette:Add(color:Copy())

        return palette
    end
    /* 
        This palette was created by Gramazio, Connor C. and Laidlaw, David H. and Schloss, Karen B. in 2017
        IEEE Transactions on Visualization and Computer Graphics - Colorgorical: creating discriminable and preferable color palettes for information visualization
        http://vrl.cs.brown.edu/color
    }
    */
    private action ColorgoricalPalette() returns Array <Color>
        Array <Color> palette

        color:SetColor(48.0/255, 79.0/255, 155.0/255, 1)
        palette:Add(color:Copy())

        color:SetColor(174.0/255, 219.0/255, 240.0/255, 1)
        palette:Add(color:Copy())
        
        color:SetColor(64.0/255, 101.0/255, 94.0/255, 1)
        palette:Add(color:Copy())

        color:SetColor(90.0/255, 199.0/255, 220.0/255, 1)
        palette:Add(color:Copy())

        color:SetColor(124.0/255, 40.0/255, 164.0/255, 1)
        palette:Add(color:Copy())

        color:SetColor(215.0/255, 124.0/255, 221.0/255, 1)
        palette:Add(color:Copy())

        color:SetColor(55.0/255, 136.0/255, 17.0/255, 1)
        palette:Add(color:Copy())

        color:SetColor(137.0/255, 235.0/255, 123.0/255, 1)
        palette:Add(color:Copy())

        return palette
    end
    
    
private action DefaultLightPalette returns Array <Color>
Array <Color> palette
        //Dark Slate Blue
color:SetColor(59.0/255, 62.0/255, 172.0/255, 1)
        palette:Add(color:Copy())
        
//Light Sea Green
color:SetColor(33.0/255, 166.0/255, 149.0/255, 1)
        palette:Add(color:Copy())
        
        //Fire Brick Red
color:SetColor(184.0/255, 46.0/255, 46.0/255, 1)
        palette:Add(color:Copy())
        
        //Dark GoldenRod
color:SetColor(214.0/255, 128.0/255, 0.0/255, 1)
        palette:Add(color:Copy())
        
//Dark Magenta
color:SetColor(153.0/255, 0.0/255, 153.0/255, 1)
        palette:Add(color:Copy())
        
//light sea green
color:SetColor(0.0/255, 153.0/255, 198.0/255, 1)
        palette:Add(color:Copy())
        
//Red Brown
color:SetColor(221.0/255, 68.0/255, 119.0/255, 1)
        palette:Add(color:Copy())
        
//Forest Green
color:SetColor(16.0/255, 150.0/255, 24.0/255, 1)
        palette:Add(color:Copy())
        
//Slate Blue
color:SetColor(102.0/255, 51.0/255, 204.0/255, 1)
        palette:Add(color:Copy())
        
        return palette
    end
    
    /*
        This action builds an interpolated palette between two colors and produces the passed number of colors for optimal contrast.

        Attribute: Parameters two colors interpolated respectively and an integer of how many colors to be made.
    */
    private action InterpolatedPalette(Color colorA, Color colorB, integer shades) returns Array <Color>
        Array <Color> palette

        number coefficient = 1.0/shades // shades + 1 because we don't want it to ever actually just be white
        number current = 0 
        // Shades of newcolor
        integer i = 0
        repeat while i < shades
            colorA:LinearInterpolation(colorB, current)
            palette:Add(colorA:Copy())
            current = current + coefficient
            i = i + 1
        end

        return palette
    end

    /*
        This action builds an interpolated palette between three colors and produces the passed number of colors for optimal contrast.

        Attribute: Parameters three colors interpolated respectively and an integer of how many colors to be made.
    */
    private action InterpolatedPalette(Color colorA, Color colorB, Color colorC, integer shades) returns Array <Color>
        Array <Color> palette

        // First half ColorA to ColorB
        integer half = shades/2
        number coefficient = 1.0/half
        number current = 0 
        integer i = 0
        repeat while i < half
            colorA:LinearInterpolation(colorB, current)
            palette:Add(colorA:Copy())
            current = current + coefficient
            i = i + 1
        end

        // Second half ColorB to ColorC
        coefficient = 1.0/(shades-half)
        current = 0 
        i = 0
        repeat while i < (shades-half)
            colorB:LinearInterpolation(colorC, current)
            palette:Add(colorB:Copy())
            current = current + coefficient
            i = i + 1
        end

        return palette
    end

    /* 
        This action obtains the default bar color on the system. It is light Blue by default.

        Attribute: Returns returns the default bar color, which is light Blue unless changed.
    */
    action GetSelectionColor returns Color
        return selectionColor
    end
    
    /*
        This action sets the default selection color for all charts with bars on the system. If a chart is already created,
        changing this does not necessarily change its defaults, as these are set when graphics are first loaded.

        Attribute: Parameter barColor The default bar color
    */ 
    action SetSelectionColor(Color selectionColor)
        me:selectionColor = selectionColor
    end

    /*
        This obtains how many significant digits are used when representing ticks.

        Attribute: Returns the number of significant digits to use for ticks
    */ 
    action GetTickDigits returns integer
        return tickDigits
    end

    /*
        This changes how many significant digits are used when representing ticks.

        Attribute: Parameter tickDigits the new number of digits to use for ticks.
    */ 
    action SetTickDigits(integer tickDigits)
        me:tickDigits = tickDigits
    end

end