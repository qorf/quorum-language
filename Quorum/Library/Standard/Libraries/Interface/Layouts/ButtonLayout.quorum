package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Button
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Glyph


/*
This class is used to layout the internal components of a button. This is only used internally
and most users will never need to use this class directly.
*/
class ButtonLayout is Layout

    action Layout(Control container, Array<Item2D> items, number containerWidth, number containerHeight)
        integer containerWidthMode = container:GetHorizontalLayoutMode()
        integer containerHeightMode = container:GetVerticalLayoutMode()

        /*
        We only set the container width if the layout style is FIT_CONTENTS,
        or if it's MAINTAIN_ASPECT_RATIO and setContainerHeight is true.
        */
        boolean setContainerWidth = false

        if containerWidthMode = container:FIT_CONTENTS
            setContainerWidth = true
        end

        /*
        We only set the container width if the layout style is FIT_CONTENTS, FIT_FONT,
        or if it's MAINTAIN_ASPECT_RATIO and setContainerWidth is true.
        */
        boolean setContainerHeight = false

        if containerHeightMode = container:FIT_CONTENTS or containerHeightMode = container:FIT_FONT
                or (containerHeightMode = container:MAINTAIN_ASPECT_RATIO and setContainerWidth = true)

            setContainerHeight = true
        end

        // Now that we know whether or not we set the container height, we can check for horizontal aspect ratio.
        if containerWidthMode = container:MAINTAIN_ASPECT_RATIO and setContainerHeight = true
            setContainerWidth = true
        end


        Button button = cast(Button, container)
        Label label = undefined
        Icon icon = undefined        

        // Iterate over the elements in the Button to figure out which elements we have.
        integer counter = 0
        repeat while counter < items:GetSize()
            Item2D item = items:Get(counter)
            if item is Label
                label = cast(Label, item)
            elseif item is Icon
                icon = cast(Icon, item)
            end

            counter = counter + 1
        end

        /*
        There are three possible states for the internals of the button:
        1. There is a Label, but no Icon
        2. There is both a Label and an Icon
        3. There are no internal components (Image-style buttons don't use a child Icon, they use a special View2D instead)
        */
        if label = undefined
            /*
            If we don't have a Label, then the Button has no internal components (most likely because
            it's represented by a View2D, especially an ImageControlView representing an image button). In this
            case we only care about ensuring any container dimensions are set, if needed.
            */
            
            number totalWidth = containerWidth
            number totalHeight = containerHeight
            if setContainerWidth and containerWidthMode not= container:MAINTAIN_ASPECT_RATIO
                if containerHeightMode = container:FIT_CONTENTS
                    // In this case, there aren't contents in the traditional sense, but it's not unreasonable to expect this to fit to the size of the Icon.
                    // We should be able to get this from the Container's properties.
                    TextureRegion rawIcon = container:GetDefaultLayoutProperties():GetIcon()
                    totalWidth = rawIcon:GetRegionWidth()
                end
            end

            if setContainerHeight
                if containerHeightMode = container:FIT_FONT
                    totalHeight = container:GetFont():GetLineHeight()
                elseif containerHeightMode = container:FIT_CONTENTS
                    // In this case, there aren't contents in the traditional sense, but it's not unreasonable to expect this to fit to the size of the Icon.
                    // We should be able to get this from the Container's properties.
                    TextureRegion rawIcon = container:GetDefaultLayoutProperties():GetIcon()
                    totalHeight = rawIcon:GetRegionHeight()
                elseif containerHeightMode = container:MAINTAIN_ASPECT_RATIO
                    totalHeight = totalWidth * container:GetPercentageHeight()
                end
            end

            if setContainerWidth and containerWidthMode = container:MAINTAIN_ASPECT_RATIO
                totalWidth = totalHeight * container:GetPercentageWidth()
            end

            if setContainerWidth
                if setContainerHeight
                    container:SetSize(totalWidth, totalHeight)
                else
                    container:SetWidth(totalWidth)
                end
            elseif setContainerHeight
                container:SetHeight(totalHeight)
            end
        else
            
number iconWidth = 0
            number iconHeight = 0
            number iconLeftMargin = 0

            if icon not= undefined
                // For simplicity, presume the Icon is always the height of the container minus the label margins, for now, and use its aspect ratio for width.
                iconHeight = containerHeight - label:GetTopMargin() - label:GetBottomMargin()
                iconWidth = iconHeight * icon:GetPercentageWidth()
                iconLeftMargin = icon:GetLeftMargin()
            end

            number labelLeftMargin = label:GetLeftMargin()
            number labelRightMargin = label:GetRightMargin()

            if setContainerWidth = false
                label:SetMaximumWidth(container:GetWidth() - iconWidth - iconLeftMargin - labelLeftMargin - labelRightMargin)
            else
                label:SetMaximumWidth(0)
            end
            
            if button:IsAutomaticFontSizing() and setContainerWidth = false and setContainerHeight = false
                // How much of the width or height we want to attempt to fill with the auto-sized font
                constant number candidatePercentage = 0.9

                constant integer minimumFontSize = 6
                constant integer maximumFontSize = 100

                number candidateHeight = candidatePercentage * containerHeight
                if candidateHeight > containerHeight - label:GetTopMargin() - label:GetBottomMargin()
                    candidateHeight = containerHeight - label:GetTopMargin() - label:GetBottomMargin()
                end
                if icon not= undefined and (candidateHeight > containerHeight - icon:GetTopMargin() - icon:GetBottomMargin())
                    candidateHeight = containerHeight - icon:GetTopMargin() - icon:GetBottomMargin()
                end

                integer candidateFontSize = label:GetFontSize()

                number startHeight = label:GetLineHeight()
                number heightRatio = candidateHeight / startHeight

                number candidateWidth = candidatePercentage * containerWidth
                if candidateWidth > containerWidth - label:GetLeftMargin() - label:GetRightMargin()
                    candidateWidth = containerWidth - label:GetLeftMargin() - label:GetRightMargin()
                end

                // Shorten the candidate width area by the predicted size of the icon
                if icon not= undefined
                    candidateWidth = candidateWidth - (startHeight * heightRatio * icon:GetPercentageWidth()) - icon:GetLeftMargin()
                end

                number startWidth = CalculateTextLength(label:GetFont(), label:GetText())
                number widthRatio = candidateWidth / startWidth
                
                if widthRatio < heightRatio
                    // If the size needed to make the font fit horizontally is less than half the size to fit vertically,
                    // It's time to consider wrapping the text.
                    text labelText = label:GetText()
                    if widthRatio < heightRatio / 2.0 and labelText:Contains(" ")
                        integer startSize = cast(integer, candidateFontSize * heightRatio)
number divisor = 1.5
                        integer currentSize = cast(integer, startSize / divisor)
                        label:SetFontSize(currentSize)
                        
                        repeat while currentSize > minimumFontSize and label:GetHeight() > candidateHeight
                            divisor = divisor + 0.5
                            currentSize = cast(integer, startSize / divisor)
                            label:SetFontSize(currentSize)
                        end
                        
                        candidateFontSize = currentSize
                    else
candidateFontSize = cast(integer, candidateFontSize * widthRatio)
                    end
                else
                    candidateFontSize = cast(integer, candidateFontSize * heightRatio)
                end

                if candidateFontSize < minimumFontSize
                    candidateFontSize = minimumFontSize
                elseif candidateFontSize > maximumFontSize
                    candidateFontSize = maximumFontSize
                end

                label:SetFontSize(candidateFontSize)
                
                // If there's a single word that's too long to fit, try to compensate.
                number longestWord = CalculateLongestWordLength(label:GetFont(), label:GetText())
                if label:GetMaximumWidth() > 0 and longestWord > label:GetMaximumWidth()
                    candidateFontSize = cast(integer, candidateFontSize * (label:GetMaximumWidth() / longestWord))
                    if candidateFontSize < minimumFontSize
                        candidateFontSize = minimumFontSize
                    end
                    
                    if label:GetFontSize() not= candidateFontSize
                        label:SetFontSize(candidateFontSize)
                    end
                end
            end

            
            if label:GetDefaultLayoutProperties():NeedsRendering()
                label:LoadGraphics(label:GetDefaultLayoutProperties())
            end

            // Figure out how much space is actually taken up inside the Button now that the label has laid out its characters.
            number internalWidth = iconWidth + label:GetWidth()
            if icon not= undefined
                internalWidth = internalWidth + labelLeftMargin
            end

            number totalWidth = 0
            if setContainerWidth = false
                totalWidth = container:GetWidth()
            elseif containerWidthMode not= container:MAINTAIN_ASPECT_RATIO
                totalWidth = iconLeftMargin + iconWidth + labelLeftMargin + label:GetWidth() + labelRightMargin
            end

            /*
            Before we start setting any X values, we should determine what the relative heights look like as well.
            Depending on the layout mode, there's a possibility we'll need the height to determine the width (if we're
            using the MAINTAIN_ASPECT_RATIO mode).
            */
            number totalHeight = 0
            number labelTopMargin = label:GetTopMargin()
            number labelBottomMargin = label:GetBottomMargin()
            if setContainerHeight
                if containerHeightMode = container:FIT_FONT
                    totalHeight = container:GetFont():GetLineHeight() + labelTopMargin + labelBottomMargin
                elseif containerHeightMode = container:FIT_CONTENTS
                    totalHeight = label:GetHeight() + labelTopMargin + labelBottomMargin
                elseif containerHeightMode = container:MAINTAIN_ASPECT_RATIO
                    totalHeight = totalWidth * container:GetPercentageHeight()
                end
            else
                totalHeight = container:GetHeight()
            end

            if containerWidthMode = container:MAINTAIN_ASPECT_RATIO
                totalWidth = totalHeight * container:GetPercentageWidth()
            end

            if setContainerWidth
                if setContainerHeight
                    container:SetSize(totalWidth, totalHeight)
                else
                    container:SetWidth(totalWidth)
                end
            elseif setContainerHeight
                container:SetHeight(totalHeight)
            end

            number iconX = (totalWidth - internalWidth) / 2.0
            if iconX < iconLeftMargin
                iconX = iconLeftMargin
            end
            
            number iconY = (totalHeight - iconHeight) / 2.0
            if icon not= undefined and iconY < icon:GetBottomMargin()
                iconY = icon:GetBottomMargin()
            end

            number labelX = iconX
            if icon not= undefined
                labelX = iconX + iconWidth + labelLeftMargin
            elseif labelX < labelLeftMargin
                labelX = labelLeftMargin
            end

            number labelY = (totalHeight - label:GetHeight()) / 2.0
            if label:GetLineCount() > 1
                labelY = labelY + label:GetFont():GetLineHeight() * (label:GetLineCount() - 1)
            end
            if labelY < labelBottomMargin
                labelY = labelBottomMargin
            end

            if icon not= undefined
                icon:SetSize(iconWidth, iconHeight)
                icon:SetPosition(iconX, iconY)
            end

            label:SetPosition(labelX, labelY)
        end
    end
    
    private action CalculateTextLength(Font font, text value) returns number
        number result = 0
        integer i = 0
        repeat while i < value:GetSize()
            Glyph glyph = font:GetGlyph(value:GetCharacter(i))
            result = result + glyph:horizontalAdvance
            i = i + 1
        end
        
        return result
    end
    
    private action CalculateLongestWordLength(Font font, text value) returns number
number currentWord = 0
        number longestWord = 0
        integer i = 0
        repeat while i < value:GetSize()
            text character = value:GetCharacter(i)
            if character = " "
                if currentWord > longestWord
                    longestWord = currentWord
                end
                currentWord = 0
            else
Glyph glyph = font:GetGlyph(value:GetCharacter(i))
            currentWord = currentWord + glyph:horizontalAdvance
            end
            
            i = i + 1
        end
        
        if currentWord > longestWord
            longestWord = currentWord
        end
        
        return longestWord
    end
    

end