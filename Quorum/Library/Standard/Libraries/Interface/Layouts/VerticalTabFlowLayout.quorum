package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Font
use Libraries.Interface.Controls.Tab
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.TabBar
use Libraries.Interface.Controls.Icon

class VerticalTabFlowLayout is TabFlowLayout
    
    action Layout(Control container, Array<Item2D> items, number containerWidth, number containerHeight)

        // This is the y position of the next item.
        // The offset is used to push tabs upward (simulating scrolling) if there's too many to display all at once.
        number yOffset = GetOffset()

        LayoutProperties containerProperties = undefined
        number topContainerBorder = 0
        number bottomContainerBorder = 0
        
        // The smallest width allowed based on the Tab labels. Sets the container's width if it's too small or if it's using FIT_CONTENTS for width.
number minimumContainerWidth = 0
        
        number containerLeftPadding = 0
        number containerRightPadding = 0
        number containerTopPadding = 0
        
        number defaultTabSpacing = 0
        boolean useLargeTabs = false

        if container not= undefined
            containerProperties = container:GetLayoutProperties(containerWidth, containerHeight)
            if containerProperties not= undefined and containerProperties:NeedsRendering()
                    container:LoadGraphics(containerProperties)
            end
            
containerLeftPadding = container:GetLeftPadding()
            containerRightPadding = container:GetRightPadding()
            containerTopPadding = container:GetTopPadding()
            
            if container is TabBar
                TabBar bar = cast(TabBar, container)
                defaultTabSpacing = bar:GetTabSpacing() * bar:GetInterfaceScale()
                useLargeTabs = bar:IsUsingLargeTabs()
            end
            
// Adjust the container width to fit the labels if the container is using FIT_CONTENTS.
                // Find the tab with the longest label. Use that to set the width.
                integer counter = 0
                repeat while counter < items:GetSize()
                    Item2D item = items:Get(counter)
                    if item is Tab
                        Tab tab = cast(Tab, item)
                        Label label = tab:GetLabel()
                    number leftSpacing = tab:GetLeftMargin()
                    number rightSpacing = tab:GetRightMargin()
                    if leftSpacing < containerLeftPadding
                        leftSpacing = containerLeftPadding
                    end
                    if rightSpacing < containerRightPadding
                        rightSpacing = containerRightPadding
                    end
                        number labelWidth = leftSpacing + label:GetWidth() + (label:GetLeftMargin() + label:GetRightMargin()) * label:GetInterfaceScale() + rightSpacing
                    if useLargeTabs = false
                        Icon icon = tab:GetTabIcon()
                        if icon:IsShowing()
                            labelWidth = labelWidth + icon:GetWidth() + icon:GetLeftMargin()
                        end
                    end
                
                        if labelWidth > minimumContainerWidth
                            minimumContainerWidth = labelWidth
                        end
                    end
                    counter = counter + 1
                end
            
            if containerWidth < minimumContainerWidth or container:GetHorizontalLayoutMode() = container:FIT_CONTENTS
                            containerWidth = minimumContainerWidth
            container:SetWidth(minimumContainerWidth)
            end
            
            if container:HasTopBorder()
                topContainerBorder = container:GetBorderThickness() * container:GetInterfaceScale()
            end
            if container:HasBottomBorder()
                bottomContainerBorder = container:GetBorderThickness() * container:GetInterfaceScale()
            end
        end

        // Objects are placed such that their top edge is at the currentY.
        number currentY = containerHeight - topContainerBorder + yOffset
        number topSpacing = containerTopPadding
        boolean firstControl = true

        i = 0
        repeat while i < items:GetSize()
            Item2D item = items:Get(i)

            if item is Control
                Control control = cast(Control, item)
                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)

                if properties:NeedsRendering()
                    control:LoadGraphics(properties)
                end

                if properties not= undefined and (IsIgnoringHidden() = false or control:IsShowing())
                    if firstControl
                        if properties:GetTopMargin() > topSpacing
                            topSpacing = properties:GetTopMargin()
                        end
                        currentY = currentY - topSpacing
                        firstControl = false
                    end
                    number width = 0
                    number height = 0
                    number leftMargin = properties:GetLeftMargin()
                    number rightMargin = properties:GetRightMargin()
                    number topMargin = properties:GetTopMargin()
                    number bottomMargin = properties:GetBottomMargin()
number leftPadding = properties:GetLeftPadding()
                    number rightPadding = properties:GetRightPadding()
                    number topPadding = properties:GetTopPadding()
                    number bottomPadding = properties:GetBottomPadding()
                    
                    number x = leftMargin
                    if x < containerLeftPadding
                        x = containerLeftPadding
                    end
                    
                    number rightSpacing = rightMargin
                    if rightMargin < containerRightPadding
                        rightSpacing = containerRightPadding
                    end
                    
                    // Indicates the width must be calculated by the Item, or is calculated via means we don't support.
                    boolean unknownWidth = false
                    // Indicates the height must be calculated by the Item.
                    boolean unknownHeight = false
                    
                    if properties:GetHorizontalLayoutMode() = properties:STANDARD
                        width = properties:GetPercentageWidth() * containerWidth + (properties:GetPixelWidth() * properties:GetInterfaceScale()) - x - rightSpacing
                    elseif properties:GetHorizontalLayoutMode() = properties:FILL
                        width = containerWidth - x - rightSpacing
                    else
                        unknownWidth = true
                    end
                    
                    if properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                        unknownHeight = true
                    elseif properties:GetVerticalLayoutMode() = properties:STANDARD
                        height = properties:GetPercentageHeight() * containerHeight + (properties:GetPixelHeight() + topPadding + bottomPadding) * properties:GetInterfaceScale()
                    elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                        Font font = control:GetFont()
                        if font not= undefined
if font:GetSize() not= cast(integer, control:GetFontSize() * control:GetInterfaceScale())
                            font:SetSize(cast(integer, control:GetFontSize() * control:GetInterfaceScale()))
                        end
                            number percentHeight = properties:GetPercentageHeight()
                            if percentHeight = 0.0
                                percentHeight = 1.0
                            end
                            
                            height = percentHeight * font:GetLineHeight() + topPadding + bottomPadding
                        else
                            unknownHeight = true
                        end
                        
                    elseif properties:GetVerticalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                        if unknownWidth
                            unknownHeight = true
                        else
                            height = width * properties:GetPercentageHeight()
                        end
                    elseif properties:GetVerticalLayoutMode() = properties:FILL
                        height = currentY
                    end
                    
                    // Ensure values are non-negative.
                    if width < 0
                        width = 0
                    end
                    if height < 0
                        height = 0
                    end
                    
                    if unknownWidth
                        if unknownHeight
                            // We have to rely on the Control to handle its own dimensions.
                            control:Resize()
                        else
                            // We don't know the width, but we know the height, so use that.
                            control:SetHeight(height)
                        end
                    elseif unknownHeight
                        // We must know the width to have reached the elseif statement.
                        control:SetWidth(width)
                    else
                        // We've got both width and height, so set both.
                        control:SetSize(width, height)
                    end
                    
                    // Determine how much space to place between this Tab and the next.
                    number marginSpace = -1
                    if properties:IsSettingBottomMargin()
                        marginSpace = bottomMargin * control:GetInterfaceScale()
                    end
                    if (i + 1) < items:GetSize() and items:Get(i + 1) is Control
                        Control nextControl = cast(Control, items:Get(i + 1))
                        LayoutProperties nextProperties = nextControl:GetDefaultLayoutProperties()
                        if nextProperties:IsSettingTopMargin() and nextProperties:GetTopMargin() > marginSpace
                            marginSpace = nextProperties:GetTopMargin() * nextControl:GetInterfaceScale()
                        end
                    end
                    if marginSpace < 0
                        marginSpace = defaultTabSpacing
                    end
                    
                    control:SetPosition(x, currentY - control:GetHeight())
                    currentY = currentY - control:GetHeight() - marginSpace
                end
            end

            i = i + 1
        end
        
    end
    
end