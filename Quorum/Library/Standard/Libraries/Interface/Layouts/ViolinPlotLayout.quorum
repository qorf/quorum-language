package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.ViolinPlot
use Libraries.Interface.Controls.ControlLabel
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.Texture
use Libraries.Compute.Vector
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Analysis.UnivariateAction
use Libraries.Containers.HashTable
use Libraries.Containers.Support.Pair
use Libraries.Interface.Controls.Charts.Graphics.Plot
use Libraries.Interface.Controls.Charts.Graphics.PlotGroup
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable

/*
    This is the layout class for Violin Chart. This class is responsible for 
    positioning all chart area components of the Violin chart. Generally,
    layout classes such as this are behind the scenes and we do not need to interact
    with them directly.

    Attribute: Author Silafu Yiliyaer & Manuel Martinez, Hannah Williams
    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ViolinPlot
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:AddSelectedColumn(1)
    ViolinPlot chart = frame:ViolinPlot()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()
*/

class ViolinPlotLayout is ChartLayout
    private Math math
    boolean horizontal = false // Default is vertical for box plots
    boolean separateBySeries = false
    boolean separateByFactor = false

    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is ViolinPlot)
            return now
        end

        ViolinPlot chart = cast(ViolinPlot, control)
        boolean split = chart:GetSplitFlag()
        Array <PlotGroup> plotGroups = chart:GetPlotGroups()
        Color transparent
        transparent:SetColor(0,0,0,0)
        number percent = 0.0
        number yMax = chart:GetYAxisMaximum()
        number yMin = chart:GetYAxisMinimum()
        number xMax = chart:GetXAxisMaximum()
        number xMin = chart:GetXAxisMinimum()

        horizontal = chart:GetHorizontalFlag() // Default is vertical
        separateBySeries = chart:IsSeparatedBySeries()
        separateByFactor = chart:IsSeparatedByFactor()
        boolean useFactor = (chart:GetFactorList() not= undefined)
        boolean sideArrow = true

        // These calculate the necessary dimensions of the violinplots
        if plotGroups:GetSize() > 0
            integer numberOfPanels = plotGroups:GetSize()
            if separateByFactor
                numberOfPanels = chart:GetSeriesList():GetSize()
            end
//            if separateBySeries and not useFactor
//                numberOfPanels = 1
//            end
            if separateBySeries and not useFactor
                numberOfPanels = chart:GetSeriesList():GetSize()
            end

            integer panelwidth = cast(integer, chartAreaContainer:GetWidth())/numberOfPanels
            integer height = cast(integer, chartAreaContainer:GetHeight()) 
            number range = (yMax-yMin)
            number rangeMin = yMin
            number rangeMax = yMax
            if horizontal
                sideArrow = false
                panelwidth = cast(integer, chartAreaContainer:GetHeight())/numberOfPanels
                height = cast(integer, chartAreaContainer:GetWidth()) 
                range = (xMax-xMin)
                rangeMin = xMin
                rangeMax = xMax
            end
            number dataScale = range/height

            integer i = 0
            repeat while i < plotGroups:GetSize()
                PlotGroup group = plotGroups:Get(i)

                //Give each group an alloted section  
                integer startpanelw = panelwidth*i
                integer groupHeight = 0

                if group:GetSize() > 0
                    integer groups = plotGroups:GetSize()
                    integer plots = group:GetSize()
                    
                    if split and not separateBySeries
                        if plots = 2
                            plots = 1 // changing the width and line percent for this plot to use 1 section instead of two
                        else
                            output "Violin plot can only be split using two plots. " + group:GetName() + " has " + plots + " plots."
                            split = false
                        end
                    end

                    integer plotsPerPanel = plots
                    if chart:IsSeparated()
                        plotsPerPanel = 1
                        if not separateByFactor
                            split = false
                        end
                    end   

                    integer width = cast(integer, panelwidth/plotsPerPanel)
                    integer center = cast(integer, width/2) 
                    integer centerOffset = center
                    integer size = cast(integer, width/4)
                    number linePercent = (0.0025)*plotsPerPanel*groups
                    if linePercent > 0.05
                        linePercent = 0.05
                    end

                    integer line = cast(integer, width * linePercent)
                    if line < 2
                        line = 2
                    end
                    integer midline = line/2
                    line = midline*2

                    integer k = 0
                    repeat while k < plots
                        Plot plot = group:Get(k)
                        Color color = plot:GetColor()
                        Plot plot2
                        Color color2
                        if split
                            plot2 = group:Get(k+1)
                            color2 = plot2:GetColor()
                            centerOffset = center-line/2
                        end

                        //Give each chart an alloted section  
                        integer startw = (center*2)*k + startpanelw    
                        if separateBySeries
                            if useFactor
                                startw = startpanelw
                            else
                                //startw = width*k
                                // do nothing for now
                            end
                        elseif separateByFactor
                            startw = width*k
                        end

                        /* Indices for items of individual violin plot
                            PLOT ITSELF IS A DRAWABLE - VIOLIN SHAPE
                            0: PLOT AREA (ENTIRE REGION)
                            1: MINIMUM LINE
                            2: LOWER WHISKER //not used in violin
                            3: INTERQUARTILE RANGE
                            4: RIGHT BORDER OF IQR //not used in violin
                            5: LEFT BORDER OF IQR //not used in violin
                            6: Q1 LINE
                            7: MEDIAN LINE
                            8: Q3 LINE
                            9: UPPER WHISKER //not used in violin
                            10: MAXIMUM LINE 
                        */
                        
                        //(0,0) in bottom left corner, width grows in the rightward direction and height grows in the upward direction
                        Array<ChartDrawable> item = plot:GetPlotItems()                       
                        Color darkColor = transparent:Black():Copy() 
    
                        integer centerline = center - midline //This is to center the vertical lines over the very middle of the plot area
                        integer shift = 0
                        if split
                            centerline = center - line
                            shift = line
                        end
                        integer x = startw + centerline

                        if not plot:IsUndefined()
                            number median = plot:GetInfoAt(0)
                            number lowerQuartile = plot:GetInfoAt(1)
                            number upperQuartile = plot:GetInfoAt(2)
                            number minimum = plot:GetInfoAt(3)
                            number maximum = plot:GetInfoAt(4)

                            //Minimum: index 1
                            percent = (minimum - rangeMin)/range
                            item:Get(1):LoadFilledRectangle(line, line, darkColor)
                            item:Get(1):SetPosition(x, cast(integer, percent*height))
    
                            //Q1 (Lower Quartile): index 6
                            percent = (lowerQuartile - rangeMin)/range
                            item:Get(6):LoadFilledRectangle(line*3, line, darkColor)
                            item:Get(6):SetPosition(x - line - shift, cast(integer, percent*height))
    
                            // Lower Whisker: index 2
                            itemHeight = cast(integer, item:Get(6):GetY() - item:Get(1):GetY())
                            if itemHeight < 0
                                itemHeight = 0
                            end
                            item:Get(2):LoadFilledRectangle(line, itemHeight, darkColor)
                            item:Get(2):SetPosition(x, item:Get(1):GetY())
    
                            //Q3 (Upper Quartile): index 8
                            percent = (upperQuartile - rangeMin)/range 
                            item:Get(8):LoadFilledRectangle(line*3, line, darkColor)
                            item:Get(8):SetPosition(x - line - shift, cast(integer, percent*height))

                            //Max: index 10
                            percent = (maximum - rangeMin)/range 
                            item:Get(10):LoadFilledRectangle(line, line, darkColor)
                            item:Get(10):SetPosition(x, cast(integer, percent*height)-line)
    
                            //Upper Whisker: index 9 from q3 to max
                            itemHeight = cast(integer, item:Get(10):GetY() - item:Get(8):GetY())
                            if itemHeight < 0
                                itemHeight = 0
                            end
                            item:Get(9):LoadFilledRectangle(line, itemHeight, darkColor)
                            item:Get(9):SetPosition(x, item:Get(8):GetY())
    
                            //IQR Region: index 3
                            itemHeight = cast(integer, item:Get(8):GetY() - item:Get(6):GetY() + item:Get(8):GetHeight())
                            if itemHeight < 0
                                itemHeight = 0
                            end
                            item:Get(3):LoadFilledRectangle(line*3, itemHeight, darkColor)
                            item:Get(3):SetPosition(item:Get(6):GetX(), item:Get(6):GetY())

                            // Median: index 7
                            percent = (median - rangeMin)/range
                            item:Get(7):LoadFilledCircle(line, darkColor:White())
                            item:Get(7):SetPosition(item:Get(3):GetX() + midline ,cast(integer, percent*height)) // center inside IQR
                        end
                        if split and not plot2:IsUndefined()   
                            Array<ChartDrawable> item2 = plot2:GetPlotItems()
                            x = x + shift

                            median = plot2:GetInfoAt(0)
                            lowerQuartile = plot2:GetInfoAt(1)
                            upperQuartile = plot2:GetInfoAt(2)
                            minimum = plot2:GetInfoAt(3)
                            maximum = plot2:GetInfoAt(4)

                            //Minimum: index 1
                            percent = (minimum - rangeMin)/range
                            item2:Get(1):LoadFilledRectangle(line, line, darkColor)
                            item2:Get(1):SetPosition(x, cast(integer, percent*height))
    
                            //Q1 (Lower Quartile): index 6
                            percent = (lowerQuartile - rangeMin)/range
                            item2:Get(6):LoadFilledRectangle(line*3, line, darkColor)
                            item2:Get(6):SetPosition(x - line + shift, cast(integer, percent*height))
    
                            // Lower Whisker: index 2
                            itemHeight = cast(integer, item2:Get(6):GetY() - item2:Get(1):GetY())
                            if itemHeight < 0
                                itemHeight = 0
                            end
                            item2:Get(2):LoadFilledRectangle(line, itemHeight, darkColor)
                            item2:Get(2):SetPosition(x, item2:Get(1):GetY())
        
                            //Q3 (Upper Quartile): index 8
                            percent = (upperQuartile - rangeMin)/range 
                            item2:Get(8):LoadFilledRectangle(line*3, line, darkColor)
                            item2:Get(8):SetPosition(x - line + shift,cast(integer, percent*height))
    
                            //Max: index 10
                            percent = (maximum - rangeMin)/range 
                            item2:Get(10):LoadFilledRectangle(line, line, darkColor)
                            item2:Get(10):SetPosition(x, cast(integer, percent*height)-line)

                            //Upper Whisker: index 9 from q3 to max
                            itemHeight = cast(integer, item2:Get(10):GetY() - item2:Get(8):GetY())
                            if itemHeight < 0
                                itemHeight = 0
                            end
                            item2:Get(9):LoadFilledRectangle(line, itemHeight, darkColor)
                            item2:Get(9):SetPosition(x, item2:Get(8):GetY())
    
                            //IQR Region: index 3
                            itemHeight = cast(integer, item2:Get(8):GetY() - item2:Get(6):GetY() + item2:Get(8):GetHeight())
                            if itemHeight < 0
                                itemHeight = 0
                            end
                            item2:Get(3):LoadFilledRectangle(line*3, itemHeight, darkColor)
                            item2:Get(3):SetPosition(item2:Get(6):GetX(), item2:Get(6):GetY())
        
                            // Median: index 7
                            percent = (median - rangeMin)/range
                            item2:Get(7):LoadFilledCircle(line, transparent:White())
                            item2:Get(7):SetPosition(item2:Get(3):GetX() + midline ,cast(integer, percent*height)) // center inside IQR

                            //Outer box
                            integer plotAreaHeight = cast(integer, ((plot2:GetMaxOutlierValue() - rangeMin)/range)*height)
                            plot2:GetPlotArea():LoadRectangle(center,plotAreaHeight,transparent)
                            plot2:GetPlotArea():SetPosition(x ,0)
                            if horizontal 
                                plot2:GetPlotArea():LoadRectangle(plotAreaHeight,center,transparent)
                                plot2:GetPlotArea():SetPosition(0, x)
                            end
                            if k = 0
                                groupHeight = cast(integer, plot2:GetPlotArea():GetHeight())
                            end
                            if plotAreaHeight > groupHeight
                                groupHeight = plotAreaHeight
                            end
                            // Load arrow for plot
                            SetChartDrawableSelectionArrow(plot2, line*8, false)

                            if horizontal
                                integer l = 1
                                repeat while l < 11
                                    number temp = item2:Get(l):GetX()
                                    item2:Get(l):SetX(item2:Get(l):GetY())
                                    item2:Get(l):SetY(temp)
                                    
                                    integer w = cast(integer, item2:Get(l):GetWidth())
                                    integer h = cast(integer, item2:Get(l):GetHeight())
                                    item2:Get(l):SetWidth(h)
                                    item2:Get(l):SetHeight(w)                    
                                    l = l + 1
                                end
                            end

                            integer arrowSize = line*4
                            // Load selection arrows and brackets
                            // Load bracket and arrow for iqr
                            SetChartDrawableSelectionBracketAndArrow(item2:Get(3), arrowSize, true)

                            // Load and place the min line selection arrow
                            SetChartDrawableSelectionArrow(item2:Get(1), arrowSize, true)

                            // Load and place the q1 line selection arrow
                            SetChartDrawableSelectionArrow(item2:Get(6), arrowSize, true)

                            // Load and place the median line selection arrow
                            SetChartDrawableSelectionArrow(item2:Get(7), arrowSize, true)

                            // Load and place the q3 line selection arrow
                            SetChartDrawableSelectionArrow(item2:Get(8), arrowSize, true)

                            // Load and place the max line selection arrow
                            SetChartDrawableSelectionArrow(item2:Get(10), arrowSize, true)
                        end

                        if split
                            integer plotAreaHeight = cast(integer, ((plot:GetMaxOutlierValue() - rangeMin)/range)*height)
                            plot:GetPlotArea():LoadRectangle(center,plotAreaHeight,transparent)
                            plot:GetPlotArea():SetPosition(startw,0)
                            if horizontal
                                plot:GetPlotArea():LoadRectangle(plotAreaHeight,center,transparent)
                                plot:GetPlotArea():SetPosition(0,startw)
                            end
                            if plotAreaHeight > groupHeight
                                groupHeight = plotAreaHeight
                            end
                            // Load arrow for plot
                            SetChartDrawableSelectionArrow(plot, line*8, false)
                        else
                            integer plotAreaHeight = cast(integer, ((plot:GetMaxOutlierValue() - rangeMin)/range)*height)
                            plot:GetPlotArea():LoadRectangle(width,plotAreaHeight,transparent)
                            plot:GetPlotArea():SetPosition(startw,0)
                            if horizontal
                                plot:GetPlotArea():LoadRectangle(plotAreaHeight,width,transparent)
                                plot:GetPlotArea():SetPosition(0,startw)
                            end
                            if k = 0
                                groupHeight = cast(integer, plot:GetPlotArea():GetHeight())
                            end
                            if plotAreaHeight > groupHeight
                                groupHeight = plotAreaHeight
                            end
                            // Load arrow for plot
                            SetChartDrawableSelectionArrow(plot, line*8, false)
                        end

                        if horizontal
                            integer l = 1
                            repeat while l < 11
                                number temp = item:Get(l):GetX()
                                item:Get(l):SetX(item:Get(l):GetY())
                                item:Get(l):SetY(temp)
                                
                                integer w = cast(integer, item:Get(l):GetWidth())
                                integer h = cast(integer, item:Get(l):GetHeight())
                                item:Get(l):SetWidth(h)
                                item:Get(l):SetHeight(w)                    
                                l = l + 1
                            end
                        end

                        integer arrowSize = line*4
                        // Load selection arrows and brackets
                        // Load bracket and arrow for iqr
                        SetChartDrawableSelectionBracketAndArrow(item:Get(3), arrowSize, true)

                        // Load and place the min line selection arrow
                        SetChartDrawableSelectionArrow(item:Get(1), arrowSize, true)

                        // Load and place the q1 line selection arrow
                        SetChartDrawableSelectionArrow(item:Get(6), arrowSize, true)

                        // Load and place the median line selection arrow
                        SetChartDrawableSelectionArrow(item:Get(7), arrowSize, true)

                        // Load and place the q3 line selection arrow
                        SetChartDrawableSelectionArrow(item:Get(8), arrowSize, true)

                        // Load and place the max line selection arrow
                        SetChartDrawableSelectionArrow(item:Get(10), arrowSize, true)

                        number bandWidth = chart:GetBandWidth()
                        if bandWidth = 0
                            bandWidth = range*0.03 //rangeMax*0.03
                            chart:SetBandWidth(cast(integer, bandWidth))
                        end
                        
                        if not plot:IsUndefined()
                            Vector data = plot:GetData()
                            if data = undefined 
                                return now
                            end
                            Vector data2
                            number dataMin = data:Get(0)
                            number dataMax = data:Get(data:GetSize()-1)
                            
                            Array <number> estimates
                            Array <number> estimates2
                            
                            number maxEstimate = 0.0
                            number estimateScale = 0.0
                            number maxEstimate2 = 0.0
                            number estimateScale2 = 0.0
                       
                            if split and not plot2:IsUndefined()
                                data2 = plot2:GetData()
                                if data2 = undefined 
                                    return now
                                end
                                number data2Min = data2:Get(0)
                                number data2Max = data2:Get(data2:GetSize()-1)
                                if data2Min < dataMin
                                    dataMin = data2Min
                                else
                                    data2Min = dataMin
                                end
                                if data2Max > dataMax
                                    dataMax = data2Max
                                else
                                    data2Max = dataMax
                                end
    
                                estimates2 = EstimateDensity(bandWidth, dataScale, data2, data2Min, data2Max, chart:GetWindowingAction())
                                maxEstimate2 = estimates2:Get(estimates2:GetSize()-1)
                                estimateScale2 = maxEstimate2/(center)       
                            end

                            estimates = EstimateDensity(bandWidth, dataScale, data, dataMin, dataMax, chart:GetWindowingAction())
                            maxEstimate = estimates:Get(estimates:GetSize()-1)
                            estimateScale = maxEstimate/(center)
                            percent = (dataMin - rangeMin)/range
                            integer nextPixel = cast(integer, percent*height)
    
                            Array<Pair<integer>> points = plot:GetPoints() //Saved points will be used to draw the polygon shapes in svg
                            points:Empty()
                            Array<Pair<integer>> points2
                            if split
                                points2 = plot2:GetPoints()
                                points2:Empty()
                            end

                            integer index = 0
                            repeat while index < estimates:GetSize()-1
                                number estimate = estimates:Get(index)
                                integer pixW = cast(integer, (estimate/estimateScale)*0.75)
                                integer pixH = height - nextPixel
                                if horizontal
                                    pixH = nextPixel
    
                                    // start point of first color
                                    Pair<integer> pair1
                                    integer y1 = cast(integer, center-pixW+startw)
                                    integer x1 = cast(integer, pixH)   
                                    pair1:Set(x1, y1)
                                    points:AddToFront(pair1) 
    
                                    if split and not plot2:IsUndefined()
                                        // end point of first color
                                        Pair<integer> pair2
                                        integer y2 = cast(integer, center+startw)
                                        integer x2 = cast(integer, pixH)
                                        pair2:Set(x2, y2)
                                        if x1 = x2 and y1 = y2 // add 1 pixel spacer if the points are equal
                                            pair2:Set(x2, y2+1)
                                        end
                                        points:AddToEnd(pair2)

                                        // start point of second color
                                        Pair<integer> pair3
                                        integer y3 = cast(integer, center+startw)
                                        integer x3 = cast(integer, pixH)
                                        pair3:Set(x3, y3)
                                        points2:AddToFront(pair3)
    
                                        estimate = estimates2:Get(index)
                                        pixW = cast(integer, (estimate/estimateScale2)*0.75)
    
                                        // end point of second color
                                        Pair<integer> pair4
                                        integer y4 = cast(integer, center+pixW+startw)
                                        integer x4 = cast(integer, pixH)
                                        pair4:Set(x4, y4)
                                        if x3 = x4 and y3 = y4 // add 1 pixel spacer if the points are equal
                                            pair4:Set(x4, y4+1)
                                        end
                                        points2:AddToEnd(pair4)
                                    else
                                        // end point of first color
                                        Pair<integer> pair2
                                        integer y2 = cast(integer, center+pixW+startw)
                                        integer x2 = cast(integer, pixH)
                                        pair2:Set(x2, y2)
                                        if x1 = x2 and y1 = y2 // add a 1 pixel spacer if the points are equal
                                            pair2:Set(x2, y2+1)
                                        end
                                        points:AddToEnd(pair2)
                                    end
                                else
                                    // start point of first color
                                    Pair<integer> pair1
                                    integer x1 = cast(integer, center-pixW+startw)
                                    integer y1 = cast(integer, pixH)   
                                    pair1:Set(x1, y1)
                                    points:AddToFront(pair1) 

                                    if split and not plot2:IsUndefined()
                                        // end point of first color
                                        Pair<integer> pair2
                                        integer x2 = cast(integer, center+startw)
                                        integer y2 = cast(integer, pixH)
                                        pair2:Set(x2, y2)
                                        if x1 = x2 and y1 = y2 // add 1 pixel spacer if the points are equal
                                            pair2:Set(x2+1, y2)
                                        end
                                        points:AddToEnd(pair2)
    
                                        // start point of second color
                                        Pair<integer> pair3
                                        integer x3 = cast(integer, center+startw)
                                        integer y3 = cast(integer, pixH)
                                        pair3:Set(x3, y3)
                                        points2:AddToFront(pair3)
    
                                        estimate = estimates2:Get(index)
                                        pixW = cast(integer, (estimate/estimateScale2)*0.75)

                                        // end point of second color
                                        Pair<integer> pair4
                                        integer x4 = cast(integer, center+pixW+startw)
                                        integer y4 = cast(integer, pixH)
                                        pair4:Set(x4, y4)
                                        if x3 = x4 and y3 = y4 // add 1 pixel spacer if the points are equal
                                            pair4:Set(x4+1, y4)
                                        end
                                        points2:AddToEnd(pair4)
                                    else
                                        // end point of first color
                                        Pair<integer> pair2
                                        integer x2 = cast(integer, center+pixW+startw)
                                        integer y2 = cast(integer, pixH)
                                        pair2:Set(x2, y2)
                                        if x1 = x2 and y1 = y2 // add a 1 pixel spacer if the points are equal
                                            pair2:Set(x2+1, y2)
                                        end
                                        points:AddToEnd(pair2)
                                    end
                                end
                                nextPixel = nextPixel + 1
                                index = index + 1
                            end
    
                            Array<number> vertices
                            Array<Color> colors
                            index = 0
                            repeat while index < points:GetSize()
                                number xCoor = points:Get(index):GetFirstValue()
                                number yCoor = height - points:Get(index):GetSecondValue()
                                if horizontal
                                    yCoor = points:Get(index):GetSecondValue()
                                end 
                                vertices:Add(xCoor)
                                vertices:Add(yCoor)
        
                                colors:Add(color)
                                index = index + 1
                            end 
                            plot:LoadShape(vertices, colors)
    
                            if split and not plot2:IsUndefined()
                                Array<number> vertices2
                                Array<Color> colors2
                                index = 0
                                repeat while index < points2:GetSize()
                                    number xCoor = points2:Get(index):GetFirstValue()
                                    number yCoor = height - points2:Get(index):GetSecondValue()
                                    if horizontal
                                        yCoor = points2:Get(index):GetSecondValue()
                                    end 
                                    vertices2:Add(xCoor)
                                    vertices2:Add(yCoor)
                
                                    colors2:Add(color2)
                                    index = index + 1
                                end 
                                plot2:LoadShape(vertices2, colors2)
                            end
                        end
                        k = k + 1
                    end 
                end  

                //Outer group box
                group:LoadRectangle(panelwidth,groupHeight,transparent)
                group:SetPosition(startpanelw,0)
                if horizontal
                    group:LoadRectangle(groupHeight,panelwidth,transparent)
                    group:SetPosition(0,startpanelw)
                end
                // Load and place the group selection bracket/arrow
                integer arrowSize = 0
                if chart:GetHorizontalFlag()
                    arrowSize = cast(integer, group:GetHeight()/8)
                    integer tickHeight = chart:GetVerticalPanel():GetTickHeight()
                    if arrowSize < tickHeight*2
                        arrowSize = tickHeight*2
                    end
                else
                    arrowSize = cast(integer, group:GetWidth()/8)
                    integer tickWidth = chart:GetHorizontalPanel():GetTickWidth()
                    if arrowSize < tickWidth*2
                        arrowSize = tickWidth*2
                    end
                end
                SetChartDrawableSelectionBracketAndArrow(group, arrowSize, false)
                i = i + 1
            end
        end
    end

    /*    
    KDE: Kernel density esstimation
    It is a method that finds out the normal distribution of a give set of data
    It use kernel functions to calculate the probability of every single data point
    We have: simplest kernel,Gaussian kernel,triangular kernel,parabolic(Epanechnikov) kernel,triweight kernel,
             tricube kernel,cosine kernel,logistic kernel,sigmoid kernel,silverman kernel
    By default, it uses Gaussian kernel which is smother than other kernel functions
    We put this functions here because the distributions at each value is scaled based on the pixel height of the chart

    Parameters: bandWidth is a number that represent the interval, the bigger the number, the flatter the graph will be
                dataScale indicates how data grow from min to max base on pixel height
                kernalFunction indicates what kernel function to use
    */         
      
    action EstimateDensity(number bandWidth,number dataScale, Vector dataset, UnivariateAction window) returns Array<number>
        number min = cast(integer,dataset:Get(0))
        number max = cast(integer,dataset:Get(dataset:GetSize()-1))
        number largest = 0.00000001
        Array<number> estimates
        repeat while min <= max
            integer index = 0
            number sum = 0
            repeat while index < dataset:GetSize()
                number cal = (min - dataset:Get(index))/bandWidth
                sum = sum + window:Calculate(cal)
                index = index+1
            end

            number estimate = sum/(dataset:GetSize()*bandWidth)
            if largest < estimate
                largest = estimate
            end 

            estimates:Add(estimate)
            min = min + dataScale  
        end 
        estimates:Add(largest)
        return estimates
    end

    action EstimateDensity(number bandWidth,number dataScale, Vector dataset, number min, number max, UnivariateAction window) returns Array<number>
        number largest = 0.00000001
        Array<number> estimates
        repeat while min <= max
            integer index = 0
            number sum = 0
            repeat while index < dataset:GetSize()
                number cal = (min - dataset:Get(index))/bandWidth
                sum = sum + window:Calculate(cal)
                index = index+1
            end

            number estimate = sum/(dataset:GetSize()*bandWidth)
            if largest < estimate
                largest = estimate
            end 

            estimates:Add(estimate)
            min = min + dataScale  
        end 
        estimates:Add(largest)
        return estimates
    end
end