package Libraries.Interface.Layouts

use Libraries.Interface.Layouts.Layout

use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Charts.Legend
use Libraries.Interface.Controls.Charts.ChartLabel
use Libraries.Interface.Controls.Charts.Histogram
use Libraries.Interface.Controls.Charts.SharedBarChartParent
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Game.Graphics.Color
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.HorizontalAxisPanel
use Libraries.Interface.Controls.Charts.VerticalAxisPanel
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.ChartAreaPanel
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine
use Libraries.Interface.Controls.Charts.GroupPanel
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Interface.Controls.Charts.TwoVariableChart
use Libraries.Interface.Controls.Charts.Graphics.RegressionLinePointMarker
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Interface.Controls.Charts.ScatterPlot
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Views.PatternControlShaderView

class ChartLayout is Layout
    integer minimumLabelOffset = 35
    number yLabelHeight = 0.30
    Math math

    action Layout(Control container, Array<Item2D> items, number containerWidth, number containerHeight)
        LayoutProperties containerProperties
        integer originPointX = 0
        integer originPointY = 0
        
        if container not= undefined 
            containerProperties = container:GetLayoutProperties(containerWidth, containerHeight)
            if containerProperties not= undefined
                if containerProperties:NeedsRendering()
                    container:LoadGraphics(containerProperties)
                end
            end
            if container is Chart
                if items:GetSize() = 0
                    return now
                end
                Chart chart = cast(Chart, container)
                
                //setting an origin to position containers 
                originPointX = cast(integer, chart:GetWidth()*chart:GetVerticalPanelWidthPercent())
                originPointY = cast(integer, chart:GetHeight()*chart:GetHorizontalPanelHeightPercent())

                // Title
                if chart:IsShowingTitle()
                    ChartLabel titleLabel = chart:GetTitleLabel()
                    if titleLabel:GetDefaultLayoutProperties():NeedsRendering()
                        titleLabel:LoadGraphics(titleLabel:GetDefaultLayoutProperties())
                    end
                    number titleAreaWidth = chart:GetChartArea():GetWidth()
                    number titleAreaHeight = containerHeight*chart:GetTitleAreaHeightPercent()
                    integer titleX = originPointX + cast(integer, titleAreaWidth/2 - titleLabel:GetWidth()/2)
                    integer titleY = cast(integer, containerHeight- titleAreaHeight/2 - titleLabel:GetHeight()/2)
                    titleLabel:SetPosition(titleX, titleY)
                end

                // Title
                if chart:IsShowingSubtitle()
                    ChartLabel subtitleLabel = chart:GetSubtitleLabel()
                    if subtitleLabel:GetDefaultLayoutProperties():NeedsRendering()
                        subtitleLabel:LoadGraphics(subtitleLabel:GetDefaultLayoutProperties())
                    end
                    number subtitleAreaWidth = chart:GetChartArea():GetWidth()
                    number subtitleAreaHeight = containerHeight*chart:GetSubtitleAreaHeightPercent()
                    integer subtitleX = originPointX + cast(integer, subtitleAreaWidth/2 - subtitleLabel:GetWidth()/2)
                    integer subtitleY = cast(integer, containerHeight - subtitleLabel:GetHeight()/2 - containerHeight*chart:GetTitleAreaHeightPercent())
                    subtitleLabel:SetPosition(subtitleX, subtitleY)
                end
                
                //Get Panel Containers
                HorizontalAxisPanel horizontalContainer = chart:GetHorizontalPanel()
                VerticalAxisPanel verticalContainer = chart:GetVerticalPanel()
                Legend legendContainer = chart:GetLegend()
                ChartAreaPanel chartAreaContainer = chart:GetChartArea()

                if horizontalContainer:GetDefaultLayoutProperties():NeedsRendering()
                    horizontalContainer:LoadGraphics(horizontalContainer:GetDefaultLayoutProperties())
                end

                if verticalContainer:GetDefaultLayoutProperties():NeedsRendering()
                    verticalContainer:LoadGraphics(verticalContainer:GetDefaultLayoutProperties())
                end

                originPointX = 0
                originPointY = 0

                if legendContainer:DisplayOnRight() // This is default.. even when legend is not showing.
                    verticalContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                    chartAreaContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    legendContainer:SetPosition(originPointX + verticalContainer:GetWidth() + chartAreaContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())

                    horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    
                elseif legendContainer:DisplayOnLeft()
                    if chart:IsShowingYAxis()
                        legendContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                        verticalContainer:SetPosition(originPointX + legendContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    else
                        verticalContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                        legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    end

                    chartAreaContainer:SetPosition(originPointX + legendContainer:GetWidth() + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())                 
                    horizontalContainer:SetPosition(originPointX + legendContainer:GetWidth() + verticalContainer:GetWidth(), originPointY)

                elseif legendContainer:DisplayOnTop()
                    verticalContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                    chartAreaContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    
                    horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight() + verticalContainer:GetHeight())

                else // legendContainer:DisplayOnBottom()
                    verticalContainer:SetPosition(originPointX, originPointY + legendContainer:GetHeight() + horizontalContainer:GetHeight())
                    chartAreaContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + legendContainer:GetHeight() + horizontalContainer:GetHeight())
                    
                    if chart:IsShowingXAxis()
                        horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + legendContainer:GetHeight())
                        legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    else
                        legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                        horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    end
                end

                if chart:IsSeparated()
                    integer verticalSections = verticalContainer:GetNumberOfSections()
                    integer horizontalSections = horizontalContainer:GetNumberOfSections()
                    integer tilePadding = 25
                    integer height = cast(integer, (chartAreaContainer:GetHeight()-tilePadding*(verticalSections-1))/verticalSections)
                    integer width = cast(integer, (chartAreaContainer:GetWidth()-tilePadding*(horizontalSections-1))/horizontalSections)
                    integer labelArea = 0
                    
                    // Calculate the maximum font size for the sub chart labels.
                    // This way they can be uniformly sized.
                    integer fontSize = 0
                    if chart:IsShowingSubChartAreaTitles()
                        labelArea = cast(integer, height*0.10)
                        integer i = 0
                        repeat while i < chart:GetSubChartAreas():GetSize()
                            ChartLabel label = chart:GetSubChartAreas():Get(i):GetLabel()
                            if label not= undefined
                                label:SetFontSize(cast(integer, labelArea*0.75))
                                if label:GetWidth() > width
                                    integer newSize = cast(integer, label:GetFontSize() * (width/label:GetWidth()))
                                    label:SetFontSize(newSize)
                                end
                                fontSize = label:GetFontSize()
                            end
                            i = i + 1
                        end
                    end

                    // Layout the sub chart areas
                    integer x = 0
                    integer y = 0
                    integer j = 0
                    integer k = 0
                    i = 0
                    repeat while i < chart:GetSubChartAreas():GetSize()
                        ChartAreaPanel subContainer = chart:GetSubChartAreas():Get(i)
                        if x + width > chartAreaContainer:GetWidth()
                            x = 0
                            y = y + height + tilePadding
                        end
                        subContainer:SetPosition(x, y)
                        subContainer:SetSize(width, height-labelArea)
//                        if chart:ShowSubChartAreaBorders()
//                            subContainer:SetBorderColor(chart:GetBorderColor())
//                        else
//                            Color color
//                            color:SetColor(0,0,0,0)
//                            subContainer:SetBorderColor(color)
//                            subContainer:SetBackgroundColor(color)
//                        end
                        subContainer:LoadChartAreaView()
                        if subContainer:GetLabel() not= undefined
                            ChartLabel subchartLabel = subContainer:GetLabel()
                            subchartLabel:SetFontSize(fontSize)
                            subchartLabel:SetPosition(width/2-(subchartLabel:GetWidth()/2), subContainer:GetHeight()+labelArea/6)
                        end
                        LayoutChartContent(chart, subContainer)
                        if y = 0 and k < horizontalContainer:GetNumberOfSections()
                            HorizontalAxisPanel subAxis = chart:GetSubHorizontalPanels():Get(k)
                            subAxis:SetPosition(x,y)
                            subAxis:SetSize(width,horizontalContainer:GetHeight())
                            LayoutHorizontalAxis(chart, subAxis)
                            k = k + 1
                        end

                        if x = 0 and j < verticalContainer:GetNumberOfSections()
                            VerticalAxisPanel subAxis = chart:GetSubVerticalPanels():Get(j)
                            subAxis:SetPosition(x,y)
                            subAxis:SetSize(verticalContainer:GetWidth(),height)
                            LayoutVerticalAxis(chart, subAxis)
                            j = j + 1
                        end
                        x = x + width + tilePadding
                        i = i + 1
                    end
                else
                    LayoutChartContent(chart, chartAreaContainer)
                end

                if chart:IsShowingLegend()
                    LayoutLegend(chart, legendContainer)
                end

                if chart:IsShowingXAxis()
                    LayoutHorizontalAxis(chart, horizontalContainer)
                end

                if chart:IsShowingYAxis()
                    LayoutVerticalAxis(chart, verticalContainer)
                end
            end

            //Reset Layout flags so Layout doesn't called more than needed
            ResetLayoutFlags(container)
        end
    end

    action LayoutVerticalAxis(Chart chart, VerticalAxisPanel verticalContainer)
        VerticalAxisPanel mainVerticalContainer = chart:GetVerticalPanel()

        number chartWidth = chart:GetChartArea():GetWidth()
        number chartHeight = chart:GetChartArea():GetHeight() 
        if chart:GetNumberOfChartAreas() > 1
            chartWidth = chart:GetSubChartAreas():Get(0):GetWidth()
            chartHeight = chart:GetSubChartAreas():Get(0):GetHeight()
        end 
        integer tickHeight = cast(integer, mainVerticalContainer:GetTickHeight())
        integer tickWidth = cast(integer, mainVerticalContainer:GetTickWidth())

        integer xAxisHeight = chart:GetHorizontalPanel():GetTickWidth()
        integer axisHeight = cast(integer, chartHeight) + xAxisHeight + cast(integer, tickHeight/2.0) // Makes a sharp corner at bottom and top.
        integer axisWidth = tickHeight
//        if chart:ShowSubChartAreaBorders() and chart:IsSeparated()
//            axisWidth = 1
//        end

        // Calculating tick and label positions
        Array<Drawable> ticks = verticalContainer:GetTicks()
        Array<Drawable> brackets = verticalContainer:GetBrackets()
        Array<Drawable> majorlines = verticalContainer:GetMajorGridlines()
        Array<Drawable> minorlines = verticalContainer:GetMinorGridlines()
        Array<Drawable> axislines = verticalContainer:GetAxisLines()
        Array<ChartLabel> labels = verticalContainer:GetLabels()

        integer originPointX = cast(integer, verticalContainer:GetWidth())
        integer originPointY = 0

        integer paddingOffset = cast(integer, mainVerticalContainer:GetPaddingOffsetPercent()*verticalContainer:GetHeight())
        chartHeight = chartHeight - 2*paddingOffset
        originPointY = originPointY + paddingOffset

        number majorDivWidth = 0
        number minorDivWidth = 0

        boolean usingGrouping = chart:GetGroupPanels():GetSize() > 0 and mainVerticalContainer:UseTextLabelOverride()
        if usingGrouping 
            if ticks:GetSize() > 0
                majorDivWidth = chartHeight / ticks:GetSize()
            end
            originPointY = cast(integer, originPointY + majorDivWidth/2.0)
            chart:HideAllYGridLines()
        else
            if ticks:GetSize() > 1
                majorDivWidth = chartHeight / (ticks:GetSize()-1)
            else
                majorDivWidth = chartHeight
            end
        end
        minorDivWidth = majorDivWidth/mainVerticalContainer:GetMinorGridlineCount()

        integer tickX = originPointX - axisWidth - tickWidth
        number tickY = originPointY - cast(integer, tickHeight/2.0) // needs to be a number since rounding can throw off the result a lot
        integer bracketY = 0

        integer labelX = 0
        integer labelY = 0

        integer i = 0
        integer j = 0
        repeat while i < ticks:GetSize()
            // Brackets
            if usingGrouping
                if mainVerticalContainer:ShowGroupBrackets()
                    bracketY = cast(integer, tickY - majorDivWidth/2.0)
                    if brackets:GetSize() >= (i*3)+2
                        integer index = i*3
                        brackets:Get(index):LoadFilledRectangle(tickWidth, tickHeight, chart:GetAccentColor())
                        brackets:Get(index):SetPosition(tickX, bracketY+tickHeight)
                        
                        brackets:Get(index+1):LoadFilledRectangle(tickHeight, cast(integer, majorDivWidth)-tickHeight*2, chart:GetAccentColor())
                        brackets:Get(index+1):SetPosition(tickX, bracketY+tickHeight)

                        bracketY = bracketY + cast(integer, majorDivWidth)

                        brackets:Get(index+2):LoadFilledRectangle(tickWidth, tickHeight, chart:GetAccentColor())
                        brackets:Get(index+2):SetPosition(tickX, bracketY-tickHeight*2)
                        tickX = tickX - tickWidth
                        ticks:Get(i):SetColor(chart:GetAccentColor())
                    end
                end
            end

            // Ticks
            Drawable currentTick = ticks:Get(i)
            if i = ticks:GetSize()-1
                // Last tick may draw over length of axis - update axis length so it has a nice sharp corner
                if (tickY + tickHeight) > axisHeight
                    axisHeight = axisHeight + (axisHeight-cast(integer, tickY)+tickHeight)
                end
            end
            if currentTick:GetColor() not= undefined
                currentTick:LoadFilledRectangle(tickWidth, tickHeight, currentTick:GetColor())
            else 
                currentTick:LoadFilledRectangle(tickWidth, tickHeight, mainVerticalContainer:GetAxisColor())
            end
            currentTick:SetPosition(tickX, cast(integer, tickY))
            if not mainVerticalContainer:ShowTicks()
                currentTick:Hide()
            end

            // Gridlines (contained in chart areas)
            integer horizontalSections = chart:GetHorizontalPanel():GetNumberOfSections()
            integer startIndex = i*horizontalSections

            integer k = 0
            repeat while k < horizontalSections
                Drawable majorLine
                if chart:IsShowingMajorYGridLines() and startIndex < majorlines:GetSize()
                    if i = 0  // This will not draw the gridline that overlaps with the x-axis
                        if not chart:IsShowingXAxis() or paddingOffset not= 0
                            majorLine = majorlines:Get(startIndex)
                        end
                    else
                        majorLine = majorlines:Get(startIndex)
                    end
                end   
                integer thin = cast(integer, tickHeight*0.75)
                majorLine:SetPosition(0, cast(integer, tickY+(thin/2)))
                majorLine:LoadFilledRectangle(cast(integer, chartWidth), thin, chart:GetAccentColor())

                if chart:IsShowingMinorYGridLines() and j < minorlines:GetSize() 
                    integer thinner = cast(integer, majorLine:GetHeight()/2)
                    number minorY = majorLine:GetY() + minorDivWidth
    
                    repeat while j < ((startIndex)+1)*mainVerticalContainer:GetMinorGridlineCount() and minorY < (axisHeight - tickHeight)
                        Drawable minorLine = minorlines:Get(j)
                        minorLine:SetPosition(0, cast(integer, minorY+thinner))
                        minorLine:LoadFilledRectangle(cast(integer, chartWidth), thinner, chart:GetAccentColor())
                        j = j + 1
                        minorY = minorY + minorDivWidth
                    end
                end
                k = k + 1
                startIndex = startIndex + 1
            end

            // Labels
            if i < labels:GetSize()
                ChartLabel currentLabel = labels:Get(i) 
                currentLabel:SetFontSize(mainVerticalContainer:GetLabelFontSize())
                
                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                end

                labelX = cast(integer, tickX - currentLabel:GetWidth() - tickHeight)
                labelY = cast(integer, tickY - (currentLabel:GetHeight()/2) + (tickHeight/2)) // center the label along the tick.
                if not currentTick:IsShowing()
                    labelX = labelX + tickWidth // If the tick is not showing, we can move the label closer.
                end

                currentLabel:SetPosition(labelX , labelY)
            end

            tickX = originPointX - axisWidth - tickWidth
            tickY = tickY + majorDivWidth
            i = i + 1
        end
       
        //This is the actual rotated label on the Y axis.      
        if verticalContainer:GetTitleLabel() not= undefined and verticalContainer:GetTitleLabel():IsShowing()
            number labelMinimumX = mainVerticalContainer:GetLongestLabel():GetX()

            ChartLabel axisLabel = verticalContainer:GetTitleLabel()
            Item2D labelAnchor = axisLabel:GetParent()
            if axisLabel:GetDefaultLayoutProperties():NeedsRendering()       
                axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())
            end

            number axisLabelWidth = axisLabel:GetWidth()
            number axisLabelHeight = axisLabel:GetHeight()

            integer titleX = cast(integer, labelMinimumX - (1.5*tickWidth))
            integer titleY = cast(integer, (verticalContainer:GetHeight() - axisLabelWidth) / 2.0)

            labelAnchor:SetPosition(titleX, titleY)
            labelAnchor:SetRotation(270)
        end

        // Draw axis lines (contained in chart areas)
        i = 0
        repeat while i < axislines:GetSize()
            Drawable axis = axislines:Get(i)
            axis:LoadFilledRectangle(axisWidth, axisHeight+xAxisHeight, mainVerticalContainer:GetAxisColor())
            axis:SetPosition(0-axisWidth, 0-xAxisHeight) //This line is in the chart area. So the placement is less than 0
            i = i + 1 
        end
    end

    /*
        Chart layouts do not have a way to determine the ticks of a subclass because charts are very different in style.
        As such, every chart needs to override this with ticks relevant for its own chart type.
    */
    action LayoutHorizontalAxis(Chart chart, HorizontalAxisPanel horizontalContainer)
        HorizontalAxisPanel mainHorizontalContainer = chart:GetHorizontalPanel()

        number chartWidth = chart:GetChartArea():GetWidth()
        number chartHeight = chart:GetChartArea():GetHeight() 
        if chart:GetNumberOfChartAreas() > 1
            chartWidth = chart:GetSubChartAreas():Get(0):GetWidth()
            chartHeight = chart:GetSubChartAreas():Get(0):GetHeight()
        end 
        integer tickHeight = cast(integer, mainHorizontalContainer:GetTickHeight())
        integer tickWidth = cast(integer, mainHorizontalContainer:GetTickWidth())
        integer axisHeight = tickWidth
        integer axisWidth = cast(integer, chartWidth)
//        if chart:ShowSubChartAreaBorders() and chart:IsSeparated()
//            axisHeight = 1
//        end

        // Calculating tick and label positions
        Array<Drawable> ticks = horizontalContainer:GetTicks()
        Array<Drawable> brackets = horizontalContainer:GetBrackets()
        Array<Drawable> majorlines = horizontalContainer:GetMajorGridlines()
        Array<Drawable> minorlines = horizontalContainer:GetMinorGridlines()
        Array<Drawable> axislines = horizontalContainer:GetAxisLines()
        Array<ChartLabel> labels = horizontalContainer:GetLabels()

        integer originPointX = 0
        integer originPointY = cast(integer, horizontalContainer:GetHeight())

        integer paddingOffset = cast(integer, mainHorizontalContainer:GetPaddingOffsetPercent()*horizontalContainer:GetWidth())
        chartWidth = chartWidth - 2*paddingOffset
        originPointX = originPointX + paddingOffset

        number majorDivWidth = 0
        number minorDivWidth = 0
        boolean usingGrouping = chart:GetGroupPanels():GetSize() > 0 and mainHorizontalContainer:UseTextLabelOverride()
        integer textLabelInterval = 0
        if usingGrouping 
            textLabelInterval = mainHorizontalContainer:GetIntervalOverride() // This would be used if we wanted to skip some labels/ticks on text data.
            if ticks:GetSize() > 0
                majorDivWidth = chartWidth / ticks:GetSize()
            end
            originPointX = cast(integer, originPointX + majorDivWidth/2.0)
            chart:HideAllXGridLines()
        else
            if ticks:GetSize() > 1
                majorDivWidth = chartWidth / (ticks:GetSize()-1)
            else
                majorDivWidth = chartWidth
            end
        end
        minorDivWidth = majorDivWidth/mainHorizontalContainer:GetMinorGridlineCount()

        number tickX = originPointX - cast(integer, tickWidth/2.0)// needs to be a number since rounding can throw off the result a lot
        integer tickY = originPointY - axisHeight - tickHeight 
        integer bracketX = 0

        integer labelX = 0
        integer labelY = 0
        number labelWidth = 0
        number labelHeight = 0
        number labelMinimumY = tickY // lowest point on labels - this is used to place the axis title.
        integer degrees = chart:GetXLabelsRotation() mod 360
        number cos = math:Cosine(math:DegreesToRadians(degrees))
        number sin = math:Sine(math:DegreesToRadians(degrees))

        integer i = 0
        integer j = 0
        repeat while i < ticks:GetSize()
            // Brackets
            if usingGrouping
                if mainHorizontalContainer:ShowGroupBrackets()
                    bracketX = cast(integer, tickX - majorDivWidth/2.0)
                    if brackets:GetSize() >= (i*3)+2
                        integer index = i*3
                        brackets:Get(index):LoadFilledRectangle(tickWidth, tickHeight, chart:GetAccentColor())
                        brackets:Get(index):SetPosition(bracketX+tickWidth, tickY)
                        
                        brackets:Get(index+1):LoadFilledRectangle(cast(integer, majorDivWidth)-tickWidth*2, tickWidth, chart:GetAccentColor())
                        brackets:Get(index+1):SetPosition(bracketX+tickWidth, tickY)

                        bracketX = bracketX + cast(integer, majorDivWidth)

                        brackets:Get(index+2):LoadFilledRectangle(tickWidth, tickHeight, chart:GetAccentColor())
                        brackets:Get(index+2):SetPosition(bracketX-tickWidth*2, tickY)
                        tickY = tickY - tickHeight
                        ticks:Get(i):SetColor(chart:GetAccentColor())
                    end
                end
            end

            // Ticks
            Drawable currentTick = ticks:Get(i)
            if i = ticks:GetSize()-1
                // Last tick may draw over length of axis - update axis length so it has a nice sharp corner
                if (cast(integer, tickX) + tickWidth) > axisWidth
                    axisWidth = axisWidth + (axisWidth-cast(integer, tickX)+tickWidth)
                end
            end
            if currentTick:GetColor() not= undefined
                currentTick:LoadFilledRectangle(tickWidth, tickHeight, currentTick:GetColor())
            else 
                currentTick:LoadFilledRectangle(tickWidth, tickHeight, mainHorizontalContainer:GetAxisColor())
            end
            currentTick:SetPosition(cast(integer, tickX), tickY)
            if not mainHorizontalContainer:ShowTicks()
                currentTick:Hide()
            end

            // Gridlines (contained in chart areas)
            integer verticalSections = chart:GetVerticalPanel():GetNumberOfSections()
            integer startIndex = i*verticalSections

            integer k = 0
            repeat while k < verticalSections
                Drawable majorLine
                if chart:IsShowingMajorXGridLines() and startIndex < majorlines:GetSize()
                    if i = 0  // This will not draw the gridline that overlaps with the y-axis
                        if not chart:IsShowingYAxis() or paddingOffset not= 0
                            majorLine = majorlines:Get(startIndex)
                        end
                    else
                        majorLine = majorlines:Get(startIndex)
                    end
                end
                integer thin = cast(integer, tickWidth*0.75)
                majorLine:SetPosition(cast(integer, tickX+(thin/2)), 0)
                majorLine:LoadFilledRectangle(thin, cast(integer, chartHeight), chart:GetAccentColor())
    
                if chart:IsShowingMinorXGridLines() and j < minorlines:GetSize() 
                    integer thinner = cast(integer, majorLine:GetWidth()/2)
                    number minorX = majorLine:GetX() + minorDivWidth
    
                    repeat while j < (startIndex+1)*mainHorizontalContainer:GetMinorGridlineCount() and minorX < (axisWidth - tickWidth)
                        Drawable minorLine = minorlines:Get(j)
                        minorLine:SetPosition(cast(integer, minorX+thinner), 0)
                        minorLine:LoadFilledRectangle(thinner, cast(integer, chartHeight), chart:GetAccentColor())
                        j = j + 1
                        minorX = minorX + minorDivWidth
                    end
                end
                k = k + 1
                startIndex = startIndex + 1
            end

            // Labels
            if i < labels:GetSize()
                ChartLabel currentLabel = labels:Get(i)
                currentLabel:SetFontSize(mainHorizontalContainer:GetLabelFontSize())
                Item2D labelAnchor = currentLabel:GetParent()
                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                end
                labelWidth = currentLabel:GetWidth()
                labelHeight = currentLabel:GetHeight()

                labelX = cast(integer, tickX - (labelWidth/2) + (tickWidth/2)) // center the label along the tick.
                labelY = cast(integer, tickY - labelHeight)
                if not currentTick:IsShowing()
                    labelY = labelY + tickHeight // If the tick is not showing, we can move the label closer.
                end

                if degrees not= 0
                    number percent = cast(number, degrees mod 90)/90.0 
                    integer startx = cast(integer, labelX + (labelWidth/2))
                    integer starty = labelY
                    integer deltaX = 0
                    integer deltaY = 0 
    
                    if degrees > 0 and degrees < 90
                        deltaX = cast(integer, -percent*labelHeight)
                        deltaY = cast(integer, percent*labelHeight)
                        if (starty - (labelWidth)*sin + deltaY)  < labelMinimumY
                            labelMinimumY = (starty - (labelWidth)*sin + deltaY)
                        end
                    elseif degrees = 90
                        deltaX = cast(integer, -(labelHeight/2))
                        deltaY = cast(integer, labelHeight)
                        if (starty - labelWidth + deltaY) < labelMinimumY
                            labelMinimumY = (starty - labelWidth + deltaY)
                        end
                    elseif degrees > 90 and degrees < 180
                        deltaX = cast(integer, -percent*labelHeight)
                        deltaY = cast(integer, labelHeight)
                        if (starty - (labelWidth)*sin - (labelHeight)*sin + deltaY)  < labelMinimumY
                            labelMinimumY = (starty - (labelWidth)*sin - (labelHeight)*sin + deltaY)
                        end
                        if (starty - (labelWidth)*sin + deltaY)  < labelMinimumY
                            labelMinimumY = (starty - (labelWidth)*sin + deltaY)
                        end
                    elseif degrees = 180
                        deltaX = cast(integer, (labelWidth/2))
                        deltaY = cast(integer, labelHeight)
                        if (starty - labelHeight)  < labelMinimumY
                            labelMinimumY = (starty - labelHeight)
                        end
                    elseif degrees > 180 and degrees < 270
                        deltaX = cast(integer, -(labelWidth*cos))
                        deltaY = cast(integer, labelWidth*sin + labelHeight*sin + labelHeight)
                        if (starty + deltaY + labelHeight*sin)  < labelMinimumY
                            labelMinimumY = (starty + deltaY + labelHeight*sin) - labelHeight/2
                        end
                    elseif degrees = 270
                        deltaX = cast(integer, (labelHeight/2) + (tickWidth/2))
                        deltaY = cast(integer, -labelWidth + labelHeight - (0.5*tickHeight))
                        if (starty + deltaY) < labelMinimumY
                            labelMinimumY = (starty + deltaY)
                        end
                    elseif degrees > 270 and degrees < 360
                        deltaX = cast(integer, -(labelWidth*cos))
                        deltaY = cast(integer, labelWidth*sin + labelHeight*sin + labelHeight)
                        if (starty + deltaY) < labelMinimumY
                            labelMinimumY = (starty + deltaY - labelHeight/2)
                        end
                    end
                    labelX = cast(integer, startx + deltaX)
                    labelY = cast(integer, starty + deltaY)
                else
                    labelMinimumY = labelY
                end
                labelAnchor:SetPosition(labelX, labelY)
                labelAnchor:SetRotation(degrees)

                if not mainHorizontalContainer:ShowLabels()
                    currentLabel:Hide()
                    labelAnchor:Hide()
                    labelMinimumY = tickY
                end
            end

            tickX = tickX + majorDivWidth
            tickY = originPointY - axisHeight - tickHeight 
            i = i + 1
        end
        if chart:IsSeparated() 
            if horizontalContainer not= mainHorizontalContainer
                mainHorizontalContainer:SetLabelMinimum(labelMinimumY)
            end
        else
            mainHorizontalContainer:SetLabelMinimum(labelMinimumY)
        end
        
        if horizontalContainer:GetTitleLabel() not= undefined and horizontalContainer:GetTitleLabel():IsShowing()
            number labelMinY = mainHorizontalContainer:GetLabelMinimum()
            ChartLabel axisLabel = horizontalContainer:GetTitleLabel()
            Item2D labelAnchor = axisLabel:GetParent()
            axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())

            number axisLabelWidth = axisLabel:GetWidth()
            number axisLabelHeight = axisLabel:GetHeight()

            integer titleX = cast(integer, (horizontalContainer:GetWidth() - axisLabelWidth)/2.0)
            integer titleY = cast(integer, labelMinY - axisLabelHeight)
            labelAnchor:SetPosition(titleX, titleY)
        end


        // Draw axis lines (contained in chart areas)
        i = 0
        repeat while i < axislines:GetSize()
            Drawable axis = axislines:Get(i)
            axis:LoadFilledRectangle(axisWidth, axisHeight, mainHorizontalContainer:GetAxisColor())
            axis:SetPosition(0, 0-axisHeight) //This line is in the chart area. So the placement is less than 0
            i = i + 1 
        end
    end

    action LayoutLegend(Chart chart, Legend legendContainer)
        // If we have any Series objects from movable regression lines, gather those up so we can iterate over them too.
        Array<Series> movableSeries
        if chart:HasMovableRegressionLine()
            Array<ChartAreaPanel> subAreas
            if subAreas = undefined or subAreas:IsEmpty()
                movableSeries:Add(chart:GetChartArea():GetMovableRegressionSeries())
            else
                integer counter = 0
                repeat while counter < subAreas:GetSize()
                    movableSeries:Add(subAreas:Get(counter):GetMovableRegressionSeries())
                    counter = counter + 1
                end
            end
        end
       

        if legendContainer:DisplayOnLeft() or legendContainer:DisplayOnRight()
            integer iconSize = legendContainer:GetLabelFontSize()
            integer padding = iconSize/2
            if padding < 2
                padding = 2
            end
            integer originPointX = padding //add the padding.
            integer originPointY = cast(integer, legendContainer:GetHeight()-padding)

            //This is the title of the legend.      
            if legendContainer:GetTitleLabel() not= undefined
                ChartLabel legendLabel = legendContainer:GetTitleLabel()
                if legendLabel:GetDefaultLayoutProperties():NeedsRendering()       
                    legendLabel:LoadGraphics(legendLabel:GetDefaultLayoutProperties())
                end

                originPointY = originPointY-cast(integer, legendLabel:GetHeight())
                legendLabel:SetPosition(originPointX, originPointY)
            end
        
            //This code represents the label entries in the legend
            integer iconX = originPointX
            integer iconY = originPointY
    
            integer labelX = 0
            integer labelY = 0
            Array<Series> seriesList = legendContainer:GetSeriesList()
            if not seriesList:IsEmpty()
                ChartLabel currentLabel = undefined
                Icon currentIcon = undefined
                Icon entryBox = undefined
                Color transparent
                transparent:SetColor(0, 0, 0, 0)
    
                integer i = 0
                repeat while i < (seriesList:GetSize() + movableSeries:GetSize())
                    Series series = undefined
                    boolean includeRSquared = true
                    if i < seriesList:GetSize()
                        series = seriesList:Get(i)
                    else
                        series = movableSeries:Get(i - seriesList:GetSize())
                        includeRSquared = false
                    end

                    currentLabel = series:GetLabel()
                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                    end

                    currentIcon = series:GetEntryIcon()

                    if currentIcon:GetView2D() = undefined
                        if series:HasPattern()
                            PatternControlShaderView view
                            view:Initialize(series:GetPattern())
                            currentIcon:SetView2D(view)
                        else
                            ControlShaderView view
                            view:Initialize()
                            currentIcon:SetView2D(view)
                        end
                    end
    
                    currentIcon:SetBackgroundColor(series:GetColor())
                    currentIcon:SetBorderColor(series:GetBorderColor())
                    currentIcon:SetBorderThickness(cast(integer, chart:GetLegendIconBorderThickness() * currentIcon:GetInterfaceScale()))
                    currentIcon:SetSize(iconSize, iconSize)
    
                    iconX = padding
                    iconY = iconY - iconSize - padding
                    currentIcon:SetPosition(iconX , iconY)

                    labelX = iconX + iconSize + padding 
                    labelY = iconY
                    currentLabel:SetPosition(labelX, labelY)
                    integer numberOfLabels = 1
                    
                    if legendContainer:IsShowingRegression()
                        if series:GetRegressionLine() not= undefined
                            //Regression equation
                            currentLabel = series:GetRegressionLine():GetEquationLabel()
                            if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                                currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                            end
                            iconY = iconY - iconSize - (padding/2)
                            labelY = iconY
                            currentLabel:SetPosition(labelX, labelY)

                            currentIcon = series:GetRegressionLine():GetRegressionIcon()
                            currentIcon:LoadFilledRectangle(iconSize, cast(integer, series:GetRegressionLine():GetLineDensity()), currentIcon:GetColor())
                            currentIcon:SetPosition(iconX , iconY+padding)
                            numberOfLabels = numberOfLabels + 1

                            //R^2 value
                            if includeRSquared
                                currentLabel = series:GetRegressionLine():GetRSquaredLabel()
                                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                                end
                                iconY = iconY - iconSize - (padding/2)
                                labelY = iconY
                                currentLabel:SetPosition(labelX, labelY)
                                numberOfLabels = numberOfLabels + 1
                            end

                            if chart is ScatterPlot
                                ScatterPlot plot = cast(ScatterPlot, chart)

                                if plot:IsShowingSquaresOfResiduals()
                                    // Display the sum of squares value
                                    currentLabel = series:GetRegressionLine():GetSumOfSquaresLabel()
                                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                                    end
                                    iconY = iconY - iconSize - (padding/2)
                                    labelY = iconY
                                    currentLabel:SetPosition(labelX, labelY)
                                    numberOfLabels = numberOfLabels + 1
                                end
                            end

                        end
                    end

                    entryBox = series:GetEntryBox()
                    LayoutProperties properties = entryBox:GetDefaultLayoutProperties()
                    entryBox:LoadRectangle(cast(integer, legendContainer:GetWidth()-1),numberOfLabels*iconSize+(numberOfLabels-1)*(padding/2)+padding,transparent)
                    entryBox:SetPosition(1, iconY-(padding/2))

                    // Only add the box to the legend if the box hasn't previously been added to something.
                    if entryBox:GetParent() = undefined
                        legendContainer:Add(entryBox)
                    end

                    i = i + 1
                end
            end
        else //legendContainer:DisplayOnTop() or legendContainer:DisplayOnBottom()
            integer iconSize = legendContainer:GetLabelFontSize()
            integer padding = iconSize/2
            if padding < 2
                padding = 2
            end
            integer originPointX = padding //add the padding.
            integer originPointY = cast(integer, legendContainer:GetHeight()-padding)

            //This is the title of the legend.      
            if legendContainer:GetTitleLabel() not= undefined
                ChartLabel legendLabel = legendContainer:GetTitleLabel()
                if legendLabel:GetDefaultLayoutProperties():NeedsRendering()       
                    legendLabel:LoadGraphics(legendLabel:GetDefaultLayoutProperties())
                end

                legendLabel:SetPosition(originPointX, originPointY - cast(integer, legendLabel:GetHeight()) + padding)
                originPointX = originPointX + cast(integer, legendLabel:GetWidth()) + padding
            end
        
            //This code represents the label entries in the legend
            integer iconX = originPointX 
            integer iconY = originPointY
    
            integer labelX = 0
            integer labelY = 0
            Array<Series> seriesList = legendContainer:GetSeriesList()
            if not seriesList:IsEmpty()
                ChartLabel currentLabel
                Icon currentIcon
                Icon entryBox
                Color transparent
                transparent:SetColor(0, 0, 0, 0)
    
                integer i = 0
                repeat while i < (seriesList:GetSize() + movableSeries:GetSize())
                    Series series = undefined
                    if i < seriesList:GetSize()
                        series = seriesList:Get(i)
                    else
                        series = movableSeries:Get(i - seriesList:GetSize())
                    end

                    currentLabel = series:GetLabel()
                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                    end
                    currentIcon = series:GetEntryIcon()
                    currentIcon:LoadFilledRectangle(iconSize, iconSize, currentIcon:GetColor())
    
                    iconY = originPointY - iconSize
                    currentIcon:SetPosition(iconX , iconY)

                    labelX = iconX + iconSize + padding 
                    labelY = iconY
                    currentLabel:SetPosition(labelX, labelY)
                    number widestLabel = currentLabel:GetWidth()
      
                    if legendContainer:IsShowingRegression()
                        if series:GetRegressionLine() not= undefined
                            //Regression equation
                            currentLabel = series:GetRegressionLine():GetEquationLabel()
                            if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                                currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                            end
                            iconY = iconY - iconSize - (padding/2)
                            labelY = iconY
                            currentLabel:SetPosition(labelX, labelY)
                            if currentLabel:GetWidth() > widestLabel
                                widestLabel = currentLabel:GetWidth()
                            end

                            currentIcon = series:GetRegressionLine():GetRegressionIcon()
                            currentIcon:LoadFilledRectangle(iconSize, cast(integer, series:GetRegressionLine():GetLineDensity()), currentIcon:GetColor())
                            currentIcon:SetPosition(iconX , iconY+padding)

                            //R^2 value
                            currentLabel = series:GetRegressionLine():GetRSquaredLabel()
                            if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                                currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                            end
                            iconY = iconY - iconSize - (padding/2)
                            labelY = iconY
                            currentLabel:SetPosition(labelX, labelY)
                            if currentLabel:GetWidth() > widestLabel
                                widestLabel = currentLabel:GetWidth()
                            end

                            if chart is ScatterPlot
                                ScatterPlot plot = cast(ScatterPlot, chart)

                                if plot:IsShowingSquaresOfResiduals()
                                    // Display the sum of squares value
                                    currentLabel = series:GetRegressionLine():GetSumOfSquaresLabel()
                                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                                    end
                                    iconY = iconY - iconSize - (padding/2)
                                    labelY = iconY
                                    currentLabel:SetPosition(labelX, labelY)
                                    if currentLabel:GetWidth() > widestLabel
                                        widestLabel = currentLabel:GetWidth()
                                    end
                                end
                            end
                        end
                    end

                    entryBox = series:GetEntryBox()
                    LayoutProperties properties = entryBox:GetDefaultLayoutProperties()
                    entryBox:LoadRectangle(cast(integer, iconSize + widestLabel + padding*2),cast(integer, legendContainer:GetHeight()),transparent)
                    entryBox:SetPosition(iconX - (padding/2), 0)
                    legendContainer:Add(entryBox)

                    iconX = cast(integer, labelX + widestLabel + padding)
                    i = i + 1
                end
            end
        end
    end

    private action LayoutRegressionLines(Chart chart, Control chartAreaContainer)
        if chart:IsShowingLinearRegression()
            integer xAxisPaddingOffset = cast(integer, chart:GetHorizontalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetWidth())
            integer yAxisPaddingOffset = cast(integer, chart:GetVerticalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetHeight())
            number width = chartAreaContainer:GetWidth() - 2*xAxisPaddingOffset
            number height = chartAreaContainer:GetHeight() - 2*yAxisPaddingOffset
            number xMin = chart:GetXAxisMinimum()
            number xMax = chart:GetXAxisMaximum()
            number yMin = chart:GetYAxisMinimum()
            number yMax = chart:GetYAxisMaximum()
            Math math
            number percentX = 0
            number percentY = 0
            integer x1 = 0
            integer y1 = 0
            integer x2 = 0
            integer y2 = 0

            i = 0
            repeat while i < chart:GetSeriesList():GetSize()

                RegressionLine line = chart:GetSeriesList():Get(i):GetRegressionLine()
                if line not= undefined
                    number pointThickness = line:GetPointThickness()
    
                    // Calculate and add padding so the edges of points aren't cut off.
                    number horizontalPaddingFactor = pointThickness / width
                    number horizontalPixelPadding = pointThickness
                    number horizontalMapPadding = (xMax - xMin) * horizontalPaddingFactor
    
                    number verticalPaddingFactor = pointThickness / height
                    number verticalPixelPadding = pointThickness
                    number verticalMapPadding = (yMax - yMin) * verticalPaddingFactor
    
                    if line not= undefined
                        line:SetSize(width + 2 * horizontalPixelPadding, height + 2 * verticalPixelPadding)
                        line:SetPosition(xAxisPaddingOffset - horizontalPixelPadding, yAxisPaddingOffset - verticalPixelPadding)
                        line:MapToRegion(xMin - horizontalMapPadding, xMax + horizontalMapPadding, yMin - verticalMapPadding, yMax + verticalMapPadding)
                        line:SetHorizontalOrientation(chart:GetHorizontalFlag())
                        line:SetHorizontalMapPadding(horizontalMapPadding)
                        line:SetVerticalMapPadding(verticalMapPadding)
                        
                        if chart:IsShowingLinearRegression() and line:IsMovable()
                            Array<RegressionLinePointMarker> pointMarkers = line:GetPointMarkers()
                            integer j = 0
                            repeat while j < pointMarkers:GetSize()
                                RegressionLinePointMarker marker = pointMarkers:Get(j)
                                marker:SetContainer(chart)
                                marker:LoadGraphics(marker:GetDefaultLayoutProperties())
                                j = j + 1
                            end
                        end
    
                        if line:GetRegression() not= undefined
                            
                            if chart:GetRegressionLineColor() not= undefined
                                line:SetBackgroundColor(chart:GetRegressionLineColor())
                                line:SetIconColor(line:GetBackgroundColor())
                                line:GetRegressionIcon():SetColor(chart:GetRegressionLineColor())
                            else
                                line:SetBackgroundColor(line:GetColor())
                                line:SetIconColor(line:GetColor())
                            end
    
                            line:RefreshPoints()
                            line:SetZ(-2)
                        end
                    end
                end
                i = i + 1
            end
        end

        if chart:HasMovableRegressionLine()
            integer xAxisPaddingOffset = cast(integer, chart:GetHorizontalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetWidth())
            integer yAxisPaddingOffset = cast(integer, chart:GetVerticalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetHeight())
            number width = chartAreaContainer:GetWidth() - 2*xAxisPaddingOffset
            number height = chartAreaContainer:GetHeight() - 2*yAxisPaddingOffset
            number xMin = chart:GetXAxisMinimum()
            number xMax = chart:GetXAxisMaximum()
            number yMin = chart:GetYAxisMinimum()
            number yMax = chart:GetYAxisMaximum()
            Math math
            number percentX = 0
            number percentY = 0
            integer x1 = 0
            integer y1 = 0
            integer x2 = 0
            integer y2 = 0

            if chart:IsSeparatedBySeries()
                alert("TODO")
            else
                RegressionLine line = chart:GetChartArea():GetMovableRegressionSeries():GetRegressionLine()
                number pointThickness = line:GetPointThickness()
    
                // Calculate and add padding so the edges of points aren't cut off.
                number horizontalPaddingFactor = pointThickness / width
                number horizontalPixelPadding = pointThickness
                number horizontalMapPadding = (xMax - xMin) * horizontalPaddingFactor

                number verticalPaddingFactor = pointThickness / height
                number verticalPixelPadding = pointThickness
                number verticalMapPadding = (yMax - yMin) * verticalPaddingFactor

                if line not= undefined
                    line:SetSize(width + 2 * horizontalPixelPadding, height + 2 * verticalPixelPadding)
                    line:SetPosition(xAxisPaddingOffset - horizontalPixelPadding, yAxisPaddingOffset - verticalPixelPadding)
                    line:MapToRegion(xMin - horizontalMapPadding, xMax + horizontalMapPadding, yMin - verticalMapPadding, yMax + verticalMapPadding)
                    line:SetHorizontalOrientation(chart:GetHorizontalFlag())
                    line:SetHorizontalMapPadding(horizontalMapPadding)
                    line:SetVerticalMapPadding(verticalMapPadding)
                    
                    Array<RegressionLinePointMarker> pointMarkers = line:GetPointMarkers()
                    integer j = 0
                    repeat while j < pointMarkers:GetSize()
                        RegressionLinePointMarker marker = pointMarkers:Get(j)
                        marker:SetContainer(chart)
                        marker:LoadGraphics(marker:GetDefaultLayoutProperties())
                        j = j + 1
                    end

                    if chart:GetRegressionLineColor() not= undefined
                        line:SetBackgroundColor(chart:GetRegressionLineColor())
                        line:SetIconColor(line:GetBackgroundColor())
                        line:GetRegressionIcon():SetColor(chart:GetRegressionLineColor())
                    else
                        // Fetch the next color from the palette in the Options
                        ChartOptions options
                        Color color = options:GetColorFromPalette(chart:GetSeriesList():GetSize())

                        line:SetBackgroundColor(color)
                        line:SetIconColor(color)
                    end

                    line:RefreshPoints()
                    line:SetZ(-2)
                end
            end
        end
    end    

    action SetChartDrawableSelectionArrow(ChartDrawable item, integer arrowSize, boolean sideArrow)
        item:SetArrowSize(arrowSize)
        item:SetSideArrow(sideArrow)
        item:SetSelectionArrow(true)
    end

    action SetChartDrawableSelectionBracketAndArrow(ChartDrawable item, integer arrowSize, boolean sideArrow)
        item:SetArrowSize(arrowSize)
        item:SetSideArrow(sideArrow)
        item:SetSelectionArrow(true)
        item:SetSelectionBracket(true)
    end

    // Resets all layout flags for the item and its entire children hierarchy.
    private action ResetLayoutFlags(Item2D item)
        if item is Control
            Control control = cast(Control, item)
            control:ResetLayoutFlag()
        end

        Array<Item2D> children = item:GetChildren()
        integer counter = 0
        repeat while counter < children:GetSize()
            ResetLayoutFlags(children:Get(counter))
            counter = counter + 1
        end
    end

    blueprint action LayoutChartContent(Chart chart, Control chartAreaContainer)
end