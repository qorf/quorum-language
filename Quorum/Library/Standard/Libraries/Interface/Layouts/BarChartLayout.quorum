package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Interface.Controls.Charts.Graphics.BarGroup
use Libraries.Interface.Controls.Charts.Graphics.Bar
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Interface.Controls.ControlLabel

class BarChartLayout is SharedBarChartLayout
    Math math
    Color transparent

    number width = 0
    number height = 0
    number groupX = 0 // Must be a number since rounding can seriously affect it
    integer groupY = 0
    number groupWidth = 0 // Must be a number since rounding can seriously affect it
    integer groupHeight = 0

    number barX = 0 // Must be a number since rounding can seriously affect it
    integer barY = 0
    number barWidth = 0 // Must be a number since rounding can seriously affect it
    integer barHeight = 0

    number betweenGroupPadding = 0 
    number betweenBarPadding = 0
    integer barAnnotionPadding = 3
        
    boolean stacked = false
    boolean horizontal = false // Default is vertical for bar charts
    boolean separateBySeries = false
    boolean separateByColumn = false
    boolean separateByFactor = false

    /*
        This action will calculate the size and placement of the elements (bars) within the chart 
        based on the size of the display screen.
    */
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is BarChart)
            return now
        end

        BarChart chart = cast(BarChart, control)

        transparent:SetColor(0, 0, 0, 0)

        Array<BarGroup> barGroups = chart:GetBarGroups()
        if barGroups:GetSize() > 0
        
            separateBySeries = chart:IsSeparatedBySeries()
            separateByFactor = chart:IsSeparatedByFactor()
    
            integer tickHeight = 0
            integer tickWidth = 0
            number yMax = chart:GetYAxisMaximum()
            number yMin = chart:GetYAxisMinimum()
            number xMax = chart:GetXAxisMaximum()
            number xMin = chart:GetXAxisMinimum()
            number rangeMax = 0
            number rangeMin = 0
    
            stacked = chart:GetStackedFlag()
            horizontal = chart:GetHorizontalFlag() // Default is vertical
            if horizontal
                integer paddingOffset = cast(integer, chart:GetVerticalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetHeight())
                width = chartAreaContainer:GetHeight() - paddingOffset
                height = chartAreaContainer:GetWidth()
                rangeMax = xMax
                rangeMin = xMin
                tickHeight = chart:GetVerticalPanel():GetTickHeight()
                tickWidth = chart:GetVerticalPanel():GetTickWidth()
            else
                integer paddingOffset = cast(integer, chart:GetHorizontalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetWidth())
                width = chartAreaContainer:GetWidth() - paddingOffset
                height = chartAreaContainer:GetHeight()
                rangeMax = yMax
                rangeMin = yMin
                tickHeight = chart:GetHorizontalPanel():GetTickHeight()
                tickWidth = chart:GetHorizontalPanel():GetTickWidth()
            end

            if width < 0 or width:IsNotANumber()
                width = 0
            end
            if height < 0 or height:IsNotANumber()
                height = 0
            end
            
            integer numberOfGroups = barGroups:GetSize()
            if separateByFactor
                numberOfGroups = 1
            elseif separateBySeries
                stacked = false // Can't stack bars if they are all one color
            end
            groupWidth = width / numberOfGroups

            number currentXPosition = 0 // Must be a number since rounding can seriously affect it
            integer currentYPosition = cast(integer, ((0-rangeMin)/(rangeMax-rangeMin)) * height) // Find the 0 position on axis
            integer negativeYPosition = currentYPosition
            integer resetYPosition = currentYPosition
            integer resetXPosition = 0

            integer i = 0
            repeat while i < barGroups:GetSize()
                BarGroup currentGroup = barGroups:Get(i)

                groupX = i*groupWidth  
                groupY = 0   
 
                currentXPosition = groupX
                if separateByFactor
                    currentXPosition = resetXPosition
                end

                if currentGroup:GetSize() > 0
                    integer numberOfBars = currentGroup:GetSize()
                    if stacked or separateBySeries
                        numberOfBars = 1
                    end

                    betweenBarPadding = 0
                    betweenGroupPadding = cast(integer, groupWidth*0.05) // 5% of group area will be white space on either side.

                    if separateByFactor
                        if numberOfBars > 1
                            betweenGroupPadding = 0    
                        end          
                    elseif not chart:IsSeparated()
                        if numberOfBars > 1
                            betweenBarPadding = cast(integer, (groupWidth*0.10)/(numberOfBars))
                        end
                    end
                    barWidth = (groupWidth-(betweenBarPadding*(numberOfBars-1))-(betweenGroupPadding*2))/numberOfBars
                end
            
                currentXPosition = currentXPosition + betweenGroupPadding
                if stacked
                    currentYPosition = cast(integer, ((0-rangeMin)/(rangeMax-rangeMin)) * height) // Find the 0 position on axis
                    negativeCurrentYPosition = currentYPosition
                end

                integer j = 0
                repeat while j < currentGroup:GetSize()
                    Bar currentBar
                    // We want to stack/display in the same order as the legend (some cases may not yet)
                    if stacked 
                        if horizontal
                            currentBar = currentGroup:Get(j)
                        else
                            currentBar = currentGroup:Get(currentGroup:GetSize()-1-j)
                        end

                        if currentBar:GetValue() < 0
                            barHeight = math:AbsoluteValue(cast(integer, (currentBar:GetValue()/(rangeMax-rangeMin)) * height))
                            negativeYPosition = negativeYPosition - barHeight
                            if barHeight >= 0 
                                if horizontal
                                    currentBar:LoadFilledRectangle(barHeight, cast(integer, barWidth), currentBar:GetColor())
                                    currentBar:SetPosition(negativeYPosition, currentXPosition)
                                else
                                    currentBar:LoadFilledRectangle(cast(integer, barWidth), barHeight, currentBar:GetColor())
                                    currentBar:SetPosition(currentXPosition, negativeYPosition)
                                end
                            end                            
                        else
                            barHeight = cast(integer, (currentBar:GetValue()/(rangeMax-rangeMin)) * height)
                            if barHeight >= 0 
                                if horizontal
                                    currentBar:LoadFilledRectangle(barHeight, cast(integer, barWidth), currentBar:GetColor())
                                    currentBar:SetPosition(currentYPosition, currentXPosition)
                                else
                                    currentBar:LoadFilledRectangle(cast(integer, barWidth), barHeight, currentBar:GetColor())
                                    currentBar:SetPosition(currentXPosition, currentYPosition)
                                end
                            end
                            currentYPosition = currentYPosition + barHeight
                        end
                    else 
                        if horizontal
                            if separateByFactor
                                currentBar = currentGroup:Get(j)
                            else
                                currentBar = currentGroup:Get(barGroups:Get(i):GetSize()-1-j)
                            end
                        else
                            currentBar = currentGroup:Get(j)
                        end

                        currentYPosition = cast(integer, ((0 - rangeMin)/(rangeMax-rangeMin)) * height)
                        if currentBar:GetValue() < 0
                            barHeight = math:AbsoluteValue(cast(integer, ((currentBar:GetValue()-0)/(rangeMax-rangeMin)) * height))
                            currentYPosition = currentYPosition - barHeight
                        else
                            barHeight = cast(integer, ((currentBar:GetValue() - 0)/(rangeMax-rangeMin)) * height)
                        end

                        if barHeight >= 0 
                            if horizontal
                                currentBar:LoadFilledRectangle(barHeight, cast(integer, barWidth), currentBar:GetColor())
                                currentBar:SetPosition(currentYPosition, currentXPosition)
                            else
                                currentBar:LoadFilledRectangle(cast(integer, barWidth), barHeight, currentBar:GetColor())
                                currentBar:SetPosition(currentXPosition, currentYPosition)
                            end
                        end
                        if currentBar:ShowAnnotation() or chart:ShowAnnotations()
                            ControlLabel barLabel = currentBar:GetAnnotation()
                            if barLabel not= undefined
                                if horizontal
                                    integer annotY = cast(integer, currentXPosition + (barWidth/2.0 - barLabel:GetHeight()/2.0))
                                    if currentBar:GetValue() < 0
                                        barLabel:SetPosition(currentYPosition - barLabel:GetWidth() - barAnnotionPadding, annotY)
                                    else
                                        barLabel:SetPosition(currentYPosition + barHeight + barAnnotionPadding, annotY)
                                    end
                                else
                                    integer annotX = cast(integer, currentXPosition + (barWidth/2.0 - barLabel:GetWidth()/2.0))
                                    if currentBar:GetValue() < 0
                                        barLabel:SetPosition(annotX, currentYPosition - barLabel:GetHeight() - barAnnotionPadding)
                                    else
                                        barLabel:SetPosition(annotX, currentYPosition + barHeight + barAnnotionPadding)
                                    end
                                end
                            end
                        end

                        if not separateBySeries
                            currentXPosition = currentXPosition + barWidth + betweenBarPadding
                        end
                    end 

                    // Load and place the bar selection arrow
                    if horizontal
                        SetChartDrawableSelectionArrow(currentBar, cast(integer, barWidth/4), false)
                    else
                        SetChartDrawableSelectionArrow(currentBar, cast(integer, barWidth/4), true)
                    end
                    j = j + 1
                end
                
                if stacked or chart:IsSeparated()
                    if horizontal 
                        currentGroup:LoadRectangle(currentYPosition, cast(integer, groupWidth), transparent)
                        currentGroup:SetPosition(groupY, groupX)          
                    else
                        currentGroup:LoadRectangle(cast(integer, groupWidth), currentYPosition, transparent)
                        currentGroup:SetPosition(groupX, groupY)
                    end
                else
                    groupHeight = cast(integer, ((currentGroup:GetMaxBarValue()-rangeMin)/(rangeMax-rangeMin)) * height)
                    if horizontal
                        if chart:ShowAnnotations() and currentGroup:GetMaxBar():GetAnnotation() not= undefined
                            groupHeight = groupHeight + cast(integer, currentGroup:GetMaxBar():GetAnnotation():GetWidth()) + barAnnotionPadding
                        end
                        currentGroup:LoadRectangle(groupHeight, cast(integer, groupWidth), transparent)
                        currentGroup:SetPosition(groupY, groupX)
                    else
                        if chart:ShowAnnotations() and currentGroup:GetMaxBar():GetAnnotation() not= undefined
                            groupHeight = groupHeight + cast(integer, currentGroup:GetMaxBar():GetAnnotation():GetHeight()) + barAnnotionPadding
                        end

                        currentGroup:LoadRectangle(cast(integer, groupWidth), groupHeight, transparent)
                        currentGroup:SetPosition(groupX, groupY)
                    end
                end
                // Load and place the group selection bracket/arrow
                integer arrowSize = cast(integer, currentGroup:GetHeight()/8)
                if horizontal
                    arrowSize = cast(integer, currentGroup:GetHeight()/8)
                    if arrowSize < tickHeight*2
                        arrowSize = tickHeight*2
                    end
                else
                    arrowSize = cast(integer, currentGroup:GetWidth()/8)
                    if arrowSize < tickWidth*2
                        arrowSize = tickWidth*2
                    end
                end
                SetChartDrawableSelectionBracketAndArrow(currentGroup, arrowSize, false)

                currentYPosition = resetYPosition
                negativeYPosition = resetYPosition
                i = i + 1
            end
        end
    end
end