package Libraries.Interface.Controls.Layouts

use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Controls.Blocks.EditRegion
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Interface.Controls.Blocks.BlockEnvironment
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Blocks.SingleLineBlock

class SingleLineBlockLayout is Layout

    action Layout(Control container, Array<Item2D> items, number newContainerWidth, number newContainerHeight)
        SingleLineBlock block = cast(SingleLineBlock, container)
        
        if block = undefined
            return now
        end

        //CodeEditor editor = block:GetEditor()
        BlockEnvironment editor = block:GetBlockEnvironment()
        
        if editor = undefined
            return now
        end

        number height = editor:GetLineHeight(block:GetNavigationIndex())
        integer i = block:GetNavigationIndex() + 1
        repeat while i <= block:GetNavigationEndIndex()
            height = height + editor:GetLineHeight(i)
            i = i + 1
        end

        number x = block:GetLeftPadding()
        number y = (height - block:GetVisibleDetailLabelsHeight()) / 2.0 
        
        EditRegion lastEditRegion = undefined
        Control previousControlInStack = undefined
        Array<Label> currentTopLabels = undefined

        i = 0
        repeat while i < items:GetSize()
            if items:Get(i) is Control            
                Control control = cast(Control, items:Get(i))
                
                if control:GetDefaultLayoutProperties():NeedsRendering()
                    control:LoadGraphics(control:GetDefaultLayoutProperties())
                end
                
Label label = undefined
                if control is Label
                    label = cast(Label, control)
                end
                
                if label not= undefined and currentTopLabels not= undefined and currentTopLabels:Has(label)
                    if label:IsShowing()
number regionWidth = lastEditRegion:GetWidth()
                    number labelX = lastEditRegion:GetX() + (regionWidth - label:GetWidth()) / 2.0
                    number yOffset = label:GetBottomMargin()
                    if yOffset < previousControlInStack:GetTopMargin()
                        yOffset = previousControlInStack:GetTopMargin()
                    end
                    number labelY = previousControlInStack:GetY() + previousControlInStack:GetHeight() + yOffset
                    label:SetPosition(labelX, labelY)
                    
                    previousControlInStack = label
                    end
                else
x = x + control:GetLeftPadding()
                    
if control is EditRegion
                    // EditRegions can reliably determine their size via the UpdateLength action.
                    EditRegion region = cast(EditRegion, control)
                    control:SetPosition(cast(integer, x), cast(integer, y - control:GetHeight() / 2.0))
                    region:UpdateLength()
                    
lastEditRegion = region
                        previousControlInStack = region
                    currentTopLabels = region:GetTopLabels()
                else
                    // For now, assume the element is capable of figuring out its own size during a Resize.
                    control:Resize()
                    control:SetPosition(cast(integer, x), cast(integer, y - control:GetHeight() / 2.0))
                end

                x = x + control:GetWidth() + control:GetRightPadding()
                end
                
            end
            i = i + 1
        end

        number minimumWidth = block:GetTopNotchPosition()
        if block:GetBottomNotchPosition() > minimumWidth
            minimumWidth = block:GetBottomNotchPosition()
        end
        minimumWidth = minimumWidth + editor:GetBlockNotchTopWidth()

        if x < minimumWidth
            x = minimumWidth
        end
        
        block:SetSize(x + block:GetRightPadding(), height)

        /*
        After we've figured out the block's size, double check if we need to extend the last EditRegion.
        Our aim is to ensure that if the last Item in the block is an EditRegion, it fills any extra space
        present due to the minimum width.
        */
        if items:GetSize() > 0 and items:GetFromEnd() is EditRegion
            EditRegion region = cast(EditRegion, items:GetFromEnd())
            number fillWidth = block:GetMinimumWidth() - region:GetX() - block:GetRightPadding()
            if region:GetWidth() < fillWidth
                region:SetWidth(fillWidth)
            end
        end
    end

end