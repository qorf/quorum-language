package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.LineChart
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Interface.Controls.Charts.ChartLine
use Libraries.Interface.Controls.Charts.LineSegment
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable

/*
    This is the layout class for Line Chart. 
    This class is responsible for loading, coloring and 
    positioning all chart area components of the linechart chart area.

    Attribute: Author Cody Molisee, Hannah Williams
*/
class LineChartLayout is TwoVariableChartLayout
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is LineChart)
            return now
        end      

        LineChart chart = cast(LineChart, control)
        Array<ChartLine> lines = chart:GetAllLines()
        integer xAxisPaddingOffset = cast(integer, chart:GetHorizontalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetWidth())
        integer yAxisPaddingOffset = cast(integer, chart:GetVerticalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetHeight())
        number width = chartAreaContainer:GetWidth() - 2*xAxisPaddingOffset
        number height = chartAreaContainer:GetHeight() - 2*yAxisPaddingOffset

        number xMin = chart:GetXAxisMinimum()
        number xMax = chart:GetXAxisMaximum()
        number yMin = chart:GetYAxisMinimum()
        number yMax = chart:GetYAxisMaximum()

        // Set default point density
        integer pointRadius = chart:GetPointDensity()
        if pointRadius <= 0
            pointRadius = cast(integer, width * 0.010 / 2) 
            if pointRadius < 4
                pointRadius = 4
            end
        end

        // Set default line density
        integer lineDensity = chart:GetLineDensity()
        if lineDensity <= 0
            lineDensity = cast(integer, width * 0.0025)
            if lineDensity < 2
                lineDensity = 2
            end
        end
        chart:SetLineDensity(lineDensity)

        integer i = 0
        repeat while i < lines:GetSize()
            if lines:Get(i):GetPoints() = undefined
                return now
            end

            integer j = 0
            repeat while j < lines:Get(i):GetPoints():GetSize()
                ChartPoint point = lines:Get(i):GetPoints():Get(j)
                
                point:LoadFilledCircle(pointRadius, lines:Get(i):GetColor())
                if not chart:GetPointsFlag()
                    point:Hide()
                end
                point:SetPercentX((point:GetValueX() - xMin) / (xMax - xMin))
                point:SetPercentY((point:GetValueY() - yMin) / (yMax - yMin))
                integer x = cast(integer, point:GetPercentX() * width - (point:GetWidth() / 2.0)) + xAxisPaddingOffset
                integer y = cast(integer, point:GetPercentY() * height - (point:GetHeight() / 2.0)) + yAxisPaddingOffset
                point:SetPosition(x, y)

                if point:ShowAnnotation() or chart:ShowAnnotations()
                    ControlLabel pointLabel = point:GetAnnotation()
                    if pointLabel not= undefined
                        integer annotX = cast(integer, x+pointRadius-(pointLabel:GetWidth()/2))
                        integer annotY = cast(integer, y+point:GetHeight())
                        pointLabel:SetPosition(annotX, annotY)
                    end
                end

                if chart:GetHorizontalFlag()
                    SetChartDrawableSelectionArrow(point, pointRadius, true)
                else
                    SetChartDrawableSelectionArrow(point, pointRadius, false)
                end
                j = j + 1
            end

            j = 0
            repeat while j < lines:Get(i):GetLines():GetSize()
                LineSegment line = lines:Get(i):GetLines():Get(j)
                ChartPoint a = lines:Get(i):GetPoints():Get(j)
                ChartPoint b = lines:Get(i):GetPoints():Get(j + 1)
                Math math

                integer x1 = cast(integer, a:GetX())
                integer y1 = cast(integer, a:GetY())
                integer x2 = cast(integer, b:GetX())
                integer y2 = cast(integer, b:GetY())

                // Pythagorean Theorem
                number sideA = math:AbsoluteValue(x2 - x1) * math:AbsoluteValue(x2 - x1)
                number sideB = math:AbsoluteValue(y2 - y1) * math:AbsoluteValue(y2 - y1)
                number sideC = math:SquareRoot((sideA + sideB))
                number slope = math:Round(cast(number, (y2 - y1)) / cast(number, (x2 - x1)), 2)
                number tanInverse = math:Round(math:RadiansToDegrees(math:InverseTangent(slope)), 2)

                line:LoadFilledRectangle(cast(integer, sideC)+2, lineDensity, lines:Get(i):GetColor())

                number angle = -1.0*tanInverse

                line:SetPosition(x1+pointRadius, y1+pointRadius)
                line:SetCenterX(x1+pointRadius + (cast(number, x2 - x1) / 2.0)) 
                line:SetCenterY(y1+pointRadius + (cast(number, y2 - y1) / 2.0))
                line:SetRotation(angle)
                number offX = math:Cosine(math:DegreesToRadians(angle))
                number offY = math:Sine(math:DegreesToRadians(angle))
                line:SetCenterY(line:GetCenterY() + offY)
                line:SetCenterX(line:GetCenterX() - offX)
     
                line:SetPoint1(a)
                line:SetPoint2(b)
                line:SetName("Line segment between " + a:GetName() + " and " + b:GetName())
                j = j + 1
            end

            ChartLine line
            line = lines:Get(i)
            if chart:GetHorizontalFlag()
                SetChartDrawableSelectionArrow(line, cast(integer, line:GetLineStart():GetHeight()), true)
            else
                SetChartDrawableSelectionArrow(line, cast(integer, line:GetLineStart():GetWidth()), false)
            end

            i = i + 1
        end

        if chart:IsShowingLinearRegression()
            LayoutRegressionLines(chart, chartAreaContainer)
        end
    end
end