package Libraries.Interface.Layouts

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Control
use Libraries.Game.Graphics.Font

class FlowLayout is Layout

    /*
    These variables predominantly store information about how the layout should be applied
    every time the layout occurs. These are retained between layout calls.
    */
    Math math
    boolean ignoreHidden = false
    boolean singleLine = false
    boolean verticalCentering = false
    boolean ignoreInterfaceScale = false




    /* 
    All variables below this point are used in the Layout function and its related subfunctions.
    These are reset to default values whenever layout is called.
    */

    number containerBorder = 0
    LayoutProperties containerProperties = undefined
    number containerWidth = 0
    number containerHeight = 0

    /*
    Boolean used to ensure we don't perform redundant resizing on items
    that were already fit to their contents while fitting the container
    width to its contents.
    */
    boolean fitContainerContents = false

    // This is the x position of the next item, unless it flows onto the
    // next line (and resets to 0).
    number x = 0

    // Objects are placed such that their top edge is at the currentY.
    number currentY = 0
    number nextY = currentY

    // Used if we're vertically centering items on each line.
    integer nextItemToCenter = 0

    action Layout(Control container, Array<Item2D> items, number newContainerWidth, number newContainerHeight)
        x = 0
        containerWidth = newContainerWidth
        containerHeight = newContainerHeight

        // Perform any necessary layout on the container itself before we adjust the items within it.
        LayoutContainer(container, items, containerWidth, containerHeight)
        
        // Objects are placed such that their top edge is at the currentY.
        currentY = containerHeight - containerBorder
        nextY = currentY

        // Used if we're vertically centering items on each line.
        nextItemToCenter = 0

        // Layout the children items in the container.
        LayoutItems(container, items, containerWidth, containerHeight)

        // If the container needs to fit its contents, do that now that we've laid out the contents.
        VerticalFitContainer(container, items, containerWidth, containerHeight)
    end

    private action LayoutContainer(Control container, Array<Item2D> items, number newContainerWidth, number newContainerHeight)
        /* 
        Boolean used to ensure we don't perform redundant resizing on items
        that were already fit to their contents while fitting the container
        width to its contents.
        */
        fitContainerContents = false
        containerProperties = undefined
        containerBorder = 0

        if container not= undefined
            containerProperties = container:GetLayoutProperties(containerWidth, containerHeight)

            if containerProperties not= undefined
                if containerProperties:NeedsRendering()
                    container:LoadGraphics(containerProperties)
                end

                // If the container's height fits the contents, we assume
                // the height is 0 and correct it after laying out.
                if containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_CONTENTS
                    containerHeight = 0
                end

                containerBorder = containerProperties:GetBorderThickness()
                number interfaceScale = containerProperties:GetInterfaceScale()
                if ignoreInterfaceScale
                    interfaceScale = 1.0
                end

                if containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_FONT
                    Font font = containerProperties:GetFont()
                    if font not= undefined
                        if font:GetSize() not= cast(integer, containerProperties:GetFontSize() * interfaceScale)
                            font:SetSize(cast(integer, containerProperties:GetFontSize() * interfaceScale))
                        end

                        number topMargin = 0
                        number bottomMargin = 0

                        integer i = 0
                        repeat while i < items:GetSize()
                            Item2D item = items:Get(i)
                            if item is Control
                                Control control = cast(Control, item)
                                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)
                                if properties:GetTopMargin() > topMargin
                                    topMargin = properties:GetTopMargin()
                                end
                                if properties:GetBottomMargin() > bottomMargin
                                    bottomMargin = properties:GetBottomMargin()
                                end
                            end
                            i = i + 1
                        end

                        containerHeight = font:GetLineHeight() + containerBorder + topMargin + bottomMargin

                        if container:GetHeight() not= containerHeight
                            container:SetHeight(containerHeight)
                        end
                    end
                end

                if containerProperties:GetHorizontalLayoutMode() = containerProperties:FIT_CONTENTS
                    integer i = 0

                    number totalWidthOffset = 0
                    number totalWidthPercentage = 0

                    repeat while i < items:GetSize()
                        Item2D item = items:Get(i)

                        if ignoreHidden = false or item:IsShowing()
                            if item is Control
                                Control control = cast(Control, item)
                                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)
                                if properties not= undefined
                                    if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS 
                                        // Resize the control and allow it to set its own dimensions.
                                        control:Resize()
                                        fitContainerContents = true
                                    end

                                    if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS
                                        totalWidthOffset = totalWidthOffset + control:GetWidth() + properties:GetLeftMargin() + properties:GetRightMargin()
                                    elseif properties:GetHorizontalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                                        // We have to estimate the height now to determine the width.
                                        number height = 0
                                        if properties:GetVerticalLayoutMode() = properties:STANDARD
                                            height = properties:GetPercentageHeight() * (containerHeight - containerBorder * 2 - properties:GetTopMargin() - properties:GetBottomMargin()) + properties:GetPixelHeight() * interfaceScale
                                        elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                                            if properties:GetFont() not= undefined
                                                height = properties:GetFont():GetLineHeight()
                                            end
                                        elseif properties:GetVerticalLayoutMode() = properties:FILL
                                            height = containerHeight - properties:GetTopMargin() - properties:GetBottomMargin()
                                        elseif properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                                            height = control:GetHeight()
                                        end

                                        totalWidthOffset = totalWidthOffset + (properties:GetPercentageWidth() * height)
                                            + properties:GetLeftMargin() + properties:GetRightMargin()
                                    else
                                        totalWidthOffset = totalWidthOffset + (properties:GetPixelWidth() + properties:GetLeftMargin() + properties:GetRightMargin()) * interfaceScale
                                        totalWidthPercentage = totalWidthPercentage + properties:GetPercentageWidth()
                                    end
                                else
                                    // If width can't be determined from its properties, use its width instead.
                                    totalWidthOffset = totalWidthOffset + item:GetWidth()
                                end
                            else
                                // If width can't be determined from its properties, use its width instead.
                                totalWidthOffset = totalWidthOffset + item:GetWidth()
                            end
                        end

                        i = i + 1
                    end

                    totalWidthPercentage = 1.0 - totalWidthPercentage
                    containerWidth = totalWidthOffset / totalWidthPercentage

                    container:SetWidth(containerWidth)
                end
            end
        end
    end

    private action LayoutItems(Control container, Array<Item2D> items, number newContainerWidth, number newContainerHeight)
        integer i = 0
        repeat while i < items:GetSize()
            Item2D item = items:Get(i)
            if item:IsShowing()
                            DefaultLayoutItem(item, items, i, containerWidth, containerHeight)
            end
            i = i + 1
        end

        // Vertically center the contents in a line.
        if verticalCentering
            integer centerCounter = nextItemToCenter
            repeat while centerCounter < items:GetSize()
                Item2D lineItem = items:Get(centerCounter)
                number destination = nextY + (currentY - lineItem:GetHeight()) / 2.0

                lineItem:SetY(destination)
                centerCounter = centerCounter + 1
            end
        end
    end

    private action DefaultLayoutItem(Item2D item, Array<Item2D> allItems, integer itemIndex, number newContainerWidth, number newContainerHeight)
        if item is Control
            Control control = cast(Control, item)
            control:ResetLayoutFlag()
            LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)

            if properties:NeedsRendering()
                control:LoadGraphics(properties)
            end

            number interfaceScale = properties:GetInterfaceScale()
            if ignoreInterfaceScale
                interfaceScale = 1.0
            end

            if properties not= undefined and (ignoreHidden = false or control:IsShowing())
                number width = 0
                number height = 0
                number leftMargin = properties:GetLeftMargin()
                number rightMargin = properties:GetRightMargin()
                number topMargin = properties:GetTopMargin()
                number bottomMargin = properties:GetBottomMargin()

                /*
                Boolean used to ensure we don't perform redundant resizing
                on a control.
                */
                boolean alreadyFitContents = fitContainerContents and properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS

                if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS and alreadyFitContents = false
                    alreadyFitContents = true
                    if properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS 
                        or properties:GetVerticalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                        // Resize the control and allow it to set its own dimensions.
                        control:Resize()
                    elseif properties:GetVerticalLayoutMode() = properties:FILL
                        // Setting the height will trigger a resize.
                        control:SetHeight(currentY - properties:GetTopMargin() - properties:GetBottomMargin())
                    elseif properties:GetVerticalLayoutMode() = properties:STANDARD
                        // Setting the height will trigger a resize.
                        number setHeight = (containerHeight - containerBorder * 2 - properties:GetTopMargin() - properties:GetBottomMargin()) * properties:GetPercentageHeight() + properties:GetPixelHeight() * interfaceScale
                        control:SetHeight(setHeight)
                    elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                        if properties:GetFont() not= undefined
                            control:SetHeight(properties:GetFont():GetLineHeight())
                        end
                    end
                    width = control:GetWidth()
                elseif properties:GetHorizontalLayoutMode() = properties:FILL
                    width = containerWidth - x
                    if width = 0
                        // If there's no space left to fill, fill the next line instead.
                        width = containerWidth
                    end
                elseif properties:GetHorizontalLayoutMode() = properties:STANDARD
                    width = (containerWidth - containerBorder * 2 - properties:GetLeftMargin() - properties:GetRightMargin()) * properties:GetPercentageWidth() + properties:GetPixelWidth() * interfaceScale
                end

                // Fix the width to an integer. We want things to align well to pixel coordinates.
                width = cast(integer, width)
                x = x + leftMargin

                /*
                Because the 2D system will eventually truncate everything down to integers, we only consider the container width to be exceeded
                if the prospective width is at least 1 whole pixel larger than the container width.
                This protects us against erroneous overflow due to floating point errors.
                */
                if (x + width) >= (cast(integer, containerWidth) + 1) and singleLine = false
                    if verticalCentering
                        integer centerCounter = nextItemToCenter
                        repeat while centerCounter < itemIndex
                            Item2D lineItem = allItems:Get(centerCounter)
                            number destination = (currentY - nextY) - (lineItem:GetHeight() / 2.0)

                            lineItem:SetY(destination)
                            centerCounter = centerCounter + 1
                        end

                        nextItemToCenter = itemIndex
                    end

                    currentY = nextY
                    x = leftMargin
                end

                // When we set the size in this step, we also trigger a
                // resize that will cascade to the entire control's hierarchy.
                if alreadyFitContents = false
                    boolean shouldSetSize = true

                    if properties:GetVerticalLayoutMode() = properties:FILL
                        height = currentY
                    elseif properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                        // Set the control's width and allow it to set its own height via its contents.
                        // Setting the width triggers its layout to resize.
                        shouldSetSize = false
                        control:SetWidth(width)
                    elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                        Font font = properties:GetFont()
                        if font not= undefined
                            if font:GetSize() not= cast(integer, properties:GetFontSize() * interfaceScale)
                                font:SetSize(cast(integer, properties:GetFontSize() * interfaceScale))
                            end

                            height = font:GetLineHeight()
                        end
                    elseif properties:GetVerticalLayoutMode() = properties:STANDARD
                        height = (containerHeight - containerBorder * 2 - properties:GetTopMargin() - properties:GetBottomMargin()) * properties:GetPercentageHeight() + properties:GetPixelHeight() * interfaceScale
                    elseif properties:GetVerticalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                        height = properties:GetPercentageHeight() * width
                    end

                    if properties:GetHorizontalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                        width = properties:GetPercentageWidth() * height
                    end

                    if shouldSetSize
                        control:SetSize(width, height)
                    end
                end

                number verticalSpace = currentY - control:GetHeight() - topMargin - bottomMargin

                if verticalSpace < nextY and singleLine = false
                    nextY = verticalSpace
                end

                number targetY = currentY - control:GetHeight() - topMargin

                control:SetPosition(x, targetY)
                x = x + control:GetWidth() + rightMargin
            end
        end
    end

    private action VerticalFitContainer(Control container, Array<Item2D> items, number newContainerWidth, number newContainerHeight)
        if containerProperties not= undefined and containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_CONTENTS
            container:SetHeight(-nextY)

            /*
            We had to place all elements before to determine the height of the
            container, but now that the height is known we need to ensure the
            items are placed at the right y positions.
            */
            integer counter = 0
            x = 0
            containerHeight = container:GetHeight()
            currentY = containerHeight
            nextY = containerHeight

            repeat while counter < items:GetSize()
                Item2D item = items:Get(counter)
                item:MoveY(containerHeight)
                counter = counter + 1
            end
        end
    end

    action SetIgnoreHidden(boolean ignore)
        ignoreHidden = ignore
    end

    action IsIgnoringHidden returns boolean
        return ignoreHidden
    end

    action SetSingleLine(boolean single)
        singleLine = single
    end

    action IsSingleLine returns boolean
        return singleLine
    end

    action SetVerticalCentering(boolean centering)
        verticalCentering = centering
    end

    action IsVerticalCentering returns boolean
        return verticalCentering
    end
    
    action SetIgnoreInterfaceScale(boolean ignore)
        ignoreInterfaceScale = ignore
    end

    action IsIgnoringInterfaceScale returns boolean
        return ignoreInterfaceScale
    end
end