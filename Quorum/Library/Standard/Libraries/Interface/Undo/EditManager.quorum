package Libraries.Interface.Undo

use Libraries.Containers.List
use Libraries.Containers.Iterator

/*
    EditManager controls an undo/redo style system. We can use it by adding 
    edits to the manager and then calling the appropriate undo or redo messages.
    Besides this, EditManager can empty itself of all edits, return items, 
    and broadly allow the user to visit the items in the lists.

    Attribute: Example
    use Libraries.Interface.Undo.EditManager
    use Libraries.Interface.Undo.Edit

    EditManager edits
    Edit edit
    edits:Add(edit)
    edits:Undo()
*/
class EditManager
    List<Edit> undoList
    List<Edit> redoList

    /*
        The Add(Edit) action adds an item to the undo list. The redo list cannot
        be directly added to and is, instead, controlled by undoing.

        Attribute: Parameter undo The Edit object we are asking to be managed by the EditManager.

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        edits:Undo()
    */
    action Add(Edit undo)
        if undo = undefined
            return now
        end
        undoList:Add(undo)
        DisposeAndEmpty(redoList)
    end

    private action DisposeAndEmpty(List<Edit> list)
        if list:IsEmpty()
            return now
        end

        Iterator<Edit> iterator = list:GetIterator()
        repeat while iterator:HasNext()
            Edit edit = iterator:Next()
            edit:Dispose()
        end
        list:Empty()
    end
    /*
        The Undo action undoes an Edit that was added to the system. If there is 
        nothing to undo, this call is ignored.

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        edits:Undo()
    */
    action Undo
        if CanUndo()
            Edit undo = undoList:RemoveFromEnd()
            if undo = undefined
                return now
            end
            undo:Undo()

            redoList:Add(undo)
        end
    end

    /*
        The Redo action redoes an Edit that was added to the system. If there is 
        nothing to redo, then this action is ignored.

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        edits:Undo()
        edits:Redo()
    */
    action Redo
        if CanRedo()
            Edit redo = redoList:RemoveFromEnd()
            if redo = undefined
                return now
            end
            
            redo:Redo()

            undoList:Add(redo)
        end
    end

    /*
        This action checks to see if there is any items that can be undone. If so,
        it returns true.

        Attribute: Returns whether we can undo

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        output edits:CanUndo()
    */
    action CanUndo returns boolean
        return not undoList:IsEmpty()
    end

    /*
        This action checks to see if there is any items that can be redone. If so,
        it returns true.

        Attribute: Returns whether we can redo

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        output edits:CanRedo()
    */
    action CanRedo returns boolean
        return not redoList:IsEmpty()
    end

    /*
        This action returns how many edits there are in the undo list.

        Attribute: Returns how many edits are in the undo list

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        output edits:GetUndoCount()
    */
    action GetUndoCount returns integer
        return undoList:GetSize()
    end

    /*
        This action returns how many edits there are in the redo list.

        Attribute: Returns how many edits are in the redo list

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        output edits:GetRedoCount()
    */
    action GetRedoCount returns integer
        return redoList:GetSize()
    end

    /*
        This action empties the EditManager of all edits. In the process, it calls
        dispose on each edit to ensure it has the opportunity to free any resources.

        Attribute: Example
        use Libraries.Interface.Undo.EditManager
        use Libraries.Interface.Undo.Edit

        EditManager edits
        Edit edit
        edits:Add(edit)
        edits:Empty()
    */
    action Empty
        DisposeAndEmpty(undoList)
        DisposeAndEmpty(redoList)
    end
end