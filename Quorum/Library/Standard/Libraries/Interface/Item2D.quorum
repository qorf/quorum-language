package Libraries.Interface

use Libraries.Interface.Item
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchEvent
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Views.View2D
use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.Layout
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Game.Shapes.Rectangle
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.Graphics.Camera
use Libraries.Game.Layer2D
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Game.Collision.Sweep2D
use Libraries.Game.Collision.Shapes.all
use Libraries.Game.Collision.Item2DNode
use Libraries.Game.Collision.BroadphaseCollision2D
use Libraries.Game.Collision.CollisionEdge2D
use Libraries.Game.Collision.BoundingBox2D
use Libraries.Game.Physics.PhysicsProperties2D
use Libraries.Game.Physics.Mass2D
use Libraries.Game.Physics.Joints.JointEdge2D
use Libraries.Game.GameStateManager
use Libraries.Game.Application
use Libraries.Game.WebApplication
use Libraries.Game.FocusManager
use Libraries.Language.Errors.UndefinedObjectError
use Libraries.Containers.Number32BitArray
use Libraries.Game.Layer
use Libraries.Game.Graphics.DrawableShape
use Libraries.Interface.Events.GestureEvent
use Libraries.Interface.Events.GestureListener
use Libraries.Interface.Views.DrawableView

/*
    The Item2D class represents any object that has a position in 2D space.
    They have X and Y coordinates, representing their horizontal and vertical
    position in 2D space, respectively. They also have corresponding width and
    height, which combine with the x, y coordinates to make a rectangle. Note
    that items on their own can't be seen on the screen. To make an Item2D that
    can be drawn directly on the screen, use a Libraries.Game.Graphics.Drawable
    instead.
    
    Attribute: Author William Allee

    Attribute: Example

        use Libraries.Interface.Item
        Item2D myItem
        
        myItem:SetPosition(20, 60)
        myItem:SetWidth(50)
        myItem:SetHeight(15)
*/
class Item2D is Item

    constant text PHYSICS_ERROR_MESSAGE = "Enable physics to use this action"
    
    /*
    If this Item2D is a part of a larger Item2D object, then this Item2D
    is the child of that larger Item2D object.
    */
    private Item2D parentItem = undefined
    /*  
    If this Item2D is made up of different Item2D objects, then those objects
    that makes up this Item2D would be the children of this Item2D.
    */
    private Array<Item2D> children

    /*
    This sets if you can collide with this item.
    */
    boolean collidable = false

    /*
    Used internally to pass around position and rotation information
    */
    PhysicsPosition2D transform = undefined
    Vector2 position
    number z = 0
    number rotation = 0

    Vector3 offset

    Vector2 dimensions

    Vector2 origin

    Vector2 scale

    Vector2 scaleOffset

    boolean flipX = false
    boolean flipY = false

    /*
    The layer that this Item2D belongs to.
    */
    Layer2D layer = undefined

    private Rectangle bounds


    //the shape of that bounds this 2D object
    CollisionShape2D shape = undefined


    /*
    Stores the shape of the children and also the bounding boxes of the children.
    */
    Array<Item2DNode> nodes = undefined

    /*
    The number of broadphase nodes that are attached to this item.
    */
    integer nodeCount = 0

    /*
    Used to record the position of the Item2D object from the previous frame, 
    estimated position in the next frame, and target positions.
    */
    Sweep2D sweep = undefined

    /*
    The head of the doubly linked list that records all of the objects
    that this Item2D is in contact with.
    */
    CollisionEdge2D collisionList = undefined
    JointEdge2D jointList = undefined

    /*
    The position of the Item2D object from the previous frame.
    */
    PhysicsPosition2D transform0 = undefined

    /*
    The property holder for this item. You will only have a property holder
    if the physics is enabled.
    */
    PhysicsProperties2D properties = undefined

    /*
    A flag that remembers whether the physics is enabled for this item.
    If physics is enabled, then this item will be able to collide with other items.
    */
    boolean physicsEnabled = false

    private boolean widthSet = false
    private boolean heightSet = false
    private boolean layerSet = false
    private boolean nodesSet = false
    private boolean hasMoved = false

    boolean updateTransform = true

    /*
    Children: some other shape that this Item2D is composed of.
    This boolean value sets if the current Item2D object can collide with
    its own children.
    */
    boolean collideWithChildren = false 

    boolean shouldTriggerSimulation = true

    /* 
    This value is used to determine if the Item's dimensions should be used
    for pixel clipping of the Item, its children, and visual content during 
    drawing (via the glScissor function).
    */
    boolean clipPixels = false

    /*
    Whether or not the Item is currently in the middle of resizing itself (i.e.
    it has entered the Resize action and hasn't returned from it yet). This is
    used as a sort of pseudo-lock, ensuring that if the Item is already
    resizing, it can't call the Resize action again recursively.
    */
    boolean isResizing = false

    /*
    Visual content attached to this Item2D. Visual content is drawn during calls
    to QueueForDrawing(Painter2D), but isn't added to the Game in the same way children
    are, and thus isn't eligible for things like events.
    */
    View2D visualView = undefined

    /*
    Whether or not this Item should be responsible for deciding custom rendering
    for itself and its children. Used primarily as a performance gain for custom 
    objects. When custom rendering is used, this item's children aren't included
    in the game's depth buffering step.
    */
    boolean isCustomDrawing = false

    /*
    Whether or not this Item should send mouse events to its children components
    if the Item is custom drawing. This only affects custom drawing components.
    Items that aren't using custom drawing will always let their children handle
    mouse events before the parent.
    */
    boolean childrenProcessingMouseEvents = false

    // A reusable Vector3 used for one-off calculations, such as in GetScreenX().
    Vector3 workVector3

    // A pair of reusable Vector2 objects used for one-off calculations, such
    // as GetClipCoordinates.
    Vector2 workVector2A
    Vector2 workVector2B

    PhysicsPosition2D synchronizeNodesTempPosition = undefined

    GameStateManager manager

    on create
        scale:Set(1, 1)
    end

    private action NotifyAccessibilityBoundsChanged
        Accessibility accessibility = manager:GetAccessibility()
        if accessibility not= undefined
            accessibility:BoundsChanged(me)
        end
    end

    /*
    This action sets the X coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetX(35.0)
    */
    action SetX(number setX)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end
        hasMoved = true
        position:SetX(setX)
        SetOffsetX(offset:GetX())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        if physicsEnabled and not IsSimulated() and shouldTriggerSimulation
            Simulate(true)
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action sets the Y coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetY(210.0)
    */
    action SetY(number setY)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end
        hasMoved = true
        position:SetY(setY)
        SetOffsetY(offset:GetY())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        if physicsEnabled and not IsSimulated() and shouldTriggerSimulation
            Simulate(true)
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action sets the Z value of the Item2D. For Item2D, the z value is used
    during layer sorting to determine ordering, where lower z values will be 
    placed first.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetZ(3)
    */
    action SetZ(number setZ)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end
        z = setZ
        SetOffsetZ(offset:GetZ())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action returns the currently set X coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        number value = myItem:GetX()
    */
    action GetX returns number
        return position:GetX()
    end

    /*
    This action returns the currently set Y coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        number value = myItem:GetY()
    */
    action GetY returns number
        return position:GetY()
    end

    /*
    This action returns the currently set Z value of this Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        number value = myItem:GetZ()
    */
    action GetZ returns number
        return z
    end

    /*
    This action will set both the X coordinate and the Y coordinate of the Item,
    in that order.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetPosition(30, 70)
    */
    action SetPosition(number setX, number setY)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        hasMoved = true
        position:SetX(setX)
        position:SetY(setY)
        SetOffset(offset:GetX(), offset:GetY())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        if physicsEnabled and not IsSimulated() and shouldTriggerSimulation
            Simulate(true)
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action will set both the X and Y coordinates of this Item2D, and will
    additionally set the Z value of this Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetPosition(30, 70, 3)
    */
    action SetPosition(number setX, number setY, number setZ)
        SetPosition(setX, setY)
        SetZ(setZ)
    end

    /*
    This action will set the width of the Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetWidth(50)
    */
    action SetWidth(number newWidth)
        if dimensions:GetX() not= 0
            number originPercentage = origin:GetX() / dimensions:GetX()
            SetOrigin(originPercentage * newWidth, origin:GetY())
        end

        dimensions:SetX(newWidth)
        widthSet = true

        if widthSet and heightSet
            ManageShape()
        end

        if updateTransform
            UpdateTransformX()
        end

        if visualView not= undefined
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
        end

        SetOriginCenter()

        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:SetWidth(newWidth)
        end

        NotifyAccessibilityBoundsChanged()

        Resize()
    end

    /*
    This action will set the height of the Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetHeight(70)
    */
    action SetHeight(number newHeight)
        dimensions:SetY(newHeight)
        heightSet = true

        if widthSet and heightSet
            ManageShape()
        end

        if updateTransform
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
        end

        SetOriginCenter()

        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:SetHeight(newHeight)
        end

        NotifyAccessibilityBoundsChanged()
        
        Resize()
    end

    private action ManageShape
        if shape not= undefined and shape is Polygon
            Polygon polygon = cast(Polygon, shape)
            polygon:SetAsBox(dimensions:GetX(), dimensions:GetY())
            ManageLayers()
        else
            Polygon polygon
            polygon:SetAsBox(dimensions:GetX(), dimensions:GetY())
            me:shape = polygon
            ManageLayers()
        end
    end

    /*
    This action will set the X coordinate of the Item so that the center of the
    Item is aligned with the given X coordinate value.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetCenterX(70)
    */
    action SetCenterX(number setX)
        SetX(setX - dimensions:GetX() / 2.0)
    end

    /*
    This action will set the Y coordinate of the Item so that the center of the
    Item is aligned with the given Y coordinate value.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetCenterY(65)
    */
    action SetCenterY(number setY)
        SetY(setY - dimensions:GetY() / 2.0)
    end

    /*
    This action will set the X and Y coordinates of the Item so that the center
    of the Item is located at the given X, Y coordinates.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetCenter(70, 40)
    */
    action SetCenter(number setX, number setY)
        SetCenterX(setX)
        SetCenterY(setY)
    end

    /*
    This action returns the x coordinate of the center of this Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetWidth(20)
        myItem:SetX(100)
        number x = myItem:GetCenterX()
    */
    action GetCenterX returns number
        return position:GetX() + GetWidth()/2
    end

    /*
    This action returns the y coordinate of the center of this Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetHeight(20)
        myItem:SetY(100)
        number y = myItem:GetCenterY()
    */
    action GetCenterY returns number
        return position:GetY() + GetHeight()/2
    end
    
    /*
    This action will return the currently set width of the Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        number width = myItem:GetWidth()
    */
    action GetWidth returns number
        return dimensions:GetX()
    end

    /*
    This action will return the currently set height of the Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        number height = myItem:GetHeight()
    */
    action GetHeight returns number
        return dimensions:GetY()
    end

    /* 
    This action sets the X offset of the Item. The offset tells the Item
    where to relate its X position to. In other words, the X offset is where an
    X coordinate of 0 is for this Item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetX(100)
    */
    action SetOffsetX(number xAmount)
        if xAmount not= offset:GetX()
            DrawableShape drawShape = GetDrawableShape()
            if drawShape not= undefined
                drawShape:RequestUpdate()
            end
        end

        offset:SetX(xAmount)

        if updateTransform
            UpdateTransformX()
        end

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        NotifyAccessibilityBoundsChanged()

        integer counter = 0
        repeat children:GetSize() times
            children:Get(counter):SetOffsetX(position:GetX() + xAmount)
            counter = counter + 1
        end
    end

    /* 
    This action sets the Y offset of the item. The offset tells the Item
    where to relate its Y position to. In other words, the Y offset is where a
    Y coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetY(75)
    */
    action SetOffsetY(number yAmount)
        if yAmount not= offset:GetY()
            DrawableShape shape = GetDrawableShape()
            if shape not= undefined
                shape:RequestUpdate()
            end
        end

        offset:SetY(yAmount)

        if updateTransform
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        NotifyAccessibilityBoundsChanged()

        integer counter = 0
        repeat children:GetSize() times
            children:Get(counter):SetOffsetY(position:GetY() + yAmount)
            counter = counter + 1
        end
    end

    /* 
    This action sets the Z offset of the item. The offset tells the Item
    where to relate its Z position to. In other words, the Z offset is where a
    Z coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetZ(75)
    */
    action SetOffsetZ(number zAmount)
        if zAmount not= offset:GetZ()
            DrawableShape drawShape = GetDrawableShape()
            if drawShape not= undefined
                drawShape:RequestUpdate()
            end
        end

        offset:SetZ(zAmount)

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        NotifyAccessibilityBoundsChanged()

        integer counter = 0
        repeat children:GetSize() times
            children:Get(counter):SetOffsetZ(z + zAmount)
            counter = counter + 1
        end
    end

    /* 
    This action returns the X offset of the Item. The offset tells the Item
    where to relate its X position to. In other words, the X offset is where an
    X coordinate of 0 is for this Item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetX(100)
        number offset = myItem:GetOffsetX()
    */
    action GetOffsetX returns number
        return offset:GetX()
    end

    /* 
    This action returns the Y offset of the item. The offset tells the Item
    where to relate its Y position to. In other words, the Y offset is where a
    Y coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetY(75)
        number offset = myItem:GetOffsetY()
    */
    action GetOffsetY returns number
        return offset:GetY()
    end

    /* 
    This action returns the Z offset of the item. The offset tells the Item
    where to relate its Z position to. In other words, the Z offset is where a
    Z coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetZ(75)
        number offset = myItem:GetOffsetZ()
    */
    action GetOffsetZ returns number
        return offset:GetZ()
    end

    /* 
    This action will set both the X and Y offsets of the item, respectively.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffset(100, 75)
    */
    action SetOffset(number xAmount, number yAmount)
        if xAmount not= offset:GetX() or yAmount not= offset:GetY()
            DrawableShape drawShape = GetDrawableShape()
            if drawShape not= undefined
                drawShape:RequestUpdate()
            end
        end

        offset:SetX(xAmount)
        offset:SetY(yAmount)

        if updateTransform
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        NotifyAccessibilityBoundsChanged()

        integer counter = 0
        repeat children:GetSize() times
            children:Get(counter):SetOffset(position:GetX() + xAmount, position:GetY() + yAmount)
            counter = counter + 1
        end
    end

    /* 
    This action will set X, Y, and Z offsets of the item, respectively.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffset(100, 75, 2)
    */
    action SetOffset(number xAmount, number yAmount, number zAmount)
        if xAmount not= offset:GetX() or yAmount not= offset:GetY() or zAmount not= offset:GetZ()
            DrawableShape drawShape = GetDrawableShape()
            if drawShape not= undefined
                drawShape:RequestUpdate()
            end
        end

        offset:Set(xAmount, yAmount, zAmount)

        if updateTransform
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        NotifyAccessibilityBoundsChanged()

        integer counter = 0
        repeat children:GetSize() times
            children:Get(counter):SetOffset(position:GetX() + xAmount, position:GetY() + yAmount, z + zAmount)
            counter = counter + 1
        end
    end
    
    /* 
    This action returns the Item's global x coordinate. This is the actual world
    coordinate that the item exists at after it has been offset by its parent's
    position. If this Item doesn't have a parent, and the offset hasn't been set
    manually, this is the same as GetX().

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetX(100)
        myItem:SetX(30)
        number globalX = myItem:GetGlobalX()
    */
    action GetGlobalX returns number
        return GetX() + offset:GetX()
    end

    /*
    This action returns the Item's global y coordinate. This is the actual world
    coordinate that the item exists at after it has been offset by its parent's
    position. If this Item doesn't have a parent, and the offset hasn't been set
    manually, this is the same as GetY().

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetY(60)
        myItem:SetX(90)
        number globalY = myItem:GetGlobalY()
    */
    action GetGlobalY returns number
        return GetY() + offset:GetY()
    end

    /*
    This action returns the Item's global z value. For an Item2D, this simply
    returns the Item2D's current z value.
    */
    action GetGlobalZ returns number
        return GetZ() + offset:GetZ()
    end

    /*
    This action will set the width and height of the Item2D, respectively.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetSize(100, 50)
    */
    action SetSize(number newWidth, number newHeight)
        dimensions:Set(newWidth, newHeight)

        ManageShape()

        if updateTransform
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
        end

        SetOriginCenter()

        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:SetSize(newWidth, newHeight)
        end

        NotifyAccessibilityBoundsChanged()

        Resize()
    end

    /*
    This action will increase the x-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetX(50)
        myItem:MoveX(25)
    */
    action MoveX(number xAmount)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        hasMoved = true
        position:SetX(position:GetX() + xAmount)
        SetOffsetX(offset:GetX())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        if physicsEnabled and not IsSimulated() and shouldTriggerSimulation
            Simulate(true)
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action will increase the y-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetY(50)
        myItem:MoveY(25)
    */
    action MoveY(number yAmount)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        hasMoved = true
        position:SetY(position:GetY() + yAmount)
        SetOffsetY(offset:GetY())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        if physicsEnabled and not IsSimulated() and shouldTriggerSimulation
            Simulate(true)
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action will increase the z-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item@D

        Item2D myItem
        myItem:SetZ(5)
        myItem:MoveZ(2)
    */
    action MoveZ(number zAmount)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        z = z + zAmount
        SetOffsetZ(offset:GetZ())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action will increase the x and y coordinates of this Item by the values
    stored in the provided Vector2.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Compute.Vector2

        Item2D myItem
        myItem:SetX(50)
        myItem:SetY(80)
        Vector2 vector
        vector:Set(25, -20)
        myItem:Move(vector)
    */
    action Move(Vector2 movement)
        Move(movement:GetX(), movement:GetY())
    end

    /*
    This action will increase the x and y coordinates of this Item by the given
    amounts.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetX(50)
        myItem:SetY(80)
        myItem:Move(25, -20)
    */
    action Move(number xAmount, number yAmount)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end
        hasMoved = true
        position:SetX(position:GetX() + xAmount)
        position:SetY(position:GetY() + yAmount)
        SetOffset(offset:GetX(), offset:GetY())

        if visualView not= undefined
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
        end

        if physicsEnabled and not IsSimulated() and shouldTriggerSimulation
            Simulate(true)
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action will set the Item2D to be flipped across the X-axis according to
    the boolean. If the boolean value is false, the Item2D will be set to its
    unflipped state. If it is true, the Item will be set to its flipped state.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetFlipX(true)
    */
    action SetFlipX(boolean flip)
        if IsFlippedX() not= flip
            FlipX()
        end
    end

    /*
    This action will set the Item2D to be flipped across the Y-axis according to
    the boolean. If the boolean value is false, the Item2D will be set to its
    unflipped state. If it is true, the Item will be set to its flipped state.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetFlipY(true)
    */
    action SetFlipY(boolean flip)
        if IsFlippedY() not= flip
            FlipY()
        end
    end

    /*
    This action will flip the Item2D across the X-axis. This flip is represented
    by the internal vertices of the Item2D. For classes that inherit from Item and
    can draw on the screen, this will flip the drawn image on the screen.
    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:FlipX()
    */
    action FlipX
        flipX = not flipX

        if visualView not= undefined
            visualView:UpdateFlipping(flipX, flipY)
        end

        NotifyAccessibilityBoundsChanged()

        integer counter = 0
        repeat children:GetSize() times
            children:Get(counter):FlipX()
            counter = counter + 1
        end
    end

    /*
    This action will flip the Item2D across the Y-axis. This flip is represented
    by the internal vertices of the Item2D. For classes that inherit from Item and
    can draw on the screen, this will flip the drawn image on the screen.
    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:FlipY()
    */
    action FlipY
        flipY = not flipY

        if visualView not= undefined
            visualView:UpdateFlipping(flipX, flipY)
        end

        NotifyAccessibilityBoundsChanged()

        integer counter = 0
        repeat children:GetSize() times
            children:Get(counter):FlipY()
            counter = counter + 1
        end
    end

    /*
    This action will return if the Item2D is currently flipped across the x-axis.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:FlipX()
        boolean flip = myItem:IsFlippedX()
    */
    action IsFlippedX returns boolean
        return flipX
    end

    /*
    This action will return if the Item2D is currently flipped across the y-axis.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:FlipY()
        boolean flip = myItem:IsFlippedY()
    */
    action IsFlippedY returns boolean
        return flipY
    end

    /*
    This action sets a reference to the parent item. It is called automatically
    when an Item2D is added as a child to another Item2D. Most users will not
    need to use this action directly.
    */
    action SetParent(Item2D newItem)
        parentItem = newItem
    end

    /*  
    This action returns the parent of this Item2D. An Item2D gets a parent when
    it is added to another Item using the Add action.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        parentItem:Add(child)
        Item2D item = child:GetParent()
        
    */
    action GetParent returns Item2D
        return parentItem
    end

    action GetAccessibleParent returns Item
        Item2D par = GetParent()
        if par = undefined
            return undefined
        elseif par:IsAccessibleParent()
            return par
        else
            return par:GetAccessibleParent()
        end
    end

    /*  
    This action adds a different Item2D into this one. This makes a few things happen.
        1. The added item will get this item as its parent.
        2. The added item's x and y coordinates will become relative to this Item.
        3. Most actions on this Item will also affect the added Item.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        parentItem:Add(child)
        
    */
    action Add(Item2D newItem)
        children:Add(newItem)
        newItem:SetParent(me)
        newItem:SetLayer(layer)
        newItem:PrepareVertices()
        newItem:SetOffset(GetX() + GetOffsetX(), GetY() + GetOffsetY(), GetZ() + GetOffsetZ())
        if layer not= undefined
            layer:SetNewItemAdded(true)

            Accessibility accessibility = manager:GetAccessibility()
            if accessibility not= undefined
                accessibility:Add(newItem)
            end
        end
    end

    /*  
    This action adds a different Item2D into this one, storing the added Item2D
    at a specific index in the internal array.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        parentItem:Add(0, child)
        
    */
    action Add(integer index, Item2D newItem)
        children:Add(index, newItem)
        newItem:SetParent(me)
        newItem:PrepareVertices()
        newItem:SetLayer(layer)
        newItem:SetOffset(GetX() + GetOffsetX(), GetY() + GetOffsetY())
        if layer not= undefined
            layer:SetNewItemAdded(true)

            Accessibility accessibility = manager:GetAccessibility()
            if accessibility not= undefined
                accessibility:Add(newItem)
            end
        end
    end

    /*  
    This action removes an Item2D that was previously added to this Item2D. 

    Attribute: Returns Whether or not the Item was found and removed.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child1
        Item2D child2
        parentItem:Add(child1)
        parentItem:Add(child2)
        parentItem:Remove(child1)
    */
    action Remove(Item2D removed) returns boolean
        boolean success = children:Remove(removed)
        removed:SetOffset(0, 0)
        
        if layer not= undefined and layer:IsColliding()
            CollisionEdge2D edge = removed:collisionList
            repeat while edge not= undefined and layer not= undefined
                CollisionEdge2D edge0 = edge
                edge = edge:GetNext()
                layer:GetCollisionManager():Destroy(edge0:GetCollision())
            end
            removed:collisionList = undefined
        end

        if layer not= undefined
            if layer:PhysicsEnabled()
                removed:DestroyNodes(layer:GetCollisionManager():GetBroadphase())
            end

            Accessibility accessibility = manager:GetAccessibility()
            if accessibility not= undefined
                accessibility:Remove(removed)
            end
        end
        removed:SetCollidable(false)

        removed:SetParent(undefined)
        removed:SetLayer(undefined)

        return success
    end

    /*  This action removes an Item that was previously added to this Item by
    finding it at the given index in the internal array of children Items.

    Attribute: Returns The Item that was removed.

    Attribute: Example

        use Libraries.Interface.Item

        Item parentItem
        Item child1
        Item child2
        parentItem:Add(child1)
        parentItem:Add(child2)
        parentItem:Remove(0)
    */
    action Remove(integer index) returns Item2D
        Item2D temp = children:RemoveAt(index)
        temp:SetOffset(0, 0)

        if layer not= undefined and layer:IsColliding()
            CollisionEdge2D edge = temp:collisionList
            repeat while edge not= undefined
                CollisionEdge2D edge0 = edge
                edge = edge:GetNext()
                layer:GetCollisionManager():Destroy(edge0:GetCollision())
            end
            temp:collisionList = undefined
        end

        if layer not= undefined
            if layer:PhysicsEnabled()
                temp:DestroyNodes(layer:GetCollisionManager():GetBroadphase())
            end

            Accessibility accessibility = manager:GetAccessibility()
            if accessibility not= undefined
                accessibility:Remove(temp)
            end
        end
        temp:SetCollidable(false)

        temp:SetParent(undefined)
        temp:SetLayer(undefined)

        return temp
    end

    /*  
    This action returns an Item2D that was previously added to this Item2D by
    finding it at the given index in the internal array of children Items.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child1
        Item2D child2
        parentItem:Add(child1)
        parentItem:Add(child2)
        Item temp = parentItem:GetItem(0)
    */
    action GetItem(integer index) returns Item2D
        return children:Get(index)
    end

    /*  
    This action returns an iterator containing all the items contained in
    this Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Containers.Iterator

        Item2D parentItem
        Item2D child1
        Item2D child2
        parentItem:Add(child1)
        parentItem:Add(child2)
        Iterator<Item2D> iterator = parentItem:GetItems()
    */
    action GetItems returns Iterator<Item2D>
        return children:GetIterator()
    end

    /*  
    This action returns the number of items contained in this Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child1
        Item2D child2
        parentItem:Add(child1)
        parentItem:Add(child2)
        integer size = parentItem:GetItemCount()
    */
    action GetItemCount returns integer
        return children:GetSize()
    end

    /*
    This action is used internally to allow the base Item class to pass actions
    to children.
    */
    private action GetChildAsItem(integer index) returns Item
        return children:Get(index)
    end

    /*  
    This action sets a value inside the internal item array of this Item2D.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child1
        Item2D child2
        parentItem:Add(child1)
        parentItem:SetItem(0, child2)
    */
    action SetItem(integer index, Item2D newItem)
        Item oldItem = children:Get(index)

        children:Set(index, newItem)
        newItem:SetParent(me)
        newItem:SetLayer(layer)
        newItem:SetOffset(position:GetX() + offset:GetX(), position:GetY() + offset:GetY())
        if layer not= undefined
            layer:SetNewItemAdded(true)

            Accessibility accessibility = manager:GetAccessibility()
            if accessibility not= undefined
                accessibility:Remove(oldItem)
                accessibility:Add(newItem)
            end
        end
    end

    /*  This action returns whether or not any items are contained in this Item.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child1
        parentItem:Add(child1)
        boolean wasEmpty = parentItem:IsEmpty()
    */
    action IsEmpty returns boolean
        return children:IsEmpty()
    end

    /*
    Checks to see if the Item2D's internal vertices are up to date, and updates
    them if they are not. This is used primarily internally to ensure that the
    item's vertices are properly aligned before use, e.g. to project an image on
    the screen at the coordinates of the vertices. Most users will never need to
    use this action directly.
    */
    action PrepareVertices
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:UpdateVertices()
        end
    end


    /*  
    This action tests if a point in global x,y coordinates is contained
    inside this Item2D. The global coordinates are considered to be the x and y
    coordinates of this Item plus its offsetX and offsetY values.

    Attribute: Returns Whether or not the point is contained in this Item.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D item
        item:SetPosition(50, 50)
        item:SetWidth(100)
        item:SetHeight(50)
        boolean value = item:Contains(125, 70)
    */
    action Contains(number containsX, number containsY) returns boolean
        number testX = containsX - GetOffsetX()
        number testY = containsY - GetOffsetY()
        return testX >= GetX() and testX <= GetX() + GetWidth() * GetScaleX() and testY >= GetY() and testY <= GetY() + GetHeight() * GetScaleY()
    end

    /*
    This action will remove all items from this item's children hierarchy. Note
    that this will not empty the hierarchies of the contained Items.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child1
        Item2D child2
        Item2D grandchild
        parentItem:Add(child1)
        parentItem:Add(child2)
        child1:Add(grandChild)
        parentItem:Empty()
    */
    action Empty
        repeat while children:IsEmpty() = false
            Item2D item = children:GetFromEnd()
            Remove(item)
        end
    end

    /*  
    This action searches through all Items stored in this Item2D and finds the
    deepest Item which contains the given point in global coordinates.

    Attribute: Returns The deepest item in the children hierarchy at the given point.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        Item2D grandchild
        parentItem:Add(child)
        child:Add(grandchild)
        grandchild:SetHeight(100)
        grandchild:SetWidth(100)
        Item2D temp = parentItem:GetItemAt(75, 75)

    */
    action GetItemAt(number x, number y) returns Item2D
        integer counter = children:GetSize()
        Item2D temp = undefined
        boolean found = false
        repeat while counter > 0 and not found
            counter = counter - 1
            temp = children:Get(counter)
            temp = temp:GetItemAt(x, y)
            if temp not= undefined
                found = true
            end
        end

        if not found and Contains(x, y)
            return me
        else
            return temp
        end
    end

    /*  
    This action searches through all Items stored in this Item2D and finds the
    deepest Item which contains the given point in global coordinates. This
    action will only return items which are visible (that is, IsShowing()
    returns true).

    Attribute: Returns The deepest visible item in the children hierarchy at the given point.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D parentItem
        Item2D child
        Item2D grandchild
        parentItem:Add(child)
        child:Add(grandchild)
        grandchild:SetHeight(100)
        grandchild:SetWidth(100)
        Item2D temp = parentItem:GetVisibleItemAt(75, 75)

    */
    action GetVisibleItemAt(number x, number y) returns Item2D
        integer counter = children:GetSize()
        Item2D temp = undefined
        boolean found = false
        repeat while counter > 0 and not found
            counter = counter - 1
            temp = children:Get(counter)
            temp = temp:GetVisibleItemAt(x, y)
            if temp not= undefined
                found = true
            end
        end

        if not found and IsShowing() and Contains(x, y)
            return me
        else
            return temp
        end
    end

    /*  
    This action takes a mouse event and handles it. It will first test to 
    see if the mouse event took place within the bounds of this Item. If so, it
    will notify any MouseListeners of the event. If the event was not contained
    within this Item, or if there are no MouseListeners on this Item, the Item
    will ask its parent Item to process the mouse event, if there is a parent.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.MouseEvent
        use Libraries.Interface.Events.MouseListener
        Item2D myItem
        MouseListener listener
        myItem:AddMouseListener(listener)
        MouseEvent event
        event:eventType = event:CLICKED_MOUSE
        myItem:ProcessMouseEvent(event)
    
    */
    action ProcessMouseEvent(MouseEvent event)
        if IsAcceptingMouseInput() = false
            event:SetEventHandled(false)
            return now
        end

        Layer layer = GetLayer()
        if layer not= undefined and GetLayer():GetCamera() not= undefined
            Vector3 worldCoordinates = layer:GetCamera():ScreenToWorldCoordinates(event:GetX() - layer:GetViewportX(), event:GetY() - layer:GetViewportY())

            if not Contains(worldCoordinates:GetX(), worldCoordinates:GetY())
                if parentItem not= undefined
                    parentItem:ProcessMouseEvent(event)
                end
    
                return now
            end
        end

        boolean wasSent = false

        if event:eventType = event:MOVED_MOUSE
            Iterator<MouseMovementListener> iterator = GetMouseMovementListeners()
            if iterator:HasNext()
                event:SetEventHandled(true)
                wasSent = true
            end

            repeat while iterator:HasNext()
                iterator:Next():MovedMouse(event)
            end

        elseif event:eventType = event:DRAGGED_MOUSE
            Iterator<MouseMovementListener> iterator = GetMouseMovementListeners()
            if iterator:HasNext()
                event:SetEventHandled(true)
                wasSent = true
            end

            repeat while iterator:HasNext()
                iterator:Next():DraggedMouse(event)
            end

        elseif event:eventType = event:CLICKED_MOUSE
            Iterator<MouseListener> iterator = GetMouseListeners()
            if iterator:HasNext()
                event:SetEventHandled(true)
                wasSent = true
            end

            repeat while iterator:HasNext()
                iterator:Next():ClickedMouse(event)
            end

        elseif event:eventType = event:RELEASED_MOUSE
            Iterator<MouseListener> iterator = GetMouseListeners()
            if iterator:HasNext()
                event:SetEventHandled(true)
                wasSent = true
            end

            repeat while iterator:HasNext()
                iterator:Next():ReleasedMouse(event)
            end

        elseif event:eventType = event:SCROLLED_MOUSE
            Iterator<MouseWheelListener> iterator = GetMouseWheelListeners()
            if iterator:HasNext()
                event:SetEventHandled(true)
                wasSent = true
            end

            repeat while iterator:HasNext()
                iterator:Next():ScrolledMouse(event)
            end
        end

        if not wasSent
            event:SetEventHandled(true)
            if parentItem not= undefined
                parentItem:ProcessMouseEvent(event)
            end
        end
    end

    /*
    This action takes a touch event and handles it. It will first test to 
    see if the touch event took place within the bounds of this Item. If so, it
    will notify any TouchListeners of the event. If the event was not contained
    within this Item, or if there are no TouchListeners on this Item, the Item
    will ask its parent Item to process the touch event, if there is a parent.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.TouchEvent
        use Libraries.Interface.Events.TouchListener
        Item2D myItem
        TouchListener listener
        myItem:AddTouchListener(listener)
        TouchEvent event
        event:eventType = event:BEGAN
        myItem:ProcessTouchEvent(event)
    */
    action ProcessTouchEvent(TouchEvent event)

        if not Contains(event:GetX(), event:GetY())
            if parentItem not= undefined
                parentItem:ProcessTouchEvent(event)
            end
            
            return now
        end

        boolean wasSent = false

        Iterator<TouchListener> iterator = GetTouchListeners()
        if iterator:HasNext()
            event:SetEventHandled(true)

            if event:eventType = event:BEGAN
                repeat while iterator:HasNext()
                    iterator:Next():BeganTouch(event)
                    wasSent = true
                end

            elseif event:eventType = event:MOVED or event:eventType = event:STATIONARY
                repeat while iterator:HasNext()
                    iterator:Next():ContinuedTouch(event)
                    wasSent = true
                end

            elseif event:eventType = event:ENDED or event:eventType = event:CANCELLED
                repeat while iterator:HasNext()
                    iterator:Next():EndedTouch(event)
                    wasSent = true
                end

            end

        end


        if not wasSent
            event:SetEventHandled(true)
            if parentItem not= undefined
                parentItem:ProcessTouchEvent(event)
            end
        end
    end

    /*  
    This action takes a gesture event and handles it. It will first test to 
    see if the gesture event took place within the bounds of this Item. If so, it
    will notify any GestureListeners of the event. If the event was not contained
    within this Item, or if there are no GestureListeners on this Item, the Item
    will ask its parent Item to process the event, if there is a parent.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.GestureEvent
        use Libraries.Interface.Events.GestureListener
        Item2D myItem
        GestureListener listener
        myItem:AddGestureListener(listener)
        GestureEvent event
        event:eventType = event:DOUBLE_TAP
        myItem:ProcessGestureEvent(event)
    
    */
    action ProcessGestureEvent(GestureEvent event)
        Layer layer = GetLayer()
        if layer not= undefined and GetLayer():GetCamera() not= undefined
            Vector3 worldCoordinates = layer:GetCamera():ScreenToWorldCoordinates(event:GetX() - layer:GetViewportX(), event:GetY() - layer:GetViewportY())

            if not Contains(worldCoordinates:GetX(), worldCoordinates:GetY())
                if parentItem not= undefined
                    parentItem:ProcessGestureEvent(event)
                end
    
                return now
            end
        end

        boolean wasSent = false

        Iterator<GestureListener> iterator = GetGestureListeners()
        if iterator:HasNext()
            event:SetEventHandled(true)
            wasSent = true

            if event:eventType = event:SINGLE_TAP
                repeat while iterator:HasNext()
                    iterator:Next():OnSingleTap(event)
                end
            elseif event:eventType = event:DOUBLE_TAP
                repeat while iterator:HasNext()
                    iterator:Next():OnDoubleTap(event)
                end
            elseif event:eventType = event:SWIPE
                repeat while iterator:HasNext()
                    iterator:Next():OnSwipe(event)
                end
            elseif event:eventType = event:PAN
                repeat while iterator:HasNext()
                    iterator:Next():OnPan(event)
                end
            elseif event:eventType = event:LONG_PRESS
                if event:timingCode = event:BEGIN
                repeat while iterator:HasNext()
                    iterator:Next():OnLongPressBegin(event)
                end
            elseif event:timingCode = event:FINISH
                repeat while iterator:HasNext()
                    iterator:Next():OnLongPressEnd(event)
                end
            end
            elseif event:eventType = event:PINCH
                if event:timingCode = event:BEGIN
                    repeat while iterator:HasNext()
                        iterator:Next():OnPinchBegin(event)
                    end
                elseif event:timingCode = event:FINISH
                    repeat while iterator:HasNext()
                        iterator:Next():OnPinchEnd(event)
                    end
                elseif event:timingCode = event:CONTINUE
                    repeat while iterator:HasNext()
                        iterator:Next():OnPinchContinue(event)
                    end
                end
            end
        end

        if not wasSent
            event:SetEventHandled(true)
            if parentItem not= undefined
                parentItem:ProcessGestureEvent(event)
            end
        end
    end

    /*
    This action will set the x coordinate, y coordinate, width, and height of
    the Item2D, respectively.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetBoundingBox(50, 200, 100, 75)
    */
    action SetBoundingBox(number newX, number newY, number newWidth, number newHeight)
        SetX(newX)
        SetY(newY)
        SetWidth(newWidth)
        SetHeight(newHeight)
    end

    /*
    This action will set the origin of the Item to be at the given location in
    the Item. This is used when projecting the Item's vertices onto the screen,
    i.e. when determining where to draw a picture on the screen.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetOrigin(20, 20)
    */
    action SetOrigin(number setX, number setY)
        origin:SetX(setX)
        origin:SetY(setY)
        
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    This action will set the origin of the Item to be at the current center of
    the Item's width and height bounds.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetSize(50, 80)
        myItem:SetOriginCenter()
    */
    action SetOriginCenter
        origin:SetX(GetWidth() / 2.0)
        origin:SetY(GetHeight() / 2.0)
        
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        NotifyAccessibilityBoundsChanged()
    end

    /*
    Sets this Item2D to be rotated to an angle of the given number of degrees.
    This will also rotate all Items in the children hierarchy of this Item.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetRotation(90)
    */
    action SetRotation(number degrees)
        Math math
        rotation = degrees

        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        if updateTransform
            UpdateTransformAngle()
            UpdateTransformX()
            UpdateTransformY()
        end
        
        if visualView not= undefined
            visualView:UpdateRotation(rotation)
        end

        NotifyAccessibilityBoundsChanged()

        if children:GetSize() > 0

            Item2D temp = undefined
            number startAngle = 0
            number centerX = (GetWidth() * scale:GetX())/2
            number centerY = (GetHeight() * scale:GetY())/2
            number distance = 0

            integer counter = 0

            //repeat while childIterator:HasNext()
            repeat children:GetSize() times
                //temp = childIterator:Next()
                temp = children:Get(counter)
                number tempCenterX = temp:GetX() * temp:GetScaleX() + (temp:GetWidth() * temp:GetScaleX())/2
                number tempCenterY = temp:GetY() * temp:GetScaleY() + (temp:GetHeight() * temp:GetScaleY())/2
                startAngle = math:RadiansToDegrees(math:InverseTangent(tempCenterX - centerX, centerY - tempCenterY)) + 360
                startAngle = startAngle + rotation
                startAngle = startAngle mod 360
                radius = math:SquareRoot(math:RaiseToPower(tempCenterX - centerX, 2) + math:RaiseToPower(tempCenterY - centerY, 2))
                number offX = radius * math:Cosine(math:DegreesToRadians(startAngle))
                number offY = radius * math:Sine(math:DegreesToRadians(startAngle))
                number distX = centerX - tempCenterX
                number distY = centerY - tempCenterY
                temp:SetOffset(GetGlobalX() + (offX + distX) + temp:GetX() * (scale:GetX() - 1), GetGlobalY() - offY + distY + temp:GetY() * (scale:GetY() - 1))
                temp:SetRotation(degrees)
                counter = counter + 1
            end
        end

        if physicsEnabled and not IsSimulated()
            Simulate(true)
        end
    end

    /*
    Gets the current degree of rotation of this Item.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetRotation(90)
        number rotation = myItem:GetRotation()
    */
    action GetRotation returns number
        return rotation
    end

    /*
    Gets the current rotation of this Item in radians.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetRotation(90)
        number rotation = myItem:GetRotationInRadians()
    */
    action GetRotationInRadians returns number
        Math math
        return math:DegreesToRadians(rotation)
    end

    /*
    Rotates this Item2D by the given number of degrees. This will also rotate all
    Items in the children hierarchy of this Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item myItem
        myItem:Rotate(65)
    */
    action Rotate(number degrees)
        Math math
        rotation = rotation + degrees
        if degrees not= 0
            DrawableShape drawShape = GetDrawableShape()
            if drawShape not= undefined
                drawShape:RequestUpdate()
            end
        end

        if updateTransform
            UpdateTransformAngle()
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdateRotation(rotation)
        end

        if children:GetSize() > 0

            Item2D temp = undefined
            number startAngle = 0
            number centerX = (GetWidth() * scale:GetX())/2
            number centerY = (GetHeight() * scale:GetY())/2
            number distance = 0

            integer counter = 0

            //repeat while childIterator:HasNext()
            repeat children:GetSize() times
                //temp = childIterator:Next()
                temp = children:Get(counter)
                number tempCenterX = temp:GetX() * temp:GetScaleX() + (temp:GetWidth() * temp:GetScaleX())/2
                number tempCenterY = temp:GetY() * temp:GetScaleY() + (temp:GetHeight() * temp:GetScaleY())/2
                startAngle = math:RadiansToDegrees(math:InverseTangent(tempCenterX - centerX, centerY - tempCenterY)) + 360
                startAngle = startAngle + rotation
                startAngle = startAngle mod 360
                radius = math:SquareRoot(math:RaiseToPower(tempCenterX - centerX, 2) + math:RaiseToPower(tempCenterY - centerY, 2))
                number offX = radius * math:Cosine(math:DegreesToRadians(startAngle))
                number offY = radius * math:Sine(math:DegreesToRadians(startAngle))
                number distX = centerX - tempCenterX
                number distY = centerY - tempCenterY
                temp:SetOffset(GetGlobalX() + (offX + distX) + temp:GetX() * (scale:GetX() - 1), GetGlobalY() - offY + distY + temp:GetY() * (scale:GetY() - 1))
                temp:Rotate(degrees)
                counter = counter + 1
            end
        end

        if physicsEnabled and not IsSimulated() and shouldTriggerSimulation
            Simulate(true)
        end
    end

    /*
    This action sets the scale of this Item2D, causing the vertices of the item to
    be calculated based on a scaled percentage of the width and height. The
    default scaling values are 1.0, or 100% of the Item's width and height.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScale(1.25)
    */
    action SetScale(number scale)
        me:scale:SetX(scale)
        me:scale:SetY(scale)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        scaleOffset:SetX((me:scale:GetX() * GetWidth() - GetWidth())/2)
        scaleOffset:SetY((me:scale:GetY() * GetHeight() - GetHeight())/2)

        if updateTransform
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
        end

        NotifyAccessibilityBoundsChanged()

        Resize()

        
        integer itemSize = GetItemCount()
        if itemSize > 0
        //Iterator<Item2D> childIterator = GetItems()
        //if childIterator:HasNext()

            // Code used to scale Items about their center.
            Item2D temp = undefined
            number globalX = GetGlobalX()
            number globalY = GetGlobalY()

            integer i = 0
            repeat while i < itemSize//childIterator:HasNext()
                temp = GetItem(i)//childIterator:Next()
                temp:SetOffset(globalX + temp:GetX() * (me:scale:GetX() - 1), globalY + temp:GetY() * (me:scale:GetY() - 1))
                temp:SetScale(scale)
                i = i + 1
            end
        end

        if rotation not= 0
            Rotate(0)
        end

        if shape not= undefined
            shape:Scale(me:scale:GetX(), me:scale:GetY())
        end
    end

    /*
    This action sets separate scaling values for the x and y planes on this Item2D.
    This will cause the vertices of this Item to be calculated based on a scaled
    percentage of the width and height. The default scaling values are 1.0, or
    100% of the Item's width and height.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScale(1.5, 0.75)
    */
    action SetScale(number newX, number newY)
        scale:SetX(newX)
        scale:SetY(newY)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        scaleOffset:SetX((scale:GetX() * GetWidth() - GetWidth())/2)
        scaleOffset:SetY((scale:GetY() * GetHeight() - GetHeight())/2)

        if updateTransform
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
        end

        NotifyAccessibilityBoundsChanged()

        Resize()

        integer itemSize = GetItemCount()
        if itemSize > 0
        //Iterator<Item2D> childIterator = GetItems()
        //if childIterator:HasNext()

            // Code used to scale Items about their center.
            Item2D temp = undefined
            number globalX = GetGlobalX()
            number globalY = GetGlobalY()

            integer i = 0
            repeat while i < itemSize//childIterator:HasNext()
                temp = GetItem(i) //childIterator:Next()
                temp:SetOffset(globalX + temp:GetX() * (scale:GetX() - 1), globalY + temp:GetY() * (scale:GetY() - 1))
                temp:SetScale(newX, newY)
                i = i + 1
            end
        end

        if rotation not= 0
            Rotate(0)
        end

        if shape not= undefined
            shape:Scale(me:scale:GetX(), me:scale:GetY())
        end
    end

    /*
    This action sets the scaling value of the x plane on this Item2D. This will
    cause the vertices of this Item to be calculated based on a scaled
    percentage of the width. The default scaling values are 1.0, or 100% of the
    Item's width and height.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScaleX(1.5)
    */
    action SetScaleX(number scaleX)
        SetScale(scaleX, GetScaleY())
    end

    /*
    This action sets the scaling value of the y plane on this Item2D. This will
    cause the vertices of this Item to be calculated based on a scaled
    percentage of the height. The default scaling values are 1.0, or 100% of the
    Item's width and height.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScaleY(0.75)
    */
    action SetScaleY(number scaleY)
        SetScale(GetScaleX(), scaleY)
    end

    /*
    This action will multiply the current scaling value by the given number.
    A parameter of 0 or less will be ignored.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScale(1.5)
        myItem:Scale(1.1)
    */
    action Scale(number amount)
        if amount <= 0
            return now
        end

        scale:SetX(scale:GetX() * amount)
        scale:SetY(scale:GetY() * amount)
        
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        scaleOffset:SetX((scale:GetX() * GetWidth() - GetWidth())/2)
        scaleOffset:SetY((scale:GetY() * GetHeight() - GetHeight())/2)

        if updateTransform
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
        end

        NotifyAccessibilityBoundsChanged()

        Resize()

        Iterator<Item2D> childIterator = GetItems()
        if childIterator:HasNext()

            // Code used to scale Items about their center.
            Item2D temp = undefined
            number globalX = GetGlobalX()
            number globalY = GetGlobalY()


            repeat while childIterator:HasNext()
                temp = childIterator:Next()
                temp:SetOffset(globalX + temp:GetX() * (scale:GetX() - 1), globalY + temp:GetY() * (scale:GetY() - 1))
                temp:Scale(amount)
            end
        end

        if rotation not= 0
            Rotate(0)
        end

            /* Code used to make Items scale from the bottom-left corner.
            Item temp = undefined
            number globalX = GetGlobalX()
            number globalY = GetGlobalY()

            repeat while childIterator:HasNext()
                temp = childIterator:Next()
                
                temp:SetOffset(globalX + (temp:GetX() * scaleX) - temp:GetX(), globalY + (temp:GetY() * scaleY) - temp:GetY())
                temp:Scale(amount)
            end

            if rotation not= 0
                Rotate(0)
            end
            */
        if shape not= undefined
            shape:Scale(me:scale:GetX(), me:scale:GetY())
        end
    end

    /*
    This action will multiply the x scaling and y scaling values, respectively,
    by the given numbers. A parameter of 0 or less will be ignored.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScale(1.5)
        myItem:Scale(1.1, 0.9)
    */
    action Scale(number xAmount, number yAmount)
        if xAmount <= 0
            xAmount = 1
        end
        if yAmount <= 0
            yAmount = 1
        end
        if xAmount = 1 and yAmount = 1
            return now
        end

        scale:SetX(scale:GetX() * xAmount)
        scale:SetY(scale:GetY() * yAmount)
        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            drawShape:RequestUpdate()
        end

        scaleOffset:SetX((scale:GetX() * GetWidth() - GetWidth())/2)
        scaleOffset:SetY((scale:GetY() * GetHeight() - GetHeight())/2)

        if updateTransform
            UpdateTransformX()
            UpdateTransformY()
        end

        if visualView not= undefined
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
        end

        NotifyAccessibilityBoundsChanged()

        Resize()

        Iterator<Item2D> childIterator = GetItems()
        if childIterator:HasNext()

            // Code used to scale Items about their center.
            Item2D temp = undefined
            number globalX = GetGlobalX()
            number globalY = GetGlobalY()


            repeat while childIterator:HasNext()
                temp = childIterator:Next()
                temp:SetOffset(globalX + temp:GetX() * (scale:GetX() - 1), globalY + temp:GetY() * (scale:GetY() - 1))
                temp:Scale(xAmount, yAmount)
            end
        end

        if rotation not= 0
            Rotate(0)
        end
        if shape not= undefined
            shape:Scale(me:scale:GetX(), me:scale:GetY())
        end
    end

    /*
    This action will multiply the current scaling value by the given number.
    A parameter of 0 or less will be ignored. This action will increase or
    decrease the scale of the object from the center, and update the Item's x,y
    coordinates to reflect the new bottom-left corner of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScale(1.5)
        myItem:ScaleFromCenter(1.1)
    */
    action ScaleFromCenter(number amount)
        number oldWidth = GetWidth() * scale:GetX()
        number oldHeight = GetHeight() * scale:GetY()
        number newWidth = GetWidth() * scale:GetX() * amount
        number newHeight = GetHeight() * scale:GetY() * amount
        Move((oldWidth - newWidth)/2, (oldHeight - newHeight)/2)
        Scale(amount)
        /*number oldWidth = width * scaleX
        number newWidth = width * (scaleX * amount)
        number oldHeight = height * scaleY
        number newHeight = height * (scaleY * amount)

        number xAdjust = (oldWidth - newWidth) / 2
        number yAdjust = (oldHeight - newHeight) / 2
        Translate(xAdjust, yAdjust)
        Scale(amount)*/
    end

    /*
    This action will multiply the current scaling values of the x and y planes 
    by the given number. A parameter of 0 or less will be ignored. This action 
    will increase or decrease the scale of the object from the center, and 
    update the Item's x,y coordinates to reflect the new bottom-left corner of 
    the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScale(1.5)
        myItem:ScaleFromCenter(1.1, 0.9)
    */
    action ScaleFromCenter(number xAmount, number yAmount)
        number oldWidth = GetWidth() * scale:GetX()
        number oldHeight = GetHeight() * scale:GetY()
        number newWidth = GetWidth() * scale:GetX() * xAmount
        number newHeight = GetHeight() * scale:GetY() * yAmount
        Move((oldWidth - newWidth)/2, (oldHeight - newHeight)/2)
        Scale(xAmount, yAmount)
    end

    /*
    This action sets the scale of this Item2D, causing the vertices of the item to
    be calculated based on a scaled percentage of the width and height. The
    default scaling values are 1.0, or 100% of the Item's width and height. This
    action will increase or decrease the scale of the object from the center, 
    and update the Item's x,y coordinates to reflect the new bottom-left corner
    of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScaleFromCenter(1.25)
    */
    action SetScaleFromCenter(number scale)
        number oldWidth = GetWidth() * me:scale:GetX()
        number newWidth = GetWidth() * scale
        number oldHeight = GetHeight() * me:scale:GetY()
        number newHeight = GetHeight() * scale

        number xAdjust = (oldWidth - newWidth) / 2
        number yAdjust = (oldHeight - newHeight) / 2
        Move(xAdjust, yAdjust)
        SetScale(scale)
    end

    /*
    This action sets separate scaling values for the x and y planes on this Item2D.
    This will cause the vertices of this Item to be calculated based on a scaled
    percentage of the width and height. The default scaling values are 1.0, or
    100% of the Item's width and height. This action will increase or decrease
    the scale of the object from the center, and update the Item's x,y 
    coordinates to reflect the new bottom-left corner of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetScaleFromCenter(1.5, 0.75)
    */
    action SetScaleFromCenter(number newX, number newY)
        number oldWidth = GetWidth() * scale:GetX()
        number newWidth = GetWidth() * newX
        number oldHeight = GetHeight() * scale:GetY()
        number newHeight = GetHeight() * newY

        number xAdjust = (oldWidth - newWidth) / 2
        number yAdjust = (oldHeight - newHeight) / 2
        Move(xAdjust, yAdjust)
        SetScale(newX, newY)
    end

    /*
    This action will return the current X origin of this Item2D. By default, the
    origin is at the coordinates 0, 0.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetOriginCenter()
        number xOrigin = myItem:GetOriginX()
    */
    action GetOriginX returns number
        return origin:GetX()
    end

    /*
    This action will return the current Y origin of this Item2D. By default, the
    origin is at the coordinates 0, 0.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:SetOriginCenter()
        number yOrigin = myItem:GetOriginY()
    */
    action GetOriginY returns number
        return origin:GetY()
    end

    /*
    This action will return the current x-scaling value of this Item2D. By default,
    the x-scaling value of an Item is 1.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:Scale(1.25)
        number scaleX = myItem:GetScaleX()
    */
    action GetScaleX returns number
        return scale:GetX()
    end

    /*
    This action will return the current y-scaling value of this Item2D. By default,
    the y-scaling value of an Item is 1.

    Attribute: Example

        use Libraries.Interface.Item2D
        
        Item2D myItem
        myItem:SetSize(100, 200)
        myItem:Scale(1.25)
        number scaleY = myItem:GetScaleY()
    */
    action GetScaleY returns number
        return scale:GetY()
    end

    /*
    This action returns a rectangle that fully encloses the four corners of the
    Item as it is represented by its internal vertices array. Note that the
    rectangle produced by this action will be larger than the actual box formed
    by this Item's vertices if the Item is rotated.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Game.Shapes.Rectangle

        Item2D myItem
        myItem:SetBoundingBox(20, 80, 100, 100)
        Rectangle box = myItem:GetBoundingRectangle()
    */
    action GetBoundingRectangle returns Rectangle

        DrawableShape drawShape = GetDrawableShape()
        if drawShape not= undefined
            return drawShape:GetBoundingRectangle()
        end

        if bounds = undefined
            Rectangle newRectangle
            bounds = newRectangle
        end
        
        bounds:SetX(GetGlobalX())
        bounds:SetY(GetGlobalY())
        bounds:SetWidth(GetWidth())
        bounds:SetHeight(GetHeight())
        return bounds
    end

    /*
    This action is used to draw this Item on the screen, and then draw all of
    the Item's children hierarchy on the screen. Note that Items themselves can
    not be drawn, but some classes that extend the Item class, such as the
    Libraries.Game.Graphics.Drawable class, can be. To see how they draw, see
    their documentation.
    */
    action QueueForDrawing(Painter2D painter)
        PrepareVertices()
    
        if not IsShowing()
            return now
        end

        if IsCustomDrawing()
            painter:QueueForDrawing(me)
        elseif visualView not= undefined
            visualView:QueueForDrawing(painter)
        end
    end

    /*
    This action sets the clipping coordinates of the given painter to respect
    the coordinates of this Item (if it's clipping) as well as any clipping
    being performed by parent Items. This action is called automatically by the
    Game engine as necessary, and most users will never need to use this action
    directly.
    */
    action SetClipCoordinates(Painter2D painter)
        DrawableShape shape = GetDrawableShape()
        if shape not= undefined
            // The shape caches clipping info during update, so if it needs it, do it before getting results from it.
            if shape:NeedsUpdate()
                shape:UpdateVertices()
            end

            if shape:HasClipping()
                painter:SetClipping(true)
                painter:SetClipCoordinates(shape:GetClippingX1(), shape:GetClippingY1(), shape:GetClippingX2(), shape:GetClippingY2())
            else
                painter:SetClipping(false)
            end
        else
            boolean applyClipping = GetClipCoordinates(workVector2A, workVector2B)

            if applyClipping
                painter:SetClipping(true)
                painter:SetClipCoordinates(workVector2A:GetX(), workVector2B:GetX(), workVector2A:GetY(), workVector2B:GetY())
            else
                painter:SetClipping(false)
            end
        end
    end

    /*
    This action gets the clipping coordinates of this Item2D. The coordinates
    are returned via the two provided Vector2 parameters, the first vector
    storing the x values of the left and right sides of the clipping coordinates
    and the second vector storing the y values of the bottom and top sides.

    The returned boolean value indicates if this Item uses these clipping
    coordinates (i.e. if this Item or one of its parent Items has clipping
    enabled). If the clipping is valid, the action returns true. Otherwise, it
    returns false.
    */
    action GetClipCoordinates(Vector2 xCoords, Vector2 yCoords) returns boolean
        number constants = 0
        number left = constants:GetNegativeInfinityValue()
        number right = constants:GetPositiveInfinityValue()
        number bottom = constants:GetNegativeInfinityValue()
        number top = constants:GetPositiveInfinityValue()
        boolean applyClipping = false

        Item2D item = me
        Item2D viewAnchor = undefined
        repeat while item not= undefined
            if item:IsClipping()
                applyClipping = true
                if item:GetGlobalX() > left
                    left = item:GetGlobalX()
                end
                if item:GetGlobalX() + item:GetWidth() < right
                    right = item:GetGlobalX() + item:GetWidth()
                end
                if item:GetGlobalY() > bottom
                    bottom = item:GetGlobalY()
                end
                if item:GetGlobalY() + item:GetHeight() < top
                    top = item:GetGlobalY() + item:GetHeight()
                end
            end

            if item is View2D
                View2D view = cast(View2D, cast(Object, item))
                viewAnchor = view:GetItem()
            end

            item = item:GetParent()
        end

        // Repeat steps again for the parent hierarchy of the Item this View
        // represents, if this object is a View2D.
        item = viewAnchor
        repeat while item not= undefined
            if item:IsClipping()
                applyClipping = true
                if item:GetGlobalX() > left
                    left = item:GetGlobalX()
                end
                if item:GetGlobalX() + item:GetWidth() < right
                    right = item:GetGlobalX() + item:GetWidth()
                end
                if item:GetGlobalY() > bottom
                    bottom = item:GetGlobalY()
                end
                if item:GetGlobalY() + item:GetHeight() < top
                    top = item:GetGlobalY() + item:GetHeight()
                end
            end

            item = item:GetParent()
        end

        xCoords:Set(left, right)
        yCoords:Set(bottom, top)
        return applyClipping
    end

    /*
    The SetCustomDrawing action is used to indicate that this Item wants to
    directly manage how itself and its children are drawn. When this is set to
    true, the Item must be responsible for determining this rendering via the
    Draw(Painter2D) action -- if this action isn't overridden, the Item
    and its children won't be drawn. This is an advanced feature only necessary 
    for complex custom components, and most users will not need to use this 
    functionality.

    Attribute: Parameter isCustom True if this Item should use custom drawing, or false to use default drawing rules.
    */
    action SetCustomDrawing(boolean isCustom)
        isCustomDrawing = isCustom
    end

    /*
    The IsCustomDrawing action returns whether or not this Item is directly
    managing how itself and its children are drawn. When this value is true,
    the Item is responsible for determining its rendering via the
    Draw(Painter2D) action -- if this action isn't overridden, the Item
    and its children won't be drawn. This is an advanced feature only necessary 
    for complex custom components, and most users will not need to use this 
    functionality.

    Attribute: Returns Whether or not this Item is currently using custom drawing rules.
    */
    action IsCustomDrawing returns boolean
        return isCustomDrawing
    end

    /*
    The SetChildrenProcessingMouseEvents action is used to set whether or not
    children items should receive mouse events if this Item is using custom
    drawing. This affects only custom drawing Items -- if the Item isn't
    drawing, children objects will always receive the mouse events first. This
    value is false by default. This is an advanced feature only necessary for
    complex custom components, and most users will not need to use this.
    */
    action SetChildrenProcessingMouseEvents(boolean shouldProcess)
        childrenProcessingMouseEvents = shouldProcess
    end

    /*
    This action returns whether or not this Item is allowing its children to
    receive mouse events if the Item is custom drawing. If the Item isn't
    using custom drawing, this value is irrelevant -- children objects always
    receive mouse events before the parent if the parent isn't performing
    custom drawing.
    */
    action AreChildrenProcessingMouseEvents returns boolean
        return childrenProcessingMouseEvents
    end

    /*
    The Draw action is used to perform custom drawing on this Item and its
    children. This is only called during the Game engine's draw phase if this
    Item has enabled custom drawing via the SetCustomDrawing action. This is
    an advanced feature, and shouldn't be used by most users.

    If custom drawing is enabled, this action should be overriden -- if it isn't,
    the Item will attempt to provide default rendering for itself, its view, and
    its children, without regard to depth buffering. This action is responsible
    for instructing the provided Painter on how to draw this item, the view, and 
    its children, and in what order to do so. 
    */
    action Draw(Painter2D painter)
        if not IsShowing()
            return now
        end

        if visualView not= undefined
            visualView:Draw(painter)
        end

        integer counter = 0
        repeat while counter < children:GetSize()
            children:Get(counter):Draw(painter)
            counter = counter + 1
        end
    end

    /*
    This is an action used internally to retrieve the head of the linked list of 
    collisions with this item. This action is used internally and users should 
    not need to use this action.

    Attribute: Returns The head of the doubly linked list of collisions
    */
    action GetCollisionList returns CollisionEdge2D
        return collisionList
    end

    /*
    This is an action used internally by the physics system to keep track of the
    collisions with this item in a linked list structure. This action sets the
    head of the linked list of collisions to the passed CollisionEdge2D object.
    This action is used internally and users should not need to use this action.

    Attribute: Parameter edge The new head of the linked list of collisions
    */
    action SetCollisionList(CollisionEdge2D edge)
        collisionList = edge
    end

    /*
    This is an action used internally to retrieve the head of the liked list of 
    joints connected to this item. This action is used internally and users
    should not need to use this action.

    Attribute: Returns The head of the linked list of connected joints
    */
    action GetJointList returns JointEdge2D
        return jointList
    end

    /*
    This is an action used internally by the physics system to keep track of the
    joints connected to this item in a linked list structure. This action sets the
    head of the linked list of collisions to the passed CollisionEdge2D object.
    This action is used internally and users should not need to use this action.

    Attribute: Parameter The new head of the linked list of connected joints
    */
    action SetJointList(JointEdge2D edge)
        jointList = edge
    end

    /*
    This action is used by the Game libraries to create a reference to the layer
    that this Item2D exists on. It is automatically called as needed by the
    Layer2Dclass. Most users will never need to use this action directly.
    */
    action SetLayer(Layer2D parentLayer)
        layer = parentLayer

        if visualView is Item2D
            Item2D view = cast(Item2D, cast(Object, visualView))
            view:SetLayer(parentLayer)
        end

        integer i = 0
        repeat children:GetSize() times
            children:Get(i):SetLayer(parentLayer)
            i = i + 1
        end

        if layer not= undefined
            layerSet = true

            if shape not= undefined
                if collidable
                    if not nodesSet
                        CreateNodes(layer:GetCollisionManager():GetBroadphase(), transform)
                    end
                else
                    if nodesSet
                        DestroyNodes(layer:GetCollisionManager():GetBroadphase())
                    end
                end
            end
        else
            layerSet = false
        end
    end

    /*
    This action returns the current Layer2Dthat this Item2D is a part of in the
    Game libraries. 
    */
    action GetLayer returns Layer2D
        return layer
    end

    /*
    This action is used internally by the physics system to set the position of
    this item in the physics world. This action is used internally and users
    users should not need to use this action.

    Attribute: Parameter position The vector representing the position of the center of the item in physics space
    Attribute: Parameter angle The rotation in radians of the item in physics space
    */
    action SetTransform(Vector2 position, number angle)
        transform:Set(position, angle)
        
        transform:MultiplyToOut(transform, sweep:GetLocalCenter(), sweep:GetCenter())
        sweep:SetAngle(angle)

        BroadphaseCollision2D broadphase = layer:GetCollisionManager():GetBroadphase()
        Synchronize(broadphase, transform, transform)
    end


    /*
    This action returns the position of the item in physical space. This acction is
    used internally and should not be used by users to get the position of this
    item on the screen.

    Attribute: Returns The position and angle of this item in physics space
    */
    action GetTransform returns PhysicsPosition2D
        return transform
    end

    /*
    This action sets the position of the item in physical space. This action is
    used internally and should not be used by users to set the position of this
    item on the screen.

    Attribute: Parameter transform The position and angle of this item in physics space
    */
    action SetTransform(PhysicsPosition2D transform)
        me:transform:Set(transform)
    end

    /*
    This action gets the position of the item in physics space from the previous
    frame. This action is used internally and users should not need to use this
    action

    Attribute: Returns The position and angle of the item in physics space in the previous frame
    */
    action GetTransform0 returns PhysicsPosition2D
        return transform0
    end

    /*
    This action sets the position of the item in physics space from the previous
    frame. This action is used internally and users should not need to use this
    action.

    Attribute: Parameter transform The position and angle of the item in physics space in the previuos frame
    */
    action SetTransform0(PhysicsPosition2D transform)
        me:transform0:Set(transform)
    end

    /*
    This action is used to syncronize the item's position in physics space with
    its position in the tree used for broadphase collision. This action is used
    internally and users should not need to use this action.
    */
    action SynchronizeNodes
        if not IsCollidable()
            return now
        end

        Math math        
        synchronizeNodesTempPosition:SetSine(math:Sine(sweep:GetAngle()))
        synchronizeNodesTempPosition:SetCosine(math:Cosine(sweep:GetAngle()))
        synchronizeNodesTempPosition:GetPosition():SetX(sweep:GetCenter():GetX() - synchronizeNodesTempPosition:GetCosine() * sweep:GetLocalCenter():GetX() + synchronizeNodesTempPosition:GetSine() * sweep:GetLocalCenter():GetY())
        synchronizeNodesTempPosition:GetPosition():SetY(sweep:GetCenter():GetY() - synchronizeNodesTempPosition:GetSine() * sweep:GetLocalCenter():GetX() - synchronizeNodesTempPosition:GetCosine() * sweep:GetLocalCenter():GetY()) 

        check
            Synchronize(layer:GetCollisionManager():GetBroadphase(), synchronizeNodesTempPosition, me:transform)
        detect error is UndefinedObjectError
            alert("I tried to synchronize an Item's nodes but a reference was undefined. This usually happens because the Item was added to the Game or to another Item more than once, and then it was removed.")
        end

        integer i = 0
        repeat children:GetSize() times
            Item2D child = children:Get(i)
            child:SynchronizeNodes()
            i = i + 1
        end
    end

    /*
    This action is used to update this items position in physics space after
    physics solving is finished for this item. This action is used internally
    and users should not need to use this action.
    */
    action SynchronizeTransform
        transform:Set(transform:GetPosition(), sweep:GetAngle())
        number cosine = transform:GetCosine()
        number sine = transform:GetSine()
        Vector2 v = sweep:GetLocalCenter()
        transform:GetPosition():SetX(sweep:GetCenter():GetX() - cosine * v:GetX() + sine * v:GetY())
        transform:GetPosition():SetY(sweep:GetCenter():GetY() - sine * v:GetX() - cosine * v:GetY())
    end

    /*
    This action is used to advance the item forward in time in physics space to 
    synchronize it for time of impact solving. This action is used internally
    and users should not need to use this action.

    Attribute Parameter time The amount of seconds to advance the item forward in time
    */
    action Advance(number time)
        sweep:Advance(time)
        sweep:GetCenter():Set(sweep:GetCenter0())
        sweep:SetAngle(sweep:GetAngle0())
        transform:Set(transform:GetPosition(), sweep:GetAngle())
        transform:GetPosition():SetX(transform:GetCosine() * sweep:GetLocalCenter():GetX() - transform:GetSine() * sweep:GetLocalCenter():GetY())
        transform:GetPosition():SetY(transform:GetSine() * sweep:GetLocalCenter():GetX() + transform:GetCosine() * sweep:GetLocalCenter():GetY())
        transform:GetPosition():Scale(-1):Add(sweep:GetCenter())
    end

    /*
    This action returns the swept movement of this item used for time of impact
    solving for the physics system. This action is used internally and users
    should not need to call this action.

    Attribute: Returns The swept motion of this item
    */
    action GetSweep returns Sweep2D
        return sweep
    end

    /*
    This action returns an integer representing the type of collision shape
    currently attached to this item.

    Attribute: Returns The integer representing the type of collision shape for this item
    */
    action GetShapeType returns integer
        return shape:GetType()
    end

    /*
    This action sets the collision shape of this item. The collision shape is the
    shape the collision system will use to test for collisions with this item.
    Note that this may be different from the shape drawn on the screen. A copy of
    the passed shape is used for the collison shape for this item.

    Attribute: Parameter shape The collision shape to use for this item
    
    Attribute: Example

    use Libraries.Game.Drawable
    use Libraries.Game.Collision.Shapes.Circle

    Drawable ball
    ball:Load("ball.png")
    Circle circle
    circle:SetRadius(30)
    ball:SetShape(circle)
    */
    action SetShape(CollisionShape2D shape)
        me:shape = shape:Copy()

        ManageLayers()
    end

    private action ManageLayers
        if layerSet
            if collidable
                if not nodesSet
                    CreateNodes(layer:GetCollisionManager():GetBroadphase(), transform)
                end
            else
                if nodesSet
                    DestroyNodes(layer:GetCollisionManager():GetBroadphase())
                end
            end
        end
    end
    /*
    This item returns the collision shape of this item. The collision shape is the
    shape the collision system will use to test for collisions with this item.
    Note that this may be different from the shape drawn on the screen.
    
    Attribute: Returns The collision shape for this item

    Attribute: Example

    use Libraries.Game.Drawable
    use Libraries.Game.Collision.Shapes.Circle

    Drawable ball
    ball:Load("ball.png")
    Circle circle
    circle:SetRadius(30)
    ball:SetShape(circle)
    CollisionShape2D shape = ball:GetShape()
    */
    action GetShape returns CollisionShape2D
        return shape
    end

    /*
    This item is used to test whether a passed point is on the collision shape
    of this item.

    Attribute: Parameter point The vector representing the point to test

    Attribute: Returns True if the passed point is on the collisoin shape, false otherwise

    Attribute: Example

    use Libraries.Interface.Drawable
    use Libraries.Compute.Vector2

    Drawable circle
    circle:LoadFilledCircle(30)
    circle:SetPosition(350, 400)
    Vector2 point
    point:Set(365, 410)
    boolean result = circle:TestPoint(point)
    */
    action TestPoint(Vector2 point) returns boolean
        return shape:TestPoint(transform, point)
    end

    /*
    This action is used to get the bounding box of the item. A bounding box is
    an axis-alligned rectangle containing the shape used for broadphase collision.
    This action is used internally and users should not need to use this action.

    Attribute: Parameter childIndex The index of the collision shape attached to this item we want the bounding box of
    
    Attribute: Returns The bounding box of the collision shape attached to this item
    */
    action GetBoundingBox(integer childIndex) returns BoundingBox2D
        return nodes:Get(childIndex):GetBoundingBox()
    end

    /*
    This action computes the distance of the passed point from the collision shape
    attached to this item. This action is used internally and users should not
    need to use this action.

    Attribute: Parameter point The vector representing the point to compute the distance from
    Attribute: Parameter childIndex The index of the collision shape attached to this item we want the bounding box of
    Attribute: Parameter normalOut The direction of the point from the shape

    Attribute: Returns The distance of the point from the collision shape of this item
    */
    action ComputeDistance(Vector2 point, integer childIndex, Vector2 normalOut) returns number
        return shape:ComputeDistance(transform, point, childIndex, normalOut)
    end

    /*
    This action creates the nodes for this item for the broadphase collision.
    This action is needed in order to add the item to the collision detection
    system. This action is used internally and users should not need to use this
    action.

    Attribute: Parameter broadphase The broadphase to add this item to
    Attribute: Parameter transform The current position of the item in physics space
    */
    action CreateNodes(BroadphaseCollision2D broadphase, PhysicsPosition2D transform)
        if nodesSet or not collidable
            DestroyNodes(broadphase)
        end

        if collidable
            nodeCount = shape:GetChildCount()
            integer i = 0
            repeat while i < nodeCount
                Item2DNode node
                shape:ComputeBoundingBox(node:GetBoundingBox(), transform, i)
                node:SetNodeID(broadphase:CreateNode(node:GetBoundingBox(), node))
                node:SetItem(me)
                node:SetChildIndex(i)
                nodes:Add(node)
                i = i + 1
            end
            nodesSet = true
        end
    end

    /*
    This action destroys the nodes for this item for the broadphase collision,
    essentially removing it from the collision detection system. This action
    is used internally and users should not need to use this action.

    Attribute: Parameter broadphase The broadphase to remove this item's nodes from
    */
    action DestroyNodes(BroadphaseCollision2D broadphase)
        integer i = 0
        repeat while i < nodeCount
            Item2DNode node = nodes:Get(i)
            broadphase:DestroyNode(node:GetNodeID())
            node:SetNodeID(-1)
            nodes:Remove(node)
            i = i + 1
        end

        nodeCount = 0
        nodesSet = false
    end

    /*
    This action gets the number of broadphase nodes this item has. This action
    is used internally and users should not need to use this action.

    Attribute: Returns The number of broadphase nodes attached to this item
    */
    action GetNodeCount returns integer
        return nodeCount
    end

    /*
    This action is used to synchronize the nodes of this item in the broadphase.
    This essentially updates the position of this item in the broadphase collision
    tree if the item moved since the last frame.

    Attribute: Parameter broadphase The broadphase that keeps track of this item
    Attribute: Parameter transform1 The updated position of the item
    Attribute: Parameter transform2 The old position of the item
    */
    private action Synchronize(BroadphaseCollision2D broadphase, PhysicsPosition2D transform1, PhysicsPosition2D transform2)
        if nodeCount = 0
            return now
        end

        Vector2 displacement
        integer i = 0
        repeat while i < nodeCount
            Item2DNode node = nodes:Get(i)
            
            BoundingBox2D boundingBox1
            BoundingBox2D boundingBox2

            shape:ComputeBoundingBox(boundingBox1, transform1, node:GetChildIndex())
            shape:ComputeBoundingBox(boundingBox2, transform2, node:GetChildIndex())

            Vector2 minimum = node:GetBoundingBox():GetMinimum()
            Vector2 maximum = node:GetBoundingBox():GetMaximum()

            if boundingBox1:GetMinimum():GetX() < boundingBox2:GetMinimum():GetX()
                minimum:SetX(boundingBox1:GetMinimum():GetX())
            else
                minimum:SetX(boundingBox2:GetMinimum():GetX())
            end

            if boundingBox1:GetMinimum():GetY() < boundingBox2:GetMinimum():GetY()
                minimum:SetY(boundingBox1:GetMinimum():GetY())
            else
                minimum:SetY(boundingBox2:GetMinimum():GetY())
            end

            if boundingBox1:GetMaximum():GetX() > boundingBox2:GetMaximum():GetX()
                maximum:SetX(boundingBox1:GetMaximum():GetX())
            else
                maximum:SetX(boundingBox2:GetMaximum():GetX())
            end

            if boundingBox1:GetMaximum():GetY() > boundingBox2:GetMaximum():GetY()
                maximum:SetY(boundingBox1:GetMaximum():GetY())
            else
                maximum:SetY(boundingBox2:GetMaximum():GetY())
            end

            displacement:SetX(transform2:GetPosition():GetX() - transform1:GetPosition():GetX())
            displacement:SetY(transform2:GetPosition():GetY() - transform1:GetPosition():GetY())

            broadphase:MoveNode(node:GetNodeID(), node:GetBoundingBox(), displacement)

            i = i + 1
        end
    end

    /*
    This action returns all of the broadphase nodes attached to this item in an
    array. This action is used internally and users should not need to use this
    action.

    Attribute: Returns The broadphase nodes attached to this item in an array
    */
    action GetNodes returns Array<Item2DNode>
        return nodes
    end

    /*
    This action sets this item to be collidable. Passing true turns on collision
    for this item while passing false turns off collision for this item.

    Attribute: Parameter flag Whether or not to turn collision on for this item

    Attribute: Example

    use Libraries.Game.Graphics.Drawable
    
    Drawable circle
    circle:LoadFilledCircle(30)
    circle:SetCollidable(true)
    */
    action SetCollidable(boolean flag)
        if collidable = flag
            return now
        end

        collidable = flag

        if collidable
            PhysicsPosition2D transform02
            Sweep2D sweep2
            Array<Item2DNode> nodes2
            PhysicsPosition2D transform2
            PhysicsPosition2D synchronizeNodesTempPosition2

            me:transform0 = transform02
            me:sweep = sweep2
            me:transform = transform2
            me:nodes = nodes2
            me:synchronizeNodesTempPosition = synchronizeNodesTempPosition2

            UpdateTransformX()
            UpdateTransformY()
            ManageShape()

            if layerSet and shape not= undefined
                BroadphaseCollision2D broadphase = layer:GetCollisionManager():GetBroadphase()
                CreateNodes(broadphase, transform)
            end
        else
            if layerSet
                BroadphaseCollision2D broadphase = layer:GetCollisionManager():GetBroadphase()
                DestroyNodes(broadphase)
                CollisionEdge2D edge = collisionList
                repeat while edge not= undefined
                    CollisionEdge2D edge0 = edge
                    edge = edge:GetNext()
                    layer:GetCollisionManager():Destroy(edge0:GetCollision())
                end
                collisionList = undefined
            end
        end
    end

    /*
    This action determines whether this item is collidable.

    Attribute: Returns True if this item is collidable, false otherwise

    Attribute: Example

    use Libraries.Game.Graphics.Drawable
    
    Drawable circle
    circle:LoadFilledCircle(30)
    circle:SetCollidable(true)
    boolean result = circle:IsCollidable
    */
    action IsCollidable returns boolean
        return collidable
    end

    /*
    This action gets the children of this item in an array.

    Attribute: Returns The children of this item in an array

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D parent
    Item2D child1
    Item2D child2

    parent:Add(child1)
    parent:Add(child2)

    Array<Item2D> children = parent:GetChildren()
    */
    action GetChildren returns Array<Item2D>
        return children
    end

    /*
    This action enables physics for this item. Passing true turns on physics for
    this item while passing false turns off physics for this item.

    Attribute: Parameter flag Whether or not to enable physics for this item

    Attribute: Example

    use Libraries.Game.Graphics.Drawable

    Drawable circle
    circle:LoadFilledCircle(30)
    circle:EnablePhysics(true)
    */
    action EnablePhysics(boolean flag)
        physicsEnabled = flag

        Application application = manager:GetApplication()
        if application is WebApplication and physicsEnabled
            // If width and height are 0, most likely the item is being loaded
            // in some capacity (e.g. loading a Drawable) and thus we need to
            // wait for it before allowing it to use physics.
            if GetWidth() = 0 and GetHeight() = 0
                physicsEnabled = false
                PhysicsProperties2D properties
                me:properties = properties
            else       
                SetCollidable(true)
                sweep:GetLocalCenter():SetZero()
                sweep:GetCenter0():Set(transform:GetPosition())
                sweep:GetCenter():Set(transform:GetPosition())
                sweep:SetAngle0(transform:GetAngle())
                sweep:SetAngle(transform:GetAngle())
                sweep:SetAlpha0(0)
                if me:properties = undefined
                    PhysicsProperties2D properties
                    me:properties = properties  //connect the property holder to this item
                end
                properties:SetItem(me)  //connect this item to the property holder
            end
            return now
        end
    
        if physicsEnabled
            SetCollidable(true)
            sweep:GetLocalCenter():SetZero()
            sweep:GetCenter0():Set(transform:GetPosition())
            sweep:GetCenter():Set(transform:GetPosition())
            sweep:SetAngle0(transform:GetAngle())
            sweep:SetAngle(transform:GetAngle())
            sweep:SetAlpha0(0)
            PhysicsProperties2D properties
            me:properties = properties  //connect the property holder to this item
            properties:SetItem(me)      //connect this item to the property holder
        end
    end

    /*
    This action determines whether physics is currently enabled for this item.

    Attribute: Returns True if physics is enabled for this item, false otherwise

    Attribute: Example

    use Libraries.Game.Graphics.Drawable

    Drawable circle
    circle:LoadFilledCircle(30)
    circle:EnablePhysics(true)
    boolean result = circle:IsPhysicsEnabled()
    */
    action IsPhysicsEnabled returns boolean
        return physicsEnabled
    end

    /*
    This action gets the position of the center of this item in global (world)
    coordinates.

    Attribute: Returns The vector representing the center of this item in global coordinates
    */
    action GetWorldCenter returns Vector2
        return sweep:GetCenter()
    end


    /*
    This action gets the position of the center of this item in local coordinates
    (i.e., with respect to itself).

    Attribute: Returns The vector representing the center of this item in local coordinates
    */
    action GetLocalCenter returns Vector2
        return sweep:GetLocalCenter()
    end

    /*
    This action sets the linear velocity of this item in units per second. Physics
    must be enabled on this item before using this action.

    Attribute: Parameter linearVelocity The vector representing the linear velocity of this item in units per second

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 velocity

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    velocity:Set(100, 0)
    item:SetLinearVelocity(velocity)
    */
    action SetLinearVelocity(Vector2 linearVelocity)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetLinearVelocity(linearVelocity)
    end

    /*
    This action sets the x-component of this item's linear velocity in units
    per second. Physics must be enabled on this item before using this action.

    Attribute: Parameter linearVelocityX The x-component of this item's linear velocity in units per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetLinearVelocityX(100)
    */
    action SetLinearVelocityX(number linearVelocityX)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetLinearVelocityX(linearVelocityX)
    end

    /*
    This action sets the y-component of this item's linear velocity in units
    per second. Physics must be enabled on this item before using this action.

    Attribute: Parameter linearVelocityY The y-component of this item's linear velocity in units per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetLinearVelocityY(100)
    */
    action SetLinearVelocityY(number linearVelocityY)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetLinearVelocityY(linearVelocityY)
    end

    /*
    This action gets the linear velocity of this item in units per second. Physics
    must be enabled on this item before using this action.

    Attribute: Returns The vector representing the linear velocity of this item in units per second

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 velocity

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    velocity:Set(100, 0)
    item:SetLinearVelocity(velocity)

    Vector2 currentVelocity = item:GetLinearVelocity()
    */
    action GetLinearVelocity returns Vector2
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetLinearVelocity()
    end

    /*
    This action sets this item's angular velocity in radians per second. Physics
    must be enabled in this item before using this action.

    Attribute: Parameter angularVelocity The angular velocity of this item in radians per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetAngularVelocity(0.1)
    */
    action SetAngularVelocity(number angularVelocity)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetAngularVelocity(angularVelocity)
    end

    /*
    This action gets this item's angular velocity in radians per second. Physics
    must be enabled in this item before using this action.

    Attribute: Returns The angular velocity of this item in radians per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetAngularVelocity(0.1)
    number angularVelocity = item:GetAngularVelocity()
    */
    action GetAngularVelocity returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetAngularVelocity()
    end

    /*
    This action sets the total force on this item. The units are kilogram units
    per second per second. This action should be used to set the total force on
    this item. If we want to apply a force to this item, we should use the
    ApplyForce actions instead. Physics must be enabled on this item before
    using this action.

    Attribute: Parameter force The total force in kilogram units per second per second

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 force

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    force:Set(300, 350)
    item:SetForce(force)
    */
    action SetForce(Vector2 force)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetForce(force)
    end

    /*
    This action gets the total force on this item. The units are kilogram units
    per second per second. Physics must be enabled on this item before using
    this action.

    Attribute: Returns The total force in kilogram units per second per second

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 force

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    force:Set(300, 350)
    item:SetForce(force)
    Vector2 totalForce = item:GetForce()
    */
    action GetForce returns Vector2
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetForce()
    end

    /*
    This action sets the total torque on this item. The units are kilogram units
    squared per second per second. This action should be used to set the total
    torque on this item. If we want to apply a torque to this item, we should
    use the ApplyTorque actions instead. Physics must be enabled on this action
    before using this action.

    Attribute: Parameter force The total torque in kilogram units squared per second per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetTorque(200)
    */
    action SetTorque(number torque)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetTorque(torque)
    end

    /*
    This action gets the total torque on this item. The units are kilogram units
    squared per second per second. Physics must be enabled on this item before
    using this action.

    Attribute: Returns The total torque in kilogram units squared per second per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetTorque(200)
    number totalTorque = item:GetTorque()
    */
    action GetTorque returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetTorque()
    end

    /*
    This action applies a force to this item at the passed point. The force is
    in kilogram units per second per second. The point is the screen coordinates
    where the point will be applied. If the point is not on the center of the item, 
    then a torque will be introduced causing the item to rotate. Physics must be 
    enabled on this item before using this action.

    Attribute: Parameter force The force to apply to the item in kilogram units per second per second
    Attribute: Parameter point The point at which to apply the force

    Attribute: Example

    use Libraries.Compute.Vector2
    use Libraries.Interface.Item2D

    Item2D item
    Vector2 force
    Vector2 point

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    
    force:Set(300, 350)
    point:Set(100, 100)    // apply the force to the top right corner of the item
    
    item:ApplyForce(force, point)
    */
    action ApplyForce(Vector2 force, Vector2 point)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:ApplyForce(force, point)
    end

    /*
    This action applies a force to this item at the center of the item. The force
    is in kilogram units per second per second. No torque is introduced to the
    item when using this action. Physics must be enabled on this item before 
    using this action.

    Attribute: Parameter force The force to apply to the item in kilogram units per second per second

    Attribute: Example

    use Libraries.Compute.Vector2
    use Libraries.Interface.Item2D

    Item2D item
    Vector2 force

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    
    force:Set(300, 350)
    
    item:ApplyForce(force)
    */
    action ApplyForceToCenter(Vector2 force)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:ApplyForceToCenter(force)
    end

    /*
    This action applies a torque to this item. The units are kilogram units
    squared per second per second. Physics must be enabled on this item before
    using this action.

    Attribute: Parameter torque The torque to apply to this item in kilogram units squared per second per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:ApplyTorque(350)
    */
    action ApplyTorque(number torque)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:ApplyTorque(torque)
    end

    /*
    This action applies a linear impulse to this item at the passed point. The 
    impulse is in kilogram units per second. This immeadietly modifies the linear
    velocity of this item. The point is the screen coordinates where the impulse
    will be applied. If the point is not the center of the item, then the 
    angular velocity of this item will also be modified. Physics must be enabled
    on this item before using this action.

    Attribute: Parameter impulse The impulse to apply in kilogram units per second
    Attribute: Parameter point The point at which to apply the impulse

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 impulse
    Vector2 point

    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)

    impulse:Set(100)
    point:Set(100, 100)     // apply the impulse to the top right corner

    item:ApplyLinearImpulse(impulse, point)    
    */
    action ApplyLinearImpulse(Vector2 impulse, Vector2 point)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:ApplyLinearImpulse(impulse, point)
    end

    /*
    This action applies an angular impulse to this item. The units are in
    kilogram units squared per second. This modifies the angular velocity of
    this item. Physics must be enabled on this item before using this action.

    Attribute: Parameter impulse The angular impulse in kilogram units squared per second

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:ApplyAngularImpulse(80)
    */
    action ApplyAngularImpulse(number impulse)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:ApplyAngularImpulse(impulse)
    end

    /*
    This action returns the mass of the item in kilograms. Physics must be
    enabled on this item before using this action. If the item is non-responsive
    or unmovable, the mass is zero.

    Attribute: Returns The mass in kilograms

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetMass(20)
    number mass = item:GetMass()
    */
    action GetMass returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetMass()
    end

    /*
    This action gets the inverse mass of the item (i.e., one divided by the mass
    of this item). Physics must be enabled on this item before using this action.

    Attribute: Returns The inverse mass of this item

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetMass(20)
    number inverseMass = item:GetInverseMass()
    */
    action GetInverseMass returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetInverseMass()
    end

    /*
    This action gets the rotational inertia of this item. The inertia is in 
    kilogram units squared.

    Attribute: Returns The inertia of this item in kilogram units squared

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetMass(20)
    number inertia = item:GetInertia() 
    */
    action GetInertia returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetInertia()
    end

    /*
    This action gets the inverse inertia of this item (i.e., one divided by the
    inertia of this item). Physics must be enabled on this item before using
    this action.

    Attribute: Returns The inverse inertia of this item

    Attribute: Example

    use Libraries.Interface.Item2D

    Item2D item
    item:SetWidth(100)
    item:SetHeight(100)
    item:EnablePhysics(true)
    item:SetMass(20)
    number inverseInertia = item:GetInverseInertia() 
    */
    action GetInverseInertia returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetInverseInertia()
    end

    /*
    Given a point relative to the center of this item, this action computes
    and returns that point in screen coordinates.

    Attribute: Parameter localPoint The point in coordinates with respect to the center of this item

    Attribute: Returns The screen coordinates of the passed local point

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 localPoint

    item:SetWidth(100)
    item:SetHeight(100)
    item:SetPosition(400, 250)
    
    localPoint:Set(0, 0)    // Get the coordinates of the center of the item

    Vector2 worldPoint = item:GetWorldPoint(localPoint)
    */
    action GetWorldPoint(Vector2 localPoint) returns Vector2
        Vector2 vector
        transform:MultiplyToOut(transform, localPoint, vector)
        return vector
    end

    /*
    Given the local coordinates of a vector, this action computes the screen
    coordinates of the corresponding vector.

    Attribute: Parameter localVector The coordinates of a local vector

    Attribute: Returns The coordinates of the corresponding global vector

    Attribute Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 localVector

    item:SetWidth(100)
    item:SetHeight(100)
    item:SetPosition(400, 250)
    
    localVector:Set(0, 0)    // Get the coordinates of the center of the item

    Vector2 worldVector = item:GetWorldVector(localVector)
    */
    action GetWorldVector(Vector2 localVector) returns Vector2
        Vector2 vector
        number tempy = transform:GetSine() * localVector:GetX() + transform:GetCosine() * localVector:GetY()
        vector:SetX(transform:GetCosine() * localVector:GetX() - transform:GetSine() * localVector:GetY())
        vector:SetY(tempy)
        return vector
    end

    /*
    Given a global point (i.e., the screen coordinates of the point), this action
    computes the corresponding point relative to the center of this item.

    Attribute: Parameter worldPoint The screen coordinates of the point to compute

    Attribute: Returns The coordinates of the point relative to the center of this item

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 worldPoint

    item:SetWidth(100)
    item:SetHeight(100)
    item:SetPosition(400, 350)
    
    worldPoint:Set(400, 350)    // the lower left corner of the item

    Vector2 localPoint = item:GetLocalPoint(worldPoint)
    */
    action GetLocalPoint(Vector2 worldPoint) returns Vector2
        Vector2 vector
        vector:Set(transform:MultiplyAndTranslate(transform, worldPoint))
        return vector
    end

    /*
    Given the screen coordinates of a vector, this action computes the local
    coordinates of the vector (i.e., the coordinates of the vector relative to
    the center of this item)

    Attribute: Parameter worldVector The screen coordinates of the vector

    Attribute: Returns The local coordinates of the corresponding vector

    Attribute: Example

    use Libraries.Interface.Item2D
    use Libraries.Compute.Vector2

    Item2D item
    Vector2 worldVector

    item:SetWidth(100)
    item:SetHeight(100)
    item:SetPosition(400, 350)
    
    worldVector:Set(400, 350)    // the lower left corner of the item

    Vector2 localVector = item:GetLocalVector(worldVector)
    */
    action GetLocalVector(Vector2 worldVector) returns Vector2
        Vector2 vector
        number tempy = -1 * transform:GetSine() * worldVector:GetX() + transform:GetCosine() * worldVector:GetY()
        vector:SetX(transform:GetCosine() * worldVector:GetX() + transform:GetSine() * worldVector:GetY())
        vector:SetY(tempy)
        return vector
    end

    action GetLinearVelocityFromWorldPoint(Vector2 worldPoint) returns Vector2
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        Vector2 vector
        number tempX = worldPoint:GetX() - sweep:GetCenter():GetX()
        number tempY = worldPoint:GetY() - sweep:GetCenter():GetY()
        vector:SetX(-1 * properties:GetAngularVelocity() * tempY + properties:GetLinearVelocity():GetX())
        vector:SetY(properties:GetAngularVelocity() * tempX + properties:GetLinearVelocity():GetY())
        return vector
    end

    action GetLinearVelocityFromLocalPoint(Vector2 localPoint) returns Vector2
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        Vector2 vector
        vector:Set(GetWorldPoint(localPoint))
        vector:Set(GetLinearVelocityFromWorldPoint(vector))
        return vector
    end

    action GetLinearDamping returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetLinearDamping()
    end

    action SetLinearDamping(number linearDamping)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetLinearDamping(linearDamping)
    end

    action GetAngularDamping returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetAngularDamping()
    end

    action SetAngularDamping(number angularDamping)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetAngularDamping(angularDamping)
    end

    action GetResponsiveness returns integer
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetResponsiveness()
    end

    action SetResponsiveness(integer type)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetResponsiveness(type)
    end

    action SetDensity(number density)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end
        properties:SetDensity(density)
        ResetMass()
    end

    action GetDensity returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetDensity()
    end

    action SetFriction(number friction)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetFriction(friction)
    end

    action GetFriction returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetFriction()
    end

    action SetRestitution(number restitution)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetRestitution(restitution)
    end

    action GetRestitution returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetRestitution()
    end

    action SetCollisionGroupFlag(boolean flag)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetCollisionGroupFlag(flag)
    end

    action GetCollisionGroupFlag returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetCollisionGroupFlag()
    end

    action SetCollisionGroupIndex(integer index)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetCollisionGroupIndex(index)
    end

    action GetCollisionGroupIndex returns integer
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetCollisionGroupIndex()
    end

    action IsFastMoving returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:IsFastMoving()
    end

    action FastMoving(boolean flag)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:FastMoving(flag)
    end

    action RequireSimulation(boolean flag)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:RequireSimulation(flag)
    end

    action IsSimulationRequired returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:IsSimulationRequired()
    end

    action Simulate(boolean flag)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:Simulate(flag)
    end

    action IsSimulated returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:IsSimulated()
    end

    action CanRotate(boolean flag)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:CanRotate(flag)
        ResetMass()
    end

    action IsRotationAllowed returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:IsRotationAllowed()
    end

    action SetSleepTime(number time)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetSleepTime(time)
    end

    action GetSleepTime returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetSleepTime()
    end

    action SetResponsive
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetResponsiveness(properties:RESPONSIVE)
    end

    action IsResponsive returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetResponsiveness() = properties:RESPONSIVE
    end

    action SetNonResponsive
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetResponsiveness(properties:NON_RESPONSIVE)
    end

    action IsNonResponsive returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetResponsiveness() = properties:NON_RESPONSIVE
    end

    action SetUnmovable
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        properties:SetResponsiveness(properties:UNMOVABLE)
    end

    action IsUnmovable returns boolean
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetResponsiveness() = properties:UNMOVABLE
    end

    action GetPhysicsProperties returns PhysicsProperties2D
        return properties
    end

    action SetPhysicsProperties(PhysicsProperties2D properties)
        me:properties = properties:Copy()
        me:properties:SetItem(me)
    end
    
    action SetUpdateTransform(boolean flag)
        updateTransform = flag
    end

    action SetScreenPositionFromPhysicsPosition
        Math math
        shouldTriggerSimulation = false
        MoveX(transform:GetPosition():GetX() - transform0:GetPosition():GetX())
        MoveY(transform:GetPosition():GetY() - transform0:GetPosition():GetY())
        Rotate(-1 * math:RadiansToDegrees(transform:GetAngle() - transform0:GetAngle()))
        shouldTriggerSimulation = true
    end

    action HasMoved returns boolean
        return hasMoved
    end

    action SetHasMoved(boolean flag)
        hasMoved = flag
    end

    action GetMass(Mass2D mass)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        mass:SetMass(properties:GetMass())
        mass:SetInertia(properties:GetRawInertia() + properties:GetMass() + (sweep:GetLocalCenter():GetX() * sweep:GetLocalCenter():GetX() + sweep:GetLocalCenter():GetY() * sweep:GetLocalCenter():GetY()))
        mass:GetCenter():SetX(sweep:GetLocalCenter():GetX())
        mass:GetCenter():SetY(sweep:GetLocalCenter():GetY())
    end

    action GetRawInertia returns number
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        return properties:GetRawInertia()
    end

    action SetMass(number mass)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end
        properties:SetMass(mass)
    end

    action SetMass(Mass2D mass)
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        if properties:GetResponsiveness() not= properties:RESPONSIVE
            return now
        end

        properties:SetInverseMass(0)
        properties:SetInertia(0)
        properties:SetInverseInertia(0)

        properties:AssignMass(mass:GetMass())
        if properties:GetMass() <= 0
            properties:AssignMass(1)
        end

        properties:SetInverseMass(1.0 / properties:GetMass())

        if mass:GetInertia() > 0 and properties:IsRotationAllowed()
            properties:SetInertia(mass:GetInertia() - properties:GetMass() * mass:GetCenter():DotProduct(mass:GetCenter()))
            properties:SetInverseInertia(1.0 / properties:GetRawInertia())
        end

        Vector2 oldCenter
        oldCenter:Set(sweep:GetCenter())
        sweep:GetLocalCenter():Set(mass:GetCenter())
        sweep:GetCenter0():SetX((transform:GetCosine() * sweep:GetLocalCenter():GetX() - transform:GetSine() * sweep:GetLocalCenter():GetY()) + transform:GetPosition():GetX())
        sweep:GetCenter0():SetY((transform:GetSine() * sweep:GetLocalCenter():GetX() + transform:GetCosine() * sweep:GetLocalCenter():GetY()) + transform:GetPosition():GetY())
        sweep:GetCenter():Set(sweep:GetCenter0())

        Vector2 temp
        temp:Set(sweep:GetCenter()):Subtract(oldCenter)
        number tempY = properties:GetAngularVelocity() * temp:GetX()
        temp:SetX(-properties:GetAngularVelocity() * temp:GetY())
        temp:SetY(tempY)
        properties:GetLinearVelocity():Add(temp)
    end


    /*
    This action sets the mass, mass moment of inertia, and how the 2D item should 
    move (via linear velocity) to be at the desired location.
    */
    action ResetMass
        Mass2D massData
        //make sure there is a "property holder" attached to this item
        if properties = undefined
            alert(PHYSICS_ERROR_MESSAGE)
        end

        //if this item is not governed by dynamics
        if properties:GetResponsiveness() = properties:UNMOVABLE or properties:GetResponsiveness() = properties:NON_RESPONSIVE
            sweep:GetCenter0():Set(transform:GetPosition())  //the postition at which the item will be drawn will be the current physics position of this item
            sweep:GetCenter():Set(transform:GetPosition())   //the target postition at which the item will be drawn will be the current physics position of this item
            sweep:SetAngle0(sweep:GetAngle())                //the tilt at which the item will be drawn will be the current physics tilt of this item
            properties:AssignMass(0)                         //set this object as having no mass
            properties:SetInverseMass(0)
            properties:SetInertia(0)
            properties:SetInverseInertia(0)
            sweep:GetLocalCenter():SetZero()
            return now
        end

        Vector2 localCenter
        localCenter:SetZero()

        Vector2 temp

        shape:ComputeMass(massData, properties:GetDensity())    //this will compute the mass based on the shape of the object and density such that the shape's center of mass will also be updated
        properties:AssignMass(massData:GetMass())
        localCenter:Add(massData:GetCenter())                   //obtain the center of mass of the object relative to the object's local coordinate's origin
        properties:SetInertia(massData:GetInertia())            //obtain the mass moment of inertia of the object and put it in the "property holder"
                                                                //however, this mass moment of inertia is about the object's local origin (the inertia in Mass2D class)
                                                                //but, we want the mass moment of inertia about the object's center of mass stored inside the "property holder"
                                                                //so, we will do calculations later 

        if properties:GetMass() > 0
            properties:SetInverseMass(1.0 / properties:GetMass())
        else    //if this is a massless object, just assign unit mass to this object
            properties:AssignMass(1)
            properties:SetInverseMass(1)
        end

        
        if properties:GetRawInertia() > 0 and properties:IsRotationAllowed()   
                //if there is an inertia that is physically possible inside the "properties holder" and the object is allowed to rotate
                //we have to change the inertia that is inside the "properties holder" to the mass moment of inertia about the object's center of mass
            properties:SetInertia(properties:GetRawInertia() - (properties:GetMass() * localCenter:DotProduct(localCenter)))
            properties:SetInverseInertia(1.0 / properties:GetRawInertia())
        else
            properties:SetInertia(0)
            properties:SetInverseInertia(0)
        end

        //get the old target global center of the object 
        Vector2 oldCenter
        oldCenter:Set(sweep:GetCenter())

        //change the target local center of the object 
        sweep:GetLocalCenter():Set(localCenter)

        //change the global center of the object of the frame drawn and the target global center of the object
        sweep:GetCenter0():SetX((transform:GetCosine() * sweep:GetLocalCenter():GetX() - transform:GetSine() * sweep:GetLocalCenter():GetY()) + transform:GetPosition():GetX())
        sweep:GetCenter0():SetY((transform:GetSine() * sweep:GetLocalCenter():GetX() + transform:GetCosine() * sweep:GetLocalCenter():GetY()) + transform:GetPosition():GetY())
        sweep:GetCenter():Set(sweep:GetCenter0())

        //"temp" is the vector whose head is at the current center, whose tail is at the old center 
        temp:Set(sweep:GetCenter()):Subtract(oldCenter)

        Vector2 temp2 = oldCenter

        //tangential velocity is the cross product of angular velocity and displacement vector 
        //this is an approximation
        temp2:SetX(-properties:GetAngularVelocity() * temp:GetY())
        temp2:SetY(properties:GetAngularVelocity() * temp:GetX())
        properties:GetLinearVelocity():Add(temp2)
    end

    action ShouldCollide(Item2D otherItem) returns boolean
        if not collideWithChildren
            if otherItem = parentItem
                return false
            end
            integer i = 0
            repeat children:GetSize() times
                Item2D child = children:Get(i)
                if child = otherItem
                    return false
                end
                i = i + 1
            end
        end

        return true
    end

    action CollideWithChildren returns boolean
        return collideWithChildren
    end

    action SetCollideWithChildren(boolean flag)
        me:collideWithChildren = flag
    end

    action UpdateTransformX
        if not collidable
            return now
        end

        if shape not= undefined and shape is Polygon
            Polygon p = cast(Polygon, shape)
            if p:IsBox()
                transform:GetPosition():SetX(position:GetX() + offset:GetX() + dimensions:GetX() * scale:GetX() / 2)
            else
                number x = (dimensions:GetX() * scale:GetX()) / 2
                number y = (dimensions:GetY() * scale:GetY()) / 2
                transform:GetPosition():SetX(position:GetX() + offset:GetX() + x - transform:GetCosine() * x + transform:GetSine() * y)
            end
        else
            transform:GetPosition():SetX(position:GetX() + offset:GetX() + dimensions:GetX() * scale:GetX() / 2)
        end
        sweep:GetCenter0():SetX((transform:GetCosine() * sweep:GetLocalCenter():GetX() - transform:GetSine() * sweep:GetLocalCenter():GetY()) + transform:GetPosition():GetX())
        sweep:GetCenter():SetX(sweep:GetCenter0():GetX())
    end

    action UpdateTransformY
        if not collidable
            return now
        end

        if shape not= undefined and shape is Polygon
            Polygon p = cast(Polygon, shape)
            if p:IsBox()
                transform:GetPosition():SetY(position:GetY() + offset:GetY() + dimensions:GetY() * scale:GetY() / 2)
            else
                number x = (dimensions:GetX() * scale:GetX()) / 2
                number y = (dimensions:GetY() * scale:GetY()) / 2
                transform:GetPosition():SetY(position:GetY() + offset:GetY() + y - transform:GetSine() * x - transform:GetCosine() * y)
            end
        else
            transform:GetPosition():SetY(position:GetY() + offset:GetY() + dimensions:GetY() * scale:GetY() / 2)
        end
        sweep:GetCenter0():SetY((transform:GetSine() * sweep:GetLocalCenter():GetX() + transform:GetCosine() * sweep:GetLocalCenter():GetY()) + transform:GetPosition():GetY())
        sweep:GetCenter():SetY(sweep:GetCenter0():GetY())
    end

    action UpdateTransformAngle
        if not collidable
            return now
        end
        Math math
        transform:Set(transform:GetPosition(), -1 * math:DegreesToRadians(rotation))
        sweep:SetAngle(transform:GetAngle())
    end

    /*
    The SetClipping action is used to enable or disable clipping. If
    it is enabled, when the Item and its children are drawn as part of the QueueForDrawing
    action, any pixels that would be drawn outside of the unrotated dimensions
    of the Item are not rendered. In other words, the Item will only draw inside
    the exact rectangle formed by its x, y position and its width and height.

    Attribute: Parameter clip True to enable pixel clipping, false to disable.
    */
    action SetClipping(boolean clip)
        if clip = clipPixels
            return now
        end

        clipPixels = clip
        
    end

    // Recursive action to make the entire children hierarchy set a dirty flag to regenerate their vertex values and recalculate clipping coordinates.
    private action RequestHierarchyUpdate(Item2D item)
        item:RequestVerticesUpdate()

        Array<Item2D> children = item:GetChildren()
        integer i = 0
        repeat while i < children:GetSize()
            RequestHierarchyUpdate(children:Get(i))
            i = i + 1
        end
    end

    /*
    The IsClipping action returns true if pixel clipping is enabled, or
    false if it is disabled. If it is enabled, when the Item and its children 
    are drawn as part of the QueueForDrawing action, any pixels that would be drawn outside
    of the unrotated dimensions of the Item are not rendered. In other words, 
    the Item will only draw inside the exact rectangle formed by its x, y 
    position and its width and height.

    Attribute: Returns Whether or not pixel clipping is enabled for this Item.
    */
    action IsClipping returns boolean
        return clipPixels
    end

    action SetView2D(View2D content)
        visualView = content
        if visualView not= undefined
            visualView:SetItem(me)
            visualView:UpdateSize(GetWidth() * GetScaleX(), GetHeight() * GetScaleY())
            visualView:UpdatePosition(GetGlobalX(), GetGlobalY(), GetGlobalZ())
            visualView:UpdateFlipping(flipX, flipY)
            visualView:UpdateRotation(GetRotation())
        end
    end

    action GetView2D returns View2D
        return visualView
    end

    /*
    The Resize action is used to recalculate the size and position of Controls
    that are being controlled by a Layout. Calling Resize on an Item2D won't
    have a direct effect on it, but if the Item's children hierarchy contains
    any Controls, those Controls will be resized.
    */
    action Resize
        // If we're already resizing, return immediately from a recursive call.
        if isResizing
            return now
        end

        // We resize all of the children if we don't have a Layout, but if we do
        // have a Layout, we leave it to the Layout to decide in what order the
        // children should be resized.
        isResizing = true
        boolean resizeChildren = true

        if me is Control
            Control control = cast(Control, me)
            Layout layout = control:GetLayout()
            if layout not= undefined
                resizeChildren = false
                layout:Layout(control, GetChildren(), GetWidth(), GetHeight())
            end
        end

        if resizeChildren
            integer counter = 0
            Array<Item2D> children = GetChildren()
            repeat while counter < children:GetSize()
                children:Get(counter):Resize()
                counter = counter + 1
            end
        end

        if me is Control
            Control control = cast(Control, me)
            control:ResetLayoutFlag()
        end

        isResizing = false
    end

    /*
    This action returns the x coordinate of the Item on the screen. If the Item
    hasn't been attached to a Layer, this will return a "Not a Number" value
    instead.
    */
    action GetScreenX returns number
        if layer not= undefined
            Camera camera = layer:GetCamera()
            if camera not= undefined
                workVector3:Set(GetGlobalX(), GetGlobalY(), GetGlobalZ())
                // The WorldToScreenCoordinates action modifies the values
                // of the passed Vector3 parameter.
                camera:WorldToScreenCoordinates(workVector3)
                return workVector3:GetX()
            end
        end

        // Return NaN if the Item isn't on a layer with a camera (and thus can't
        // actually be on the screen).
        return z:GetNotANumberValue()
    end

    /*
    This action returns the y coordinate of the Item on the screen. If the Item
    hasn't been attached to a Layer, this will return a "Not a Number" value
    instead.
    */
    action GetScreenY returns number
        if layer not= undefined
            Camera camera = layer:GetCamera()
            if camera not= undefined
                workVector3:Set(GetGlobalX(), GetGlobalY(), GetGlobalZ())
                // The WorldToScreenCoordinates action modifies the values
                // of the passed Vector3 parameter.
                camera:WorldToScreenCoordinates(workVector3)
                return workVector3:GetY()
            end
        end

        // Return NaN if the Item isn't on a layer with a camera (and thus can't
        // actually be on the screen).
        return z:GetNotANumberValue()
    end

    /*
    This action returns true if the item has been added to a Layer, or
    false otherwise.

    Attribute: Returns True if the item is on a Layer, or false otherwise.
    */
    action IsOnLayer returns boolean
        return layer not= undefined
    end

    /*
    This action returns the DrawableShape attached to this Item, if it has one.
    For a default Item2D, this action will return undefined, but Drawables will
    have an associated shape if they've been loaded.

    Attributes: Returns The DrawableShape attached to this Item, or undefined if there isn't one.
    */
    action GetDrawableShape returns DrawableShape
        return undefined
    end

    /*
    This action informs the engine that this Item needs to recalculate its vertex values
    before they can be used (most commonly, to be drawn to the screen). 

    Most users will never need to call this directly. If you are using a custom 
    ShaderProgram with this Item, you can use this action to indicate that the shader 
    mapping should reset the vertex values for this Item before its drawn again.
    */
    action RequestVerticesUpdate
        DrawableShape shape = GetDrawableShape()
        if shape not= undefined
            shape:RequestUpdate()
        end

        if GetView2D() is DrawableView
            DrawableView view = cast(DrawableView, GetView2D())
            DrawableShape viewShape = view:GetDrawableShape()
            if viewShape not= undefined
                viewShape:RequestUpdate()
            end
        end
    end
end
