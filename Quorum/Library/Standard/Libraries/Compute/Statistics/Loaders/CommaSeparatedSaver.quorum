package Libraries.Compute.Statistics.Loaders

use Libraries.Compute.Statistics.DataFrameSaver
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Columns.BooleanColumn
use Libraries.Compute.Statistics.DataFrame
use Libraries.Data.Formats.SeparatedValue

/*
    This class can load data into a DataFrame from a comma separated value file.
    By default, this class chooses its columns from the first value in a cell.

    Attribute: Author Andreas Stefik

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Loaders.CommaSeparatedSaver
    use Libraries.System.File

    //Load a comma separated file
    DataFrame frame
    File file
    file:SetPath("Data.csv")
    frame:Load(file)

    //this would override itself
    CommaSeparatedSaver saver
    saver:Save(frame, file)
*/
class CommaSeparatedSaver is DataFrameSaver
    
    action Save(DataFrame frame, File file)
        text result= ConvertToText(frame, -1, true)

        file:Write(result)
    end

    /*
        This action can convert a data from to a Comma separated value text. 

        Attribute: Author Andreas Stefik
        Attribute: Parameter frame The DataFrame to convert
        Attribute: Parameter rows The number of rows to put into text
        Attribute: Parameter showHeader Whether or not to show the header row
        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Loaders.CommaSeparatedSaver
        use Libraries.System.File
    
        //Load a comma separated file
        DataFrame frame
        File file
        file:SetPath("Data.csv")
        frame:Load(file)

        CommaSeparatedSaver saver
        text value = saver:ConvertToText(frame, 3) //three rows
        output value
    */
    action ConvertToText(DataFrame frame, integer rows, boolean showHeader) returns text
        integer size = frame:GetSize() //number of columns

        text header = ""
        text data = ""
        
        text lf = header:GetLineFeed()
        text dq = header:GetDoubleQuote()
        integer row = 0

        //get all the headers
        i = 0
        repeat while i < size
            DataFrameColumn column = frame:GetColumn(i)
            text headerText = column:GetHeader()
            if headerText:Contains(",")
                header = header + dq + column:GetHeader() + dq
            else
                header = header + column:GetHeader()
            end

            if i = size - 1
                header = header + lf
            else
                header = header + ","
            end
            i = i + 1
        end

        if showHeader
            data = header
        end
        //check each column and see if this is a valid row
        //keep going until it fails everywhere
        boolean continue = true
        if rows not= -1 and rows <= 0
            continue = false
        end
        repeat while continue
            text currentRow = ""
            i = 0
            boolean hadRow = false
            repeat while i < frame:GetSize()
                DataFrameColumn column = frame:GetColumn(i)
                if row < column:GetSize()
                    text value = column:GetAsText(row)
                    if value not= undefined
                        if not value:IsEmpty() and value:Contains(",")
                            currentRow = currentRow + dq + value + dq
                        elseif not value:IsEmpty() and value:Contains(lf)
                            currentRow = currentRow + dq + value + dq
                        else
                            currentRow = currentRow + value
                        end
                    end
                    hadRow = true
                end
            
                
                if i  = frame:GetSize() - 1
                    currentRow = currentRow + lf
                else
                    currentRow = currentRow + ","
                end
                i = i + 1
            end

            continue = hadRow
            if hadRow
                data = data + currentRow
            end

            //stop processing rows if the user has set a cap
            //the row is 0-indexed, so add 1 to it.
            if rows not= -1 and row + 1 >= rows
                continue = false
            end
            row = row + 1
        end

        return data
    end

    /*
        This action can convert a data from to a Comma separated value text. 

        Attribute: Author Andreas Stefik
        Attribut: Parameter frame The DataFrame to convert
        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Loaders.CommaSeparatedSaver
        use Libraries.System.File
    
        //Load a comma separated file
        DataFrame frame
        File file
        file:SetPath("Data.csv")
        frame:Load(file)

        CommaSeparatedSaver saver
        text value = saver:ConvertToText(frame)
        output value
    */
    action ConvertToText(DataFrame frame, integer rows) returns text
        return ConvertToText(frame, rows, true) //pass -1 if we aren't row limiting
    end

    /*
        This action can convert a data from to a Comma separated value text. 

        Attribute: Author Andreas Stefik
        Attribut: Parameter frame The DataFrame to convert
        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Loaders.CommaSeparatedSaver
        use Libraries.System.File
    
        //Load a comma separated file
        DataFrame frame
        File file
        file:SetPath("Data.csv")
        frame:Load(file)

        CommaSeparatedSaver saver
        text value = saver:ConvertToText(frame)
        output value
    */
    action ConvertToText(DataFrame frame) returns text
        return ConvertToText(frame, -1, true) //pass -1 if we aren't row limiting
    end
end