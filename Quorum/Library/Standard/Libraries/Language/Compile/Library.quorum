package Libraries.Language.Compile

use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.Language.Compile.Translate.ClassOpcode
use Libraries.Language.Compile.QuorumBytecodeListener
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.Symbol.TypeChecker
use Libraries.Language.Compile.Compiler
use Libraries.Containers.HashTable
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.Containers.Iterator
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.System.Process
use Libraries.System.ProcessEvent
use Libraries.System.ProcessListener
use Libraries.System.SystemHelper
use Libraries.System.Properties
use Libraries.Language.Support.TextBuilder

class Library is ProcessListener
    File location = undefined
    File outputFolder = undefined
    File buildFolder
    File runJar
    File runJavaScript
    File libraryLoadFile
    File fontLoadingLoader
    File fontLoadingWASM
    File fontLoadingData
    File pluginJar
    File nativeFolder
    File graphicsFolder
    File javascriptFolder
    File pythonFolder
    File robotsFolder
    File pluginsFolder = undefined
    constant text STANDARD = "Standard"
    constant text STANDARD_LIBRARY_JAR = "QuorumStandardLibrary.jar"
    constant text STANDARD_PLUGINS_JAR = "QuorumStandardPlugins.jar"
    constant text STANDARD_LIBRARY_JAVASCRIPT = "QuorumStandardLibrary.js"
    constant text STANDARD_LIBRARY_LOAD_FILE = "QuorumStandardLibrary.json"
    constant text STANDARD_LIBRARY_LOAD_FONTS_LOADER = "load.js"
    constant text STANDARD_LIBRARY_LOAD_FONTS_WASM = "load.wasm"
    constant text STANDARD_LIBRARY_LOAD_FONTS_DATA = "load.data"
    constant text NATIVE_FOLDER = "jni"
    constant text GRAPHICS_FOLDER = "Graphics"
    constant text ROBOTS_FOLDER = "Robots"
constant text JAVASCRIPT_FOLDER = "javascript"
constant text PYTHON_FOLDER = "python"
    constant text DEFAULT_PLUGINS_FOLDER = "/Plugins/QuorumPlugins"
    boolean regeneratePlugins = true

    boolean hasScannedStandardLibrary = false
    SymbolTable librarySymbolTable
    HashTable<text, ClassOpcode> opcodes
    HashTable<text, Lexer> lexers
    boolean cacheOpcodes = false
    Array<CompilerListener> listeners
    //This flag says whether or not to output the standard library as JavaScript
    boolean outputJavaScript = true
    boolean outputPython = true
    boolean scanningFromPrecompute = false
    text javascriptOutput = ""
    text javascriptPlugins = ""

    action AddListener(CompilerListener listener)
        listeners:Add(listener)
    end

    action RemoveListener(CompilerListener listener)
        listeners:Remove(listener)
    end

    /*
        This sets the location of Quorum's plugins, to be compiled when the library script is run.
    */
    action SetPluginsFolder(File file)
        me:pluginsFolder = file
    end

    /*
        This gets the location of Quorum's plugins, to be compiled when the library script is run.
    */
    action GetPluginsFolder returns File
        return pluginsFolder
    end

    private action UpdateListenerLabels(text label)
        i = 0
        repeat while i < listeners:GetSize()
            CompilerListener listener = listeners:Get(i)
            listener:UpdateLabel(label)
            i = i + 1
        end
    end

    private action UpdateListenerPercentage(number percentage)
        i = 0
        repeat while i < listeners:GetSize()
            CompilerListener listener = listeners:Get(i)
            listener:UpdatePercentageComplete(percentage)
            i = i + 1
        end
    end

    action GetOpcodes returns Iterator<ClassOpcode>
        return opcodes:GetValueIterator()
    end

    action GetOpcode(text staticKey) returns ClassOpcode
        return opcodes:GetValue(staticKey)
    end

    action Empty
        opcodes:Empty()
    end

    action IsCachingLibraryOpcodes returns boolean
        return cacheOpcodes
    end

    action SetCachingLibraryOpcodes(boolean cache)
        cacheOpcodes = cache
    end

    action GetSymbolTable returns SymbolTable
        return librarySymbolTable
    end

    action GetLocation returns File
        return location
    end

    action SetLocation(File file)
        location = file
    end

    action GetOutputFolder returns File
        return outputFolder
    end
    
    /*This action returns the raw text to prevent the user from changing this, 
which they should not.*/
    action GetPythonPath returns text
        return pythonFolder:GetAbsolutePath()
    end

    action SetOutputFolder(File file)
        outputFolder = file
    end
    
    action GetLexer(text file) returns Lexer
        if lexers = undefined
            return undefined
        end
        Lexer luthor = lexers:GetValue(file)
        return luthor
    end

    /* This main will regenerate the standard library from its current state
    */
    action Main
        Compiler compiler

        File standardLibraryFolder = compiler:GetStandardLibraryFolder()
        compiler:SetStandardLibraryFolder(standardLibraryFolder)
        output compiler:GetVersion() + ": Compiling Standard Library"

        File outputLocation
        outputLocation:SetPath("Library/Compiled")
        output "Scanning"
        Library library
        library:outputJavaScript = true
        library:SetCachingLibraryOpcodes(true)
        library:SetLocation(standardLibraryFolder)
        library:SetOutputFolder(outputLocation)
        CompilerErrorManager errors = library:Scan()

        output "Writing Standard Library"

        if errors:IsCompilationErrorFree()
            library:Write()
            output "Finished"
        else 
            output "I cannot compile the standard library until the following errors are fixed:"
            i = 1
            Iterator<CompilerError> iterator = errors:GetIterator()
            repeat while iterator:HasNext()
                CompilerError error = iterator:Next()
                if error:GetFile() = undefined
                    a = 5
                end
                output i + ": " + error:GetFile():GetFileName() + " " + error:GetLineNumber() + ":" + error:GetColumnNumber() + " " + error:GetErrorMessage()
                i = i + 1
            end
        end
    end

    /*
        This action states whether the library has been scanned.
    */
    action IsScanned returns boolean
        return hasScannedStandardLibrary
    end

    action Scan returns CompilerErrorManager
        hasScannedStandardLibrary = false
        UpdateListenerLabels("Started Scanning")
        if outputFolder not= undefined
            buildFolder:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            runJar:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            libraryLoadFile:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            fontLoadingLoader:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            fontLoadingWASM:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            fontLoadingData:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            runJavaScript:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            pluginJar:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            nativeFolder:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            graphicsFolder:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            robotsFolder:SetWorkingDirectory(outputFolder:GetAbsolutePath())
javascriptFolder:SetWorkingDirectory(outputFolder:GetAbsolutePath())
pythonFolder:SetWorkingDirectory(outputFolder:GetAbsolutePath())
            buildFolder:SetPath("/Build")
            runJar:SetPath("/Run/" + STANDARD_LIBRARY_JAR)
            runJavaScript:SetPath("/Run/" + STANDARD_LIBRARY_JAVASCRIPT)
            libraryLoadFile:SetPath("/Run/" + STANDARD_LIBRARY_LOAD_FILE)
            fontLoadingLoader:SetPath("/Run/" + STANDARD_LIBRARY_LOAD_FONTS_LOADER)
            fontLoadingWASM:SetPath("/Run/" + STANDARD_LIBRARY_LOAD_FONTS_WASM)
            fontLoadingData:SetPath("/Run/" + STANDARD_LIBRARY_LOAD_FONTS_DATA)
            pluginJar:SetPath("/Run/" + STANDARD_PLUGINS_JAR)
            nativeFolder:SetPath("/Run/" + NATIVE_FOLDER)
javascriptFolder:SetPath("/Run/" + JAVASCRIPT_FOLDER)
pythonFolder:SetPath("/Run/" + PYTHON_FOLDER)
            graphicsFolder:SetPath("/Run/" + GRAPHICS_FOLDER)
            robotsFolder:SetPath("/Run/" + ROBOTS_FOLDER)
        end

        CompilerErrorManager sandboxCompilerErrorManager
        TypeChecker sandboxTypeChecker

        CompilerResult result
        UpdateListenerLabels("Scanning Standard Library Folder")
        Compiler compiler
        Array<File> lib = CollectQuorumFiles()
        UpdateListenerLabels("Parsing")
        number max = lib:GetSize() * 2.0
        number percentage = 0
        integer i = 0
        repeat lib:GetSize() times
            File file = lib:Get(i)
            Parser listener
            compiler:Traverse(undefined, listener, librarySymbolTable, sandboxCompilerErrorManager, sandboxTypeChecker, file, result)
            Lexer luthor = listener:GetLexer()
            if luthor not= undefined
                text value = file:GetAbsolutePath()
                lexers:Add(value, luthor)
            end
            number val = 100.0 * cast(number, i) / max
            UpdateListenerPercentage(val)
            i = i + 1
        end

        UpdateListenerLabels("Type Checking")
        compiler:TypeResolution(librarySymbolTable, sandboxTypeChecker, sandboxCompilerErrorManager)

        UpdateListenerLabels("Semantic Analysis")
        Array<ClassOpcode> classOpcodes
        if sandboxCompilerErrorManager:IsCompilationErrorFree()
            i = 0
            repeat while i < lib:GetSize()
                File file = lib:Get(i)
                QuorumBytecodeListener listener
                compiler:Traverse(undefined, listener, librarySymbolTable, sandboxCompilerErrorManager, sandboxTypeChecker, file, result)
                if cacheOpcodes
                    ClassOpcode op = listener:GetClassOpcode()
                    if op not= undefined
                        op:SetBuild(buildFolder)
                        Class clazz = op:GetClass()
                        opcodes:Add(clazz:GetStaticKey(), op)
                    end
                end
                number val = 100.0 * (cast(number, i) / max) + 50.0
                UpdateListenerPercentage(val)
                i = i + 1
            end
        end

        //kill the lexers too
        if not cacheOpcodes
            lexers = undefined
        end
        hasScannedStandardLibrary = true
        UpdateListenerLabels("All done!")
        UpdateListenerPercentage(100)
        return sandboxCompilerErrorManager
    end

    action Write
        if hasScannedStandardLibrary
            WriteStandardLibrary()
            WriteStandardPlugins()
            CopyStandardFiles()
        else
            alert ("I have not yet scanned the standard library. This must be completed before I can write it to disk.")
        end
    end

    private action CopyStandardFiles
        File speechNative
        speechNative:SetWorkingDirectory(location:GetAbsolutePath() + "/Native/")
        speechNative:SetPath("Libraries.Sound.Speech")

        File gameNative
        gameNative:SetWorkingDirectory(location:GetAbsolutePath() + "/Native/")
        gameNative:SetPath("Libraries.Game")

        File interfaceNative
        interfaceNative:SetWorkingDirectory(location:GetAbsolutePath() + "/Native/")
        interfaceNative:SetPath("Libraries.Interface")

        File mobileNative
        mobileNative:SetWorkingDirectory(location:GetAbsolutePath() + "/Native/")
        mobileNative:SetPath("mobile")

        File nativeDeployment
        nativeDeployment:SetWorkingDirectory(location:GetAbsolutePath() + "/Native/")
        nativeDeployment:SetPath("Deploy")


        speechNative:Copy(nativeFolder, true)
        gameNative:Copy(nativeFolder, true)
        interfaceNative:Copy(nativeFolder, true)
        if mobileNative:Exists()
            mobileNative:Copy(nativeFolder, true)
        end

        if nativeDeployment:Exists()
            nativeDeployment:Copy(nativeFolder, true)
        end

        File fontWeb
        fontWeb:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/javascript")

        fontWeb:SetPath(STANDARD_LIBRARY_LOAD_FONTS_LOADER)
        fontWeb:Copy(fontLoadingLoader)

        fontWeb:SetPath(STANDARD_LIBRARY_LOAD_FONTS_WASM)
        fontWeb:Copy(fontLoadingWASM)

        fontWeb:SetPath(STANDARD_LIBRARY_LOAD_FONTS_DATA)
        fontWeb:Copy(fontLoadingData)
    end

    action WriteStandardLibrary
        if not cacheOpcodes
            alert("I cannot write the standard library to disk unless I am set to cache opcodes. Please re-rerun after turning this feature on.")
        end
        JarGenerator generator
        text value = GetStandardLibraryManifest(generator)
        generator:SetManifest(value)

        if runJar:Exists()
            runJar:GetParentDirectory():CreateDirectories()
        end
        generator:Open(runJar)

        JavaScriptObjectNotation notation
        TextBuilder builder
        builder:SetMaxSize(51910886 * 2)
        Iterator<ClassOpcode> codes = opcodes:GetValueIterator()
        repeat while codes:HasNext()
            ClassOpcode code = codes:Next()
            code:Write()

            File build = code:GetBuildFile()
            File buildInterface = code:GetBuildInterfaceFile()

            text key = code:GetStaticKey()
            if build not= undefined
                generator:Add(build)
            end

            if buildInterface not= undefined
                generator:Add(buildInterface)
            end

            text keyPath = key:Replace(".", "/") + ".quorum"
            notation:Add(code:GetStaticKey(), keyPath)
            if outputJavaScript
                //write the entire thing to a single file
                //the old way before the module change
                //builder:Append(WriteJavaScriptOpcode(code))
                
text javascriptPath = key:Replace(".", "/") + ".js"
                File javascriptWritePath
                javascriptWritePath:SetWorkingDirectory(javascriptFolder:GetAbsolutePath())
                javascriptWritePath:SetPath(javascriptPath)
                File mom = javascriptWritePath:GetParentDirectory()
                if not mom:Exists()
                    mom:CreateDirectories()
                end
                javascriptWritePath:Write(WriteJavaScriptOpcode(code))
                
            end
            if outputPython
                text pythonPath = key:Replace(".", "/") + ".py"
                File pythonWritePath
                pythonWritePath:SetWorkingDirectory(pythonFolder:GetAbsolutePath())
                pythonWritePath:SetPath(pythonPath)
                File mom = pythonWritePath:GetParentDirectory()
                if not mom:Exists()
                    mom:CreateDirectories()
                end
                pythonWritePath:Write(WritePythonOpcode(code))
            end
        end

        text libraryText = notation:ToText()
        libraryLoadFile:Write(libraryText)
        javascriptOutput = javascriptPlugins + builder:ToText()
        //if runJavaScript:Exists()
            runJavaScript:Write(javascriptOutput)
        //end

        generator:Close()
    end
    
    action WritePythonOpcode(ClassOpcode code) returns text
text result = ""
        result = result + code:WritePython()
        Class clazz = code:GetClass()

        //check if this class has a plugin. If it does, include it.
        if clazz:HasSystemAction()
            File folder = GetLocation() 
            path = folder:GetPath() + "/Plugins/python/"

            key = clazz:GetStaticKey()
            Array<text> keys = key:Split("\.")
            i = 0
            repeat keys:GetSize() times
                newKey = keys:Get(i)
                if i = keys:GetSize() - 1
                    path = path + newKey + ".py"
                else
                    path = path + newKey + "/"
                end
                i = i + 1
            end
            File location
            location:SetWorkingDirectory(folder:GetWorkingDirectory())
            location:SetPath(path)
            if location:Exists() 
                value = location:Read()
                result = result + value:GetCarriageReturn() + value:GetLineFeed() + value
            end
        end
        return result
    end
    
    action WriteJavaScriptOpcode(ClassOpcode code) returns text
        text result = ""
        result = result + code:WriteJavaScript()
        Class clazz = code:GetClass()

        //check if this class has a plugin. If it does, include it.
        if clazz:HasSystemAction()
            File folder = GetLocation() 
            path = folder:GetPath() + "/Plugins/javascript/"

            key = clazz:GetStaticKey()
            Array<text> keys = key:Split("\.")
            i = 0
            repeat keys:GetSize() times
                newKey = keys:Get(i)
                if i = keys:GetSize() - 1
                    path = path + newKey + ".js"
                else
                    path = path + newKey + "/"
                end
                i = i + 1
            end
            File location
            location:SetWorkingDirectory(folder:GetWorkingDirectory())
            location:SetPath(path)
            if location:Exists() 
                value = location:Read()
                javascriptPlugins = javascriptPlugins + value + value:GetCarriageReturn() + value:GetLineFeed()
            end
        end
        return result
    end

    /*
        This writes the standard plugins for Quorum. In Quorum-10, this was changed to use the gradle build system
        to generate all the compilation info and 
    */
    action WriteStandardPlugins
        if not regeneratePlugins return now end
        Process process

        //this needs to be different on mac and windows
        output "Compiling Quorum Plugins. "
        


        if pluginsFolder = undefined
            File file
            pluginsFolder = file
            pluginsFolder:SetWorkingDirectory(location:GetAbsolutePath())
            pluginsFolder = pluginsFolder:GetParentDirectory():GetParentDirectory():GetParentDirectory()
            pluginsFolder:SetPath(DEFAULT_PLUGINS_FOLDER)
        end

        File gradle
        gradle:SetWorkingDirectory(pluginsFolder:GetAbsolutePath())
        gradle:SetPath(GetGradleName())
        process:SetName(gradle:GetAbsolutePath())

        process:SetDirectory(pluginsFolder)
        Array<text> flags
        flags:Add("jar")
        flags:Add("copyToQuorum")

        process:SetParameters(flags)
        process:AddListener(me)
        //now Run it
        process:Run() 
    end

    action ProcessStarted(ProcessEvent event)
    end

    action ProcessStopped(ProcessEvent event)
    end

    action Output(ProcessEvent event)
        output  event:GetOutput()
    end

    action Error(ProcessEvent event)
        output  event:GetOutput()
    end

    private action GetGradleName returns text
        text result = ""

        Properties prop
        if prop:IsWindows()
            return "gradlew.bat"
        else
            return "gradlew"
        end
        return result
    end

    private action AddCompilerDependencies(JarGenerator generator)
        File to
        to:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/")
        to:SetPath("org")

        File objectWeb
        objectWeb:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/")
        objectWeb:SetPath("org/objectweb")
        AddToJar(generator, objectWeb, to)
    end


    private action AddStandardPlugins(JarGenerator generator)
        File plugins
        plugins:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/")
        plugins:SetPath("plugins")
        AddToJar(generator, plugins, plugins)
    end

    private action AddSoundDependencies(JarGenerator generator)
        File to
        to:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/sound/")
        to:SetPath("")

        File soundPlugins
        soundPlugins:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/sound")
        soundPlugins:SetPath("plugins")
        AddToJar(generator, soundPlugins, to)
    end

    private action AddGameDependencies(JarGenerator generator)
        File to
        to:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/game/")
        to:SetPath("")

        File gamePlugins
        gamePlugins:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/game/")
        gamePlugins:SetPath("plugins")
        AddToJar(generator, gamePlugins, to)
    end

    private action AddLegoDependencies(JarGenerator generator)
        File to
        to:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/robot/")
        to:SetPath("")

        File robotPlugins
        robotPlugins:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/robot/")
        robotPlugins:SetPath("plugins")
        AddToJar(generator, robotPlugins, to)
    end

    private action AddSpeechDependencies(JarGenerator generator)
        File to
        to:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/")
        to:SetPath("org")

        File sapi
        sapi:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/")
        sapi:SetPath("org/sapi")
        AddToJar(generator, sapi, to)

        File speech
        speech:SetWorkingDirectory(location:GetAbsolutePath() + "/Plugins/")
        speech:SetPath("org/sodbeans")
        AddToJar(generator, speech, to)
    end

    private action AddToJar(JarGenerator generator, File file, File originalLocation)
        if file:IsDirectory()
            Array<File> files = file:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()

            repeat while it:HasNext()
                File f = it:Next()
                WritePlugins(generator, f, originalLocation)
            end
        else
            text pluginPath = originalLocation:GetWorkingDirectory()
            text path = file:GetAbsolutePath()
            path = path:GetSubtext(pluginPath:GetSize())
            text wd = file:GetAbsolutePath()
            wd = wd:GetSubtext(0, pluginPath:GetSize() - 1)

            File f
            f:SetWorkingDirectory(wd)
            f:SetPath(path)
            
            generator:Add(f)
        end
    end

    private action WritePlugins(JarGenerator generator, File file, File originalLocation)
        if file:IsDirectory()
            Array<File> files = file:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()

            repeat while it:HasNext()
                File f = it:Next()
                if not f:IsHidden() and not (f:GetFileExtension() = "DS_Store")
                    WritePlugins(generator, f, originalLocation)
                end
            end
        else
            text pluginPath = originalLocation:GetWorkingDirectory()
            text path = file:GetAbsolutePath()
            path = path:GetSubtext(pluginPath:GetSize())
            text wd = file:GetAbsolutePath()
            boolean finished = true

            //if there's a slash at the end of the path, ignore it.
            if pluginPath:GetCharacter(pluginPath:GetSize() - 1) = "/"
                wd = wd:GetSubtext(0, pluginPath:GetSize() - 1)
                finished = false
            end

            if finished
                wd = wd:GetSubtext(0, pluginPath:GetSize())
            end

            File f
            f:SetWorkingDirectory(wd)
            f:SetPath(path)
            generator:Add(f)
        end
    end

    private action GetStandardLibraryManifest(JarGenerator jar) returns text
        text version = jar:GetManifestVersion() + ": 1.0"
        line = version:GetCarriageReturn() + version:GetLineFeed()
        version = version + line
        
        Compiler compiler
        text created = "Created-By: " + compiler:GetVersion()
        created = created + line
        text main = ""

        //now write any jar dependencies into the manifest
        //Changed in Quorum-10 to allow for the new plugin and dependency system.
        //text classpath = GetStandardLibraryClasspath()
        text classpath = "Class-Path: " + STANDARD_PLUGINS_JAR

        total = version + created + classpath + line
        return total
    end

    action GetStandardLibraryClasspathValuesOnly(boolean addSpacing) returns text
        text line = ""
        line = line:GetCarriageReturn() + line:GetLineFeed()
        text classpath = ""
        text libraries = GRAPHICS_FOLDER
        boolean isFirst = true
        File lwjglFolder
        lwjglFolder:SetWorkingDirectory(location:GetAbsolutePath() + "/AdditionalJars/")
        lwjglFolder:SetPath("LWJGL")
        Array<File> lwjglFiles = lwjglFolder:GetDirectoryListing()
        integer counter = 0
        repeat while counter < lwjglFiles:GetSize()
            File file = lwjglFiles:Get(counter)

            if file:GetFileName() not= ".DS_Store"
                if isFirst and addSpacing
                    classpath = classpath + libraries + "/" + file:GetFileName()
                    isFirst = false
                else
                    classpath = classpath + line + "  " + libraries + "/" + file:GetFileName()
                end
            end

            counter = counter + 1
        end

        text robots = ROBOTS_FOLDER
        File dbus
        File ev3
        dbus:SetWorkingDirectory(location:GetAbsolutePath() + "/AdditionalJars/")
        dbus:SetPath("dbusjava.jar")
            classpath = classpath + line + "  " + robots + "/" + dbus:GetFileName()

        ev3:SetWorkingDirectory(location:GetAbsolutePath() + "/AdditionalJars/")
        ev3:SetPath("ev3classes.jar")
        classpath = classpath + line + "  " + robots + "/" + ev3:GetFileName()
        return classpath
    end

    private action GetStandardLibraryClasspath returns text
        text line = ""
        line = line:GetCarriageReturn() + line:GetLineFeed()
        text classpath = "Class-Path: "
        classpath = classpath + GetStandardLibraryClasspathValuesOnly(true)
        return classpath
    end

    private action GetStandardPluginsManifest(JarGenerator jar) returns text
        text version = jar:GetManifestVersion() + ": 1.0"
        line = version:GetCarriageReturn() + version:GetLineFeed()
        version = version + line
        
        Compiler compiler
        text created = "Created-By: " + compiler:GetVersion()
        created = created + line
        text main = ""

        //now write any jar dependencies into the manifest
        text classpath = GetStandardLibraryClasspath()
        classpath = classpath + line + "  " + STANDARD_LIBRARY_JAR

        total = version + created + classpath + line
        return total
    end

    private action CollectQuorumFiles returns Array<File>
        Array<File> files
        File standardLibraryFolder = GetLocation()
        File f1
        f1:SetWorkingDirectory(standardLibraryFolder:GetWorkingDirectory())
        f1:SetPath(standardLibraryFolder:GetPath() + "/Libraries")
        standardLibraryFolder = f1

        if IsScanningFromPrecompute()
            JavaScriptObjectNotation notate
            notate:Read(libraryLoadFile)
    
            text working = standardLibraryFolder:GetWorkingDirectory() + "/" + STANDARD
            Iterator<JavaScriptObjectNotation> iterator = notate:GetIterator()
            repeat while iterator:HasNext()
                JavaScriptObjectNotation json = iterator:Next()
                text value = json:GetText()
                File newFile
                newFile:SetWorkingDirectory(working)
                newFile:SetPath(value)
                files:Add(newFile)
            end
            return files
        else
            Array<File> folders
            folders:Add(standardLibraryFolder)
            integer folderIndex = 0
            done = false
            repeat while folderIndex < folders:GetSize()
                File folder = folders:Get(folderIndex)
                Array<File> listing = folder:GetDirectoryListing()
                i = 0
                repeat listing:GetSize() times
                    File file = listing:Get(i)
                    if file:IsDirectory()
                        folders:Add(file)
                    else
                        if file:GetFileName() not= ".DS_Store"
                            files:Add(file)
                        end
                    end
                    i = i + 1
                end
                folderIndex = folderIndex + 1
            end
    
            return files
        end
    end

    action IsScanningFromPrecompute returns boolean
        return scanningFromPrecompute
    end

    action SetScanningFromPrecompute(boolean scanningFromPrecompute)
        me:scanningFromPrecompute = scanningFromPrecompute
    end

    action GetRegeneratePlugins returns boolean
        return regeneratePlugins
    end

    action SetRegeneratePlugins(boolean regeneratePlugins)
        me:regeneratePlugins = regeneratePlugins
    end

end