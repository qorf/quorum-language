package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Block
use Libraries.Language.Compile.Translate.BlockOpcode
use Libraries.Language.Compile.Location
use Libraries.Containers.List
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Containers.HashTable

class CheckDetectOpcode is QuorumOpcode
    BlockOpcode block = undefined
    DetectBlockOpcode alwaysBlock = undefined
    List<DetectBlockOpcode> detectBlocks
    JavaBytecodeOpcodes opcodes
    integer whichCheck = 0
    public constant text THROWABLE = "java/lang/Throwable"
    List<ErrorBlockLabels> detectValues
    List<ErrorBlockLabels> alwaysValues
    DetectBlockOpcode errorBlock = undefined
    HashTable<text, DetectBlockOpcode> types
    Class errorClass = undefined

    action SetErrorClass(Class clazz)
        errorClass = clazz
    end

    action GetErrorClass returns Class
        return errorClass
    end

    action AddDetectBlockType(text type, DetectBlockOpcode block)
        types:Add(type, block)
    end

    action HasDetectBlockType(text type) returns boolean
        return types:HasKey(type)
    end

    /*
        If this check detect block has a catch-all Error block, for any kind
        of error that is thrown.
    */
    action GetErrorDetectBlock returns DetectBlockOpcode
        return errorBlock
    end

    /*
        Sets the error detection catch all block to a particular detect block.
        This block contains the class Error somewhere in its iterator.
    */
    action SetErrorDetectBlock(DetectBlockOpcode block)
        errorBlock = block
    end

    action HasErrorDetectBlock returns boolean
        return errorBlock not= undefined
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        if block not= undefined
            block:SetBytecodeWriteOffsetToAllChildren(offset)
        end

        Iterator<DetectBlockOpcode> detects = detectBlocks:GetIterator()
        repeat while detects:HasNext()
            DetectBlockOpcode b = detects:Next()
            b:SetBytecodeWriteOffsetToAllChildren(offset)
        end
        
        if alwaysBlock not= undefined
            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)

        if block not= undefined
            block:SetMethodWriterToAllChildren(writer)
        end

        Iterator<DetectBlockOpcode> detects = detectBlocks:GetIterator()
        repeat while detects:HasNext()
            DetectBlockOpcode b = detects:Next()
            b:SetMethodWriterToAllChildren(writer)
        end
        
        if alwaysBlock not= undefined
            alwaysBlock:SetMethodWriterToAllChildren(writer)
        end
    end

    action AddDetectBlock(DetectBlockOpcode op)
        detectBlocks:Add(op)
    end

    action GetCheckLabelInteger returns integer
        return whichCheck
    end

    action SetCheckLabelInteger(integer value)
        whichCheck = value
    end

    action SetBlock(BlockOpcode block)
        me:block = block
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetAlwaysBlock(DetectBlockOpcode block)
        me:alwaysBlock = block
    end

    action GetAlwaysBlock returns DetectBlockOpcode
        return alwaysBlock
    end

    action Write 
        JavaBytecodeLabel checkStart
        JavaBytecodeLabel checkEnd
        JavaBytecodeLabel fullEnd
        JavaBytecodeLabel finalAlways
        
        JavaBytecodeLabel lastDetectEnd = undefined
        integer maxDetectBlockSize = 0
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()

        boolean isCheckEmpty = false
        if block not= undefined
            if block:IsEmpty()
                isCheckEmpty = true
            end
        else
            alert("Check block is empty. This is a compiler bug.")
        end

        text null = undefined //workaround
        if not isCheckEmpty
            methodWriter:VisitLabel(checkStart)
            block:Write()
            methodWriter:VisitLabel(checkEnd)
        end

        if alwaysBlock not= undefined
            JavaBytecodeLabel alwaysStart
            methodWriter:VisitLabel(alwaysStart)
            alwaysBlock:Write()
            if not isCheckEmpty
                ErrorBlockLabels labels
                labels:left = checkStart
                labels:middle = checkEnd
                labels:right = finalAlways
                labels:type = null
                alwaysValues:Add(labels)
            end
        end
        methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)

        integer detectBlockExceptionLocation = 0
        JavaBytecodeLabel detectStart
        if not detectBlocks:IsEmpty() and not isCheckEmpty
            methodWriter:VisitLabel(detectStart)
            ErrorBlockLabels detectLabels
            detectLabels:left = checkStart
            detectLabels:middle = checkEnd
            detectLabels:right = detectStart
            detectLabels:type = THROWABLE

            WriteTableRow(detectLabels)
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), "plugins/quorum/Libraries/Language/Errors/Error", "ConvertToQuorumError",
            "(Ljava/lang/Throwable;)Lquorum/Libraries/Language/Errors/Error;", false)
            
            //This is the wrong value, but this is in the right direction.
            DetectBlockOpcode block = detectBlocks:Get(0)
            Variable except = block:GetExceptionVariable()
            detectBlockExceptionLocation = except:GetBytecodeLocation()
            methodWriter:VisitVariable(opcodes:GetObjectStore(), except:GetBytecodeLocation())
        end

        JavaBytecodeLabel alwaysStart
        boolean hasCatchAll = false
        if not isCheckEmpty
            Iterator<DetectBlockOpcode> it = detectBlocks:GetIterator()
            repeat while it:HasNext()
                DetectBlockOpcode det = it:Next()

                //if it is the detect block with an error clause in it, don't write
                //it until the end. That way, we can ensure it is a catch all,
                //since it will always be true, for any kind of Quorum error.
                if errorBlock not= det
                    Iterator<Class> detects = det:GetDetectIterator()
                    repeat while detects:HasNext()
                        Class clazz = detects:Next()
                        WriteDetectBlock(det, clazz, fullEnd, alwaysStart)
                    end
                end
            end

            //if we have an error block with a catch-all that has been reordered
            //write it now.
            if errorBlock not= undefined
                WriteDetectBlock(errorBlock, errorClass, fullEnd, alwaysStart)
            end

            if not hasCatchAll
                //methodWriter:VisitLabel(detectBlockEnd)
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), detectBlockExceptionLocation)
                methodWriter:VisitInstruction(opcodes:GetObjectThrow())
            end

            if alwaysBlock not= undefined
                
                methodWriter:VisitLabel(alwaysStart)
                alwaysBlock:Write()
                methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)

                ErrorBlockLabels labels
                labels:left = detectStart
                labels:middle = alwaysStart
                labels:right = finalAlways
                labels:type = null
                alwaysValues:Add(labels)
            end
        end

        if alwaysBlock not= undefined and not isCheckEmpty
            JavaBytecodeLabel finalAlwaysEnd
            methodWriter:VisitLabel(finalAlways)

            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(detectBlockExceptionLocation + 1)
            alwaysBlock:WriteExceptionVariable()
            methodWriter:VisitLabel(finalAlwaysEnd)
            alwaysBlock:Write()
            alwaysBlock:Rethrow()
            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(0)

            ErrorBlockLabels labels
            labels:left = finalAlways
            labels:middle = finalAlwaysEnd
            labels:right = finalAlways
            labels:type = null
            alwaysValues:Add(labels)
        end

        WriteExceptionTable()
        methodWriter:VisitLabel(fullEnd)
    end

    private action WriteDetectBlock(DetectBlockOpcode det, Class clazz, JavaBytecodeLabel fullEnd, JavaBytecodeLabel alwaysStart)
        BlockOpcode blockOpcode = det:GetBlock()
        JavaBytecodeLabel detectBlockEnd
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()

        //first push the variable on
        Variable except = det:GetExceptionVariable()
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), except:GetBytecodeLocation())

        //check to see if it is the declared class type
        methodWriter:VisitType(opcodes:GetInstanceOf(), clazz:ConvertStaticKeyToBytecodePath())

        //if not, jump to the next block. If so, fall through
        methodWriter:VisitJump(opcodes:GetIfEquals(), detectBlockEnd)
        det:Write()

        Block block = blockOpcode:GetBlock()
        integer value = block:GetBytecodeLocation()
        if alwaysBlock = undefined
            methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
        else 
            methodWriter:VisitJump(opcodes:GetGoto(), alwaysStart)
        end
        methodWriter:VisitLabel(detectBlockEnd)
    end

    private action WriteExceptionTable
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        Iterator<ErrorBlockLabels> it = undefined

        it = alwaysValues:GetIterator()
        repeat while it:HasNext()
            ErrorBlockLabels labels = it:Next()
            WriteTableRow(labels)
        end
    end

    private action WriteTableRow(ErrorBlockLabels labels)
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitTryCatchBlock(labels:left, labels:middle, labels:right, labels:type)
    end

    action GetPythonCleanupVariableName returns text
        if block not= undefined
            return "finallyCleanup" + block:GetHashCode() + "_"
        else 
            return "finallyCleanup" + "_" //not sure here
        end
    end

    action WritePython returns text
        TranslateConstants constants
        text tabs = constants:GetTabText()
        text tab = tabs:GetTab()
        text result = ""
        text EOL = result:GetCarriageReturn() + result:GetLineFeed()
        boolean isCheckEmpty = false
        if block not= undefined
            if block:IsEmpty()
                isCheckEmpty = true
            end
        end

        constant text checkExceptionName = "e" + GetCheckLabelInteger() + "_"

        text cleanupName = GetPythonCleanupVariableName()
        //Python is weird. Make a cleanup variable, so finally can bail sometimes
        cleanupStatement =  cleanupName + " = True" + EOL
        result = result + tabs + cleanupStatement + EOL
        text null = undefined
        if not isCheckEmpty
            result = result + tabs + "try:" + EOL
            constants:IncreaseTab()
            text value = block:WritePython()
            if value = undefined or value:IsEmpty()
                result = result + tabs + tab + "pass" + EOL
            else
                result = result + value
            end
            constants:DecreaseTab()
        elseif isCheckEmpty and alwaysBlock not= undefined
            //in this case, we need a pass statement for python to accept it.
            result = result + tabs + "try:" + EOL
            result = result + tabs + tab + "pass" + EOL
        end

        boolean hasCatchAll = false
        if not isCheckEmpty //if the block is empty, there's no need to write detect blocks
            Iterator<DetectBlockOpcode> it = detectBlocks:GetIterator()
            integer detectAmount = 0
            
            //result = result + tabs + "except Exception as "
            boolean isFirst = true
            repeat while it:HasNext()
                DetectBlockOpcode det = it:Next()
                Variable value = det:GetExceptionVariable()
                text exceptionVariableName = value:GetName()
//                if isFirst
//                    result = result + exceptionVariableName + ":" + EOL
//
//                    isFirst = false
//                end

                if errorBlock not= det
                    Iterator<Class> detectClasses = det:GetDeclaredDetectsIterator()
//                    if detectAmount > 1
                        text temp = tabs + "except (" 
                        boolean first = true
                        repeat while detectClasses:HasNext()
                            Class classDetect = detectClasses:Next()
                            text name = classDetect:ConvertStaticKeyToJavaScriptName()
                            if first
                                temp = temp + name
                            else
                                temp = temp + ", " + name
                            end
                        end
                        temp = temp + ") as " + exceptionVariableName + ":" + EOL
                        result = result + temp
//                    elseif detectAmount > 0
//                        Class classDetect = detectClasses:Next()
//                        text name = classDetect:ConvertStaticKeyToJavaScriptName()
//                        result = result + tabs + "except " + name + "as " + exceptionVariableName + ":" + EOL
//                    end

                    constants:IncreaseTab()
                    result = result + det:WritePython()
                    constants:DecreaseTab()
                    detectAmount = detectAmount + 1
                end
            end
            
            //if we have an error block with a catch-all that has been reordered
            //write it now.
            if errorBlock not= undefined
                
                Variable value = errorBlock:GetExceptionVariable()
                text exceptionVariableName = value:GetPythonName()
                result = result + tabs + "except Exception as " + exceptionVariableName + ":" + EOL
                result = result + tabs + tab +exceptionVariableName + " = Exception_(" + exceptionVariableName + ")" + EOL
                
                constants:IncreaseTab()
                result = result + errorBlock:WritePython()
                constants:DecreaseTab()
            end
        end

        if alwaysBlock not= undefined
            result = result + tabs + "finally:" + EOL
            result = result + tabs + tab + "if " + cleanupName + ":" + EOL
            constants:IncreaseTab()
            constants:IncreaseTab()
            result = result + alwaysBlock:WritePython() + EOL
            constants:DecreaseTab()
            constants:DecreaseTab()
        end

        return result
    end

    action WriteJavaScript returns text
        text result = ""
        text EOL = result:GetCarriageReturn() + result:GetLineFeed()
        boolean isCheckEmpty = false
        if block not= undefined
            if block:IsEmpty()
                isCheckEmpty = true
            end
        end

        constant text checkExceptionName = "e" + GetCheckLabelInteger() + "_"

        text null = undefined
        if not isCheckEmpty
            result = result + "try {" + EOL
            result = result + "     " + block:WriteJavaScript()
            result = result + EOL + "}" + EOL
        elseif isCheckEmpty and alwaysBlock not= undefined
            //in this case, we need an empty try block for javascript to accept it
            result = result + "try {}" + EOL
        end

        boolean hasCatchAll = false
        if not isCheckEmpty //if the block is empty, there's no need to write detect blocks
            Iterator<DetectBlockOpcode> it = detectBlocks:GetIterator()
            integer detectAmount = 0
            
            result = result + "catch("
            boolean isFirst = true
            repeat while it:HasNext()
                DetectBlockOpcode det = it:Next()
                Variable value = det:GetExceptionVariable()
                text exceptionVariableName = value:GetJavaScriptName()
                if isFirst
                    if value not= undefined
                        result = result + checkExceptionName + ") {" + EOL
                    else
                        result = result + checkExceptionName + ") {" + EOL
                    end
                    isFirst = false
                end

                if errorBlock not= det
                    Iterator<Class> detectClasses = det:GetDeclaredDetectsIterator()
                    if detectAmount > 0
                        result = result + "     else if(" + checkExceptionName + " instanceof "
                    else
                        result = result + "     if(" + checkExceptionName + " instanceof "
                    end

                    boolean first = true
                    repeat while detectClasses:HasNext()
                        Class classDetect = detectClasses:Next()
                        text name = classDetect:ConvertStaticKeyToJavaScriptName()
                        if first
                            result = result + name
                        else
                            result = result + " || " + checkExceptionName + " instanceof " + name
                        end
                    end

                    result = result + ") {" + EOL
                    result = result + "     var " + exceptionVariableName + " = global_ErrorCheck(" + checkExceptionName + ");" + EOL
                    result = result + det:WriteJavaScript()
                    result = result + "     }"
                    detectAmount = detectAmount + 1
                end
            end
            

            //if we have an error block with a catch-all that has been reordered
            //write it now.
            if errorBlock not= undefined
                if detectAmount > 0
                    Variable value = errorBlock:GetExceptionVariable()
                    text exceptionVariableName = value:GetJavaScriptName()
                    result = result + " else {" + EOL
                    result = result + "     var " + exceptionVariableName + " = global_ErrorCheck(" + checkExceptionName + ");" + EOL
                    result = result + errorBlock:WriteJavaScript()
                    result = result + " }" + EOL
                else
                    Variable value = errorBlock:GetExceptionVariable()
                    text exceptionVariableName = value:GetJavaScriptName()
                    result = result + "     var " + exceptionVariableName + " = global_ErrorCheck(" + checkExceptionName + ");" + EOL
                    result = result + errorBlock:WriteJavaScript()
                end
            else
                result = result + " else {" + EOL
                result = result + "     throw " + checkExceptionName + ";" + EOL
                result = result + " }" + EOL
            end

            result = result + "}" + EOL
            
        end

        if alwaysBlock not= undefined
            result = result + "finally {" + EOL
            result = result + alwaysBlock:WriteJavaScript() + EOL
            result = result + "}" + EOL
        end

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        CheckDetectOpcode op


        return op
    end
end