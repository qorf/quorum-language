package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.all

class LoopOpcode is QuorumOpcode
    QuorumOpcode expression = undefined
    BlockOpcode block = undefined
    JavaBytecodeOpcodes opcodes
    boolean isUntil = false
    boolean isTimes = false
    Variable variable = undefined
    Variable timesResult = undefined

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        if block not= undefined and expression not= undefined
            block:SetBytecodeWriteOffsetToAllChildren(offset)
            expression:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        if block not= undefined and expression not= undefined
            block:SetMethodWriterToAllChildren(writer)
            expression:SetMethodWriterToAllChildren(writer)
        end
    end

    action GetVariable returns Variable
        return variable
    end

    action SetVariable(Variable field)
        me:variable = field
    end

    action GetVariableTimesResult returns Variable
        return timesResult
    end

    action SetVariableTimesResult(Variable field)
        me:timesResult = field
    end
    

    action SetWhile
        isUntil = false
        isTimes = false
    end

    action IsUntil returns boolean
        return isUntil
    end

    action IsWhile returns boolean
        if not isUntil and not isTimes
            return true
        end

        return false
    end

    action IsTimes returns boolean
        return isTimes
    end

    action SetUntil
        isUntil = true
        isTimes = false
    end

    action SetTimes
        isUntil = false
        isTimes = true
    end

    action GetExpression returns QuorumOpcode
        return expression
    end

    action SetExpression(QuorumOpcode op)
        expression = op
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetBlock(BlockOpcode op)
        block = op
    end

    action Write
        VisitLineNumber()
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        JavaBytecodeLabel startLabel
        JavaBytecodeLabel endLabel

        if not isTimes
            methodWriter:VisitLabel(startLabel)
        else 
            methodWriter:VisitConstant(0)
            methodWriter:VisitVariable(opcodes:GetIntegerStore(), variable:GetBytecodeLocation() + GetBytecodeOffset())
        end

        expression:Write()

        if isTimes //for this one, the answer is guaranteed to be a single
                   //integer 

            //store the value that we here into a temporary variable
            methodWriter:VisitVariable(opcodes:GetIntegerStore(), timesResult:GetBytecodeLocation() + GetBytecodeOffset())

            //set a label for the jump point here, AFTER the expression has been written
            methodWriter:VisitLabel(startLabel)

            //so next we duplicate the integer
            methodWriter:VisitVariable(opcodes:GetIntegerLoad(), timesResult:GetBytecodeLocation() + GetBytecodeOffset())
            
            //then push on the counter variable
            methodWriter:VisitVariable(opcodes:GetIntegerLoad(), variable:GetBytecodeLocation() + GetBytecodeOffset())

            //next compare the counter variable with the value
            methodWriter:VisitJump(opcodes:GetIfIntegerLessThanEquals(), endLabel)
        else
            if expression is BinaryOpcode
                BinaryOpcode bop = cast(BinaryOpcode, expression)
                if isUntil
                    integer op = bop:GetJavaOpcode()
                    op = opcodes:GetInvertedIntegerCompareOpcode(op)
                    methodWriter:VisitJump(op, endLabel)
                else 
                    methodWriter:VisitJump(bop:GetJavaOpcode(), endLabel)
                end
            else 
                if isUntil
                    methodWriter:VisitJump(opcodes:GetIfNotEquals(), endLabel)
                else
                    methodWriter:VisitJump(opcodes:GetIfEquals(), endLabel)
                end
            end
        end
        block:Write()

        if isTimes
            methodWriter:VisitVariable(opcodes:GetIntegerLoad(), variable:GetBytecodeLocation() + GetBytecodeOffset())
            methodWriter:VisitConstant(1)
            methodWriter:VisitInstruction(opcodes:GetIntegerAdd())
            methodWriter:VisitVariable(opcodes:GetIntegerStore(), variable:GetBytecodeLocation() + GetBytecodeOffset())
        end

        methodWriter:VisitJump(opcodes:GetGoto(), startLabel)
        methodWriter:VisitLabel(endLabel)
        //if isTimes
        //    methodWriter:VisitInstruction(opcodes:GetPop())
        //end
    end

    action WritePython returns text
        text result = ""

        EOL = ""
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        TranslateConstants constants
        text tabs = constants:GetTabText()

        text hash = "_L" + GetHashCode() + "_"
        if isTimes
            text hashMiddleExpression = hash + "Mid"
            result = result + tabs + hash + " = 0" + EOL
            result = result + tabs + hashMiddleExpression + " = " + expression:WritePython() + EOL
            result = result + tabs + "while " + hash + " < " + hashMiddleExpression + ":" + EOL
        elseif isUntil
            result = result + tabs + "while (not(" + expression:WritePython() + ")):" + EOL
        else //it's a while loop
            result = result + tabs + "while (" + expression:WritePython() + "):" + EOL

        end

        constants:IncreaseTab()
        if block:IsEmpty()
result = result + constants:GetTabText() + "pass"
        else
result = result + block:WritePython()
        end

        //the loop counter in python
        if isTimes
            //one extra tab
            result = result + tabs + tabs:GetTab() + hash + " = " + hash + " + 1" + EOL
        end
        constants:DecreaseTab()
        return result
    end

    action WriteJavaScript returns text
        text result = ""

        EOL = ""
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        text hash = "$L" + GetHashCode() 
        if isTimes
            text hashMiddleExpression = hash + "Mid"
            result = result + "var " + hashMiddleExpression + " = " + expression:WriteJavaScript() + ";" + EOL
            result = result + "for(var " + hash + "=0;" + hash + "<" + hashMiddleExpression + ";" + hash + "++) {" + EOL
        elseif isUntil
            result = result + "while (!(" + expression:WriteJavaScript() + ")) {" + EOL
        else //it's a while loop
            result = result + "while (" + expression:WriteJavaScript() + ") {" + EOL

        end

        result = result + block:WriteJavaScript()
        result = result + "}" + EOL
        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        LoopOpcode copy

        return copy
    end
end