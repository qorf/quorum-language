package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Translate.QuorumOpcode
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.ActionCallResolution
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Action

class ChainedActionCallOpcode is QuorumOpcode
    boolean isSoloCall = false
    Array<ActionCallOpcode> ops
    boolean popReturn = false
    JavaBytecodeOpcodes opcodes

    /*
        If this action returns true, then this opcode will automatically
        pop the return value off the stack.
    */
    action GetPopReturn returns boolean
        return popReturn
    end

    /*
        This action sets whether or not this chained action call should
        pop the return value off the stack.
    */
    action SetPopReturn(boolean pop)
        popReturn = pop
    end

    action IsSoloCall returns boolean
        return isSoloCall
    end

    action SetIsSoloCall(boolean isSolo)
        isSoloCall = isSolo
    end

    action Add(ActionCallOpcode op)
        ops:Add(op)
        SetType(op:GetType())
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            op:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            op:SetMethodWriterToAllChildren(writer)
        end
    end

    action Write 
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            op:Write()
        end

        ActionCallOpcode last = ops:GetFromEnd()
        Type type = last:GetType()
        if popReturn
            JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
            if type:IsNumber()
                methodWriter:VisitInstruction(opcodes:GetPopDouble())
            else
                methodWriter:VisitInstruction(opcodes:GetPop())
            end
        end
    end

    action WritePython returns text
        text result = ""
        EOL = result:GetCarriageReturn() + result:GetLineFeed()
        TranslateConstants constants
        boolean async = constants:IsUserCodeAsynchronous()
        boolean userCode = false
        boolean callingClassUserCode = false
        boolean isUserSpecialAction = false
        text tabs = constants:GetTabText()
        Array<text> values
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        boolean containsSystemSpikeCall = false
        integer i = 0
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            boolean wrapGetValue = false
            QuorumOpcode op2 = op:GetAutoBoxOpcode()
            if op2 not= undefined
                Type box = op2:GetType()
                //if it's a primitive, do something else
                if box not= undefined
                    if box:IsPrimitive()
                        wrapGetValue = true
                    end
                end
            end

            ActionCallResolution res = op:GetActionCallResolution()

            /*
                If this is true, it's a lego system call,  which means if the program is async, 
                we need to await for any call.

            */
            if res not= undefined
                Class callingClass = res:callingClass
                if callingClass not= undefined
                    userCode = callingClass:IsUserCode()
                end
                Class callOnClass = res:classToMakeCallOn
                if callOnClass not= undefined
                    text pack = callOnClass:GetPackageKey()
                    callingClassUserCode = callOnClass:IsUserCode()
                    //if pack = "Libraries.Robots.Spike"
                        Action act = res:resolvedAction
                        /*
                        This is quirky. We're trying to detect if we need to call an async action. By default, user code has to be async and spike code
                        does. So, user code and system actions need to be awaited. It's plausible there could be some kind of funky
                        issues with inheritance here as well. 
                        */
                        if act not= undefined and act:IsSystem() and pack = "Libraries.Robots.Spike"
                            containsSystemSpikeCall = true
                        end

                        if act:GetName() = "GetHashCode" and act:GetParametersSize() = 0
                            isUserSpecialAction = true
                        elseif act:GetName() = "Compare" and act:GetParametersSize() = 1 
                                and act:GetParameter("object") not= undefined
                            isUserSpecialAction = true
                        elseif act:GetName() = "Equals" and act:GetParametersSize() = 1
                                and act:GetParameter("object") not= undefined
                            isUserSpecialAction = true
                        end
                        //also make sure we're not calling a parent action
                        //if we are, it's fine, unless that parent is also in user code. Then we await.
                        Class mom = act:GetParentClass()
                        if mom not= undefined and mom:GetStaticKey() not= callOnClass:GetStaticKey()
                            if not callOnClass:IsUserCode() //it's not user code, so use those assumptions.
                                isUserSpecialAction = true
                            end
                        end
                    //end
                end
            end

            //try to detect if the next thing in the chain is calling on a primitive. If so, we have to wrap
            if res not= undefined and res:isCallOnPrimitive
                //take the previous value and wrap it in the object form of the primitive
                //this is less efficient than typical Quorum, but seems to be the only obvious way to solve it in the Python 
                //translator
                text value = values:Get(i - 1)
                Type type = res:typeToMakeCallOn
                if type:IsBoolean()
                    values:Add(0, "Bool_(")
                    values:Add(")")
                elseif type:IsInteger()
                    values:Add(0, "Integer_(")
                    values:Add(")")
                elseif type:IsNumber()
                    values:Add(0, "Number_(")
                    values:Add(")")
                elseif type:IsText()
                    values:Add(0, "Text_(")
                    values:Add(")")
                end

                //now write the new opcode
                values:Add(op:WritePython())
            elseif wrapGetValue
                text DQ = ""
                DQ = DQ:GetDoubleQuote()
                //values:Add("Global_GetValue_(" + result + op:WritePython() + ", " + DQ + GetType():GetStaticKey() + DQ + ")")
                //result = result + op:WritePython()//might need to wrap. Not sure yet.
                values:Add(0, "Global_GetValue_(")
                values:Add(op:WritePython())
                values:Add(", " + DQ + GetType():GetStaticKey() + DQ + ")")
            else
                //result = result + op:WritePython()
                values:Add(op:WritePython())
            end
    
            i = i + 1
        end

        i = 0
        repeat while i < values:GetSize()
            result = result + values:Get(i)
            i = i + 1
        end
        if isSoloCall
            //if it's a solo call and we're calling a system action and it's async, wait on it
            if async and userCode and not isUserSpecialAction and (containsSystemSpikeCall or callingClassUserCode)
                result = tabs + "await " + result + EOL
            else
                result = tabs + result + EOL// + ";" + result:GetCarriageReturn() + result:GetLineFeed()
            end
        else
            //if it's not a solo call, but we're calling an action in user code, assume it's async and we need to wait.
            if async and userCode and not isUserSpecialAction and (containsSystemSpikeCall or callingClassUserCode)
                result = "await " + result
            end
        end

        return result
    end

    action WriteJavaScript returns text
        text result = ""
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            boolean wrapGetValue = false
            QuorumOpcode op2 = op:GetAutoBoxOpcode()
            if op2 not= undefined
                Type box = op2:GetType()
                //if it's a primitive, do something else
                if box not= undefined
                    if box:IsPrimitive()
                        wrapGetValue = true
                    end
                end
            end

            if wrapGetValue
                text DQ = ""
                DQ = DQ:GetDoubleQuote()
                result = "global_GetValue_(" + result + op:WriteJavaScript() + ", " + DQ + GetType():GetStaticKey() + DQ + ")"
            else
                result = result + op:WriteJavaScript()
            end
        end
        if isSoloCall
            result = result + ";" + result:GetCarriageReturn() + result:GetLineFeed()
        end

        return result
    end


    action GetTemplateCopy returns QuorumOpcode
        ChainedActionCallOpcode op
        op:SetType(me:GetType())
        return op
    end
end