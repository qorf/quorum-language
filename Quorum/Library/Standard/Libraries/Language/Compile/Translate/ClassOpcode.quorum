package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Containers.List
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes
use Libraries.Language.Compile.Symbol.Class


use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Language.Compile.QualifiedName
use Libraries.Language.Compile.Symbol.Documentation
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Web.Page.WebPage
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.Emphasize
use Libraries.Web.Page.Link
use Libraries.Web.Page.Division
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableHeader
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.TableHeaderCell
use Libraries.Web.Page.TableData
use Libraries.Web.Page.Heading
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.StrongText
use Libraries.Web.Page.NavigationDivision
use Libraries.Web.Page.Footer
use Libraries.Web.Page.WebPageHeader
use Libraries.Web.Page.HeaderLink
use Libraries.Language.Compile.Documentation.DocumentationGenerator
use Libraries.Language.Support.TextBuilder
use Libraries.Web.Page.Section
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.CodeBlock

class ClassOpcode is QuorumOpcode
    QualifiedName packageValue = undefined
    Class clazz = undefined
    JavaBytecodeMethodWriter methodWriter = undefined
    ActionOpcode constructor = undefined
    List<ActionOpcode> actions
    List<QuorumOpcode> fields

    JavaBytecodeClassWriter classWriter = undefined
    JavaBytecodeClassWriter interfaceWriter = undefined
    QuorumBytecodeConverter converter
    JavaBytecodeOpcodes opcodes
    text name = ""
    text staticKey = ""
    constant text JAVA_THROWABLE = "java/lang/Throwable"
    constant text JAVA_OBJECT = "java/lang/Object"
    constant text QUORUM_ERROR = "quorum/Libraries/Language/Errors/Error"
    constant text QUORUM_ERROR_INTERFACE = "quorum/Libraries/Language/Errors/Error_"
    constant text QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR = "Libraries.Language.Errors.Error"
    constant text CONSTRUCTOR_JAVA_NAME = "<init>"
    constant integer ME = 0
    constant text QUORUM = "quorum"
    File buildFolder = undefined
    File buildFile = undefined
    File buildInterfaceFile = undefined
    integer h1Size = 150
    integer h2Size = 125
    integer h3Size = 100
    integer heroSize = 250
    SymbolTable symbolTable = undefined

    action GetSymbolTable returns SymbolTable
        return symbolTable
    end

    action SetSymbolTable(SymbolTable table)
        symbolTable = table
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
    end

    action GetBuildFile returns File
        return buildFile
    end

    action GetBuildInterfaceFile returns File
        return buildInterfaceFile
    end

    action GetBuildFolder returns File
        return buildFolder
    end

    action SetBuild(File file)
        buildFolder = file
    end

    action GetStaticKey returns text
        return staticKey
    end

    action SetStaticKey(text staticKey)
        me:staticKey = staticKey
    end

    action GetPackage returns QualifiedName
        return packageValue
    end

    action SetPackage(QualifiedName value)
        packageValue = value
    end

    action GetName returns text
        return name
    end

    action SetName(text name)
        me:name = name
    end

    action GetClassWriter returns JavaBytecodeClassWriter
        return classWriter
    end

    action GetInterfaceWriter returns JavaBytecodeClassWriter
        return interfaceWriter
    end

    action SetClassWriter(JavaBytecodeClassWriter writer)
        classWriter = writer
    end

    action SetInterfaceWriter(JavaBytecodeClassWriter writer)
        interfaceWriter = writer
    end

    action GetClass returns Class
        return clazz
    end

    action SetClass(Class clazz)
        me:clazz = clazz
    end

    action Add(ActionOpcode method)
        actions:Add(method)
    end

    action AddField(QuorumOpcode fieldOpcode) 
        fields:Add(fieldOpcode)
    end

    action SetConstructor(ActionOpcode method)
        constructor = method
    end

    action GetParentLink(Class from, Class theParent) returns text
        text link = ""
        text key = from:GetStaticKey()
        text parentKey = theParent:GetStaticKey()
        Array<text> fromSplit = key:Split("\.")
        Array<text> parentSplit = parentKey:Split("\.")
        if fromSplit not= undefined and parentSplit not= undefined
            integer i = 0
            repeat fromSplit:GetSize() - 1 times
                link = link + "../"
                i = i + 1
            end

            i = 0
            repeat parentSplit:GetSize() times
                if i < parentSplit:GetSize() - 1
                    link = link + parentSplit:Get(i) + "/"
                else
                    link = link + parentSplit:Get(i) + ".php"
                end
                i = i + 1
            end
        end
        text dq = link:GetDoubleQuote()
        link = "<a href = " + dq + link + dq + ">" + parentKey + "</a>"
        return link
    end

    action GetParentWebLink(Class from, Class theParent) returns Link
        text link = ""
        text key = from:GetStaticKey()
        text parentKey = theParent:GetStaticKey()
        Array<text> fromSplit = key:Split("\.")
        Array<text> parentSplit = parentKey:Split("\.")
        if fromSplit not= undefined and parentSplit not= undefined
            integer i = 0
            repeat fromSplit:GetSize() - 1 times
                link = link + "../"
                i = i + 1
            end

            i = 0
            repeat parentSplit:GetSize() times
                if i < parentSplit:GetSize() - 1
                    link = link + parentSplit:Get(i) + "/"
                else
                    link = link + parentSplit:Get(i) + ".html"
                end
                i = i + 1
            end
        end
        text dq = link:GetDoubleQuote()
        //link = "<a href = " + dq + link + dq + ">" + parentKey + "</a>"
        Link webLink
        webLink:SetAddress(link)
        webLink:AddText(parentKey)
        return webLink
        //return link
    end
    
    action WriteToWebPage(DocumentationGenerator generator) returns WebPage
        //NavigationDivision navigation
        Footer footer = generator:GetFooter()
        WebPage page

        generator:AddDefaultHeaders(page)
        

        MetaData keywords
        text keywordText = "programming for beginners, computer programming,
        Quorum programming language"

        //add the static key and the name
        keywordText = keywordText + ", " + clazz:GetStaticKey()
        keywordText = keywordText + ", " + clazz:GetName()
        keywordText = keywordText + ", " + clazz:GetPackageKey()

        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", keywordText)
        page:AddMetaData(keywords)


        MetaData metaDataDescription
        metaDataDescription:SetContent("Read documentation for the Quorum programming language's " + clazz:GetStaticKey() + " class.")
        metaDataDescription:SetName("description")
        page:AddMetaData(metaDataDescription)

        page:SetWebPageTitle(clazz:GetStaticKey() + " - Quorum Programming Language")
        MainContent mainRegion
        mainRegion:AddAttribute("role","main")
        mainRegion:SetClassAttribute("flex flex-row w-full box-border mx-2 my-1 md:mx-8 md:my-4 lg:my-8 lg:mx-16 flex-grow")

        Header headDiv
        Section introHeaderSection = generator:CreateHeaderSection(clazz:GetStaticKey())
        headDiv:Add(introHeaderSection)
        page:Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("w-full pr-4 pl-4 md:w-4/5 lg:w-3/5 md:pl-8 md:pr-8 md:pl-12 md:pr-12 space-y-2")
        Heading titleHeader = bodyDiv:AddHeading(clazz:GetStaticKey() + " Documentation", 2)
titleHeader:SetClassAttribute("font-bold text-3xl pt-6")
        
        Documentation doc = clazz:GetDocumentation()
        Division headerDivision = undefined
        if doc not= undefined
            //add that in.
            headerDivision = doc:GetHeaderDivision()
            headerDivision:SetClassAttribute("space-y-1")
            bodyDiv:Add(headerDivision)
        end
        
        Iterator<Class> parents = clazz:GetParentClasses()
        if parents:HasNext()
            Paragraph inherits
            inherits:AddText("Inherits from: ")
            //inherits
            repeat while parents:HasNext()
                Class p = parents:Next()
                Link parentLink = GetParentWebLink(clazz, p)
                parentLink:SetClassAttribute("hover:underline text-quorum-blue-100")
                inherits:Add(parentLink)
                if parents:HasNext()
                    inherits:AddText(", ")
                end
            end
            if headerDivision not= undefined
headerDivision:Add(inherits)
            else
bodyDiv:Add(inherits)
            end
        end

        //sort the various actions and variables for a summary table
        Iterator<Action> it = clazz:GetVirtualTable()
        Array<Action> array
        repeat while it:HasNext()
            Action next = it:Next()
            if next:IsPublic()
                array:Add(next)
            end
        end
        array:Sort()

        Iterator<Variable> vars = clazz:GetVariables()
        Array<Variable> variableArray
        repeat while vars:HasNext()
            Variable next = vars:Next()
            if next:IsPublic()
                variableArray:Add(next)
            end
        end
        variableArray:Sort()
        vars = variableArray:GetIterator()

        Division variableDivision

        variableDivision:SetClassAttribute("space-y-1")
        if not variableArray:IsEmpty()
            Heading variableSummaryHeader = variableDivision:AddHeading("Variables Table", 3)
variableSummaryHeader:SetClassAttribute("font-bold text-2xl")
            WebTable table
            table:SetClassAttribute("overflow-hidden rounded-md table-auto w-full border-collapse bg-neutral-grey-15")
            table:SetIdentifier("VariableSummaryTable")
            table:SetBorder(true)

            //write the header
            TableRow headerRow
            headerRow:SetClassAttribute("text-neutral-white bg-neutral-black text-left font-bold")
            TableHeaderCell variables
            variables:SetClassAttribute("px-3")
            TableHeaderCell description
description:SetClassAttribute("px-3")
            variables:AddText("Variables")
            description:AddText("Description")
            headerRow:Add(variables)
            headerRow:Add(description)
            table:Add(headerRow)

            repeat while vars:HasNext()
                TableRow variableRow
                Variable var = vars:Next()
                Type t = var:GetType()
                text typeDisplay = t:GetDisplayName()
                TableData data
                data:AddText(typeDisplay + " " + var:GetName())
                variableRow:Add(data)

                Documentation doc2 = var:GetDocumentation()
                TableData dataDocumentation
                if vars:HasNext()
data:SetClassAttribute("font-bold border-y border-slate-400 px-3 py-2")
dataDocumentation:SetClassAttribute("border-y border-slate-400 px-3 py-2")
                else
                    //No border if on the last line
data:SetClassAttribute("font-bold px-3 py-2")
dataDocumentation:SetClassAttribute("px-3 py-2")
                end
                if doc2 not= undefined
                    dataDocumentation:AddText(doc2:GetDescription())
                end
                variableRow:Add(dataDocumentation)
                table:Add(variableRow)
            end

            if not variableArray:IsEmpty()
                variableDivision:Add(table)
                bodyDiv:Add(variableDivision)
            end
        end

        Division actionDivision
        actionDivision:SetClassAttribute("space-y-6")
        it = array:GetIterator()
        if it:HasNext()
            Heading actionHeader = actionDivision:AddHeading("Actions Documentation", 2)
            actionHeader:SetIdentifier("ActionDocumentation")
            actionHeader:SetClassAttribute("font-bold text-2xl")
            bodyDiv:Add(actionDivision)
        end

        repeat while it:HasNext()
            Action act = it:Next()
            Section section
            section:SetClassAttribute("space-y-6")
            actionDivision:Add(section)
            Division actionTop
            actionTop:SetClassAttribute("overflow-hidden rounded-md bg-neutral-grey-15")
            section:Add(actionTop)
            Division actionMiddle
            actionMiddle:SetClassAttribute("py-4")
            text display = act:GetDisplayNameNoReturnAsWeb()
            Heading header = actionTop:AddHeading(act:GetDisplayNameNoReturnAsWeb(), 3)
actionTop:Add(actionMiddle)
            header:AddAttribute("id", act:GetStaticKey())
            header:SetClassAttribute("font-bold bg-neutral-black px-3 text-left text-neutral-white py-2")
            Documentation doc2 = act:GetDocumentation()
            if doc2 not= undefined
                Paragraph par = actionMiddle:AddParagraph(doc2:GetDescription())
                par:SetClassAttribute("px-3")
            end    

            Iterator<Variable> params = act:GetParameterIterator()
            if params:HasNext()
                Heading paramHeading = actionMiddle:AddHeading("Parameters", 4)
                paramHeading:SetClassAttribute("font-bold px-3")
                UnorderedList unordered
                unordered:SetClassAttribute("px-12 list-disc list-inside")
                if params:HasNext()
                    actionMiddle:Add(unordered)
                end
                repeat while params:HasNext()
                    Variable param = params:Next()
                    text paramName = param:GetDisplayNameWithGenericsAsWeb()
                    Type parameterType = param:GetType()
                    
                    text documentationForParameter = undefined
                     if doc2 not= undefined
                        text value = doc2:GetParameterDescription(param:GetName())
                        if value not= undefined
                            documentationForParameter = ": " + value
                        end
                    end

                    if not parameterType:IsPrimitive()
                        SymbolTable symbolTable = GetSymbolTable()
                        Class referenceClass = symbolTable:GetClass(parameterType:GetStaticKey())
                        Link parentLink = GetParentWebLink(clazz, referenceClass)
                        ListItem item
                        item:Add(parentLink)
                        if documentationForParameter not= undefined
                            item:AddText(documentationForParameter)
                        end
                        unordered:Add(item)
                    else
                        if documentationForParameter not= undefined
                            unordered:AddListItem(paramName + documentationForParameter)
                        else
unordered:AddListItem(paramName)
                        end
                    end
                end
            end

            Type returnType = act:GetReturnType()
            if not returnType:IsVoid()
                text r = returnType:GetStaticKeyWithMappedGenerics()
                Heading returnHeading = actionMiddle:AddHeading("Return", 4)
                returnHeading:SetClassAttribute("font-bold px-3")
                text documentationForParameter = undefined
                if doc2 not= undefined
                    documentationForParameter = ": " + doc2:GetReturns()
                end
                Paragraph returnParagraph
                returnParagraph:SetClassAttribute("px-12")
                SymbolTable symbolTable = GetSymbolTable()
                if not returnType:IsPrimitive()
                    Class referenceClass = symbolTable:GetClass(returnType:GetStaticKey())
                    Link parentLink = GetParentWebLink(clazz, referenceClass)
                    returnParagraph:Add(parentLink)
                    if documentationForParameter not= undefined
                        returnParagraph:AddText(documentationForParameter)
                    end
                else 
                    returnParagraph:AddText(r)
                    if documentationForParameter not= undefined
                        returnParagraph:AddText(documentationForParameter)
                    end
                end
                actionMiddle:Add(returnParagraph)
            end

            //now check if there's an example and place it in
            if doc2 not= undefined
                text example = doc2:GetExample()
                if example not= undefined and not example:IsEmpty()
                    Division exampleDivision
                    example = example:Replace("<", "&lt;")
                    example:Replace(">", "&gt;")
                    Paragraph exampleParagraph
                    StrongText strong
                    strong:AddText("Example")
                    exampleParagraph:Add(strong)
                    exampleDivision:Add(exampleParagraph)
        
                    PreformattedText t
                    t:SetClassAttribute("line-numbers rounded-md bg-neutral-grey-10 py-4")
                    CodeBlock block
                    block:SetClassAttribute("language-quorum")
                    block:AddText(example)
                    t:Add(block)
        
                    exampleDivision:Add(t)
                    section:Add(exampleDivision)
                end
            end
        end
        Section packageIndex = generator:GetPackageIndex()
        mainRegion:Add(packageIndex)
        mainRegion:Add(bodyDiv)
        Section rightHandSection = GetRightHandSideWebSection(array)
        mainRegion:Add(rightHandSection)
        page:Add(mainRegion)
        page:Add(footer)

        return page
    end
    
    private action GetRightHandSideWebSection(Array<Action> actions) returns Section
        Section section
        section:SetClassAttribute("hidden lg:flex flex-col w-1/5 gap-y-2 pt-6 sticky top-0 h-screen overflow-auto")
        Heading heading
        heading:SetScale(2)
        heading:AddText("On this page")
        heading:SetClassAttribute("font-bold text-xl")
        section:Add(heading)
        
        Link variablesLink
        variablesLink:AddText("Variables Table")
        variablesLink:SetAddress("#VariableSummaryTable")
variablesLink:SetClassAttribute("hover:underline text-lg")
        section:Add(variablesLink)
        
        
Link actionsLink
        actionsLink:AddText("Action Documentation")
        actionsLink:SetAddress("#ActionDocumentation")
actionsLink:SetClassAttribute("hover:underline text-lg")
        section:Add(actionsLink)
        
        UnorderedList list
        list:SetClassAttribute("space-y-2")
        i = 0
        repeat while i < actions:GetSize()
            Action act = actions:Get(i)
            ListItem item
            Link actLink
actLink:SetClassAttribute("hover:underline text-sm")
            actLink:SetAddress("#" + act:GetStaticKey())
            text displayName = act:GetDisplayNameNoReturn()
            actLink:AddText(displayName)
            item:Add(actLink)
            list:Add(item)
            i = i + 1
        end
        section:Add(list)
    return section
    end

    private action GetMediaStyleSheet(text name, text media) returns HeaderLink
        HeaderLink link
        link:SetAddress(name)
        link:SetType("text/css")
        link:SetRelationship("stylesheet")
        link:SetMedia(media)
        return link
    end

    action WriteToWeb returns text
        text result = WriteHeader()
        text dq = result:GetDoubleQuote()
        result = result + WriteHeroBar()
        text NL = dq:GetCarriageReturn()

        result = result + "<div id=" + dq + "wrapper" + dq + "><div class=" + dq + "content" + dq + ">"
        Documentation doc = clazz:GetDocumentation()
        if doc not= undefined
            result = result + doc:GetHeaderAsWeb()
        end

        Iterator<Class> parents = clazz:GetParentClasses()
        if parents:HasNext()
            result = result + "<em>Inherits from: </em>"
            repeat while parents:HasNext()
                Class p = parents:Next()
                result = result + GetParentLink(clazz, p)
                if parents:HasNext()
                    result = result + ", "
                end
            end
        end
        
        Iterator<Action> it = clazz:GetVirtualTable()
        Array<Action> array
        repeat while it:HasNext()
            Action next = it:Next()
            if next:IsPublic()
                array:Add(next)
            end
        end
        array:Sort()

        result = result + "<h1 style=" + dq + "font-size:" + h1Size + "%" + dq + ">Summary</h1>" + NL

        Iterator<Variable> vars = clazz:GetVariables()
        Array<Variable> variableArray
        repeat while vars:HasNext()
            Variable next = vars:Next()
            if next:IsPublic()
                variableArray:Add(next)
            end
        end
        variableArray:Sort()
        vars = variableArray:GetIterator()


        if vars:HasNext()
            result = result + "<table style = " + dq + 
                "border: 1px solid #049cdb;
                 padding: 3px 7px 2px 7px;
                 border-collapse: collapse;" + dq + ">"

             result = result + "<tr style = " + dq + "font-size: 1.1em;
                 text-align: left;
                 padding-top: 5px;
                 padding-bottom: 4px;
                 background-color: #049cdb;
                 color: #ffffff;
                 text-shadow: 2px 2px 0 #036690;
                 padding-left: 5px;" + dq +">
                 <th><strong>Variables</strong></th>
                 <th><strong>Description</strong></th>
             </tr>" + NL
            //result = result + "<h1 style=" + dq + "font-size:" + h1Size + "%" + dq + ">Variables</h1>" + NL
            
            repeat while vars:HasNext()
                result = result + "<tr>"
                Variable var = vars:Next()
                Type t = var:GetType()
                text typeDisplay = t:GetDisplayName()
                result = result + "<td style = " + dq + 
           "border: 1px solid #049cdb;
            padding: 3px 7px 2px 7px;" + dq + "><strong>" + typeDisplay + " " + var:GetName() + "</td>"
                Documentation doc2 = var:GetDocumentation()
                result = result + "<td style = " + dq + 
           "border: 1px solid #049cdb;
            padding: 3px 7px 2px 7px;" + dq + ">" + NL
                if doc2 not= undefined
                    
                    result = result + doc2:GetDescription()
                    
                end
                result = result + "</td>" + NL
                result = result + NL
                result = result + "</tr>"
            end
            result = result + "</table></br>"
        end

        result = result + "<table style = " + dq + 
           "border: 1px solid #049cdb;
            padding: 3px 7px 2px 7px;
            border-collapse: collapse;" + dq + ">"

        result = result + "<tr style = " + dq + "font-size: 1.1em;
            text-align: left;
            padding-top: 5px;
            padding-bottom: 4px;
            background-color: #049cdb;
            color: #ffffff;
            text-shadow: 2px 2px 0 #036690;
            padding-left: 5px;" + dq +">
            <th><strong>Actions</strong></th>
            <th><strong>Description</strong></th>
        </tr>"

        it = array:GetIterator()
        repeat while it:HasNext()
            Action act = it:Next()
            text display = act:GetDisplayNameNoReturnAsWeb()
            result = result + "<tr><td style = " + dq + 
           "border: 1px solid #049cdb;
            padding: 3px 7px 2px 7px;" + dq + ">"
            Documentation doc2 = act:GetDocumentation()
            
            result = result + "<a href = " + dq + "#" + act:GetStaticKey() + dq + ">" + display +  "</a></td>"
            result = result + "<td style = " + dq + 
           "border: 1px solid #049cdb;
            padding: 3px 7px 2px 7px;" + dq + ">"
            if doc2 not= undefined
                result = result + doc2:GetShortDescription()
            end  
            result = result + "</td>"
            result = result +  "</tr>" + NL
        end
        result = result + "</table>"

        result = result + "<h1 style=" + dq + "font-size:" + h1Size + "%" + dq + ">Actions</h1>" + NL
        it = array:GetIterator()
        repeat while it:HasNext()
            Action act = it:Next()
            text display = act:GetDisplayNameNoReturnAsWeb()
            //background: #049cdb; font-size:125%; color: #EEEEEE; text-shadow: 2px 2px 0 #036690; padding-left: 5px;
            result = result + "<h2 style=" + dq + "font-size:" + h2Size + "%; " 
            result = result + "background: #049cdb; color: #EEEEEE; text-shadow: 2px 2px 0 #036690; padding-left: 5px;"
            result = result + dq + "id = " + dq + act:GetStaticKey() + dq + ">" + display + "</h2>" + NL
            Documentation doc2 = act:GetDocumentation()
            if doc2 not= undefined
                result = result + doc2:GetHeaderAsWeb()
            end          

            Iterator<Variable> params = act:GetParameterIterator()
            if params:HasNext()
                result = result + "<strong><em>Parameters</em></strong>"
                result = result + "<ul>"
                repeat while params:HasNext()
                    Variable param = params:Next()
                    result = result + "<li>" + NL
                    result = result + "<strong>" + param:GetDisplayNameWithGenericsAsWeb() + "</strong>"
                     if doc2 not= undefined
                        text value = doc2:GetParameterDescription(param:GetName())
                        if value not= undefined
                            result = result + ": " + value
                        end
                    end
                    result = result + "</li>" + NL
                end
                result = result + "</ul>"
            end

            Type returnType = act:GetReturnType()
            if not returnType:IsVoid()
                text r = returnType:GetStaticKeyWithMappedGenerics()
                result = result + "<strong><em>Return: </em></strong>"
                result = result + r
                if doc2 not= undefined
                    result = result + "<p> " + doc2:GetReturns() + "</p>"
                end
            end
        end
        result = result +"</div></div>"

        return result + WriteFooter()
    end

    private action WriteWebActions returns text
        text result = ""

        return result
    end

    private action WriteHeroBar returns text
        text result = ""
        text dq = result:GetDoubleQuote()

        result = result + "<div class=" + dq + "hero-unit" + dq + ">"
        result = result + "<div class=" + dq + "hero-unit-container" + dq + " role=" + dq + "banner" +dq + ">"
        result = result + "<h2 id=" + dq + "pageTitle" + dq + "style= " + dq + "font-size:" + heroSize + "%;" + dq + ">" + me:GetStaticKey() + "</h2> </div></div>"
        return result
    end

    private action WriteHeader returns text
        text dq = ""
        dq = dq:GetDoubleQuote()

        text key = me:GetStaticKey()
        Array<text> split = key:Split("\.")
        integer val = split:GetSize() - 1

        text path = ""
        repeat val times
            path = path + "../"
        end

        return "<?php include(" + dq + path + "static/templates/pageheader.template.php" + dq + "); ?>"
    end

    private action WriteFooter returns text
        text dq = ""
        dq = dq:GetDoubleQuote()

        text key = me:GetStaticKey()
        Array<text> split = key:Split("\.")
        integer val = split:GetSize() - 1

        text path = ""
        repeat val times
            path = path + "../"
        end
        return "<?php include(" + dq + path + "static/templates/pagefooter.template.php" + dq + "); ?>"
    end

    action Write
        integer version = opcodes:GetJavaVersion(7)
        integer access = opcodes:GetPublic() + opcodes:GetSuper()
        text interfaceName = converter:ConvertClassNameToInterfaceName(name)
        Array<text> interfaces
        interfaces:Add(clazz:ConvertStaticKeyToBytecodeInterfacePath())

        Array<text> parentsForInterface
        
        if not clazz:IsObject() //if not object, add all the parent interfaces
            Iterator<Class> parents = clazz:GetParentClasses()
            repeat while parents:HasNext()
                Class mom = parents:Next()
                text parentInterfaceName = mom:ConvertStaticKeyToBytecodeInterfacePath()
                parentsForInterface:Add(parentInterfaceName)
            end
        end

        text null = undefined //temporary workaround for Bug#97 https://quorum.atlassian.net/browse/QUOR-97
        //once fully integrated, check if this is a the Quorum error class or a subclass. For now, just weave in Object.
        File file = clazz:GetFile()
        if file not= undefined
            text name = file:GetPath()
            classWriter:VisitSource(name)
        end

        //if this class is Libraries.Language.Errors.Error, do different things to handle exceptions
        if clazz:GetStaticKey() = QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR
            interfaces:Empty()
            interfaces:Add("quorum/Libraries/Language/Object_")
            classWriter:Visit(version, access, clazz:ConvertStaticKeyToBytecodePath(), null, JAVA_THROWABLE, interfaces)
        elseif clazz:HasParentClass(QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR)
            interfaces:Empty()
            classWriter:Visit(version, access, clazz:ConvertStaticKeyToBytecodePath(), null, QUORUM_ERROR, interfaces)
        else
            classWriter:Visit(version, access, clazz:ConvertStaticKeyToBytecodePath(), null, JAVA_OBJECT, interfaces)
            interfaceWriter:Visit(version, opcodes:GetPublic() + opcodes:GetAbstract() + 
                opcodes:GetInterface(), clazz:ConvertStaticKeyToBytecodeInterfacePath(), null, JAVA_OBJECT, parentsForInterface)
        end

        WriteFieldDeclarations()
        
        ComputeConstructor(true)
        ComputeConstructor(false)

        //does this class have a main method?
        if clazz:HasMainAction()
            WriteMain()
        end

        Iterator<ActionOpcode> actionIterator = actions:GetIterator()
        repeat while actionIterator:HasNext()
            ActionOpcode act = actionIterator:Next()
            Action method = act:GetAction()
            act:Write()


            if not clazz:IsError()
                //write to the interface
                text name = method:GetName()
                text params = method:ConvertActionToBytecodeParameterInterfaceSignature()
                JavaBytecodeMethodWriter interfaceMethodWriter = 
                    interfaceWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetAbstract(), 
                    name, params, null, undefined)

                interfaceMethodWriter:VisitEnd()
            end
        end

        Iterator<Action> it = clazz:GetParentActions()
        repeat while it:HasNext()
            Action act = it:Next()
            Class parentOfMethod = act:GetParentClass()
            if not parentOfMethod:IsError() or clazz:GetStaticKey() = QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR
                WriteParentActionBytecode(act)
            end
        end

        WriteParentGetActions()
        InlineObjectInterfaceActions()

        classWriter:VisitEnd()
        if not clazz:IsError()
            interfaceWriter:VisitEnd()
        end
        WriteBytecodeToDisk()
    end

    /*
        This addition in Quorum 11 allows actions from the overall parent of Object to be inlined inside of every class.
        This action writes any missing Object action into the _ Interface class for the base.
    */
    private action InlineObjectInterfaceActions
        if clazz:IsError()
            return now //we don't need to inline into an interface class for errors, because they don't have one.
        end
        SymbolTable table = GetSymbolTable()
        Class object = table:GetClass("Libraries.Language.Object") //all classes inherit, so this is never undefined.
        Iterator<Action> acts = object:GetActions()
        text null = undefined
        repeat while acts:HasNext()
            Action act = acts:Next()
            text key = act:GetStaticKey()
            text actionName = act:GetName()
            text params = act:ConvertActionToBytecodeParameterInterfaceSignature()

            //If this class overrides one of the object actions, it will be placed into the interface for the file
            //if not, we need to weave it into the interface manually
            Action possible = clazz:GetAction(act:GetStaticKey())
            if possible = undefined
                JavaBytecodeMethodWriter interfaceMethodWriter = 
                    interfaceWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetAbstract(), 
                    actionName, params, null, undefined)
                interfaceMethodWriter:VisitEnd() 
            end
        end
    end

    /*
        This action is similar to the load hidden me action elsewhere, but customized for the new inheritance 
        modifications in Quorum-11
    */
    private action LoadHiddenMe(JavaBytecodeMethodWriter writer)
        Class current = GetClass()
        SymbolTable table = GetSymbolTable()
        Class object = table:GetClass("Libraries.Language.Object")
        writer:VisitVariable(opcodes:GetObjectLoad(), 0)

        integer castOp = opcodes:GetCheckCast()
        //if this is an error class, it is a class, not an interface.
        if not current:IsError()
            //owner, name, description
            text owner = current:ConvertStaticKeyToBytecodePath()
            text name = "hidden_"
            text description = current:ConvertStaticKeyToBytecodePathTypeNameInterface()
            writer:VisitField(opcodes:GetField(), owner, name, description)
        end
    end

    /*
        This action writes in Equal from Object if necessary.
    */
    private action WriteObjectEqualsInBaseClass(JavaBytecodeMethodWriter writer, Action act)
        Class current = GetClass()
        SymbolTable table = GetSymbolTable()
        Class object = table:GetClass("Libraries.Language.Object")

        //Errors are special in the inheritance hierarchy. They do not have an underscore version.
        text path = undefined
        if current:IsError()
            path = current:ConvertStaticKeyToBytecodePath()
        else
            path = current:ConvertStaticKeyToBytecodeInterfacePath()
        end
        text objectPath = object:ConvertStaticKeyToBytecodeInterfacePath()

        text toCall = "GetHashCode"
        text toReturn = "()I"

        //load the hidden me so we get the right polymorphic operation for this sub-class
        //then call both functions and get their hash code.
        writer:VisitCode()
        LoadHiddenMe(writer)
        writer:VisitMethodInvoke(opcodes:GetInvokeInterface(), path,  toCall, toReturn, true)

        integer istore = opcodes:GetIntegerStore()
        integer aload = opcodes:GetObjectLoad()
        integer iload = opcodes:GetIntegerLoad()
        integer if_cmpne = opcodes:GetIfIntegerNotEquals()
        integer ireturn = opcodes:GetIntegerReturn()
        integer goto = opcodes:GetGoto()
        writer:VisitVariable(istore, 2)
        writer:VisitVariable(aload, 1)
        writer:VisitMethodInvoke(opcodes:GetInvokeInterface(), objectPath, toCall, toReturn, true)
        writer:VisitVariable(istore, 3)
    
        JavaBytecodeLabel falseLabel
        JavaBytecodeLabel endLabel
        //load them back up
        writer:VisitVariable(iload, 2)
        writer:VisitVariable(iload, 3)

        //now compare the values and return the result
        writer:VisitJump(if_cmpne, falseLabel)
        writer:VisitConstant(1)
        writer:VisitJump(goto, endLabel)

        writer:VisitLabel(falseLabel)
        writer:VisitConstant(0)
        writer:VisitLabel(endLabel)
        writer:VisitInstruction(ireturn)
    end

    private action WriteObjectGetHashCodeInBaseClass(JavaBytecodeMethodWriter writer, Action act)
        Class current = GetClass()
        text path = current:ConvertStaticKeyToBytecodePath()
        
        writer:VisitCode()
        writer:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
            path, "hashCode", 
            "()I", false)
        writer:VisitInstruction(opcodes:GetReturnOpcode(act:GetReturnType()))
    end

    private action WriteObjectCompareInBaseClass(JavaBytecodeMethodWriter writer, Action act)
        Class current = GetClass()
        SymbolTable table = GetSymbolTable()
        Class object = table:GetClass("Libraries.Language.Object")
        //Errors are special in the inheritance hierarchy. They do not have an underscore version.
        text path = undefined
        if current:IsError()
            path = current:ConvertStaticKeyToBytecodePath()
        else
            path = current:ConvertStaticKeyToBytecodeInterfacePath()
        end
        text objectPath = object:ConvertStaticKeyToBytecodeInterfacePath()

        text toCall = "GetHashCode"
        text toReturn = "()I"

        //load the hidden me so we get the right polymorphic operation for this sub-class
        //then call both functions and get their hash code.
        writer:VisitCode()
        LoadHiddenMe(writer)
        writer:VisitMethodInvoke(opcodes:GetInvokeInterface(), path, toCall, toReturn, true)

        integer istore = opcodes:GetIntegerStore()
        integer aload = opcodes:GetObjectLoad()
        integer iload = opcodes:GetIntegerLoad()
        integer if_cmpne = opcodes:GetIfIntegerNotEquals()
        integer if_cmpge = opcodes:GetIfIntegerGreaterThanEquals()
        integer ireturn = opcodes:GetIntegerReturn()
        integer goto = opcodes:GetGoto()
        integer ineg = opcodes:GetNegateInteger()
        writer:VisitVariable(istore, 2)
        writer:VisitVariable(aload, 1)
        writer:VisitMethodInvoke(opcodes:GetInvokeInterface(), objectPath, toCall, toReturn, true)
        writer:VisitVariable(istore, 3)

        //load them back up
        writer:VisitVariable(iload, 2)
        writer:VisitVariable(iload, 3)


        //now do the operation a bit differently than equals for the Comparison
        JavaBytecodeLabel falseLabel
        JavaBytecodeLabel endLabel

        //now compare the values and return the result
        writer:VisitJump(if_cmpge, falseLabel)
        writer:VisitConstant(1)
        writer:VisitInstruction(ineg)
        writer:VisitInstruction(ireturn)
        
        //otherwise fall to the next spot and reload
        writer:VisitLabel(falseLabel)
        writer:VisitVariable(iload, 2)
        writer:VisitVariable(iload, 3)
        writer:VisitJump(if_cmpne, endLabel)
        writer:VisitConstant(0)
        writer:VisitInstruction(ireturn)

        writer:VisitLabel(endLabel)
        writer:VisitConstant(1)
        writer:VisitInstruction(ireturn)
    end

    private action WriteParentGetActions
        Iterator<Class> parents = clazz:GetParentClasses()
        text classBytecodeName = converter:ConvertStaticKeyToBytecodePath(staticKey)

        //initialize all of the parent objects as fields
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()

            if parentKey not= QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR and not p:IsObject() //don't write errors or Object
                text parentName = p:ConvertStaticKeyToParentFieldName()
                text converted = p:ConvertStaticKeyToBytecodePath()
                text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()

                text parentActionName = p:ConvertStaticKeyToParentActionName()
                text null = undefined
                JavaBytecodeMethodWriter parentWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
                    parentActionName, "()" + p:ConvertStaticKeyToBytecodePathTypeName(), null, undefined)

                parentWriter:VisitCode()

                //load the ME pointer
                parentWriter:VisitVariable(opcodes:GetObjectLoad(), ME)

                //load the parent variable
                parentWriter:VisitField(opcodes:GetField(), 
                    clazz:ConvertStaticKeyToBytecodePath(),
                    p:ConvertStaticKeyToParentFieldName(),
                    p:ConvertStaticKeyToBytecodePathTypeName())
                //return the parent variable
                parentWriter:VisitInstruction(opcodes:GetObjectReturn())

                parentWriter:VisitMaxSize(0,0)
                parentWriter:VisitEnd()

                JavaBytecodeMethodWriter parentWriterInterface = interfaceWriter:VisitMethod(opcodes:GetPublic()+ opcodes:GetAbstract(), 
                    parentActionName, "()" + p:ConvertStaticKeyToBytecodePathTypeName(), null, undefined)
                    parentWriterInterface:VisitEnd()
            end
        end

        //now that all of the parents have been written as actions, write
        //all of the parent's fields as actions
        if not clazz:IsError() //errors are special, don't write these
            parents = clazz:GetParentClasses()
            classBytecodeName = converter:ConvertStaticKeyToBytecodePath(staticKey)
            repeat while parents:HasNext()
                Class p = parents:Next()

                if not p:IsObject() //don't write Object
                    text parentKey = p:GetStaticKey()
                    Iterator<Variable> fieldIterator = p:GetVariables()
    
                    repeat while fieldIterator:HasNext()
                        Variable variable = fieldIterator:Next()
    
                        Type type = variable:GetType()
                        text getter = p:ConvertToActionNameFromField(variable, true)
                        text setter = p:ConvertToActionNameFromField(variable, false)
    
                        text null = undefined
    
                        //write the getter for this parent's variable
                        JavaBytecodeMethodWriter parentWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
                            getter, "()" + type:ConvertTypeToBytecodeSignatureInterface(), null, undefined)
                        parentWriter:VisitCode()

                        //Similarly, in Quorum-11, only write the non-object versions
                        //load the ME pointer
                        parentWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                        //get the parent by calling the appropriate method
                        parentWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                            clazz:ConvertStaticKeyToBytecodePath(), p:ConvertStaticKeyToParentActionName(), 
                            "()" + p:ConvertStaticKeyToBytecodePathTypeName(), false)
                        //now call the getter for the field
                        parentWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(),
                            p:ConvertStaticKeyToBytecodePath(), getter, 
                            "()" + type:ConvertTypeToBytecodeSignatureInterface(), false)
                        //now return the value
                        parentWriter:VisitInstruction(opcodes:GetReturnOpcode(type))
                        parentWriter:VisitMaxSize(0,0)
                        parentWriter:VisitEnd()
    
                        //write the setter for this parent's variable
                        parentWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
                            setter, "(" + type:ConvertTypeToBytecodeSignatureInterface() + ")V", null, undefined)
                        parentWriter:VisitCode()
                        //load the ME pointer
                        parentWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                        //get the parent by calling the appropriate method
                        parentWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                            clazz:ConvertStaticKeyToBytecodePath(), p:ConvertStaticKeyToParentActionName(), 
                            "()" + p:ConvertStaticKeyToBytecodePathTypeName(), false)
    
                        //now push the parameter onto the stack
                        parentWriter:VisitVariable(opcodes:GetLoadOpcode(type), 1)
                        //now call the setter for the field
                        parentWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(),
                            p:ConvertStaticKeyToBytecodePath(), setter, 
                            "(" + type:ConvertTypeToBytecodeSignatureInterface() + ")V", false)


                        parentWriter:VisitInstruction(opcodes:GetReturn())
                        parentWriter:VisitMaxSize(0,0)
                        parentWriter:VisitEnd()
                    end
                end
            end
        end
    end

    private action WriteParentActionBytecode(Action act)
        text null = undefined
        text actionName = act:GetName()
        text params = act:ConvertActionToBytecodeParameterInterfaceSignature()
        JavaBytecodeMethodWriter parentActionWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
            actionName, params, null, undefined)

        parentActionWriter:VisitCode()
        JavaBytecodeLabel start
        JavaBytecodeLabel finish
        parentActionWriter:VisitLabel(start)

        Class p = act:GetParentClass()
        text classBytecodeName = p:ConvertStaticKeyToBytecodeInterfacePath()
        //push on THIS
        parentActionWriter:VisitVariable(opcodes:GetObjectLoad(), 0)

        //push on the appropriate parent field variablep
        text parentName = p:ConvertStaticKeyToParentFieldName()
        text converted = p:ConvertStaticKeyToBytecodePath()
        text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()

        //In Quorum-11, we push on the parent for all inheritance, with the exception of the overall object class
        //this is a memory optimization.
        if not p:IsObject()
            parentActionWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), parentName, convertedParentNameType)
        end

        //push on all of the parameters
        Iterator<Variable> parameterIterator = act:GetParameterIterator()
        
        

        //Similarly in Quorum-11, if it's an object, we don't call the composed class, which no longer exists.
        //Instead, we call the woven action.
        if not p:IsObject() and not clazz:IsError()
            repeat while parameterIterator:HasNext()
                Variable param = parameterIterator:Next()
                parentActionWriter:VisitVariable(opcodes:GetLoadOpcode(param:GetType()), param:GetBytecodeLocation())
            end
            parentActionWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                p:ConvertStaticKeyToBytecodeInterfacePath(), act:GetName(), 
                act:ConvertActionToBytecodeParameterInterfaceSignature(), true)
        elseif clazz:IsError()
            repeat while parameterIterator:HasNext()
                Variable param = parameterIterator:Next()
                parentActionWriter:VisitVariable(opcodes:GetLoadOpcode(param:GetType()), param:GetBytecodeLocation())
            end

            parentActionWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                clazz:ConvertStaticKeyToBytecodePath(), //the current class
                "Libraries_Language_Object_" + act:GetName() + "_", 
                act:ConvertActionToBytecodeParameterInterfaceSignature(), true)
        else
            if act:GetName() = "Equals"
                WriteObjectEqualsInBaseClass(parentActionWriter, act)
            elseif act:GetName() = "GetHashCode"
                WriteObjectGetHashCodeInBaseClass(parentActionWriter, act)
            elseif act:GetName() = "Compare"
                WriteObjectCompareInBaseClass(parentActionWriter, act)
            end
        end

        //set the return value
        Type returnType = act:GetReturnType()
        parentActionWriter:VisitInstruction(opcodes:GetReturnOpcode(returnType))
        parentActionWriter:VisitLabel(finish)
        parentActionWriter:VisitMaxSize(1,1)
        parentActionWriter:VisitEnd()
    end

    /* 
        This action sets the build paths, but does not actually write
        the files to disk.
    */
    action SetBuildPaths
        File classFile
        text path = buildFolder:GetPath()
        if not buildFolder:Exists()
            buildFolder:CreateDirectories()
        end

        classFile:SetWorkingDirectory(buildFolder:GetAbsolutePath())
        if not packageValue:IsEmpty()
            packagePath = packageValue:GetPath() 
            path = QUORUM + "/" + packagePath
        else
            path = QUORUM 
        end
        
        classFile:SetPath(path)
        classFile:CreateDirectories()
        classFile:SetPath(path + "/" + clazz:GetName() + ".class")
        buildFile = classFile

        if not clazz:IsError()
            File interfaceFile
            interfaceFile:SetWorkingDirectory(buildFolder:GetAbsolutePath())
            if not packageValue:IsEmpty()
                packagePath = packageValue:GetPath() 
                path = QUORUM + "/" + packagePath
            else
                path = QUORUM 
            end

            interfaceFile:SetPath(path + "/" + clazz:GetInterfaceName() + ".class")
            buildInterfaceFile = interfaceFile
        end
    end

    private action WriteBytecodeToDisk 
        File classFile
        text path = buildFolder:GetPath()
        if not buildFolder:Exists()
            buildFolder:CreateDirectories()
        end

        classFile:SetWorkingDirectory(buildFolder:GetAbsolutePath())
        if not packageValue:IsEmpty()
            packagePath = packageValue:GetPath() 
            path = QUORUM + "/" + packagePath
        else
            path = QUORUM 
        end
        
        classFile:SetPath(path)
        classFile:CreateDirectories()
        classFile:SetPath(path + "/" + clazz:GetName() + ".class")
        classWriter:Write(classFile)
        buildFile = classFile

        if not clazz:IsError()
            File interfaceFile
            interfaceFile:SetWorkingDirectory(buildFolder:GetAbsolutePath())
            if not packageValue:IsEmpty()
                packagePath = packageValue:GetPath() 
                path = QUORUM + "/" + packagePath
            else
                path = QUORUM 
            end

            interfaceFile:SetPath(path + "/" + clazz:GetInterfaceName() + ".class")
            interfaceWriter:Write(interfaceFile)
            buildInterfaceFile = interfaceFile
        end
    end

    action WriteFieldDeclarations
        text null = undefined 

        text hiddenType = ""
        if clazz:IsError()
            hiddenType = clazz:ConvertStaticKeyToBytecodePathTypeName()
        else
            hiddenType = clazz:ConvertStaticKeyToBytecodePathTypeNameInterface()
        end
         
        JavaBytecodeFieldWriter hiddenField = classWriter:VisitField(opcodes:GetPublic(), 
            clazz:GetHiddenVariableName(), hiddenType, null, undefined)
        hiddenField:VisitEnd()

        //write parents in class
        Iterator<Class> parents = clazz:GetParentClasses()

        //initialize all of the parent objects as fields
        repeat while parents:HasNext()
            Class mom = parents:Next()
            text parentKey = mom:GetStaticKey()

            if parentKey not= QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR and not mom:IsObject()
                text parentName = mom:ConvertStaticKeyToParentFieldName()
                text converted = mom:ConvertStaticKeyToBytecodePathTypeName()
                JavaBytecodeFieldWriter momField = classWriter:VisitField(opcodes:GetPublic(),
                    parentName, converted, null, undefined)
                momField:VisitEnd()
            end
        end
        
        //write fields in class
        Iterator<Variable> fields = clazz:GetVariables()
        repeat while fields:HasNext()
            Variable variable = fields:Next()
            text varName = variable:GetName()
            Type type = variable:GetType()
            text typeKey = type:GetStaticKey()
            text converted = ""
            if not type:IsPrimitive()
                Class mom = symbolTable:GetClass(typeKey)
                if mom:IsError()
                    converted = type:ConvertTypeToBytecodeSignature()
                else
                    converted = type:ConvertTypeToBytecodeSignatureInterface()
                end
            else 
                converted = type:ConvertTypeToBytecodeSignatureInterface()
            end
            
            //write them as public. This doesn't really matter, because
            //at the bytecode level it doesn't provide any security anyway
            //as people can just rip it out with reflection
            JavaBytecodeFieldWriter field = classWriter:VisitField(opcodes:GetPublic(),
                varName, converted, null, undefined)
            field:VisitEnd()
        end

        if clazz:HasSystemAction()
            text converted = clazz:ConvertStaticKeyToPluginPathTypeName()
            
            //write them as public. This doesn't really matter, because
            //at the bytecode level it doesn't provide any security anyway
            //as people can just rip it out with reflection
            JavaBytecodeFieldWriter field = classWriter:VisitField(opcodes:GetPublic(),
                clazz:GetPluginName(), converted, null, undefined)
            field:VisitEnd()
        end

        //write the methods for the fields
        fields = clazz:GetVariables()
        repeat while fields:HasNext()
            Variable variable = fields:Next()

            text varName = variable:GetName()
            Type type = variable:GetType()
            text converted = type:ConvertTypeToBytecodeSignature()
            text hiddenGetterName = clazz:ConvertToActionNameFromField(variable, true)

            text hiddenGetterSignature = ""
            text hiddenSetterSignature = ""
            text bytecodeInterface = ""
            if not type:IsPrimitive()
                Class mom = symbolTable:GetClass(type:GetStaticKey())
                if mom:IsError()
                    hiddenGetterSignature = type:ConvertToSignatureFromField(true)
                    bytecodeInterface = type:ConvertTypeToBytecodeSignature()
                    hiddenSetterSignature = type:ConvertToSignatureFromField(false)
                else
                    hiddenGetterSignature = type:ConvertToSignatureFromFieldInterface(true)
                    bytecodeInterface = type:ConvertTypeToBytecodeSignatureInterface()
                    hiddenSetterSignature = type:ConvertToSignatureFromFieldInterface(false)
                end
            else
                hiddenGetterSignature = type:ConvertToSignatureFromFieldInterface(true)
                bytecodeInterface = type:ConvertTypeToBytecodeSignatureInterface()
                hiddenSetterSignature = type:ConvertToSignatureFromFieldInterface(false)
            end
            //do the getter in the interface file
            JavaBytecodeMethodWriter interfaceMethodWriter = 
                interfaceWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetAbstract(), 
                hiddenGetterName, hiddenGetterSignature, null, undefined)
            interfaceMethodWriter:VisitEnd() 

            //do the getter implementation
            //now generate the actual getter in the implementation class
            JavaBytecodeMethodWriter methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
                hiddenGetterName, hiddenGetterSignature, null, undefined)
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                
            methodWriter:VisitField(opcodes:GetField(), clazz:ConvertStaticKeyToBytecodePath(),
                variable:GetName(), bytecodeInterface)

            methodWriter:VisitInstruction(opcodes:GetReturnOpcode(type))
            methodWriter:VisitMaxSize(1,1)
            methodWriter:VisitEnd()


            //do the setter in the interface file
            text hiddenSetterName = clazz:ConvertToActionNameFromField(variable, false)
            //text hiddenSetterSignature = 

            interfaceMethodWriter = 
                interfaceWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetAbstract(), 
                hiddenSetterName, hiddenSetterSignature, null, undefined)
            interfaceMethodWriter:VisitEnd()


            //do the setter implementation
            methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
                hiddenSetterName, hiddenSetterSignature, null, undefined)
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                
            methodWriter:VisitVariable(opcodes:GetLoadOpcode(type), 1)
            methodWriter:VisitField(opcodes:PutField(), clazz:ConvertStaticKeyToBytecodePath(),
                variable:GetName(), bytecodeInterface)

            methodWriter:VisitInstruction(opcodes:GetReturn())
            methodWriter:VisitMaxSize(1,1)
            methodWriter:VisitEnd()
        end
    end

    action WriteMain
        //make a new method, if it exists. 
        text null = undefined
        methodWriter = 
        classWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetStatic(), 
            "main", "([Ljava/lang/String;)V", null, undefined)

        methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
        methodWriter:VisitField(opcodes:PutStaticField(), "plugins/quorum/Libraries/System/Console", "commandLineArguments", "[Ljava/lang/String;")
        text key = clazz:GetStaticKey()
        text bytecode = converter:ConvertStaticKeyToBytecodePath(key)
        
        //wrap this in a check detect block
        JavaBytecodeLabel checkStart
        JavaBytecodeLabel checkEnd
        JavaBytecodeLabel detectStart
        JavaBytecodeLabel fullEnd
        constant text THROWABLE = "java/lang/Throwable"

        methodWriter:VisitLabel(checkStart)
        //create the new object and place it on the stack
        methodWriter:VisitType(opcodes:GetNew(), bytecode)
        methodWriter:VisitInstruction(opcodes:GetDuplicate())
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), bytecode, "<init>", "()V", false)

        //store it in a variable and load it back on the stack
        methodWriter:VisitVariable(opcodes:GetObjectStore(), 1)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), 1)

        //if the class is static, place it in the primary store for statics. 
        if clazz:IsStatic()
            methodWriter:VisitConstant(clazz:GetStaticKey())
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 1)
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), "plugins/quorum/Libraries/Language/SharedClass", 
                "PutStaticClass", "(Ljava/lang/String;Ljava/lang/Object;)V", false)
        end

        //call a method on the object, its non-static main
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), bytecode,
            "Main", "()V", false)

        //end the check detect block
        methodWriter:VisitLabel(checkEnd)
        methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
        methodWriter:VisitLabel(detectStart)
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), "plugins/quorum/Libraries/Language/Errors/Error", "ConvertToQuorumError",
            "(Ljava/lang/Throwable;)Lquorum/Libraries/Language/Errors/Error;", false)
        
        //output the stack trace
        methodWriter:VisitVariable(opcodes:GetObjectStore(), 2)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), 2)
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), "quorum/Libraries/Language/Errors/Error", "OutputStackTrace",
            "()V", false)
        methodWriter:VisitTryCatchBlock(checkStart, checkEnd, detectStart, THROWABLE)

        methodWriter:VisitLabel(fullEnd)
        //close out the main method
        methodWriter:VisitInstruction(opcodes:GetReturn())
        methodWriter:VisitMaxSize(2,2)
        methodWriter:VisitEnd()
    end

    action ComputeConstructor(boolean isParent)
        text staticKey = clazz:GetStaticKey()
        text name = converter:ConvertStaticKeyToBytecodePath(staticKey)
        text parentName = "L" + name// + "_;"


        if staticKey = QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR or clazz:HasParentClass(QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR)
            parentName = parentName + ";"
        else 
            parentName = parentName + "_;"
        end

        text signature = ""
        if isParent
            signature = "()V"
        else
            signature = "(" + parentName + ")V"
        end

        //call the class's initialization function
        text null = undefined
        methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), "<init>", signature, null, undefined)
        methodWriter:VisitCode()
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)

        //handle inheritance with the error system
        text key = me:clazz:GetStaticKey()
        if key = QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), JAVA_THROWABLE, CONSTRUCTOR_JAVA_NAME, "()V", false)
        elseif clazz:HasParentClass(QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR)
            //JAVA_THROWABLE
            text errorKey = "L" + converter:ConvertStaticKeyToBytecodePath(QUORUM_ERROR) + ";"
            if not isParent
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), 1)
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), QUORUM_ERROR, CONSTRUCTOR_JAVA_NAME, "(" + "Lquorum/Libraries/Language/Errors/Error;" + ")V", false)
            else
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), QUORUM_ERROR, CONSTRUCTOR_JAVA_NAME, "()V", false)
            end
        else
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), JAVA_OBJECT, CONSTRUCTOR_JAVA_NAME, "()V", false)
        end

        //the object class inlines its plugin functionality and thus does not need a plugin.
        if clazz:HasSystemAction() and not clazz:IsObject()
            WritePlugin(methodWriter)
        end
        
        //setup a hidden variable with the me_ variable
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        if not isParent
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 1)
        else
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        end

        if not clazz:IsError()
            methodWriter:VisitField(opcodes:GetPutField(), clazz:ConvertStaticKeyToBytecodePath(),
                clazz:GetHiddenVariableName(), clazz:ConvertStaticKeyToBytecodePathTypeNameInterface())
        else
            methodWriter:VisitField(opcodes:GetPutField(), clazz:ConvertStaticKeyToBytecodePath(),
                clazz:GetHiddenVariableName(), clazz:ConvertStaticKeyToBytecodePathTypeName())
        end

        //initialize all of the parents
        if isParent
            WriteParents(methodWriter)
        end

        //write all of the fields
        WriteFields(methodWriter)

        //if any of the parents have constructors, call them.
        if isParent
            Iterator<Class> parents = clazz:GetParentCreationOrder()
            text classBytecodeName = converter:ConvertStaticKeyToBytecodePath(staticKey)


            //initialize all of the parent objects as fields
            repeat while parents:HasNext()
                Class p = parents:Next()
                text parentKey = p:GetStaticKey()
                if p:HasConstructor() and not p:IsObject() //ignore object
                    //load the Me pointer
                    methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                    //load the parent
                    text val = p:ConvertStaticKeyToParentFieldName()
                    methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), val, p:ConvertStaticKeyToBytecodePathTypeName())
                    //fire the constructor
                    methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), p:ConvertStaticKeyToBytecodePath(), "constructor_", "()V", false)
                end
            end
        end

        if clazz:HasConstructor() and isParent
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
            text sig = clazz:ConvertStaticKeyToBytecodePath()
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), sig, "constructor_", "()V", false)
        end
        
        methodWriter:VisitInstruction(opcodes:GetReturn())
        methodWriter:VisitMaxSize(1, 1)
        methodWriter:VisitEnd()

        //create a new fake constructor that can be called by another class

        if clazz:HasConstructor() and isParent
            JavaBytecodeMethodWriter methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), "constructor_", signature, null, undefined)
            constructor:SetMethodWriterToAllChildren(methodWriter)
            constructor:Write()
        end
    end

    private action WritePlugin(JavaBytecodeMethodWriter methodWriter)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        text converted = clazz:ConvertStaticKeyToPluginPath()
        text convertedSupplement = clazz:ConvertStaticKeyToPluginPathTypeName()
        methodWriter:VisitType(opcodes:GetNew(), converted)
        methodWriter:VisitInstruction(opcodes:GetDuplicate())
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), converted, CONSTRUCTOR_JAVA_NAME, "()V", false)
        methodWriter:VisitField(opcodes:GetPutField(), clazz:ConvertStaticKeyToBytecodePath(), clazz:GetPluginName(), convertedSupplement)

        //now load the current object into the plugin, in case it needs it
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), clazz:GetPluginName(), convertedSupplement)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        methodWriter:VisitField(opcodes:GetPutField(), converted, "me_", "Ljava/lang/Object;")
    end

    private action WriteParents(JavaBytecodeMethodWriter methodWriter)
        Iterator<Class> parents = clazz:GetParentCreationOrder()
        text classBytecodeName = converter:ConvertStaticKeyToBytecodePath(staticKey)
        

        //initialize all of the parent objects as fields
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()
            if parentKey not= QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR and not p:IsObject()
                text parentName = p:ConvertStaticKeyToParentFieldName()
                text converted = p:ConvertStaticKeyToBytecodePath()
                text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                methodWriter:VisitType(opcodes:GetNew(), converted)
                methodWriter:VisitInstruction(opcodes:GetDuplicate())

                //push false on the parents and call a separate constructor
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                text convertedConstructorParentName = "L" + converted + "_;"
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), converted, CONSTRUCTOR_JAVA_NAME, "(" + convertedConstructorParentName + ")V", false)
                methodWriter:VisitField(opcodes:GetPutField(), classBytecodeName, parentName, convertedParentNameType)
            end
        end
        
        //now that all parents have been instantiated, get 
        //their parents and set them appropriately
        parents = clazz:GetParentCreationOrder()
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()
            if parentKey not= QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR and not p:IsObject()
                text parentName = p:ConvertStaticKeyToParentFieldName()
                text convertedParentName = p:ConvertStaticKeyToBytecodePath()
                text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()

                Iterator<Class> grandParents = p:GetParentClasses()
                repeat while grandParents:HasNext()
                    //In Quorum-11, object is ignored.
                    Class grandParent = grandParents:Next()
                    if not grandParent:IsObject()
                        text grandParentKey = grandParent:GetStaticKey()
                        text grandParentName = grandParent:ConvertStaticKeyToParentFieldName()
                        text convertedGrandParent = grandParent:ConvertStaticKeyToBytecodePathTypeName()
    
                        //now load the same parents into the grand parents
                        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                        methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), parentName, convertedParentNameType)
                        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                        methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), grandParentName, convertedGrandParent)
                        methodWriter:VisitField(opcodes:GetPutField(), convertedParentName, grandParentName, convertedGrandParent)
                    end
                end
            end
        end
    end

    action WriteFields (JavaBytecodeMethodWriter methodWriter)
        Iterator<QuorumOpcode> fieldIterator = fields:GetIterator()
        repeat while fieldIterator:HasNext()
            QuorumOpcode field = fieldIterator:Next()
            field:SetMethodWriterToAllChildren(methodWriter)
            field:Write()
        end
    end

    action WriteJavaScriptPlugin returns text
        EOL = ""
        quote = EOL:GetDoubleQuote()
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        TAB = "    "
        text convertedSource = ""

        convertedSource = convertedSource + "function "
            + "plugins_" + clazz:ConvertStaticKeyToUnderScore() + "() {" + EOL

        Iterator<ActionOpcode> actionIterator = actions:GetIterator()
        repeat while actionIterator:HasNext()
            ActionOpcode act = actionIterator:Next()
            Action myAction = act:GetAction()
            if myAction:IsSystem()
                convertedSource = convertedSource + TAB + "this." + myAction:ConvertActionToJavaScriptName()
                    + " = function(" 

                Iterator<Variable> parameters = myAction:GetParameterIterator()
                repeat while parameters:HasNext()
                    Variable variable = parameters:Next()
                    convertedSource = convertedSource + variable:GetPythonName()

                    if parameters:HasNext()
                        convertedSource = convertedSource + ", "
                    end
                end

                convertedSource = convertedSource + ") {" + EOL + EOL + TAB + "};" + EOL
            end
        end

        convertedSource = convertedSource + "}" + EOL
        return convertedSource
    end
    
    action WritePython returns text
        EOL = ""
        quote = EOL:GetDoubleQuote()
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        constant text TAB = EOL:GetTab()

        TranslateConstants constants
        constants:ResetTabs()
        text tabs = constants:GetTabText()
        text tab = tabs:GetTab()
        constants:SetClass(clazz)

        TextBuilder convertedSource
//        if clazz:IsProgramStartingClass()
//            convertedSource:Append("var " + OUTPUT_VARIABLE + " = " + quote + quote + ";" + EOL)
//        end
        convertedSource:Append(EOL + "class "
            + clazz:ConvertStaticKeyToUnderScore())// + "(parents") 

        //if this is a primitive wrapper, put in the wrapping code
        text value = clazz:GetStaticKey()
        if value = "Libraries.Language.Types.Integer"
            or value = "Libraries.Language.Types.Boolean"
            or value = "Libraries.Language.Types.Number"
            or value = "Libraries.Language.Types.Text"
//            convertedSource:Append(", optional") //not sure here yet
        end

        Type errorType
        boolean hasErrorParent = clazz:HasParentClass(errorType:ERROR_KEY)
        if clazz:GetStaticKey() = errorType:ERROR_KEY
            convertedSource:Append("(Exception)")
        elseif clazz:IsError() //error or a subclass.
            convertedSource:Append("(quorum_Libraries_Language_Errors_Error_)")
        end
        convertedSource:Append(":" + EOL)

        //write the parents
//        convertedSource:Append("this.parentNames_ = [")
        Iterator<Class> parents = clazz:GetParentClasses()
//        repeat while parents:HasNext()
//            Class p = parents:Next()
//            text parentKey = p:GetStaticKey()
//            convertedSource:Append("'" + parentKey + "', ")
//        end
//        convertedSource:Append(" '" + clazz:GetStaticKey() + "'];" + EOL)
//        
//        text classBytecodeName = converter:ConvertStaticKeyToBytecodePath(staticKey)
//
//        parents = clazz:GetParentClasses()
//        //initialize all of the parent objects as nulls
//        repeat while parents:HasNext()
//            Class p = parents:Next()
//            //In Quorum-11, we ignore the parent object
//            if not p:IsObject()
//                text parentKey = p:GetStaticKey()
//                text parentName = p:ConvertStaticKeyToParentFieldName()
//                convertedSource:Append("this." + parentName + " = null;" + EOL)
//            end
//        end
//        
//        if clazz:IsObject()
//            convertedSource:Append("this.myHash = 0;" + EOL)
//        end
//
        if clazz:HasConstructor()
            constants:IncreaseTab()
            convertedSource:Append(constructor:WritePython())
            constants:DecreaseTab()
        end

        Iterator<Action> it = clazz:GetParentActions()
        text tempParentActions = ""
        repeat while it:HasNext()
            Action act = it:Next()
            text thisParentAction = ""
            Class parentOfMethod = act:GetParentClass()
            thisParentAction = thisParentAction + tab + "def " + act:ConvertActionToPythonName()
                + "(self"

            Iterator<Variable> params = act:GetParameterIterator()
            repeat while params:HasNext()
                Variable param = params:Next()
                thisParentAction = thisParentAction + ", " + param:GetPythonName()
            end

            boolean dontWrapParams = false
            if not parentOfMethod:IsObject()
                thisParentAction = thisParentAction + "):" + EOL
                    + tab + tab + "return self." + parentOfMethod:ConvertStaticKeyToParentFieldName() + "." 
            else 
                //call one of the global functions
                thisParentAction = thisParentAction  + "):" + EOL
                dontWrapParams = true
                if act:GetName() = "Equals"
                    thisParentAction = thisParentAction  + tab + tab + "return (hash(self) == hash(object))" + EOL
                elseif act:GetName() = "GetHashCode"
                    thisParentAction = thisParentAction  + tab + tab + "return hash(self)" + EOL
                elseif act:GetName() = "Compare"
                    thisParentAction = thisParentAction  + tab + tab + 
                    "if hash(self) == hash(object):" + EOL
                    + tab + tab + tab + "return 0" + EOL
                    + tab + tab + "elif hash(self) > hash(object):" + EOL
                    + tab + tab + tab + "return 1" + EOL
                    + tab + tab + "else:" + EOL
                    + tab + tab + tab + "return -1" + EOL
                end
            end

            text paramListText = ""
            if not dontWrapParams
                //if this is a parent object call, wrap in the this.prototype
                if not parentOfMethod:IsObject()
                    paramListText = act:ConvertActionToPythonName() + "("
                end
    
                params = act:GetParameterIterator()
                repeat while params:HasNext()
                    Variable param = params:Next()
                    paramListText = paramListText + param:GetPythonName()
                    if params:HasNext()
                        paramListText = paramListText + ", "
                    end
                end
    
                paramListText = paramListText + ")"
                thisParentAction = thisParentAction + paramListText
                      + EOL 
                      + EOL
            end
            convertedSource:Append(thisParentAction)
        end

        constants:IncreaseTab()
        Iterator<ActionOpcode> actionIterator = actions:GetIterator()
        repeat while actionIterator:HasNext()
            ActionOpcode act = actionIterator:Next()
            convertedSource:Append(act:WritePython())
        end
        
        //write the actions for the fields
        Iterator<Variable> fieldVariableIterator = clazz:GetVariables()
        repeat while fieldVariableIterator:HasNext()
            Variable variable = fieldVariableIterator:Next()

            text varName = variable:GetName()
            Type type = variable:GetType()
            text converted = type:ConvertTypeToBytecodeSignature()
            text hiddenGetterName = clazz:ConvertToActionNameFromField(variable, true)

            convertedSource:Append(tab + "def " + hiddenGetterName + "(self):" + EOL)
            convertedSource:Append(tab + tab + "return self." + variable:GetPythonName() + EOL)
            
            text hiddenSetterName = clazz:ConvertToActionNameFromField(variable, false)
            convertedSource:Append(tab + "def " + hiddenSetterName + "(self, value):" + EOL)
            convertedSource:Append(tab + tab + "self." + variable:GetPythonName() + " = value" + EOL)
        end
//
        //write the actions for parent fields
        if not clazz:IsError() //errors are special, don't write these
            text tempGetterSetter = ""
            Iterator<Class> parentClasses = clazz:GetParentClasses()
            repeat while parentClasses:HasNext()
                Class p = parentClasses:Next()
                if not p:IsObject() //Not for objects in Quorum-11
                    text parentKey = p:GetStaticKey()
                    Iterator<Variable> parentFieldIterator = p:GetVariables()
                    repeat while parentFieldIterator:HasNext()
                        Variable variable = parentFieldIterator:Next()
                        Type type = variable:GetType()
                        text getter = p:ConvertToActionNameFromField(variable, true)
                        text setter = p:ConvertToActionNameFromField(variable, false)
    
                        text thisTempGetterSetter = ""
                        //the getter
                        thisTempGetterSetter = tab + "def " + getter + "(self):" + EOL
                             + tab + tab + "return self." + p:ConvertStaticKeyToParentFieldName() + "." + getter + "()" + EOL + EOL
    
                        //the setter
                        thisTempGetterSetter = thisTempGetterSetter + tab + "def " + setter + "(self, value):" + EOL
                             + tab + tab + "self." + p:ConvertStaticKeyToParentFieldName() + "." + setter + "(value)" + EOL
                             + EOL

                        tempGetterSetter = tempGetterSetter + thisTempGetterSetter
                    end
                end
            end

            if not tempGetterSetter:IsEmpty()
                convertedSource:Append(tempGetterSetter)
            end
        end

        //Add an initialization area for fields and parents in python mode
        if value = "Libraries.Language.Types.Integer"
            convertedSource:Append(tab + "def __init__(self, parents = 0, value = 0):" + EOL)
        elseif value = "Libraries.Language.Types.Boolean"
            //add helpers for the type to manage its operations as objects
            convertedSource:Append(tab + "def __bool__(self):" + EOL)
            convertedSource:Append(tab + tab + "return self.value" + EOL)
//            convertedSource:Append(tab + "def __invert__(self):" + EOL)
//            convertedSource:Append(tab + tab + "return Bool_(not self.value)" + EOL)
//            convertedSource:Append(tab + "def __ne__(self, other):" + EOL)
//            convertedSource:Append(tab + tab + "return Bool_(self.value != other.value)" + EOL)
//            convertedSource:Append(tab + "def __eq__(self, other):" + EOL)
//            convertedSource:Append(tab + tab + "return Bool_(self.value == other.value)" + EOL)
//            convertedSource:Append(tab + "def __and__(self, other):" + EOL)
//            convertedSource:Append(tab + tab + "return Bool_(self.value and other.value)" + EOL)
//            convertedSource:Append(tab + "def __or__(self, other):" + EOL)
//            convertedSource:Append(tab + tab + "return Bool_(self.value or other.value)" + EOL)
//            convertedSource:Append(tab + "def __repr__(self):" + EOL)
//            convertedSource:Append(tab + tab + "return repr(self.value).lower()" + EOL + EOL)

            //add an init area
            convertedSource:Append(tab + "def __init__(self, parents = 0, value = False):" + EOL)
        elseif value = "Libraries.Language.Types.Number"
            convertedSource:Append(tab + "def __init__(self, parents = 0, value = 0.0):" + EOL)
        elseif value = "Libraries.Language.Types.Text"
            convertedSource:Append(tab + "def __init__(self, parents = 0, value = ''):" + EOL)
        elseif clazz:IsError()
            convertedSource:Append(tab + "def __init__(self, parents = 0, message='', errors=None):" + EOL)
        elseif clazz:IsObject()
            convertedSource:Append(tab + "def __init__(self, parents = 0):" + EOL)
            convertedSource:Append(tab + tab + "self.myHash = hash(self)" + EOL)
        else
            convertedSource:Append(tab + "def __init__(self, parents = 0):" + EOL)
        end
        
        convertedSource:Append(tab + tab + "self.me_ = self" + EOL)
        


        boolean hasFieldOrParent = false

        //initialize all of the parent objects as values, if appropriate
        parents = clazz:GetParentCreationOrder()
        if parents:HasNext()
            if clazz:GetParentSize() > 1 //more than object
                convertedSource:Append(tab + tab + "if parents == 0:" + EOL) 
            end
            
            repeat while parents:HasNext()
                Class p = parents:Next()
                if not p:IsObject()
                    text parentKey = p:GetStaticKey()
                    text parentName = p:ConvertStaticKeyToParentFieldName()
                    convertedSource:Append(tab + tab + tab + "self." + parentName + " = " 
                        + p:ConvertStaticKeyToJavaScriptName() + "(0)" + EOL)
                end
            end
        end

        //now that all parents have been instantiated, get 
        //their parents and set them appropriately
        parents = clazz:GetParentCreationOrder()
        repeat while parents:HasNext()
            Class p = parents:Next()
            if not p:IsObject() //Not in Quorum-11
                text parentKey = p:GetStaticKey()
                text parentName = p:ConvertStaticKeyToParentFieldName()
                text convertedParentName = p:ConvertStaticKeyToBytecodePath()
                text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()
    
                Iterator<Class> grandParents = p:GetParentClasses()
                repeat while grandParents:HasNext()
                    Class grandParent = grandParents:Next()
                    text grandParentKey = grandParent:GetStaticKey()
                    text grandParentName = grandParent:ConvertStaticKeyToParentFieldName()
                    text convertedGrandParent = grandParent:ConvertStaticKeyToBytecodePathTypeName()
                    
                    if not p:IsObject() and not grandParent:IsObject()
                    convertedSource:Append(tab + tab + tab + "self." + parentName + "." + grandParentName + 
                        " = self." +  grandParentName + EOL)
                    end

                    if not p:IsObject() 
                        convertedSource:Append(tab + tab + tab + "self." + parentName 
                            + ".me_ = self"  + EOL)
                    end
                end
            end
        end

        

        if clazz:HasSystemAction() //this has a plugin, so instantiate it.
            //if this is a primitive wrapper, pass the actual primitive
            if clazz:GetStaticKey() = "Libraries.Language.Types.Boolean" or
               clazz:GetStaticKey() = "Libraries.Language.Types.Integer" or
               clazz:GetStaticKey() = "Libraries.Language.Types.Number" or
               clazz:GetStaticKey() = "Libraries.Language.Types.Text"
               convertedSource:Append(tab + tab + "self." + clazz:GetPluginName() + 
                    " = " + "plugins_" +  clazz:ConvertStaticKeyToUnderScore() + "(value)" + EOL)
            else 
                if not clazz:IsObject()
                    convertedSource:Append(tab + tab + "self." + clazz:GetPluginName() + 
                        " = " + "plugins_" +  clazz:ConvertStaticKeyToUnderScore() + "()" + EOL)
                end
            end
        end

        constants:IncreaseTab()
        Iterator<QuorumOpcode> fieldIterator = fields:GetIterator()
        repeat while fieldIterator:HasNext()
            QuorumOpcode field = fieldIterator:Next()
            convertedSource:Append(field:WritePython())
        end
        constants:DecreaseTab()

        if  clazz:GetStaticKey() = "Libraries.Language.Types.Boolean" or
            clazz:GetStaticKey() = "Libraries.Language.Types.Integer" or
            clazz:GetStaticKey() = "Libraries.Language.Types.Number" or
            clazz:GetStaticKey() = "Libraries.Language.Types.Text"
            convertedSource:Append(tab + tab + "self.value = value" + EOL)
        end

        if clazz:IsError()
            convertedSource:Append(tab + tab + "super().__init__(message)" + EOL)
            convertedSource:Append(tab + tab + "self.errorMessage = message" + EOL)
        end

        convertedSource:Append(tab + tab + "self.inheritance_ = {")
        parents = clazz:GetParentClasses()
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()
            convertedSource:Append("'" + parentKey + "', ")
        end
        convertedSource:Append(" '" + clazz:GetStaticKey() + "'}" + EOL)

        //now that all of the parents have had their parent's set, 
        //call their constructors. Only if there's at least one non-object parent.
        if clazz:GetParentSize() > 1
            boolean atLeastOneConstructor = false
            text temp = EOL + tab + tab + "if parents > 0:" + EOL
            parents = clazz:GetParentCreationOrder()
            repeat while parents:HasNext()
                Class p = parents:Next()
                if not p:IsObject()
                    text parentKey = p:GetStaticKey()
                    text parentName = p:ConvertStaticKeyToParentFieldName()
        
                    if p:HasConstructor()
                        atLeastOneConstructor = true
                        temp = temp + tab + tab + tab + "self." + parentName + ".constructor_();" + EOL
                    end
                end
            end
            if atLeastOneConstructor
                convertedSource:Append(temp)
            end
        end

        //if this class has a null parents flag, call its constructor
        if clazz:HasConstructor()
            convertedSource:Append(tab + tab + "if parents == 0:" + EOL)
            convertedSource:Append(tab + tab + tab + "self.constructor_()" + EOL)
        end

        //in the case where there are no parents or fields, make this a dummy action
        convertedSource:Append(tab + tab + "return" + EOL)

        boolean async = constants:IsUserCodeAsynchronous()
        if clazz:IsProgramStartingClass()

            if async
                convertedSource:Append(EOL + EOL + "async def SuperMain():" + EOL)
            else
                convertedSource:Append(EOL + "def SuperMain():" + EOL)
            end
            
            if clazz:IsStatic()
                convertedSource:Append(tab + "starter_______ = " +
                    "Global_Add_Shared_Class("+quote +clazz:GetStaticKey() + quote + ", "+clazz:ConvertStaticKeyToUnderScore()+"()) " +
                    "if Global_Get_Shared_Class(" +quote+ clazz:GetStaticKey()+ quote+ ") == None " + 
                    "else Global_Get_Shared_Class("+quote+clazz:GetStaticKey()+quote+")" + EOL)
            else
                convertedSource:Append(tab + "starter_______ = " + clazz:ConvertStaticKeyToUnderScore() + "()" + EOL)
            end

            if async
                convertedSource:Append(tab + "await starter_______.Main()" + EOL + EOL)
            else
                convertedSource:Append(tab + "starter_______.Main()" + EOL + EOL)
            end

            if async
                convertedSource:Append("import runloop" + EOL)
            end
            convertedSource:Append("if __name__ == '__main__':" + EOL)
            if async
                convertedSource:Append(tab + "runloop.run(SuperMain())" + EOL)
            else 
                convertedSource:Append(tab + "SuperMain()" + EOL)
            end
        end

        
        return convertedSource:ToText()
    end

    action WriteJavaScript returns text
        constant text OUTPUT_VARIABLE = "OuTpUt_$tRiNg_"
        EOL = ""
        quote = EOL:GetDoubleQuote()
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        
        
        TextBuilder convertedSource
        TextBuilder fakeConstructor
        //text convertedSource = ""
        if clazz:IsProgramStartingClass()
            convertedSource:Append("var " + OUTPUT_VARIABLE + " = " + quote + quote + ";" + EOL)
        end

        boolean user = clazz:IsUserCode()
        if not user
            convertedSource:Append(EOL + "class "
                + clazz:ConvertStaticKeyToUnderScore()) 
        else
            convertedSource:Append(EOL + "var " + clazz:ConvertStaticKeyToUnderScore() + 
                " = class") 
        end

        convertedSource:Append(" {" + EOL)
        fakeConstructor:Append("constructor(parents")
//if this is a primitive wrapper, put in the wrapping code
        text value = clazz:GetStaticKey()
        if value = "Libraries.Language.Types.Integer"
            or value = "Libraries.Language.Types.Boolean"
            or value = "Libraries.Language.Types.Number"
            or value = "Libraries.Language.Types.Text"
            fakeConstructor:Append(", optional) {" + EOL)
        else
            fakeConstructor:Append(") {"+ EOL)
        end
        
        
        //Not sure if I need to do this in this version yet
        fakeConstructor:Append("this.prototype = this;" + EOL)

        //write the parents
        fakeConstructor:Append("this.parentNames_ = [")
        Iterator<Class> parents = clazz:GetParentClasses()
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()
            fakeConstructor:Append("'" + parentKey + "', ")
        end
        fakeConstructor:Append(" '" + clazz:GetStaticKey() + "'];" + EOL)
        
        text classBytecodeName = converter:ConvertStaticKeyToBytecodePath(staticKey)

        parents = clazz:GetParentClasses()
        //initialize all of the parent objects as nulls
        repeat while parents:HasNext()
            Class p = parents:Next()
            //In Quorum-11, we ignore the parent object
            if not p:IsObject()
                text parentKey = p:GetStaticKey()
                text parentName = p:ConvertStaticKeyToParentFieldName()
                fakeConstructor:Append("this." + parentName + " = null;" + EOL)
            end
        end
        
        if clazz:IsObject()
            fakeConstructor:Append("this.myHash = 0;" + EOL)
        end

        if clazz:HasConstructor()
            convertedSource:Append(constructor:WriteJavaScript())
        end

        Iterator<Action> it = clazz:GetParentActions()
        text tempParentActions = ""
        repeat while it:HasNext()
            Action act = it:Next()
            text thisParentAction = ""
            Class parentOfMethod = act:GetParentClass()
            thisParentAction = thisParentAction + act:ConvertActionToJavaScriptName()
                + "("

            Iterator<Variable> params = act:GetParameterIterator()
            repeat while params:HasNext()
                Variable param = params:Next()
                thisParentAction = thisParentAction + param:GetJavaScriptName()
                if params:HasNext()
                    thisParentAction = thisParentAction + ", "
                end
            end

            if not parentOfMethod:IsObject()
                thisParentAction = thisParentAction + ") {" + EOL
                    + "     return this." + parentOfMethod:ConvertStaticKeyToParentFieldName() + "." 
            else 
                //call one of the global functions
                thisParentAction = thisParentAction  + ") {" + EOL
                if act:GetName() = "Equals"
                    thisParentAction = thisParentAction  + "return global_Object_Equals(this.prototype, "
                elseif act:GetName() = "GetHashCode"
                    thisParentAction = thisParentAction  + "return global_Object_GetHashCode(this.prototype, "
                elseif act:GetName() = "Compare"
                    thisParentAction = thisParentAction  + "return global_Object_Compare(this.prototype, "
                end
            end

            text paramListText = ""

            //if this is a parent object call, wrap in the this.prototype
            if not parentOfMethod:IsObject()
                paramListText = act:ConvertActionToJavaScriptName() + "("
            end

            params = act:GetParameterIterator()
            repeat while params:HasNext()
                Variable param = params:Next()
                paramListText = paramListText + param:GetJavaScriptName()
                if params:HasNext()
                    paramListText = paramListText + ", "
                end
            end

            paramListText = paramListText + ");"
            thisParentAction = thisParentAction + paramListText
                  + EOL 
                + "}" + EOL
            
            convertedSource:Append(thisParentAction)
        end

        Iterator<ActionOpcode> actionIterator = actions:GetIterator()
        repeat while actionIterator:HasNext()
            ActionOpcode act = actionIterator:Next()
            convertedSource:Append(act:WriteJavaScript())
        end
        
        //write the actions for the fields
        Iterator<Variable> fieldVariableIterator = clazz:GetVariables()
        repeat while fieldVariableIterator:HasNext()
            Variable variable = fieldVariableIterator:Next()

            text varName = variable:GetName()
            Type type = variable:GetType()
            text converted = type:ConvertTypeToBytecodeSignature()
            text hiddenGetterName = clazz:ConvertToActionNameFromField(variable, true)

            convertedSource:Append(hiddenGetterName + "() {" + EOL)
            convertedSource:Append("   return this." + variable:GetJavaScriptName() + ";" + EOL)
            convertedSource:Append("};" + EOL)
            
            text hiddenSetterName = clazz:ConvertToActionNameFromField(variable, false)
            convertedSource:Append(hiddenSetterName + "(value) {" + EOL)
            convertedSource:Append("   this." + variable:GetJavaScriptName() + " = value;" + EOL)
            convertedSource:Append("};" + EOL)
        end

        //write the actions for parent fields
        if not clazz:IsError() //errors are special, don't write these
            text tempGetterSetter = ""
            Iterator<Class> parentClasses = clazz:GetParentClasses()
            repeat while parentClasses:HasNext()
                Class p = parentClasses:Next()
                if not p:IsObject() //Not for objects in Quorum-11
                    text parentKey = p:GetStaticKey()
                    Iterator<Variable> parentFieldIterator = p:GetVariables()
                    repeat while parentFieldIterator:HasNext()
                        Variable variable = parentFieldIterator:Next()
                        Type type = variable:GetType()
                        text getter = p:ConvertToActionNameFromField(variable, true)
                        text setter = p:ConvertToActionNameFromField(variable, false)
    
                        text thisTempGetterSetter = ""
                        //the getter
                        thisTempGetterSetter = getter + "() {" + EOL
                             + "   return this." + p:ConvertStaticKeyToParentFieldName() + "." + getter + "();" + EOL
                             + "};" + EOL
    
                        //the setter
                        thisTempGetterSetter = thisTempGetterSetter + setter + "(value) {" + EOL
                             + "   this." + p:ConvertStaticKeyToParentFieldName() + "." + setter + "(value);" + EOL
                             + "};" + EOL

                        tempGetterSetter = tempGetterSetter + thisTempGetterSetter
                    end
                end
            end

            if not tempGetterSetter:IsEmpty()
                convertedSource:Append(tempGetterSetter)
            end
        end

        //initialize all of the parent objects as values, if appropriate
        fakeConstructor:Append("if(parents == null) {" + EOL)
        parents = clazz:GetParentCreationOrder()
        repeat while parents:HasNext()
            Class p = parents:Next()
            if not p:IsObject()
                text parentKey = p:GetStaticKey()
                text parentName = p:ConvertStaticKeyToParentFieldName()
                fakeConstructor:Append("   this." + parentName + " = new " 
                    + p:ConvertStaticKeyToJavaScriptName() + "(false);" + EOL)
            end
        end

        //now that all parents have been instantiated, get 
        //their parents and set them appropriately
        parents = clazz:GetParentCreationOrder()
        repeat while parents:HasNext()
            Class p = parents:Next()
            if not p:IsObject() //Not in Quorum-11
                text parentKey = p:GetStaticKey()
                text parentName = p:ConvertStaticKeyToParentFieldName()
                text convertedParentName = p:ConvertStaticKeyToBytecodePath()
                text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()
    
                Iterator<Class> grandParents = p:GetParentClasses()
                repeat while grandParents:HasNext()
                    Class grandParent = grandParents:Next()
                    text grandParentKey = grandParent:GetStaticKey()
                    text grandParentName = grandParent:ConvertStaticKeyToParentFieldName()
                    text convertedGrandParent = grandParent:ConvertStaticKeyToBytecodePathTypeName()
                    
                    if not p:IsObject() and not grandParent:IsObject()
                    fakeConstructor:Append("   this." + parentName + "." + grandParentName + 
                        " = this." +  grandParentName + ";" + EOL)
                    end

                    if not p:IsObject() 
                        fakeConstructor:Append("   this." + parentName 
                            + ".prototype = this;"  + EOL)
                    end
                end
            end
        end

        fakeConstructor:Append("}" + EOL)

        if clazz:HasSystemAction() //this has a plugin, so instantiate it.
            //if this is a primitive wrapper, pass the actual primitive
            if clazz:GetStaticKey() = "Libraries.Language.Types.Boolean" or
               clazz:GetStaticKey() = "Libraries.Language.Types.Integer" or
               clazz:GetStaticKey() = "Libraries.Language.Types.Number" or
               clazz:GetStaticKey() = "Libraries.Language.Types.Text"
               fakeConstructor:Append("this." + clazz:GetPluginName() + 
                    " = new " + "plugins_" +  clazz:ConvertStaticKeyToUnderScore() + "(optional, this);" + EOL)
            else 
                if not clazz:IsObject()
                    fakeConstructor:Append("this." + clazz:GetPluginName() + 
                        " = new " + "plugins_" +  clazz:ConvertStaticKeyToUnderScore() + "(this);" + EOL)
                end
            end
        end

        Iterator<QuorumOpcode> fieldIterator = fields:GetIterator()
        repeat while fieldIterator:HasNext()
            QuorumOpcode field = fieldIterator:Next()
            fakeConstructor:Append(field:WriteJavaScript())
        end

        //now that all of the parents have had their parent's set, 
        //call their constructors.
        fakeConstructor:Append(EOL + "if(parents == null) {" + EOL)
        parents = clazz:GetParentCreationOrder()
        repeat while parents:HasNext()
            Class p = parents:Next()
            if not p:IsObject()
                text parentKey = p:GetStaticKey()
                text parentName = p:ConvertStaticKeyToParentFieldName()
    
                if p:HasConstructor()
                    fakeConstructor:Append("this." + parentName + ".constructor_();" + EOL)
                end
            end
        end
        fakeConstructor:Append("}" + EOL)

        //if this class has a null parents flag, call its constructor
        if clazz:HasConstructor()
            fakeConstructor:Append("if (parents == null) {this.constructor_();}" + EOL)
        end

        if value = "Libraries.Language.Types.Integer"
            fakeConstructor:Append("this.value = optional == null ? 0: optional;")
        elseif value = "Libraries.Language.Types.Boolean"
            fakeConstructor:Append("this.value = optional == null ? false: optional;")
        elseif value = "Libraries.Language.Types.Number"
            fakeConstructor:Append("this.value = optional == null ? 0.0: optional;")
        elseif value = "Libraries.Language.Types.Text"
            fakeConstructor:Append("this.value = optional == null ? " + quote + quote + ": optional;")
        end

        //All objects need a global hash now, not just the parent. This makes the file larger,
        //but should save on memory.
        //if clazz:IsObject()
        fakeConstructor:Append("this.myHash = globalStaticHash;" + EOL)
        fakeConstructor:Append("globalStaticHash = globalStaticHash + 1;" + EOL)
        //end
        
        fakeConstructor:Append("}" + EOL)
        fakeConstructor:Append(EOL + "};" + EOL)

        convertedSource:Append(EOL + fakeConstructor:ToText() + EOL)
        if clazz:IsProgramStartingClass()
            convertedSource:Append("var $starter;")
            convertedSource:Append("function Start(){" + EOL)

            if clazz:IsStatic()
                convertedSource:Append("$starter = " +
                    "(global_Get_Shared_Class(" + quote + clazz:GetStaticKey() + quote +
                    ") == null ? global_Add_Shared_Class("+quote+clazz:GetStaticKey()+quote+
                    ", new "+clazz:ConvertStaticKeyToUnderScore()+"()) : global_Get_Shared_Class("+quote+clazz:GetStaticKey()+quote+"));"
                    + EOL)
            else
                convertedSource:Append("$starter = new " + 
                    clazz:ConvertStaticKeyToUnderScore() + "();" + EOL)
            end
            
            convertedSource:Append("$starter.Main();" + EOL)
            convertedSource:Append(OUTPUT_VARIABLE + ";" + EOL)
            convertedSource:Append("}" + EOL)

            convertedSource:Append("function Stop(){" + EOL)
            convertedSource:Append("   var manager = new quorum_Libraries_Game_GameStateManager_();" + EOL)
            convertedSource:Append("   var game = manager.GetGame();" + EOL)
            convertedSource:Append("   if ((game != null)) {" + EOL)
            convertedSource:Append("       game.Exit();" + EOL)
            convertedSource:Append("   }" + EOL)
            convertedSource:Append("   else if (typeof plugins_quorum_Libraries_Sound_Audio_ === " + quote + "function" + quote + " && typeof plugins_quorum_Libraries_Sound_Audio_.StopAllSources === " + quote + "function" + quote + ") {" + EOL)
            convertedSource:Append("       plugins_quorum_Libraries_Sound_Audio_.StopAllSources();" + EOL)
            convertedSource:Append("   }" + EOL)
            convertedSource:Append("   global_Empty_Shared_Classes();" + EOL)
            convertedSource:Append("}" + EOL)
        end

        
        return convertedSource:ToText()
    end

    action GetTemplateCopy returns QuorumOpcode
        ClassOpcode op
        return op
    end
end
