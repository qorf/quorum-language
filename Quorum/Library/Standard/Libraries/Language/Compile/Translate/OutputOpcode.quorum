package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.List
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes

class OutputOpcode is QuorumOpcode
    QuorumOpcode opcode = undefined
    JavaBytecodeOpcodes opcodes
    QuorumBytecodeConverter converter
    
    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        if opcode not= undefined
            opcode:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        if opcode not= undefined
            opcode:SetMethodWriterToAllChildren(writer)
        end
    end

    action GetOpcode returns QuorumOpcode
        return opcode
    end

    action SetOpcode(QuorumOpcode op)
        opcode = op
    end

    action Write
        VisitLineNumber()
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitField(opcodes:GetStaticField(), "java/lang/System", "out", "Ljava/io/PrintStream;")
        Type type = opcode:GetType()
        opcode:Write()
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), "java/io/PrintStream", "println",
                "(" + converter:ConvertTypeToBytecodeSignature(type) + ")V", false)
    end

    action WritePython returns text
        EOL = ""
        quote = EOL:GetDoubleQuote()
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        TranslateConstants constants
        text tabs = constants:GetTabText()

        opcodeResult = opcode:WritePython()
        text result = ""
        Type type = opcode:GetType()
        if type:IsBoolean()
            result = tabs + "print(Global_Cast_Boolean_To_Text(" + opcodeResult + "))" + EOL
        elseif type:IsNumber()
            result = tabs + "print(Global_Cast_Number_To_Text(" + opcodeResult + "))" + EOL
        else
            result = tabs + "print(" + opcodeResult + ")" + EOL
        end
        return result
    end

    action WriteJavaScript returns text
        constant text OUTPUT_VARIABLE = "OuTpUt_$tRiNg_"
        EOL = ""
        quote = EOL:GetDoubleQuote()
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        opcodeResult = opcode:WriteJavaScript()
        text result = ""
        Type theReturn = opcode:GetType()
        //due to Javascript's defaults, we need to change the behavior under these conditions
        if theReturn:IsNumber()
            text illegal = "illegal_" //JS6 redefine it every time. Weird.
            result = result + "var " + illegal + " = "+ opcodeResult + ";" + EOL
            result = result + "global_Output_((global_number_converter_(" + illegal + ")));" + EOL
        else 
            result = "global_Output_(" + opcodeResult + ");" + EOL
        end
        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        OutputOpcode op
        return op
    end
end