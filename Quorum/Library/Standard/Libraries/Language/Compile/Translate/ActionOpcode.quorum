package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.List
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes
use Libraries.Language.Compile.Symbol.Block
use Libraries.Language.Compile.Location

class ActionOpcode is QuorumOpcode
    List<QuorumOpcode> opcodeList
    Action method = undefined
    Class clazz = undefined
    JavaBytecodeOpcodes opcodes
    boolean isConstructor = false

    action SetIsConstructor(boolean constructor)
        isConstructor = constructor
    end

    action IsConstructor returns boolean
        return isConstructor
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        Iterator<QuorumOpcode> it = opcodeList:GetIterator()
        repeat while it:HasNext()
            QuorumOpcode op = it:Next()
            op:SetBytecodeWriteOffset(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        Iterator<QuorumOpcode> it = opcodeList:GetIterator()
        repeat while it:HasNext()
            QuorumOpcode op = it:Next()
            op:SetMethodWriterToAllChildren(writer)
        end
    end

    action GetAction returns Action
        return method
    end

    action SetAction(Action method)
        me:method = method
    end

    action GetClass returns Class
        return clazz
    end

    action SetClass(Class clazz)
        me:clazz = clazz
    end

    action Write
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        JavaBytecodeLabel start
        JavaBytecodeLabel finish
        
        methodWriter:VisitLabel(start)
        //if this is a constructor, pretend this is just a block
        //and ignore the rest.
        if isConstructor
            //methodWriter:VisitCode()
            Iterator<QuorumOpcode> iterator = opcodeList:GetIterator()
            repeat while iterator:HasNext()
                QuorumOpcode opcode = iterator:Next()
                opcode:Write()
            end
            methodWriter:VisitInstruction(opcodes:GetReturn())
            methodWriter:VisitLabel(finish)
            WriteParameterDebuggingTable(start, finish)
            methodWriter:VisitMaxSize(0,0)
            methodWriter:VisitEnd()
            return now
        end

        //follow the standard procedure for system calls, with the exception of Object, which we inline
        if method:IsSystem()
            //objects are special, for efficiency
            if not clazz:IsObject()
                methodWriter:VisitCode()
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                methodWriter:VisitField(opcodes:GetField(), clazz:ConvertStaticKeyToBytecodePath(),
                    clazz:GetPluginName(), clazz:ConvertStaticKeyToPluginPathTypeName())
    
                Iterator<Variable> parameters = method:GetParameterIterator()
                integer position = 1
                repeat while parameters:HasNext()
                    Variable param = parameters:Next()
                    Type type = param:GetType()
                    methodWriter:VisitVariable(opcodes:GetLoadOpcode(type), position)
                    position = position + type:GetBytecodeSize()
                end
    
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                    clazz:ConvertStaticKeyToPluginPath(), method:GetName(), 
                    method:ConvertActionToBytecodeParameterInterfaceSignature(), false)
    
                methodWriter:VisitInstruction(opcodes:GetReturnOpcode(method:GetReturnType()))
            else
                if method:GetStaticKey() = "GetHashCode" //inline this action
                    methodWriter:VisitCode()
                    methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                    methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                        "quorum/Libraries/Language/Object", "hashCode", 
                        "()I", false)
                    methodWriter:VisitInstruction(opcodes:GetReturnOpcode(method:GetReturnType()))
                end
            end
            
        elseif method:IsBlueprint()
            methodWriter:VisitCode()

            Iterator<Variable> parameters = method:GetParameterIterator()
            integer position = 1
            repeat while parameters:HasNext()
                Variable param = parameters:Next()
                Type type = param:GetType()
                methodWriter:VisitVariable(opcodes:GetLoadOpcode(type), position)
                position = position + type:GetBytecodeSize()
            end

            Type type = method:GetReturnType()
            if type:IsBoolean()
                methodWriter:VisitConstant(false)
                
            elseif type:IsInteger()
                methodWriter:VisitConstant(0)
            elseif type:IsNumber()
                methodWriter:VisitConstant(0.0)
            elseif type:IsVoid()
                //do nothing
            else
                methodWriter:VisitUndefinedConstant()
            end

            methodWriter:VisitInstruction(opcodes:GetReturnOpcode(method:GetReturnType()))
        else 
            methodWriter:VisitCode()
            Iterator<QuorumOpcode> iterator = opcodeList:GetIterator()
            repeat while iterator:HasNext()
                QuorumOpcode opcode = iterator:Next()
                opcode:Write()
            end

            Type type = method:GetReturnType()

            //check to see if this is a void action and there is no return.
            //if so, implicitly create one. If not, it was supposed to have been
            //checked in a previous phase, which makes this a compiler bug.
            Block block = method:GetBlock()
            if not block:HasReturnThisBlock() and type:IsVoid()
                Location loc = GetLocation()
                if loc not= undefined and methodWriter not= undefined
                    JavaBytecodeLabel start2
                    methodWriter:VisitLabel(start2)
                    methodWriter:VisitLine(loc:GetLineNumberEnd(), start2)
                end
                methodWriter:VisitInstruction(opcodes:GetReturn())
            end
        end
        
        methodWriter:VisitLabel(finish)
        WriteParameterDebuggingTable(start, finish)
        methodWriter:VisitMaxSize(0,0)
        methodWriter:VisitEnd()
    end

    action WriteParameterDebuggingTable(JavaBytecodeLabel start, JavaBytecodeLabel finish)
        //now get all the variables in this block and write the debugging
        //table
        JavaBytecodeMethodWriter writer = GetMethodWriter()
        Iterator<Variable> variables = method:GetParameterIterator()
        repeat while variables:HasNext()
            Variable variable = variables:Next()

            if not variable:IsField() and variable:IsVisibleToDebugger()
                Type type = variable:GetType()

                text description = type:ConvertTypeToBytecodeSignatureInterface()
                text signature = type:ConvertTypeToBytecodeSignatureInterface()
                integer location = variable:GetBytecodeLocation()
                writer:VisitLocalVariable(variable:GetName(), description,
                    undefined, start, finish, location)
            end
        end

        writer:VisitLocalVariable("this", clazz:ConvertStaticKeyToBytecodePathTypeName(),
            undefined, start, finish, 0)
    end

    action WritePython returns text
        text result = ""
        EOL = result:GetCarriageReturn() + result:GetLineFeed()

        //tell the translator to move things over
        TranslateConstants constants
        text tabs = constants:GetTabText()
        text tab = tabs:GetTab()

        boolean async = constants:IsUserCodeAsynchronous()
        boolean userCode = clazz:IsUserCode()

        if async and userCode
            result = tabs + "async def " + method:ConvertActionToPythonName() + "(self"
        else
            result = tabs + "def " + method:ConvertActionToPythonName() + "(self"
        end
        
        Iterator<Variable> parameters = method:GetParameterIterator()
        integer position = 1
        repeat while parameters:HasNext()
            Variable param = parameters:Next()
            result = result + ", " + param:GetPythonName()
        end
        result = result + "):" + EOL

        constants:IncreaseTab()
        Iterator<QuorumOpcode> iterator = opcodeList:GetIterator()
        text temp = ""
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            temp = temp + opcode:WritePython()
        end

        //if the action is empty, besides the block, issue a null op. Do this as well if it's a blueprint call.
        if method:IsBlueprint() or (not (method:IsSystem()) and temp:IsEmpty())
            text tabs2 = constants:GetTabText()
            result = result + tabs2 + "pass" + EOL
        else
            result = result + temp
        end
        constants:DecreaseTab()        

        if method:IsSystem() //write to a Javascript plugin
            if not clazz:IsObject()
                result = result + tabs + tab + "return self." + clazz:GetPluginName() + "." + method:ConvertActionToPythonName() 
                    + "("
                parameters = method:GetParameterIterator()
                repeat while parameters:HasNext()
                    Variable param = parameters:Next()
                    result = result + param:GetPythonName()
                    if parameters:HasNext()
                        result = result + ", "
                    end
                end
    
                result = result + ")" + EOL
            else
                if method:GetStaticKey() = "GetHashCode" //inline this action
                    result = result + tabs + tab + "return self.myHash" + EOL
                end
            end
        elseif method:IsBlueprint()
            result = result + tabs + tab + "return "// + "this.prototype." + method:ConvertActionToJavaScriptName() 
                //+ "("
//            parameters = method:GetParameterIterator()
//            repeat while parameters:HasNext()
//                Variable param = parameters:Next()
//                result = result + param:GetJavaScriptName()
//                if parameters:HasNext()
//                    result = result + ", "
//                end
//            end
//            result = result + ");" + EOL
        end
        result = result + EOL

        return result
    end

    action WriteJavaScript returns text
        text result = method:ConvertActionToJavaScriptName() + "("
        
        EOL = result:GetCarriageReturn() + result:GetLineFeed()
        Iterator<Variable> parameters = method:GetParameterIterator()
        integer position = 1
        repeat while parameters:HasNext()
            Variable param = parameters:Next()
            result = result + param:GetJavaScriptName()
            if parameters:HasNext()
                result = result + ", "
            end
        end
        result = result + ") {
"
        
        Iterator<QuorumOpcode> iterator = opcodeList:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            result = result + opcode:WriteJavaScript()
        end

        if method:IsSystem() //write to a Javascript plugin
            if not clazz:IsObject()
                result = result + "return this." + clazz:GetPluginName() + "." + method:ConvertActionToJavaScriptName() 
                    + "("
                parameters = method:GetParameterIterator()
                repeat while parameters:HasNext()
                    Variable param = parameters:Next()
                    result = result + param:GetJavaScriptName()
                    if parameters:HasNext()
                        result = result + ", "
                    end
                end
    
                result = result + ");" + EOL
            else
                if method:GetStaticKey() = "GetHashCode" //inline this action
                    result = result + "return this.myHash;" + EOL
                end
            end
        elseif method:IsBlueprint()
            result = result + "return " + "this.prototype." + method:ConvertActionToJavaScriptName() 
                + "("
            parameters = method:GetParameterIterator()
            repeat while parameters:HasNext()
                Variable param = parameters:Next()
                result = result + param:GetJavaScriptName()
                if parameters:HasNext()
                    result = result + ", "
                end
            end
            result = result + ");" + EOL
        end
        result = result + "};" + EOL

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        ActionOpcode op
        return op
    end

    action Add(QuorumOpcode opcode)
        opcodeList:Add(opcode)
    end
end